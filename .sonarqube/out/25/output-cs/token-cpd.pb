Õ
kC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\Messages\RelayMessageRelay.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
internal 
struct 
RelayMessageRelay %
{ 
public 
const 
int 
Length 
=  !
RelayMessageHeader" 4
.4 5
Length5 ;
+< =
RelayAllocationId> O
.O P
k_LengthP X
*Y Z
$num[ \
+] ^
$num_ `
;` a
public

 
RelayMessageHeader

 !
Header

" (
;

( )
public 
RelayAllocationId  
FromAllocationId! 1
;1 2
public 
RelayAllocationId  
ToAllocationId! /
;/ 0
public 
ushort 

DataLength  
;  !
internal 
static 
RelayMessageRelay )
Create* 0
(0 1
RelayAllocationId1 B
fromAllocationIdC S
,S T
RelayAllocationIdU f
toAllocationIdg u
,u v
ushortw }

dataLength	~ à
)
à â
{ 	
return 
new 
RelayMessageRelay (
{ 
Header 
= 
RelayMessageHeader +
.+ ,
Create, 2
(2 3
RelayMessageType3 C
.C D
RelayD I
)I J
,J K
FromAllocationId  
=! "
fromAllocationId# 3
,3 4
ToAllocationId 
=  
toAllocationId! /
,/ 0

DataLength 
=  
RelayNetworkProtocol 1
.1 2
SwitchEndianness2 B
(B C

dataLengthC M
)M N
,N O
} 
; 
} 	
} 
} éˇ
dC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Pipelines\ReliableUtility.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
	Utilities% .
{ 
public		 

struct		 !
SequenceBufferContext		 '
{

 
public 
int 
Sequence 
; 
public 
int 
Acked 
; 
public 
uint 
AckMask 
; 
public 
uint 
LastAckMask 
;  
} 
public 

static 
class ,
 ReliableStageParameterExtensions 8
{ 
public 
static 
ref 
NetworkSettings )'
WithReliableStageParameters* E
(E F
ref 
this 
NetworkSettings $
settings% -
,- .
int 

windowSize 
= 
ReliableUtility ,
., -
ParameterConstants- ?
.? @

WindowSize@ J
) 	
{ 	
var 
	parameter 
= 
new 
ReliableUtility  /
./ 0

Parameters0 :
{ 

WindowSize 
= 

windowSize '
,' (
} 
; 
settings!! 
.!! !
AddRawParameterStruct!! *
(!!* +
ref!!+ .
	parameter!!/ 8
)!!8 9
;!!9 :
return## 
ref## 
settings## 
;##  
}$$ 	
public** 
static** 
ReliableUtility** %
.**% &

Parameters**& 0&
GetReliableStageParameters**1 K
(**K L
ref**L O
this**P T
NetworkSettings**U d
settings**e m
)**m n
{++ 	
if,, 
(,, 
!,, 
settings,, 
.,, 
TryGet,,  
<,,  !
ReliableUtility,,! 0
.,,0 1

Parameters,,1 ;
>,,; <
(,,< =
out,,= @
var,,A D

parameters,,E O
),,O P
),,P Q
{-- 

parameters.. 
... 

WindowSize.. %
=..& '
ReliableUtility..( 7
...7 8
ParameterConstants..8 J
...J K

WindowSize..K U
;..U V
}// 
return11 

parameters11 
;11 
}22 	
}33 
public55 

struct55 
ReliableUtility55 !
{66 
public77 
struct77 

Statistics77  
{88 	
public99 
int99 
PacketsReceived99 &
;99& '
public:: 
int:: 
PacketsSent:: "
;::" #
public;; 
int;; 
PacketsDropped;; %
;;;% &
public<< 
int<< 
PacketsOutOfOrder<< (
;<<( )
public== 
int== 
PacketsDuplicated== (
;==( )
public>> 
int>> 
PacketsStale>> #
;>># $
public?? 
int?? 
PacketsResent?? $
;??$ %
}@@ 	
publicBB 
structBB 
RTTInfoBB 
{CC 	
publicDD 
intDD 
LastRttDD 
;DD 
publicEE 
floatEE 
SmoothedRttEE $
;EE$ %
publicFF 
floatFF 
SmoothedVarianceFF )
;FF) *
publicGG 
intGG 
ResendTimeoutGG $
;GG$ %
}HH 	
publicJJ 
constJJ 
intJJ 
	NullEntryJJ "
=JJ# $
-JJ% &
$numJJ& '
;JJ' (
publicMM 
constMM 
intMM $
DefaultMinimumResendTimeMM 1
=MM2 3
$numMM4 6
;MM6 7
publicNN 
constNN 
intNN 
MaximumResendTimeNN *
=NN+ ,
$numNN- 0
;NN0 1
publicPP 
enumPP 

ErrorCodesPP 
{QQ 	
Stale_PacketRR 
=RR 
-RR 
$numRR 
,RR 
Duplicated_PacketSS 
=SS 
-SS  !
$numSS! "
,SS" #
OutgoingQueueIsFullUU 
=UU  !
-UU" #
$numUU# $
,UU$ %
InsufficientMemoryVV 
=VV  
-VV! "
$numVV" #
}WW 	
publicYY 
enumYY 

PacketTypeYY 
:YY  
ushortYY! '
{ZZ 	
Payload[[ 
=[[ 
$num[[ 
,[[ 
Ack\\ 
=\\ 
$num\\ 
}]] 	
public__ 
struct__ 
SharedContext__ #
{`` 	
publicaa 
intaa 

WindowSizeaa !
;aa! "
publicbb 
intbb 
MinimumResendTimebb (
;bb( )
publicii !
SequenceBufferContextii (
SentPacketsii) 4
;ii4 5
publicnn !
SequenceBufferContextnn (
ReceivedPacketsnn) 8
;nn8 9
publicoo 

Statisticsoo 
statsoo #
;oo# $
publicpp 

ErrorCodespp 
	errorCodepp '
;pp' (
publicss 
RTTInfoss 
RttInfoss "
;ss" #
publictt 
inttt 
TimerDataOffsettt &
;tt& '
publicuu 
intuu 
TimerDataStrideuu &
;uu& '
publicvv 
intvv !
RemoteTimerDataOffsetvv ,
;vv, -
publicww 
intww !
RemoteTimerDataStrideww ,
;ww, -
}xx 	
publiczz 
structzz 
Contextzz 
{{{ 	
public|| 
int|| 
Capacity|| 
;||  
public}} 
int}} 
Resume}} 
;}} 
public~~ 
int~~ 
	Delivered~~  
;~~  !
public 
int 
IndexStride "
;" #
public
ÄÄ 
int
ÄÄ 
IndexPtrOffset
ÄÄ %
;
ÄÄ% &
public
ÅÅ 
int
ÅÅ 

DataStride
ÅÅ !
;
ÅÅ! "
public
ÇÇ 
int
ÇÇ 
DataPtrOffset
ÇÇ $
;
ÇÇ$ %
public
ÉÉ 
long
ÉÉ 
LastSentTime
ÉÉ $
;
ÉÉ$ %
public
ÑÑ 
long
ÑÑ 
PreviousTimestamp
ÑÑ )
;
ÑÑ) *
}
ÖÖ 	
public
áá 
struct
áá 

Parameters
áá  
:
áá! "
INetworkParameter
áá# 4
{
àà 	
public
ââ 
int
ââ 

WindowSize
ââ !
;
ââ! "
public
ãã 
bool
ãã 
Validate
ãã  
(
ãã  !
)
ãã! "
{
åå 
var
çç 
valid
çç 
=
çç 
true
çç  
;
çç  !
if
èè 
(
èè 

WindowSize
èè 
<
èè  
$num
èè! "
||
èè# %

WindowSize
èè& 0
>
èè1 2
$num
èè3 5
)
èè5 6
{
êê 
valid
ëë 
=
ëë 
false
ëë !
;
ëë! "
UnityEngine
íí 
.
íí  
Debug
íí  %
.
íí% &
LogError
íí& .
(
íí. /
$"
íí/ 1
{
íí1 2
nameof
íí2 8
(
íí8 9

WindowSize
íí9 C
)
ííC D
}
ííD E
$str
ííE M
{
ííM N

WindowSize
ííN X
}
ííX Y
$strííY å
"ííå ç
)ííç é
;ííé è
}
ìì 
return
ïï 
valid
ïï 
;
ïï 
}
ññ 
}
óó 	
public
ôô 
struct
ôô  
ParameterConstants
ôô (
{
öö 	
public
õõ 
const
õõ 
int
õõ 

WindowSize
õõ '
=
õõ( )
$num
õõ* ,
;
õõ, -
}
úú 	
[
ûû 	
StructLayout
ûû	 
(
ûû 

LayoutKind
ûû  
.
ûû  !

Sequential
ûû! +
)
ûû+ ,
]
ûû, -
public
üü 
struct
üü 
PacketHeader
üü "
{
†† 	
public
°° 
ushort
°° 
Type
°° 
;
°° 
public
¢¢ 
ushort
¢¢ 
ProcessingTime
¢¢ (
;
¢¢( )
public
££ 
ushort
££ 

SequenceId
££ $
;
££$ %
public
§§ 
ushort
§§ 
AckedSequenceId
§§ )
;
§§) *
public
•• 
uint
•• 
AckMask
•• 
;
••  
}
¶¶ 	
[
®® 	
StructLayout
®®	 
(
®® 

LayoutKind
®®  
.
®®  !

Sequential
®®! +
)
®®+ ,
]
®®, -
public
©© 
struct
©© 
PacketInformation
©© '
{
™™ 	
public
´´ 
int
´´ 

SequenceId
´´ !
;
´´! "
public
¨¨ 
ushort
¨¨ 
Size
¨¨ 
;
¨¨ 
public
≠≠ 
ushort
≠≠ 
HeaderPadding
≠≠ '
;
≠≠' (
public
ÆÆ 
long
ÆÆ 
SendTime
ÆÆ  
;
ÆÆ  !
}
ØØ 	
[
≤≤ 	
StructLayout
≤≤	 
(
≤≤ 

LayoutKind
≤≤  
.
≤≤  !
Explicit
≤≤! )
)
≤≤) *
]
≤≤* +
public
≥≥ 
unsafe
≥≥ 
struct
≥≥ 
Packet
≥≥ #
{
¥¥ 	
internal
µµ 
const
µµ 
int
µµ 
Length
µµ %
=
µµ& ''
NetworkParameterConstants
µµ( A
.
µµA B
MTU
µµB E
;
µµE F
[
∂∂ 
FieldOffset
∂∂ 
(
∂∂ 
$num
∂∂ 
)
∂∂ 
]
∂∂ 
public
∂∂ #
PacketHeader
∂∂$ 0
Header
∂∂1 7
;
∂∂7 8
[
∑∑ 
FieldOffset
∑∑ 
(
∑∑ 
$num
∑∑ 
)
∑∑ 
]
∑∑ 
public
∑∑ #
fixed
∑∑$ )
byte
∑∑* .
Buffer
∑∑/ 5
[
∑∑5 6
Length
∑∑6 <
]
∑∑< =
;
∑∑= >
}
∏∏ 	
[
∫∫ 	
StructLayout
∫∫	 
(
∫∫ 

LayoutKind
∫∫  
.
∫∫  !

Sequential
∫∫! +
)
∫∫+ ,
]
∫∫, -
public
ªª 
struct
ªª 
PacketTimers
ªª "
{
ºº 	
public
ΩΩ 
ushort
ΩΩ 
ProcessingTime
ΩΩ (
;
ΩΩ( )
public
ææ 
ushort
ææ 
Padding
ææ !
;
ææ! "
public
øø 
int
øø 

SequenceId
øø !
;
øø! "
public
¿¿ 
long
¿¿ 
SentTime
¿¿  
;
¿¿  !
public
¡¡ 
long
¡¡ 
ReceiveTime
¡¡ #
;
¡¡# $
}
¬¬ 	
private
ƒƒ 
static
ƒƒ 
int
ƒƒ 
AlignedSizeOf
ƒƒ (
<
ƒƒ( )
T
ƒƒ) *
>
ƒƒ* +
(
ƒƒ+ ,
)
ƒƒ, -
where
ƒƒ. 3
T
ƒƒ4 5
:
ƒƒ6 7
struct
ƒƒ8 >
{
≈≈ 	
return
∆∆ 
(
∆∆ 
UnsafeUtility
∆∆ !
.
∆∆! "
SizeOf
∆∆" (
<
∆∆( )
T
∆∆) *
>
∆∆* +
(
∆∆+ ,
)
∆∆, -
+
∆∆. /&
NetworkPipelineProcessor
∆∆0 H
.
∆∆H I
AlignmentMinusOne
∆∆I Z
)
∆∆Z [
&
∆∆\ ]
(
∆∆^ _
~
∆∆_ `&
NetworkPipelineProcessor
∆∆` x
.
∆∆x y 
AlignmentMinusOne∆∆y ä
)∆∆ä ã
;∆∆ã å
}
«« 	
public
…… 
static
…… 
int
…… "
SharedCapacityNeeded
…… .
(
……. /

Parameters
……/ 9
param
……: ?
)
……? @
{
   	
var
ÕÕ 
timerDataSize
ÕÕ 
=
ÕÕ 
AlignedSizeOf
ÕÕ  -
<
ÕÕ- .
PacketTimers
ÕÕ. :
>
ÕÕ: ;
(
ÕÕ; <
)
ÕÕ< =
*
ÕÕ> ?
param
ÕÕ@ E
.
ÕÕE F

WindowSize
ÕÕF P
*
ÕÕQ R
$num
ÕÕS T
;
ÕÕT U
var
ŒŒ 
capacityNeeded
ŒŒ 
=
ŒŒ  
AlignedSizeOf
ŒŒ! .
<
ŒŒ. /
SharedContext
ŒŒ/ <
>
ŒŒ< =
(
ŒŒ= >
)
ŒŒ> ?
+
ŒŒ@ A
timerDataSize
ŒŒB O
;
ŒŒO P
return
–– 
capacityNeeded
–– !
;
––! "
}
—— 	
public
”” 
static
”” 
int
”” #
ProcessCapacityNeeded
”” /
(
””/ 0

Parameters
””0 :
param
””; @
)
””@ A
{
‘‘ 	
var
’’ 
infoSize
’’ 
=
’’ 
AlignedSizeOf
’’ (
<
’’( )
PacketInformation
’’) :
>
’’: ;
(
’’; <
)
’’< =
;
’’= >
var
÷÷ 
dataSize
÷÷ 
=
÷÷ 
(
÷÷ 
Packet
÷÷ "
.
÷÷" #
Length
÷÷# )
+
÷÷* +
UnsafeUtility
÷÷, 9
.
÷÷9 :
SizeOf
÷÷: @
<
÷÷@ A
PacketHeader
÷÷A M
>
÷÷M N
(
÷÷N O
)
÷÷O P
+
÷÷Q R&
NetworkPipelineProcessor
÷÷S k
.
÷÷k l
AlignmentMinusOne
÷÷l }
)
÷÷} ~
&÷÷ Ä
(÷÷Å Ç
~÷÷Ç É(
NetworkPipelineProcessor÷÷É õ
.÷÷õ ú!
AlignmentMinusOne÷÷ú ≠
)÷÷≠ Æ
;÷÷Æ Ø
infoSize
◊◊ 
*=
◊◊ 
param
◊◊ 
.
◊◊ 

WindowSize
◊◊ (
;
◊◊( )
dataSize
ÿÿ 
*=
ÿÿ 
param
ÿÿ 
.
ÿÿ 

WindowSize
ÿÿ (
;
ÿÿ( )
var
⁄⁄ 
capacityNeeded
⁄⁄ 
=
⁄⁄  
AlignedSizeOf
⁄⁄! .
<
⁄⁄. /
Context
⁄⁄/ 6
>
⁄⁄6 7
(
⁄⁄7 8
)
⁄⁄8 9
+
⁄⁄: ;
infoSize
⁄⁄< D
+
⁄⁄E F
dataSize
⁄⁄G O
;
⁄⁄O P
return
‹‹ 
capacityNeeded
‹‹ !
;
‹‹! "
}
›› 	
public
ﬂﬂ 
static
ﬂﬂ 
unsafe
ﬂﬂ 
SharedContext
ﬂﬂ *
InitializeContext
ﬂﬂ+ <
(
ﬂﬂ< =
byte
ﬂﬂ= A
*
ﬂﬂA B
sharedBuffer
ﬂﬂC O
,
ﬂﬂO P
int
ﬂﬂQ T 
sharedBufferLength
ﬂﬂU g
,
ﬂﬂg h
byte
‡‡ 
*
‡‡ 

sendBuffer
‡‡ 
,
‡‡ 
int
‡‡ !
sendBufferLength
‡‡" 2
,
‡‡2 3
byte
‡‡4 8
*
‡‡8 9

recvBuffer
‡‡: D
,
‡‡D E
int
‡‡F I
recvBufferLength
‡‡J Z
,
‡‡Z [

Parameters
‡‡\ f
param
‡‡g l
)
‡‡l m
{
·· 	&
InitializeProcessContext
‚‚ $
(
‚‚$ %

sendBuffer
‚‚% /
,
‚‚/ 0
sendBufferLength
‚‚1 A
,
‚‚A B
param
‚‚C H
)
‚‚H I
;
‚‚I J&
InitializeProcessContext
„„ $
(
„„$ %

recvBuffer
„„% /
,
„„/ 0
recvBufferLength
„„1 A
,
„„A B
param
„„C H
)
„„H I
;
„„I J
SharedContext
ÂÂ 
*
ÂÂ 
notifier
ÂÂ #
=
ÂÂ$ %
(
ÂÂ& '
SharedContext
ÂÂ' 4
*
ÂÂ4 5
)
ÂÂ5 6
sharedBuffer
ÂÂ6 B
;
ÂÂB C
*
ÊÊ 
notifier
ÊÊ 
=
ÊÊ 
new
ÊÊ 
SharedContext
ÊÊ )
{
ÁÁ 

WindowSize
ËË 
=
ËË 
param
ËË "
.
ËË" #

WindowSize
ËË# -
,
ËË- .
SentPackets
ÈÈ 
=
ÈÈ 
new
ÈÈ !#
SequenceBufferContext
ÈÈ" 7
{
ÈÈ8 9
Acked
ÈÈ: ?
=
ÈÈ@ A
	NullEntry
ÈÈB K
}
ÈÈL M
,
ÈÈM N
MinimumResendTime
ÍÍ !
=
ÍÍ" #&
DefaultMinimumResendTime
ÍÍ$ <
,
ÍÍ< =
ReceivedPackets
ÎÎ 
=
ÎÎ  !
new
ÎÎ" %#
SequenceBufferContext
ÎÎ& ;
{
ÎÎ< =
Sequence
ÎÎ> F
=
ÎÎG H
	NullEntry
ÎÎI R
}
ÎÎS T
,
ÎÎT U
RttInfo
ÏÏ 
=
ÏÏ 
new
ÏÏ 
RTTInfo
ÏÏ %
{
ÏÏ& '
SmoothedVariance
ÏÏ( 8
=
ÏÏ9 :
$num
ÏÏ; <
,
ÏÏ< =
SmoothedRtt
ÏÏ> I
=
ÏÏJ K
$num
ÏÏL N
,
ÏÏN O
ResendTimeout
ÏÏP ]
=
ÏÏ^ _
$num
ÏÏ` b
,
ÏÏb c
LastRtt
ÏÏd k
=
ÏÏl m
$num
ÏÏn p
}
ÏÏp q
,
ÏÏq r
TimerDataOffset
ÌÌ 
=
ÌÌ  !
AlignedSizeOf
ÌÌ" /
<
ÌÌ/ 0
SharedContext
ÌÌ0 =
>
ÌÌ= >
(
ÌÌ> ?
)
ÌÌ? @
,
ÌÌ@ A
TimerDataStride
ÓÓ 
=
ÓÓ  !
AlignedSizeOf
ÓÓ" /
<
ÓÓ/ 0
PacketTimers
ÓÓ0 <
>
ÓÓ< =
(
ÓÓ= >
)
ÓÓ> ?
,
ÓÓ? @#
RemoteTimerDataOffset
ÔÔ %
=
ÔÔ& '
AlignedSizeOf
ÔÔ( 5
<
ÔÔ5 6
SharedContext
ÔÔ6 C
>
ÔÔC D
(
ÔÔD E
)
ÔÔE F
+
ÔÔG H
AlignedSizeOf
ÔÔI V
<
ÔÔV W
PacketTimers
ÔÔW c
>
ÔÔc d
(
ÔÔd e
)
ÔÔe f
*
ÔÔg h
param
ÔÔi n
.
ÔÔn o

WindowSize
ÔÔo y
,
ÔÔy z#
RemoteTimerDataStride
 %
=
& '
AlignedSizeOf
( 5
<
5 6
PacketTimers
6 B
>
B C
(
C D
)
D E
}
ÒÒ 
;
ÒÒ 
return
ÚÚ 
*
ÚÚ 
notifier
ÚÚ 
;
ÚÚ 
}
ÛÛ 	
public
ıı 
static
ıı 
unsafe
ıı 
int
ıı  &
InitializeProcessContext
ıı! 9
(
ıı9 :
byte
ıı: >
*
ıı> ?
buffer
ıı@ F
,
ııF G
int
ııH K
bufferLength
ııL X
,
ııX Y

Parameters
ııZ d
param
ııe j
)
ııj k
{
ˆˆ 	
int
˜˜ 
totalCapacity
˜˜ 
=
˜˜ #
ProcessCapacityNeeded
˜˜  5
(
˜˜5 6
param
˜˜6 ;
)
˜˜; <
;
˜˜< =
if
¯¯ 
(
¯¯ 
bufferLength
¯¯ 
!=
¯¯ 
totalCapacity
¯¯  -
)
¯¯- .
{
˘˘ 
return
˙˙ 
(
˙˙ 
int
˙˙ 
)
˙˙ 

ErrorCodes
˙˙ &
.
˙˙& ' 
InsufficientMemory
˙˙' 9
;
˙˙9 :
}
˚˚ 
Context
¸¸ 
*
¸¸ 
ctx
¸¸ 
=
¸¸ 
(
¸¸ 
Context
¸¸ #
*
¸¸# $
)
¸¸$ %
buffer
¸¸% +
;
¸¸+ ,
ctx
˛˛ 
->
˛˛ 
Capacity
˛˛ 
=
˛˛ 
param
˛˛ !
.
˛˛! "

WindowSize
˛˛" ,
;
˛˛, -
ctx
ˇˇ 
->
ˇˇ 
IndexStride
ˇˇ 
=
ˇˇ 
AlignedSizeOf
ˇˇ ,
<
ˇˇ, -
PacketInformation
ˇˇ- >
>
ˇˇ> ?
(
ˇˇ? @
)
ˇˇ@ A
;
ˇˇA B
ctx
ÄÄ 
->
ÄÄ 
IndexPtrOffset
ÄÄ 
=
ÄÄ  !
AlignedSizeOf
ÄÄ" /
<
ÄÄ/ 0
Context
ÄÄ0 7
>
ÄÄ7 8
(
ÄÄ8 9
)
ÄÄ9 :
;
ÄÄ: ;
ctx
ÅÅ 
->
ÅÅ 

DataStride
ÅÅ 
=
ÅÅ 
(
ÅÅ 
Packet
ÅÅ %
.
ÅÅ% &
Length
ÅÅ& ,
+
ÅÅ- .
UnsafeUtility
ÅÅ/ <
.
ÅÅ< =
SizeOf
ÅÅ= C
<
ÅÅC D
PacketHeader
ÅÅD P
>
ÅÅP Q
(
ÅÅQ R
)
ÅÅR S
+
ÅÅT U&
NetworkPipelineProcessor
ÅÅV n
.
ÅÅn o 
AlignmentMinusOneÅÅo Ä
)ÅÅÄ Å
&ÅÅÇ É
(ÅÅÑ Ö
~ÅÅÖ Ü(
NetworkPipelineProcessorÅÅÜ û
.ÅÅû ü!
AlignmentMinusOneÅÅü ∞
)ÅÅ∞ ±
;ÅÅ± ≤
ctx
ÇÇ 
->
ÇÇ 
DataPtrOffset
ÇÇ 
=
ÇÇ  
ctx
ÇÇ! $
->
ÇÇ$ &
IndexPtrOffset
ÇÇ& 4
+
ÇÇ5 6
(
ÇÇ7 8
ctx
ÇÇ8 ;
->
ÇÇ; =
IndexStride
ÇÇ= H
*
ÇÇI J
ctx
ÇÇK N
->
ÇÇN P
Capacity
ÇÇP X
)
ÇÇX Y
;
ÇÇY Z
ctx
ÉÉ 
->
ÉÉ 
Resume
ÉÉ 
=
ÉÉ 
	NullEntry
ÉÉ #
;
ÉÉ# $
ctx
ÑÑ 
->
ÑÑ 
	Delivered
ÑÑ 
=
ÑÑ 
	NullEntry
ÑÑ &
;
ÑÑ& '
Release
ÜÜ 
(
ÜÜ 
buffer
ÜÜ 
,
ÜÜ 
$num
ÜÜ 
,
ÜÜ 
param
ÜÜ $
.
ÜÜ$ %

WindowSize
ÜÜ% /
)
ÜÜ/ 0
;
ÜÜ0 1
return
áá 
$num
áá 
;
áá 
}
àà 	
public
ää 
static
ää 
unsafe
ää 
void
ää !
	SetPacket
ää" +
(
ää+ ,
byte
ää, 0
*
ää0 1
self
ää2 6
,
ää6 7
int
ää8 ;
sequence
ää< D
,
ääD E
InboundRecvBuffer
ääF W
data
ääX \
)
ää\ ]
{
ãã 	
	SetPacket
åå 
(
åå 
self
åå 
,
åå 
sequence
åå $
,
åå$ %
data
åå& *
.
åå* +
buffer
åå+ 1
,
åå1 2
data
åå3 7
.
åå7 8
bufferLength
åå8 D
)
ååD E
;
ååE F
}
çç 	
public
èè 
static
èè 
unsafe
èè 
void
èè !
	SetPacket
èè" +
(
èè+ ,
byte
èè, 0
*
èè0 1
self
èè2 6
,
èè6 7
int
èè8 ;
sequence
èè< D
,
èèD E
void
èèF J
*
èèJ K
data
èèL P
,
èèP Q
int
èèR U
length
èèV \
)
èè\ ]
{
êê 	
Context
ëë 
*
ëë 
ctx
ëë 
=
ëë 
(
ëë 
Context
ëë #
*
ëë# $
)
ëë$ %
self
ëë% )
;
ëë) *
if
ìì 
(
ìì 
length
ìì 
>
ìì 
ctx
ìì 
->
ìì 

DataStride
ìì (
)
ìì( )
throw
ïï 
new
ïï 
OverflowException
ïï +
(
ïï+ ,
)
ïï, -
;
ïï- .
var
öö 
index
öö 
=
öö 
sequence
öö  
%
öö! "
ctx
öö# &
->
öö& (
Capacity
öö( 0
;
öö0 1
PacketInformation
úú 
*
úú 
info
úú #
=
úú$ %"
GetPacketInformation
úú& :
(
úú: ;
self
úú; ?
,
úú? @
sequence
úúA I
)
úúI J
;
úúJ K
info
ùù 
->
ùù 

SequenceId
ùù 
=
ùù 
sequence
ùù '
;
ùù' (
info
ûû 
->
ûû 
Size
ûû 
=
ûû 
(
ûû 
ushort
ûû  
)
ûû  !
length
ûû! '
;
ûû' (
info
üü 
->
üü 
HeaderPadding
üü 
=
üü  !
$num
üü" #
;
üü# $
info
†† 
->
†† 
SendTime
†† 
=
†† 
-
†† 
$num
†† 
;
††  
var
¢¢ 
offset
¢¢ 
=
¢¢ 
ctx
¢¢ 
->
¢¢ 
DataPtrOffset
¢¢ +
+
¢¢, -
(
¢¢. /
index
¢¢/ 4
*
¢¢5 6
ctx
¢¢7 :
->
¢¢: <

DataStride
¢¢< F
)
¢¢F G
;
¢¢G H
void
££ 
*
££ 
dataPtr
££ 
=
££ 
(
££ 
self
££ !
+
££" #
offset
££$ *
)
££* +
;
££+ ,
UnsafeUtility
•• 
.
•• 
MemCpy
••  
(
••  !
dataPtr
••! (
,
••( )
data
••* .
,
••. /
length
••0 6
)
••6 7
;
••7 8
}
¶¶ 	
public
≤≤ 
static
≤≤ 
unsafe
≤≤ 
void
≤≤ ! 
SetHeaderAndPacket
≤≤" 4
(
≤≤4 5
byte
≤≤5 9
*
≤≤9 :
self
≤≤; ?
,
≤≤? @
int
≤≤A D
sequence
≤≤E M
,
≤≤M N
PacketHeader
≤≤O [
header
≤≤\ b
,
≤≤b c
InboundSendBuffer
≤≤d u
data
≤≤v z
,
≤≤z {
long≤≤| Ä
	timestamp≤≤Å ä
)≤≤ä ã
{
≥≥ 	
Context
¥¥ 
*
¥¥ 
ctx
¥¥ 
=
¥¥ 
(
¥¥ 
Context
¥¥ #
*
¥¥# $
)
¥¥$ %
self
¥¥% )
;
¥¥) *
int
µµ 
	totalSize
µµ 
=
µµ 
data
µµ  
.
µµ  !
bufferLength
µµ! -
+
µµ. /
data
µµ0 4
.
µµ4 5
headerPadding
µµ5 B
;
µµB C
if
∑∑ 
(
∑∑ 
	totalSize
∑∑ 
+
∑∑ 
UnsafeUtility
∑∑ )
.
∑∑) *
SizeOf
∑∑* 0
<
∑∑0 1
PacketHeader
∑∑1 =
>
∑∑= >
(
∑∑> ?
)
∑∑? @
>
∑∑A B
ctx
∑∑C F
->
∑∑F H

DataStride
∑∑H R
)
∑∑R S
throw
ππ 
new
ππ 
OverflowException
ππ +
(
ππ+ ,
)
ππ, -
;
ππ- .
var
ΩΩ 
index
ΩΩ 
=
ΩΩ 
sequence
ΩΩ  
%
ΩΩ! "
ctx
ΩΩ# &
->
ΩΩ& (
Capacity
ΩΩ( 0
;
ΩΩ0 1
PacketInformation
øø 
*
øø 
info
øø #
=
øø$ %"
GetPacketInformation
øø& :
(
øø: ;
self
øø; ?
,
øø? @
sequence
øøA I
)
øøI J
;
øøJ K
info
¿¿ 
->
¿¿ 

SequenceId
¿¿ 
=
¿¿ 
sequence
¿¿ '
;
¿¿' (
info
¡¡ 
->
¡¡ 
Size
¡¡ 
=
¡¡ 
(
¡¡ 
ushort
¡¡  
)
¡¡  !
	totalSize
¡¡! *
;
¡¡* +
info
¬¬ 
->
¬¬ 
HeaderPadding
¬¬ 
=
¬¬  !
(
¬¬" #
ushort
¬¬# )
)
¬¬) *
data
¬¬* .
.
¬¬. /
headerPadding
¬¬/ <
;
¬¬< =
info
√√ 
->
√√ 
SendTime
√√ 
=
√√ 
	timestamp
√√ &
;
√√& '
Packet
≈≈ 
*
≈≈ 
packet
≈≈ 
=
≈≈ 
	GetPacket
≈≈ &
(
≈≈& '
self
≈≈' +
,
≈≈+ ,
sequence
≈≈- 5
)
≈≈5 6
;
≈≈6 7
packet
∆∆ 
->
∆∆ 
Header
∆∆ 
=
∆∆ 
header
∆∆ #
;
∆∆# $
var
«« 
offset
«« 
=
«« 
(
«« 
ctx
«« 
->
«« 
DataPtrOffset
«« ,
+
««- .
(
««/ 0
index
««0 5
*
««6 7
ctx
««8 ;
->
««; =

DataStride
««= G
)
««G H
)
««H I
+
««J K
UnsafeUtility
««L Y
.
««Y Z
SizeOf
««Z `
<
««` a
PacketHeader
««a m
>
««m n
(
««n o
)
««o p
;
««p q
void
»» 
*
»» 
dataPtr
»» 
=
»» 
(
»» 
self
»» !
+
»»" #
offset
»»$ *
)
»»* +
;
»»+ ,
if
   
(
   
data
   
.
   
bufferLength
   !
>
  " #
$num
  $ %
)
  % &
UnsafeUtility
ÀÀ 
.
ÀÀ 
MemCpy
ÀÀ $
(
ÀÀ$ %
(
ÀÀ% &
byte
ÀÀ& *
*
ÀÀ* +
)
ÀÀ+ ,
dataPtr
ÀÀ, 3
+
ÀÀ4 5
data
ÀÀ6 :
.
ÀÀ: ;
headerPadding
ÀÀ; H
,
ÀÀH I
data
ÀÀJ N
.
ÀÀN O
buffer
ÀÀO U
,
ÀÀU V
data
ÀÀW [
.
ÀÀ[ \
bufferLength
ÀÀ\ h
)
ÀÀh i
;
ÀÀi j
}
ÃÃ 	
public
ŒŒ 
static
ŒŒ 
unsafe
ŒŒ 
PacketInformation
ŒŒ .
*
ŒŒ. /"
GetPacketInformation
ŒŒ0 D
(
ŒŒD E
byte
ŒŒE I
*
ŒŒI J
self
ŒŒK O
,
ŒŒO P
int
ŒŒQ T
sequence
ŒŒU ]
)
ŒŒ] ^
{
œœ 	
Context
–– 
*
–– 
ctx
–– 
=
–– 
(
–– 
Context
–– #
*
––# $
)
––$ %
self
––% )
;
––) *
var
—— 
index
—— 
=
—— 
sequence
——  
%
——! "
ctx
——# &
->
——& (
Capacity
——( 0
;
——0 1
return
”” 
(
”” 
PacketInformation
”” %
*
””% &
)
””& '
(
””' (
(
””( )
self
””) -
+
””. /
ctx
””0 3
->
””3 5
IndexPtrOffset
””5 C
)
””C D
+
””E F
(
””G H
index
””H M
*
””N O
ctx
””P S
->
””S U
IndexStride
””U `
)
””` a
)
””a b
;
””b c
}
‘‘ 	
public
÷÷ 
static
÷÷ 
unsafe
÷÷ 
Packet
÷÷ #
*
÷÷# $
	GetPacket
÷÷% .
(
÷÷. /
byte
÷÷/ 3
*
÷÷3 4
self
÷÷5 9
,
÷÷9 :
int
÷÷; >
sequence
÷÷? G
)
÷÷G H
{
◊◊ 	
Context
ÿÿ 
*
ÿÿ 
ctx
ÿÿ 
=
ÿÿ 
(
ÿÿ 
Context
ÿÿ #
*
ÿÿ# $
)
ÿÿ$ %
self
ÿÿ% )
;
ÿÿ) *
var
ŸŸ 
index
ŸŸ 
=
ŸŸ 
sequence
ŸŸ  
%
ŸŸ! "
ctx
ŸŸ# &
->
ŸŸ& (
Capacity
ŸŸ( 0
;
ŸŸ0 1
var
€€ 
offset
€€ 
=
€€ 
ctx
€€ 
->
€€ 
DataPtrOffset
€€ +
+
€€, -
(
€€. /
index
€€/ 4
*
€€5 6
ctx
€€7 :
->
€€: <

DataStride
€€< F
)
€€F G
;
€€G H
return
‹‹ 
(
‹‹ 
Packet
‹‹ 
*
‹‹ 
)
‹‹ 
(
‹‹ 
self
‹‹ !
+
‹‹" #
offset
‹‹$ *
)
‹‹* +
;
‹‹+ ,
}
›› 	
public
ﬂﬂ 
static
ﬂﬂ 
unsafe
ﬂﬂ 
bool
ﬂﬂ !
	TryAquire
ﬂﬂ" +
(
ﬂﬂ+ ,
byte
ﬂﬂ, 0
*
ﬂﬂ0 1
self
ﬂﬂ2 6
,
ﬂﬂ6 7
int
ﬂﬂ8 ;
sequence
ﬂﬂ< D
)
ﬂﬂD E
{
‡‡ 	
Context
·· 
*
·· 
ctx
·· 
=
·· 
(
·· 
Context
·· #
*
··# $
)
··$ %
self
··% )
;
··) *
var
„„ 
index
„„ 
=
„„ 
sequence
„„  
%
„„! "
ctx
„„# &
->
„„& (
Capacity
„„( 0
;
„„0 1
var
ÂÂ 
currentSequenceId
ÂÂ !
=
ÂÂ" #
GetIndex
ÂÂ$ ,
(
ÂÂ, -
self
ÂÂ- 1
,
ÂÂ1 2
index
ÂÂ3 8
)
ÂÂ8 9
;
ÂÂ9 :
if
ÊÊ 
(
ÊÊ 
currentSequenceId
ÊÊ !
==
ÊÊ" $
	NullEntry
ÊÊ% .
)
ÊÊ. /
{
ÁÁ 
SetIndex
ËË 
(
ËË 
self
ËË 
,
ËË 
index
ËË $
,
ËË$ %
sequence
ËË& .
)
ËË. /
;
ËË/ 0
return
ÈÈ 
true
ÈÈ 
;
ÈÈ 
}
ÍÍ 
return
ÎÎ 
false
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
public
ÓÓ 
static
ÓÓ 
unsafe
ÓÓ 
void
ÓÓ !
Release
ÓÓ" )
(
ÓÓ) *
byte
ÓÓ* .
*
ÓÓ. /
self
ÓÓ0 4
,
ÓÓ4 5
int
ÓÓ6 9
sequence
ÓÓ: B
)
ÓÓB C
{
ÔÔ 	
Release
 
(
 
self
 
,
 
sequence
 "
,
" #
$num
$ %
)
% &
;
& '
}
ÒÒ 	
public
ÛÛ 
static
ÛÛ 
unsafe
ÛÛ 
void
ÛÛ !
Release
ÛÛ" )
(
ÛÛ) *
byte
ÛÛ* .
*
ÛÛ. /
self
ÛÛ0 4
,
ÛÛ4 5
int
ÛÛ6 9
start_sequence
ÛÛ: H
,
ÛÛH I
int
ÛÛJ M
count
ÛÛN S
)
ÛÛS T
{
ÙÙ 	
Context
ıı 
*
ıı 
ctx
ıı 
=
ıı 
(
ıı 
Context
ıı #
*
ıı# $
)
ıı$ %
self
ıı% )
;
ıı) *
for
ˆˆ 
(
ˆˆ 
int
ˆˆ 
i
ˆˆ 
=
ˆˆ 
$num
ˆˆ 
;
ˆˆ 
i
ˆˆ 
<
ˆˆ 
count
ˆˆ  %
;
ˆˆ% &
i
ˆˆ' (
++
ˆˆ( *
)
ˆˆ* +
{
˜˜ 
SetIndex
¯¯ 
(
¯¯ 
self
¯¯ 
,
¯¯ 
(
¯¯  
start_sequence
¯¯  .
+
¯¯/ 0
i
¯¯1 2
)
¯¯2 3
%
¯¯4 5
ctx
¯¯6 9
->
¯¯9 ;
Capacity
¯¯; C
,
¯¯C D
	NullEntry
¯¯E N
)
¯¯N O
;
¯¯O P
}
˘˘ 
}
˙˙ 	
static
¸¸ 
unsafe
¸¸ 
void
¸¸ 
SetIndex
¸¸ #
(
¸¸# $
byte
¸¸$ (
*
¸¸( )
self
¸¸* .
,
¸¸. /
int
¸¸0 3
index
¸¸4 9
,
¸¸9 :
int
¸¸; >
sequence
¸¸? G
)
¸¸G H
{
˝˝ 	
Context
˛˛ 
*
˛˛ 
ctx
˛˛ 
=
˛˛ 
(
˛˛ 
Context
˛˛ #
*
˛˛# $
)
˛˛$ %
self
˛˛% )
;
˛˛) *
int
ÄÄ 
*
ÄÄ 
value
ÄÄ 
=
ÄÄ 
(
ÄÄ 
int
ÄÄ 
*
ÄÄ 
)
ÄÄ 
(
ÄÄ  
(
ÄÄ  !
self
ÄÄ! %
+
ÄÄ& '
ctx
ÄÄ( +
->
ÄÄ+ -
IndexPtrOffset
ÄÄ- ;
)
ÄÄ; <
+
ÄÄ= >
(
ÄÄ? @
index
ÄÄ@ E
*
ÄÄF G
ctx
ÄÄH K
->
ÄÄK M
IndexStride
ÄÄM X
)
ÄÄX Y
)
ÄÄY Z
;
ÄÄZ [
*
ÅÅ 
value
ÅÅ 
=
ÅÅ 
sequence
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
static
ÑÑ 
unsafe
ÑÑ 
int
ÑÑ 
GetIndex
ÑÑ "
(
ÑÑ" #
byte
ÑÑ# '
*
ÑÑ' (
self
ÑÑ) -
,
ÑÑ- .
int
ÑÑ/ 2
index
ÑÑ3 8
)
ÑÑ8 9
{
ÖÖ 	
Context
ÜÜ 
*
ÜÜ 
ctx
ÜÜ 
=
ÜÜ 
(
ÜÜ 
Context
ÜÜ #
*
ÜÜ# $
)
ÜÜ$ %
self
ÜÜ% )
;
ÜÜ) *
int
àà 
*
àà 
value
àà 
=
àà 
(
àà 
int
àà 
*
àà 
)
àà 
(
àà  
(
àà  !
self
àà! %
+
àà& '
ctx
àà( +
->
àà+ -
IndexPtrOffset
àà- ;
)
àà; <
+
àà= >
(
àà? @
index
àà@ E
*
ààF G
ctx
ààH K
->
ààK M
IndexStride
ààM X
)
ààX Y
)
ààY Z
;
ààZ [
return
ââ 
*
ââ 
value
ââ 
;
ââ 
}
ää 	
public
ññ 
static
ññ 
unsafe
ññ 
bool
ññ !$
ReleaseOrResumePackets
ññ" 8
(
ññ8 9$
NetworkPipelineContext
ññ9 O
context
ññP W
)
ññW X
{
óó 	
SharedContext
òò 
*
òò 
reliable
òò #
=
òò$ %
(
òò& '
SharedContext
òò' 4
*
òò4 5
)
òò5 6
context
òò6 =
.
òò= >)
internalSharedProcessBuffer
òò> Y
;
òòY Z
Context
ôô 
*
ôô 
ctx
ôô 
=
ôô 
(
ôô 
Context
ôô #
*
ôô# $
)
ôô$ %
context
ôô% ,
.
ôô, -#
internalProcessBuffer
ôô- B
;
ôôB C
var
úú !
lastReceivedAckMask
úú #
=
úú$ %
reliable
úú& .
->
úú. 0
SentPackets
úú0 ;
.
úú; <
AckMask
úú< C
;
úúC D
var
ùù ,
lastOwnSequenceIdAckedByRemote
ùù .
=
ùù/ 0
(
ùù1 2
ushort
ùù2 8
)
ùù8 9
reliable
ùù9 A
->
ùùA C
SentPackets
ùùC N
.
ùùN O
Acked
ùùO T
;
ùùT U
var
¢¢ 
sequence
¢¢ 
=
¢¢ 
(
¢¢ 
ushort
¢¢ "
)
¢¢" #
(
¢¢# $
reliable
¢¢$ ,
->
¢¢, .

WindowSize
¢¢. 8
*
¢¢9 :
(
¢¢; <
(
¢¢< =
$num
¢¢= >
-
¢¢? @,
lastOwnSequenceIdAckedByRemote
¢¢A _
)
¢¢_ `
>>
¢¢a c
$num
¢¢d f
)
¢¢f g
)
¢¢g h
;
¢¢h i
for
¶¶ 
(
¶¶ 
int
¶¶ 
i
¶¶ 
=
¶¶ 
$num
¶¶ 
;
¶¶ 
i
¶¶ 
<
¶¶ 
reliable
¶¶  (
->
¶¶( *

WindowSize
¶¶* 4
;
¶¶4 5
i
¶¶6 7
++
¶¶7 9
)
¶¶9 :
{
ßß 
var
®® 
info
®® 
=
®® "
GetPacketInformation
®® /
(
®®/ 0
context
®®0 7
.
®®7 8#
internalProcessBuffer
®®8 M
,
®®M N
sequence
®®O W
)
®®W X
;
®®X Y
if
©© 
(
©© 
info
©© 
->
©© 

SequenceId
©© $
>=
©©% '
$num
©©( )
)
©©) *
{
™™ 
var
≠≠ 
ackBits
≠≠ 
=
≠≠  !
$num
≠≠" #
<<
≠≠$ &
(
≠≠' (,
lastOwnSequenceIdAckedByRemote
≠≠( F
-
≠≠G H
info
≠≠I M
->
≠≠M O

SequenceId
≠≠O Y
)
≠≠Y Z
;
≠≠Z [
if
±± 
(
±± 
SequenceHelpers
±± '
.
±±' (
AbsDistance
±±( 3
(
±±3 4
(
±±4 5
ushort
±±5 ;
)
±±; <,
lastOwnSequenceIdAckedByRemote
±±< Z
,
±±Z [
(
±±\ ]
ushort
±±] c
)
±±c d
info
±±d h
->
±±h j

SequenceId
±±j t
)
±±t u
<
±±v w
reliable±±x Ä
->±±Ä Ç

WindowSize±±Ç å
&&±±ç è
(±±ê ë
ackBits±±ë ò
&±±ô ö#
lastReceivedAckMask±±õ Æ
)±±Æ Ø
!=±±∞ ≤
$num±±≥ ¥
)±±¥ µ
{
≤≤ 
Release
≥≥ 
(
≥≥  
context
≥≥  '
.
≥≥' (#
internalProcessBuffer
≥≥( =
,
≥≥= >
info
≥≥? C
->
≥≥C E

SequenceId
≥≥E O
)
≥≥O P
;
≥≥P Q
info
¥¥ 
->
¥¥ 
SendTime
¥¥ &
=
¥¥' (
-
¥¥) *
$num
¥¥* +
;
¥¥+ ,
sequence
µµ  
=
µµ! "
(
µµ# $
ushort
µµ$ *
)
µµ* +
(
µµ+ ,
sequence
µµ, 4
-
µµ5 6
$num
µµ7 8
)
µµ8 9
;
µµ9 :
continue
∂∂  
;
∂∂  !
}
∑∑ 
var
∏∏ 
timeToResend
∏∏ $
=
∏∏% &
CurrentResendTime
∏∏' 8
(
∏∏8 9
context
∏∏9 @
.
∏∏@ A)
internalSharedProcessBuffer
∏∏A \
)
∏∏\ ]
;
∏∏] ^
if
ππ 
(
ππ 
context
ππ 
.
ππ  
	timestamp
ππ  )
>
ππ* +
info
ππ, 0
->
ππ0 2
SendTime
ππ2 :
+
ππ; <
timeToResend
ππ= I
)
ππI J
{
∫∫ 
ctx
ªª 
->
ªª 
Resume
ªª #
=
ªª$ %
info
ªª& *
->
ªª* ,

SequenceId
ªª, 6
;
ªª6 7
}
ºº 
}
ΩΩ 
sequence
ææ 
=
ææ 
(
ææ 
ushort
ææ "
)
ææ" #
(
ææ# $
sequence
ææ$ ,
-
ææ- .
$num
ææ/ 0
)
ææ0 1
;
ææ1 2
}
øø 
return
¿¿ 
ctx
¿¿ 
->
¿¿ 
Resume
¿¿ 
!=
¿¿ !
	NullEntry
¿¿" +
;
¿¿+ ,
}
¡¡ 	
public
ÕÕ 
static
ÕÕ 
unsafe
ÕÕ 
InboundRecvBuffer
ÕÕ .
ResumeReceive
ÕÕ/ <
(
ÕÕ< =$
NetworkPipelineContext
ÕÕ= S
context
ÕÕT [
,
ÕÕ[ \
int
ÕÕ] `
startSequence
ÕÕa n
,
ÕÕn o
ref
ÕÕp s
bool
ÕÕt x
needsResumeÕÕy Ñ
)ÕÕÑ Ö
{
ŒŒ 	
if
œœ 
(
œœ 
startSequence
œœ 
==
œœ  
	NullEntry
œœ! *
)
œœ* +
return
œœ, 2
default
œœ3 :
;
œœ: ;
SharedContext
—— 
*
—— 
shared
—— !
=
——" #
(
——$ %
SharedContext
——% 2
*
——2 3
)
——3 4
context
——4 ;
.
——; <)
internalSharedProcessBuffer
——< W
;
——W X
Context
““ 
*
““ 
reliable
““ 
=
““ 
(
““  !
Context
““! (
*
““( )
)
““) *
context
““* 1
.
““1 2#
internalProcessBuffer
““2 G
;
““G H
reliable
‘‘ 
->
‘‘ 
Resume
‘‘ 
=
‘‘ 
	NullEntry
‘‘ (
;
‘‘( )
PacketInformation
÷÷ 
*
÷÷ 
info
÷÷ #
=
÷÷$ %"
GetPacketInformation
÷÷& :
(
÷÷: ;
context
÷÷; B
.
÷÷B C#
internalProcessBuffer
÷÷C X
,
÷÷X Y
startSequence
÷÷Z g
)
÷÷g h
;
÷÷h i
var
◊◊ "
latestReceivedPacket
◊◊ $
=
◊◊% &
shared
◊◊' -
->
◊◊- /
ReceivedPackets
◊◊/ >
.
◊◊> ?
Sequence
◊◊? G
;
◊◊G H
if
ÿÿ 
(
ÿÿ 
info
ÿÿ 
->
ÿÿ 

SequenceId
ÿÿ  
==
ÿÿ! #
startSequence
ÿÿ$ 1
)
ÿÿ1 2
{
ŸŸ 
var
⁄⁄ 
offset
⁄⁄ 
=
⁄⁄ 
reliable
⁄⁄ %
->
⁄⁄% '
DataPtrOffset
⁄⁄' 4
+
⁄⁄5 6
(
⁄⁄7 8
(
⁄⁄8 9
startSequence
⁄⁄9 F
%
⁄⁄G H
reliable
⁄⁄I Q
->
⁄⁄Q S
Capacity
⁄⁄S [
)
⁄⁄[ \
*
⁄⁄] ^
reliable
⁄⁄_ g
->
⁄⁄g i

DataStride
⁄⁄i s
)
⁄⁄s t
;
⁄⁄t u
InboundRecvBuffer
€€ !
inBuffer
€€" *
;
€€* +
inBuffer
‹‹ 
.
‹‹ 
buffer
‹‹ 
=
‹‹  !
context
‹‹" )
.
‹‹) *#
internalProcessBuffer
‹‹* ?
+
‹‹@ A
offset
‹‹B H
;
‹‹H I
inBuffer
›› 
.
›› 
bufferLength
›› %
=
››& '
info
››( ,
->
››, .
Size
››. 2
;
››2 3
reliable
ﬁﬁ 
->
ﬁﬁ 
	Delivered
ﬁﬁ #
=
ﬁﬁ$ %
startSequence
ﬁﬁ& 3
;
ﬁﬁ3 4
if
‡‡ 
(
‡‡ 
(
‡‡ 
ushort
‡‡ 
)
‡‡ 
(
‡‡ 
startSequence
‡‡ *
+
‡‡+ ,
$num
‡‡- .
)
‡‡. /
<=
‡‡0 2"
latestReceivedPacket
‡‡3 G
)
‡‡G H
{
·· 
reliable
‚‚ 
->
‚‚ 
Resume
‚‚ $
=
‚‚% &
(
‚‚' (
ushort
‚‚( .
)
‚‚. /
(
‚‚/ 0
startSequence
‚‚0 =
+
‚‚> ?
$num
‚‚@ A
)
‚‚A B
;
‚‚B C
needsResume
„„ 
=
„„  !
true
„„" &
;
„„& '
}
‰‰ 
return
ÂÂ 
inBuffer
ÂÂ 
;
ÂÂ  
}
ÊÊ 
return
ÁÁ 
default
ÁÁ 
;
ÁÁ 
}
ËË 	
public
ÙÙ 
static
ÙÙ 
unsafe
ÙÙ 
InboundSendBuffer
ÙÙ .

ResumeSend
ÙÙ/ 9
(
ÙÙ9 :$
NetworkPipelineContext
ÙÙ: P
context
ÙÙQ X
,
ÙÙX Y
out
ÙÙZ ]
PacketHeader
ÙÙ^ j
header
ÙÙk q
,
ÙÙq r
ref
ÙÙs v
bool
ÙÙw {
needsResumeÙÙ| á
)ÙÙá à
{
ıı 	
SharedContext
ˆˆ 
*
ˆˆ 
reliable
ˆˆ #
=
ˆˆ$ %
(
ˆˆ& '
SharedContext
ˆˆ' 4
*
ˆˆ4 5
)
ˆˆ5 6
context
ˆˆ6 =
.
ˆˆ= >)
internalSharedProcessBuffer
ˆˆ> Y
;
ˆˆY Z
Context
˜˜ 
*
˜˜ 
ctx
˜˜ 
=
˜˜ 
(
˜˜ 
Context
˜˜ #
*
˜˜# $
)
˜˜$ %
context
˜˜% ,
.
˜˜, -#
internalProcessBuffer
˜˜- B
;
˜˜B C
if
˙˙ 
(
˙˙ 
ctx
˙˙ 
->
˙˙ 
Resume
˙˙ 
==
˙˙ 
	NullEntry
˙˙ (
)
˙˙( )
throw
˚˚ 
new
˚˚ '
InvalidOperationException
˚˚ 3
(
˚˚3 4
$str
˚˚4 w
)
˚˚w x
;
˚˚x y
var
˛˛ 
sequence
˛˛ 
=
˛˛ 
(
˛˛ 
ushort
˛˛ "
)
˛˛" #
ctx
˛˛# &
->
˛˛& (
Resume
˛˛( .
;
˛˛. /
PacketInformation
ÄÄ 
*
ÄÄ 
information
ÄÄ *
;
ÄÄ* +
information
ÅÅ 
=
ÅÅ "
GetPacketInformation
ÅÅ .
(
ÅÅ. /
context
ÅÅ/ 6
.
ÅÅ6 7#
internalProcessBuffer
ÅÅ7 L
,
ÅÅL M
sequence
ÅÅN V
)
ÅÅV W
;
ÅÅW X
information
ÉÉ 
->
ÉÉ 
SendTime
ÉÉ !
=
ÉÉ" #
context
ÉÉ$ +
.
ÉÉ+ ,
	timestamp
ÉÉ, 5
;
ÉÉ5 6
Packet
ÖÖ 
*
ÖÖ 
packet
ÖÖ 
=
ÖÖ 
	GetPacket
ÖÖ &
(
ÖÖ& '
context
ÖÖ' .
.
ÖÖ. /#
internalProcessBuffer
ÖÖ/ D
,
ÖÖD E
sequence
ÖÖF N
)
ÖÖN O
;
ÖÖO P
header
ÜÜ 
=
ÜÜ 
packet
ÜÜ 
->
ÜÜ 
Header
ÜÜ #
;
ÜÜ# $
header
ââ 
.
ââ 
AckedSequenceId
ââ "
=
ââ# $
(
ââ% &
ushort
ââ& ,
)
ââ, -
reliable
ââ- 5
->
ââ5 7
ReceivedPackets
ââ7 F
.
ââF G
Sequence
ââG O
;
ââO P
header
ää 
.
ää 
AckMask
ää 
=
ää 
reliable
ää %
->
ää% '
ReceivedPackets
ää' 6
.
ää6 7
AckMask
ää7 >
;
ää> ?
var
åå 
offset
åå 
=
åå 
(
åå 
ctx
åå 
->
åå 
DataPtrOffset
åå ,
+
åå- .
(
åå/ 0
(
åå0 1
sequence
åå1 9
%
åå: ;
ctx
åå< ?
->
åå? A
Capacity
ååA I
)
ååI J
*
ååK L
ctx
ååM P
->
ååP R

DataStride
ååR \
)
åå\ ]
)
åå] ^
+
åå_ `
UnsafeUtility
ååa n
.
åån o
SizeOf
ååo u
<
ååu v
PacketHeaderååv Ç
>ååÇ É
(ååÉ Ñ
)ååÑ Ö
;ååÖ Ü
var
éé 
inbound
éé 
=
éé 
default
éé !
(
éé! "
InboundSendBuffer
éé" 3
)
éé3 4
;
éé4 5
inbound
èè 
.
èè 
bufferWithHeaders
èè %
=
èè& '
context
èè( /
.
èè/ 0#
internalProcessBuffer
èè0 E
+
èèF G
offset
èèH N
;
èèN O
inbound
êê 
.
êê %
bufferWithHeadersLength
êê +
=
êê, -
information
êê. 9
->
êê9 ;
Size
êê; ?
;
êê? @
inbound
ëë 
.
ëë 
headerPadding
ëë !
=
ëë" #
information
ëë$ /
->
ëë/ 1
HeaderPadding
ëë1 >
;
ëë> ?
inbound
íí 
.
íí ,
SetBufferFrombufferWithHeaders
íí 2
(
íí2 3
)
íí3 4
;
íí4 5
reliable
ìì 
->
ìì 
stats
ìì 
.
ìì 
PacketsResent
ìì )
++
ìì) +
;
ìì+ ,
needsResume
ïï 
=
ïï 
false
ïï 
;
ïï  
ctx
ññ 
->
ññ 
Resume
ññ 
=
ññ 
-
ññ 
$num
ññ 
;
ññ 
for
ôô 
(
ôô 
int
ôô 
i
ôô 
=
ôô 
sequence
ôô !
+
ôô" #
$num
ôô$ %
;
ôô% &
i
ôô' (
<
ôô) *
reliable
ôô+ 3
->
ôô3 5
ReceivedPackets
ôô5 D
.
ôôD E
Sequence
ôôE M
+
ôôN O
$num
ôôP Q
;
ôôQ R
i
ôôS T
++
ôôT V
)
ôôV W
{
öö 
var
õõ 
timeToResend
õõ  
=
õõ! "
CurrentResendTime
õõ# 4
(
õõ4 5
context
õõ5 <
.
õõ< =)
internalSharedProcessBuffer
õõ= X
)
õõX Y
;
õõY Z
information
úú 
=
úú "
GetPacketInformation
úú 2
(
úú2 3
context
úú3 :
.
úú: ;#
internalProcessBuffer
úú; P
,
úúP Q
i
úúR S
)
úúS T
;
úúT U
if
ùù 
(
ùù 
information
ùù 
->
ùù !

SequenceId
ùù! +
>=
ùù, .
$num
ùù/ 0
&&
ùù1 3
information
ùù4 ?
->
ùù? A
SendTime
ùùA I
+
ùùJ K
timeToResend
ùùL X
>
ùùY Z
context
ùù[ b
.
ùùb c
	timestamp
ùùc l
)
ùùl m
{
ûû 
needsResume
üü 
=
üü  !
true
üü" &
;
üü& '
ctx
†† 
->
†† 
Resume
†† 
=
††  !
i
††" #
;
††# $
}
°° 
}
¢¢ 
return
££ 
inbound
££ 
;
££ 
}
§§ 	
public
ÆÆ 
static
ÆÆ 
unsafe
ÆÆ 
int
ÆÆ  
Write
ÆÆ! &
(
ÆÆ& '$
NetworkPipelineContext
ÆÆ' =
context
ÆÆ> E
,
ÆÆE F
InboundSendBuffer
ÆÆG X
inboundBuffer
ÆÆY f
,
ÆÆf g
ref
ÆÆh k
PacketHeader
ÆÆl x
header
ÆÆy 
)ÆÆ Ä
{
ØØ 	
SharedContext
∞∞ 
*
∞∞ 
reliable
∞∞ #
=
∞∞$ %
(
∞∞& '
SharedContext
∞∞' 4
*
∞∞4 5
)
∞∞5 6
context
∞∞6 =
.
∞∞= >)
internalSharedProcessBuffer
∞∞> Y
;
∞∞Y Z
var
≤≤ 
sequence
≤≤ 
=
≤≤ 
(
≤≤ 
ushort
≤≤ "
)
≤≤" #
reliable
≤≤# +
->
≤≤+ -
SentPackets
≤≤- 8
.
≤≤8 9
Sequence
≤≤9 A
;
≤≤A B
if
¥¥ 
(
¥¥ 
!
¥¥ 
	TryAquire
¥¥ 
(
¥¥ 
context
¥¥ "
.
¥¥" ##
internalProcessBuffer
¥¥# 8
,
¥¥8 9
sequence
¥¥: B
)
¥¥B C
)
¥¥C D
{
µµ 
reliable
∂∂ 
->
∂∂ 
	errorCode
∂∂ #
=
∂∂$ %

ErrorCodes
∂∂& 0
.
∂∂0 1!
OutgoingQueueIsFull
∂∂1 D
;
∂∂D E
return
∑∑ 
(
∑∑ 
int
∑∑ 
)
∑∑ 

ErrorCodes
∑∑ &
.
∑∑& '!
OutgoingQueueIsFull
∑∑' :
;
∑∑: ;
}
∏∏ 
reliable
ππ 
->
ππ 
stats
ππ 
.
ππ 
PacketsSent
ππ '
++
ππ' )
;
ππ) *
header
ªª 
.
ªª 

SequenceId
ªª 
=
ªª 
sequence
ªª  (
;
ªª( )
header
ºº 
.
ºº 
AckedSequenceId
ºº "
=
ºº# $
(
ºº% &
ushort
ºº& ,
)
ºº, -
reliable
ºº- 5
->
ºº5 7
ReceivedPackets
ºº7 F
.
ººF G
Sequence
ººG O
;
ººO P
header
ΩΩ 
.
ΩΩ 
AckMask
ΩΩ 
=
ΩΩ 
reliable
ΩΩ %
->
ΩΩ% '
ReceivedPackets
ΩΩ' 6
.
ΩΩ6 7
AckMask
ΩΩ7 >
;
ΩΩ> ?
reliable
øø 
->
øø 
ReceivedPackets
øø %
.
øø% &
Acked
øø& +
=
øø, -
reliable
øø. 6
->
øø6 8
ReceivedPackets
øø8 G
.
øøG H
Sequence
øøH P
;
øøP Q
reliable
¿¿ 
->
¿¿ 
ReceivedPackets
¿¿ %
.
¿¿% &
LastAckMask
¿¿& 1
=
¿¿2 3
header
¿¿4 :
.
¿¿: ;
AckMask
¿¿; B
;
¿¿B C
header
√√ 
.
√√ 
ProcessingTime
√√ !
=
√√" #%
CalculateProcessingTime
ƒƒ '
(
ƒƒ' (
context
ƒƒ( /
.
ƒƒ/ 0)
internalSharedProcessBuffer
ƒƒ0 K
,
ƒƒK L
header
ƒƒM S
.
ƒƒS T
AckedSequenceId
ƒƒT c
,
ƒƒc d
context
ƒƒe l
.
ƒƒl m
	timestamp
ƒƒm v
)
ƒƒv w
;
ƒƒw x
reliable
∆∆ 
->
∆∆ 
SentPackets
∆∆ !
.
∆∆! "
Sequence
∆∆" *
=
∆∆+ ,
(
∆∆- .
ushort
∆∆. 4
)
∆∆4 5
(
∆∆5 6
reliable
∆∆6 >
->
∆∆> @
SentPackets
∆∆@ K
.
∆∆K L
Sequence
∆∆L T
+
∆∆U V
$num
∆∆W X
)
∆∆X Y
;
∆∆Y Z 
SetHeaderAndPacket
«« 
(
«« 
context
«« &
.
««& '#
internalProcessBuffer
««' <
,
««< =
sequence
««> F
,
««F G
header
««H N
,
««N O
inboundBuffer
««P ]
,
««] ^
context
««_ f
.
««f g
	timestamp
««g p
)
««p q
;
««q r
StoreTimestamp
…… 
(
…… 
context
…… "
.
……" #)
internalSharedProcessBuffer
……# >
,
……> ?
sequence
……@ H
,
……H I
context
……J Q
.
……Q R
	timestamp
……R [
)
……[ \
;
……\ ]
return
ÀÀ 
sequence
ÀÀ 
;
ÀÀ 
}
ÃÃ 	
public
’’ 
static
’’ 
unsafe
’’ 
void
’’ !
WriteAckPacket
’’" 0
(
’’0 1$
NetworkPipelineContext
’’1 G
context
’’H O
,
’’O P
ref
’’Q T
PacketHeader
’’U a
header
’’b h
)
’’h i
{
÷÷ 	
SharedContext
◊◊ 
*
◊◊ 
reliable
◊◊ #
=
◊◊$ %
(
◊◊& '
SharedContext
◊◊' 4
*
◊◊4 5
)
◊◊5 6
context
◊◊6 =
.
◊◊= >)
internalSharedProcessBuffer
◊◊> Y
;
◊◊Y Z
header
ŸŸ 
.
ŸŸ 
Type
ŸŸ 
=
ŸŸ 
(
ŸŸ 
ushort
ŸŸ !
)
ŸŸ! "

PacketType
ŸŸ" ,
.
ŸŸ, -
Ack
ŸŸ- 0
;
ŸŸ0 1
header
⁄⁄ 
.
⁄⁄ 
AckedSequenceId
⁄⁄ "
=
⁄⁄# $
(
⁄⁄% &
ushort
⁄⁄& ,
)
⁄⁄, -
reliable
⁄⁄- 5
->
⁄⁄5 7
ReceivedPackets
⁄⁄7 F
.
⁄⁄F G
Sequence
⁄⁄G O
;
⁄⁄O P
header
€€ 
.
€€ 
AckMask
€€ 
=
€€ 
reliable
€€ %
->
€€% '
ReceivedPackets
€€' 6
.
€€6 7
AckMask
€€7 >
;
€€> ?
header
‹‹ 
.
‹‹ 
ProcessingTime
‹‹ !
=
‹‹" #%
CalculateProcessingTime
›› '
(
››' (
context
››( /
.
››/ 0)
internalSharedProcessBuffer
››0 K
,
››K L
header
››M S
.
››S T
AckedSequenceId
››T c
,
››c d
context
››e l
.
››l m
	timestamp
››m v
)
››v w
;
››w x
reliable
ﬁﬁ 
->
ﬁﬁ 
ReceivedPackets
ﬁﬁ %
.
ﬁﬁ% &
Acked
ﬁﬁ& +
=
ﬁﬁ, -
reliable
ﬁﬁ. 6
->
ﬁﬁ6 8
ReceivedPackets
ﬁﬁ8 G
.
ﬁﬁG H
Sequence
ﬁﬁH P
;
ﬁﬁP Q
reliable
ﬂﬂ 
->
ﬂﬂ 
ReceivedPackets
ﬂﬂ %
.
ﬂﬂ% &
LastAckMask
ﬂﬂ& 1
=
ﬂﬂ2 3
header
ﬂﬂ4 :
.
ﬂﬂ: ;
AckMask
ﬂﬂ; B
;
ﬂﬂB C
}
‡‡ 	
public
‚‚ 
static
‚‚ 
unsafe
‚‚ 
void
‚‚ !
StoreTimestamp
‚‚" 0
(
‚‚0 1
byte
‚‚1 5
*
‚‚5 6
sharedBuffer
‚‚7 C
,
‚‚C D
ushort
‚‚E K

sequenceId
‚‚L V
,
‚‚V W
long
‚‚X \
	timestamp
‚‚] f
)
‚‚f g
{
„„ 	
var
‰‰ 
	timerData
‰‰ 
=
‰‰ !
GetLocalPacketTimer
‰‰ /
(
‰‰/ 0
sharedBuffer
‰‰0 <
,
‰‰< =

sequenceId
‰‰> H
)
‰‰H I
;
‰‰I J
	timerData
ÂÂ 
->
ÂÂ 

SequenceId
ÂÂ !
=
ÂÂ" #

sequenceId
ÂÂ$ .
;
ÂÂ. /
	timerData
ÊÊ 
->
ÊÊ 
SentTime
ÊÊ 
=
ÊÊ  !
	timestamp
ÊÊ" +
;
ÊÊ+ ,
	timerData
ÁÁ 
->
ÁÁ 
ProcessingTime
ÁÁ %
=
ÁÁ& '
$num
ÁÁ( )
;
ÁÁ) *
	timerData
ËË 
->
ËË 
ReceiveTime
ËË "
=
ËË# $
$num
ËË% &
;
ËË& '
}
ÈÈ 	
public
ÎÎ 
static
ÎÎ 
unsafe
ÎÎ 
void
ÎÎ !#
StoreReceiveTimestamp
ÎÎ" 7
(
ÎÎ7 8
byte
ÎÎ8 <
*
ÎÎ< =
sharedBuffer
ÎÎ> J
,
ÎÎJ K
ushort
ÎÎL R

sequenceId
ÎÎS ]
,
ÎÎ] ^
long
ÎÎ_ c
	timestamp
ÎÎd m
,
ÎÎm n
ushort
ÎÎo u
processingTimeÎÎv Ñ
)ÎÎÑ Ö
{
ÏÏ 	
var
ÌÌ 
	sharedCtx
ÌÌ 
=
ÌÌ 
(
ÌÌ 
SharedContext
ÌÌ *
*
ÌÌ* +
)
ÌÌ+ ,
sharedBuffer
ÌÌ, 8
;
ÌÌ8 9
var
ÓÓ 
rttInfo
ÓÓ 
=
ÓÓ 
	sharedCtx
ÓÓ #
->
ÓÓ# %
RttInfo
ÓÓ% ,
;
ÓÓ, -
var
ÔÔ 
	timerData
ÔÔ 
=
ÔÔ !
GetLocalPacketTimer
ÔÔ /
(
ÔÔ/ 0
sharedBuffer
ÔÔ0 <
,
ÔÔ< =

sequenceId
ÔÔ> H
)
ÔÔH I
;
ÔÔI J
if
 
(
 
	timerData
 
!=
 
null
 !
&&
" $
	timerData
% .
->
. 0

SequenceId
0 :
==
; =

sequenceId
> H
)
H I
{
ÒÒ 
if
ÛÛ 
(
ÛÛ 
	timerData
ÛÛ 
->
ÛÛ 
ReceiveTime
ÛÛ *
>
ÛÛ+ ,
$num
ÛÛ- .
)
ÛÛ. /
return
ÙÙ 
;
ÙÙ 
	timerData
ıı 
->
ıı 
ReceiveTime
ıı &
=
ıı' (
	timestamp
ıı) 2
;
ıı2 3
	timerData
ˆˆ 
->
ˆˆ 
ProcessingTime
ˆˆ )
=
ˆˆ* +
processingTime
ˆˆ, :
;
ˆˆ: ;
rttInfo
¯¯ 
.
¯¯ 
LastRtt
¯¯ 
=
¯¯  !
(
¯¯" #
int
¯¯# &
)
¯¯& '
Math
¯¯' +
.
¯¯+ ,
Max
¯¯, /
(
¯¯/ 0
	timerData
¯¯0 9
->
¯¯9 ;
ReceiveTime
¯¯; F
-
¯¯G H
	timerData
¯¯I R
->
¯¯R T
SentTime
¯¯T \
-
¯¯] ^
	timerData
¯¯_ h
->
¯¯h j
ProcessingTime
¯¯j x
,
¯¯x y
$num
¯¯z {
)
¯¯{ |
;
¯¯| }
var
˘˘ 
delta
˘˘ 
=
˘˘ 
rttInfo
˘˘ #
.
˘˘# $
LastRtt
˘˘$ +
-
˘˘, -
rttInfo
˘˘. 5
.
˘˘5 6
SmoothedRtt
˘˘6 A
;
˘˘A B
rttInfo
˙˙ 
.
˙˙ 
SmoothedRtt
˙˙ #
+=
˙˙$ &
delta
˙˙' ,
/
˙˙- .
$num
˙˙/ 0
;
˙˙0 1
rttInfo
˚˚ 
.
˚˚ 
SmoothedVariance
˚˚ (
+=
˚˚) +
(
˚˚, -
math
˚˚- 1
.
˚˚1 2
abs
˚˚2 5
(
˚˚5 6
delta
˚˚6 ;
)
˚˚; <
-
˚˚= >
rttInfo
˚˚? F
.
˚˚F G
SmoothedVariance
˚˚G W
)
˚˚W X
/
˚˚Y Z
$num
˚˚[ \
;
˚˚\ ]
rttInfo
¸¸ 
.
¸¸ 
ResendTimeout
¸¸ %
=
¸¸& '
(
¸¸( )
int
¸¸) ,
)
¸¸, -
(
¸¸- .
rttInfo
¸¸. 5
.
¸¸5 6
SmoothedRtt
¸¸6 A
+
¸¸B C
$num
¸¸D E
*
¸¸F G
rttInfo
¸¸H O
.
¸¸O P
SmoothedVariance
¸¸P `
)
¸¸` a
;
¸¸a b
	sharedCtx
˝˝ 
->
˝˝ 
RttInfo
˝˝ "
=
˝˝# $
rttInfo
˝˝% ,
;
˝˝, -
}
˛˛ 
}
ˇˇ 	
public
ÅÅ 
static
ÅÅ 
unsafe
ÅÅ 
void
ÅÅ !)
StoreRemoteReceiveTimestamp
ÅÅ" =
(
ÅÅ= >
byte
ÅÅ> B
*
ÅÅB C
sharedBuffer
ÅÅD P
,
ÅÅP Q
ushort
ÅÅR X

sequenceId
ÅÅY c
,
ÅÅc d
long
ÅÅe i
	timestamp
ÅÅj s
)
ÅÅs t
{
ÇÇ 	
var
ÉÉ 
	timerData
ÉÉ 
=
ÉÉ "
GetRemotePacketTimer
ÉÉ 0
(
ÉÉ0 1
sharedBuffer
ÉÉ1 =
,
ÉÉ= >

sequenceId
ÉÉ? I
)
ÉÉI J
;
ÉÉJ K
	timerData
ÑÑ 
->
ÑÑ 

SequenceId
ÑÑ !
=
ÑÑ" #

sequenceId
ÑÑ$ .
;
ÑÑ. /
	timerData
ÖÖ 
->
ÖÖ 
ReceiveTime
ÖÖ "
=
ÖÖ# $
	timestamp
ÖÖ% .
;
ÖÖ. /
}
ÜÜ 	
static
àà 
unsafe
àà 
int
àà 
CurrentResendTime
àà +
(
àà+ ,
byte
àà, 0
*
àà0 1
sharedBuffer
àà2 >
)
àà> ?
{
ââ 	
var
ää 
	sharedCtx
ää 
=
ää 
(
ää 
SharedContext
ää *
*
ää* +
)
ää+ ,
sharedBuffer
ää, 8
;
ää8 9
if
ãã 
(
ãã 
	sharedCtx
ãã 
->
ãã 
RttInfo
ãã "
.
ãã" #
ResendTimeout
ãã# 0
>
ãã1 2
MaximumResendTime
ãã3 D
)
ããD E
return
åå 
MaximumResendTime
åå (
;
åå( )
return
çç 
Math
çç 
.
çç 
Max
çç 
(
çç 
	sharedCtx
çç %
->
çç% '
RttInfo
çç' .
.
çç. /
ResendTimeout
çç/ <
,
çç< =
	sharedCtx
çç> G
->
ççG I
MinimumResendTime
ççI Z
)
ççZ [
;
çç[ \
}
éé 	
public
êê 
static
êê 
unsafe
êê 
ushort
êê #%
CalculateProcessingTime
êê$ ;
(
êê; <
byte
êê< @
*
êê@ A
sharedBuffer
êêB N
,
êêN O
ushort
êêP V

sequenceId
êêW a
,
êêa b
long
êêc g
	timestamp
êêh q
)
êêq r
{
ëë 	
var
ìì 
	timerData
ìì 
=
ìì "
GetRemotePacketTimer
ìì 0
(
ìì0 1
sharedBuffer
ìì1 =
,
ìì= >

sequenceId
ìì? I
)
ììI J
;
ììJ K
if
îî 
(
îî 
	timerData
îî 
!=
îî 
null
îî !
&&
îî" $
	timerData
îî% .
->
îî. 0

SequenceId
îî0 :
==
îî; =

sequenceId
îî> H
)
îîH I
return
ïï 
Math
ïï 
.
ïï 
Min
ïï 
(
ïï  
(
ïï  !
ushort
ïï! '
)
ïï' (
(
ïï( )
	timestamp
ïï) 2
-
ïï3 4
	timerData
ïï5 >
->
ïï> @
ReceiveTime
ïï@ K
)
ïïK L
,
ïïL M
ushort
ïïN T
.
ïïT U
MaxValue
ïïU ]
)
ïï] ^
;
ïï^ _
return
ññ 
$num
ññ 
;
ññ 
}
óó 	
public
ôô 
static
ôô 
unsafe
ôô 
PacketTimers
ôô )
*
ôô) *!
GetLocalPacketTimer
ôô+ >
(
ôô> ?
byte
ôô? C
*
ôôC D
sharedBuffer
ôôE Q
,
ôôQ R
ushort
ôôS Y

sequenceId
ôôZ d
)
ôôd e
{
öö 	
var
õõ 
	sharedCtx
õõ 
=
õõ 
(
õõ 
SharedContext
õõ *
*
õõ* +
)
õõ+ ,
sharedBuffer
õõ, 8
;
õõ8 9
var
úú 
index
úú 
=
úú 

sequenceId
úú "
%
úú# $
	sharedCtx
úú% .
->
úú. 0

WindowSize
úú0 :
;
úú: ;
var
ùù 
timerPtr
ùù 
=
ùù 
(
ùù 
long
ùù  
)
ùù  !
sharedBuffer
ùù! -
+
ùù. /
	sharedCtx
ùù0 9
->
ùù9 ;
TimerDataOffset
ùù; J
+
ùùK L
	sharedCtx
ùùM V
->
ùùV X
TimerDataStride
ùùX g
*
ùùh i
index
ùùj o
;
ùùo p
return
ûû 
(
ûû 
PacketTimers
ûû  
*
ûû  !
)
ûû! "
timerPtr
ûû" *
;
ûû* +
}
üü 	
public
°° 
static
°° 
unsafe
°° 
PacketTimers
°° )
*
°°) *"
GetRemotePacketTimer
°°+ ?
(
°°? @
byte
°°@ D
*
°°D E
sharedBuffer
°°F R
,
°°R S
ushort
°°T Z

sequenceId
°°[ e
)
°°e f
{
¢¢ 	
var
££ 
	sharedCtx
££ 
=
££ 
(
££ 
SharedContext
££ *
*
££* +
)
££+ ,
sharedBuffer
££, 8
;
££8 9
var
§§ 
index
§§ 
=
§§ 

sequenceId
§§ "
%
§§# $
	sharedCtx
§§% .
->
§§. 0

WindowSize
§§0 :
;
§§: ;
var
•• 
timerPtr
•• 
=
•• 
(
•• 
long
••  
)
••  !
sharedBuffer
••! -
+
••. /
	sharedCtx
••0 9
->
••9 ;#
RemoteTimerDataOffset
••; P
+
••Q R
	sharedCtx
••S \
->
••\ ^#
RemoteTimerDataStride
••^ s
*
••t u
index
••v {
;
••{ |
return
¶¶ 
(
¶¶ 
PacketTimers
¶¶  
*
¶¶  !
)
¶¶! "
timerPtr
¶¶" *
;
¶¶* +
}
ßß 	
public
±± 
static
±± 
unsafe
±± 
int
±±  
Read
±±! %
(
±±% &$
NetworkPipelineContext
±±& <
context
±±= D
,
±±D E
PacketHeader
±±F R
header
±±S Y
)
±±Y Z
{
≤≤ 	
SharedContext
≥≥ 
*
≥≥ 
reliable
≥≥ #
=
≥≥$ %
(
≥≥& '
SharedContext
≥≥' 4
*
≥≥4 5
)
≥≥5 6
context
≥≥6 =
.
≥≥= >)
internalSharedProcessBuffer
≥≥> Y
;
≥≥Y Z
reliable
µµ 
->
µµ 
stats
µµ 
.
µµ 
PacketsReceived
µµ +
++
µµ+ -
;
µµ- .
if
∂∂ 
(
∂∂ 
SequenceHelpers
∂∂ 
.
∂∂  
StalePacket
∂∂  +
(
∂∂+ ,
header
∑∑ 
.
∑∑ 

SequenceId
∑∑ !
,
∑∑! "
(
∏∏ 
ushort
∏∏ 
)
∏∏ 
(
∏∏ 
reliable
∏∏ !
->
∏∏! #
ReceivedPackets
∏∏# 2
.
∏∏2 3
Sequence
∏∏3 ;
+
∏∏< =
$num
∏∏> ?
)
∏∏? @
,
∏∏@ A
(
ππ 
ushort
ππ 
)
ππ 
reliable
ππ  
->
ππ  "

WindowSize
ππ" ,
)
ππ, -
)
ππ- .
{
∫∫ 
reliable
ªª 
->
ªª 
stats
ªª 
.
ªª  
PacketsStale
ªª  ,
++
ªª, .
;
ªª. /
return
ºº 
(
ºº 
int
ºº 
)
ºº 

ErrorCodes
ºº &
.
ºº& '
Stale_Packet
ºº' 3
;
ºº3 4
}
ΩΩ 
var
øø 
window
øø 
=
øø 
reliable
øø !
->
øø! #

WindowSize
øø# -
-
øø. /
$num
øø0 1
;
øø1 2
if
¿¿ 
(
¿¿ 
SequenceHelpers
¿¿ 
.
¿¿  
GreaterThan16
¿¿  -
(
¿¿- .
(
¿¿. /
ushort
¿¿/ 5
)
¿¿5 6
(
¿¿6 7
header
¿¿7 =
.
¿¿= >

SequenceId
¿¿> H
+
¿¿I J
$num
¿¿K L
)
¿¿L M
,
¿¿M N
(
¿¿O P
ushort
¿¿P V
)
¿¿V W
reliable
¿¿W _
->
¿¿_ a
ReceivedPackets
¿¿a p
.
¿¿p q
Sequence
¿¿q y
)
¿¿y z
)
¿¿z {
{
¡¡ 
int
¬¬ 
distance
¬¬ 
=
¬¬ 
SequenceHelpers
¬¬ .
.
¬¬. /
AbsDistance
¬¬/ :
(
¬¬: ;
header
¬¬; A
.
¬¬A B

SequenceId
¬¬B L
,
¬¬L M
(
¬¬N O
ushort
¬¬O U
)
¬¬U V
reliable
¬¬V ^
->
¬¬^ `
ReceivedPackets
¬¬` o
.
¬¬o p
Sequence
¬¬p x
)
¬¬x y
;
¬¬y z
if
ƒƒ 
(
ƒƒ 
distance
ƒƒ 
>
ƒƒ 
window
ƒƒ %
)
ƒƒ% &
{
≈≈ 
reliable
∆∆ 
->
∆∆ 
stats
∆∆ #
.
∆∆# $
PacketsDropped
∆∆$ 2
+=
∆∆3 5
distance
∆∆6 >
-
∆∆? @
$num
∆∆A B
;
∆∆B C
reliable
«« 
->
«« 
ReceivedPackets
«« -
.
««- .
AckMask
««. 5
=
««6 7
$num
««8 9
;
««9 :
}
»» 
else
…… 
{
   
reliable
ÀÀ 
->
ÀÀ 
ReceivedPackets
ÀÀ -
.
ÀÀ- .
AckMask
ÀÀ. 5
<<=
ÀÀ6 9
distance
ÀÀ: B
;
ÀÀB C
reliable
ÃÃ 
->
ÃÃ 
ReceivedPackets
ÃÃ -
.
ÃÃ- .
AckMask
ÃÃ. 5
|=
ÃÃ6 8
$num
ÃÃ9 :
;
ÃÃ: ;
for
ŒŒ 
(
ŒŒ 
var
ŒŒ 
i
ŒŒ 
=
ŒŒ  
$num
ŒŒ! "
;
ŒŒ" #
i
ŒŒ$ %
<
ŒŒ& '
Math
ŒŒ( ,
.
ŒŒ, -
Min
ŒŒ- 0
(
ŒŒ0 1
distance
ŒŒ1 9
,
ŒŒ9 :
window
ŒŒ; A
)
ŒŒA B
;
ŒŒB C
++
ŒŒD F
i
ŒŒF G
)
ŒŒG H
{
œœ 
if
–– 
(
–– 
(
–– 
reliable
–– %
->
––% '
ReceivedPackets
––' 6
.
––6 7
AckMask
––7 >
&
––? @
$num
––A B
<<
––C E
i
––F G
)
––G H
==
––I K
$num
––L M
)
––M N
{
—— 
reliable
““ $
->
““$ &
stats
““& +
.
““+ ,
PacketsDropped
““, :
++
““: <
;
““< =
}
”” 
}
‘‘ 
}
’’ 
reliable
◊◊ 
->
◊◊ 
ReceivedPackets
◊◊ )
.
◊◊) *
Sequence
◊◊* 2
=
◊◊3 4
header
◊◊5 ;
.
◊◊; <

SequenceId
◊◊< F
;
◊◊F G
}
ÿÿ 
else
ŸŸ 
if
ŸŸ 
(
ŸŸ 
SequenceHelpers
ŸŸ $
.
ŸŸ$ %

LessThan16
ŸŸ% /
(
ŸŸ/ 0
header
ŸŸ0 6
.
ŸŸ6 7

SequenceId
ŸŸ7 A
,
ŸŸA B
(
ŸŸC D
ushort
ŸŸD J
)
ŸŸJ K
reliable
ŸŸK S
->
ŸŸS U
ReceivedPackets
ŸŸU d
.
ŸŸd e
Sequence
ŸŸe m
)
ŸŸm n
)
ŸŸn o
{
⁄⁄ 
int
€€ 
distance
€€ 
=
€€ 
SequenceHelpers
€€ .
.
€€. /
AbsDistance
€€/ :
(
€€: ;
header
€€; A
.
€€A B

SequenceId
€€B L
,
€€L M
(
€€N O
ushort
€€O U
)
€€U V
reliable
€€V ^
->
€€^ `
ReceivedPackets
€€` o
.
€€o p
Sequence
€€p x
)
€€x y
;
€€y z
if
›› 
(
›› 
distance
›› 
>=
›› 
ushort
››  &
.
››& '
MaxValue
››' /
-
››0 1
reliable
››2 :
->
››: <

WindowSize
››< F
)
››F G
distance
ﬁﬁ 
=
ﬁﬁ 
reliable
ﬁﬁ '
->
ﬁﬁ' )
ReceivedPackets
ﬁﬁ) 8
.
ﬁﬁ8 9
Sequence
ﬁﬁ9 A
-
ﬁﬁB C
header
ﬁﬁD J
.
ﬁﬁJ K

SequenceId
ﬁﬁK U
;
ﬁﬁU V
var
‡‡ 
ackBit
‡‡ 
=
‡‡ 
$num
‡‡ 
<<
‡‡ !
distance
‡‡" *
;
‡‡* +
if
·· 
(
·· 
(
·· 
ackBit
·· 
&
·· 
reliable
·· &
->
··& (
ReceivedPackets
··( 7
.
··7 8
AckMask
··8 ?
)
··? @
!=
··A C
$num
··D E
)
··E F
{
‚‚ 
reliable
„„ 
->
„„ 
stats
„„ #
.
„„# $
PacketsDuplicated
„„$ 5
++
„„5 7
;
„„7 8
return
‰‰ 
(
‰‰ 
int
‰‰ 
)
‰‰  

ErrorCodes
‰‰  *
.
‰‰* +
Duplicated_Packet
‰‰+ <
;
‰‰< =
}
ÂÂ 
reliable
ÁÁ 
->
ÁÁ 
stats
ÁÁ 
.
ÁÁ  
PacketsOutOfOrder
ÁÁ  1
++
ÁÁ1 3
;
ÁÁ3 4
reliable
ËË 
->
ËË 
ReceivedPackets
ËË )
.
ËË) *
AckMask
ËË* 1
|=
ËË2 4
(
ËË5 6
uint
ËË6 :
)
ËË: ;
ackBit
ËË; A
;
ËËA B
}
ÈÈ )
StoreRemoteReceiveTimestamp
ÏÏ '
(
ÏÏ' (
context
ÏÏ( /
.
ÏÏ/ 0)
internalSharedProcessBuffer
ÏÏ0 K
,
ÏÏK L
header
ÏÏM S
.
ÏÏS T

SequenceId
ÏÏT ^
,
ÏÏ^ _
context
ÏÏ` g
.
ÏÏg h
	timestamp
ÏÏh q
)
ÏÏq r
;
ÏÏr s
ReadAckPacket
ÓÓ 
(
ÓÓ 
context
ÓÓ !
,
ÓÓ! "
header
ÓÓ# )
)
ÓÓ) *
;
ÓÓ* +
return
 
header
 
.
 

SequenceId
 $
;
$ %
}
ÒÒ 	
public
ÛÛ 
static
ÛÛ 
unsafe
ÛÛ 
void
ÛÛ !
ReadAckPacket
ÛÛ" /
(
ÛÛ/ 0$
NetworkPipelineContext
ÛÛ0 F
context
ÛÛG N
,
ÛÛN O
PacketHeader
ÛÛP \
header
ÛÛ] c
)
ÛÛc d
{
ÙÙ 	
SharedContext
ıı 
*
ıı 
reliable
ıı #
=
ıı$ %
(
ıı& '
SharedContext
ıı' 4
*
ıı4 5
)
ıı5 6
context
ıı6 =
.
ıı= >)
internalSharedProcessBuffer
ıı> Y
;
ııY Z#
StoreReceiveTimestamp
¯¯ !
(
¯¯! "
context
¯¯" )
.
¯¯) *)
internalSharedProcessBuffer
¯¯* E
,
¯¯E F
header
¯¯G M
.
¯¯M N
AckedSequenceId
¯¯N ]
,
¯¯] ^
context
¯¯_ f
.
¯¯f g
	timestamp
¯¯g p
,
¯¯p q
header
¯¯r x
.
¯¯x y
ProcessingTime¯¯y á
)¯¯á à
;¯¯à â
if
¸¸ 
(
¸¸ 
SequenceHelpers
¸¸ 
.
¸¸  
GreaterThan16
¸¸  -
(
¸¸- .
(
¸¸. /
ushort
¸¸/ 5
)
¸¸5 6
reliable
¸¸6 >
->
¸¸> @
SentPackets
¸¸@ K
.
¸¸K L
Acked
¸¸L Q
,
¸¸Q R
header
¸¸S Y
.
¸¸Y Z
AckedSequenceId
¸¸Z i
)
¸¸i j
)
¸¸j k
{
˝˝ 
return
ˇˇ 
;
ˇˇ 
}
ÄÄ 
if
ÇÇ 
(
ÇÇ 
reliable
ÇÇ 
->
ÇÇ 
SentPackets
ÇÇ %
.
ÇÇ% &
Acked
ÇÇ& +
==
ÇÇ, .
header
ÇÇ/ 5
.
ÇÇ5 6
AckedSequenceId
ÇÇ6 E
)
ÇÇE F
{
ÉÉ 
reliable
ÖÖ 
->
ÖÖ 
SentPackets
ÖÖ %
.
ÖÖ% &
AckMask
ÖÖ& -
|=
ÖÖ. 0
header
ÖÖ1 7
.
ÖÖ7 8
AckMask
ÖÖ8 ?
;
ÖÖ? @
}
ÜÜ 
else
áá 
{
àà 
reliable
ââ 
->
ââ 
SentPackets
ââ %
.
ââ% &
Acked
ââ& +
=
ââ, -
header
ââ. 4
.
ââ4 5
AckedSequenceId
ââ5 D
;
ââD E
reliable
ää 
->
ää 
SentPackets
ää %
.
ää% &
AckMask
ää& -
=
ää. /
header
ää0 6
.
ää6 7
AckMask
ää7 >
;
ää> ?
}
ãã 
}
åå 	
public
éé 
static
éé 
unsafe
éé 
bool
éé !
ShouldSendAck
éé" /
(
éé/ 0$
NetworkPipelineContext
éé0 F
ctx
ééG J
)
ééJ K
{
èè 	
var
êê 
reliable
êê 
=
êê 
(
êê 
Context
êê #
*
êê# $
)
êê$ %
ctx
êê% (
.
êê( )#
internalProcessBuffer
êê) >
;
êê> ?
var
ëë 
shared
ëë 
=
ëë 
(
ëë 
SharedContext
ëë '
*
ëë' (
)
ëë( )
ctx
ëë) ,
.
ëë, -)
internalSharedProcessBuffer
ëë- H
;
ëëH I
if
ññ 
(
ññ 
reliable
ññ 
->
ññ 
LastSentTime
ññ &
<
ññ' (
reliable
ññ) 1
->
ññ1 3
PreviousTimestamp
ññ3 D
&&
ññE G
(
óó 
SequenceHelpers
óó  
.
óó  !

LessThan16
óó! +
(
óó+ ,
(
óó, -
ushort
óó- 3
)
óó3 4
shared
óó4 :
->
óó: <
ReceivedPackets
óó< K
.
óóK L
Acked
óóL Q
,
óóQ R
(
óóS T
ushort
óóT Z
)
óóZ [
shared
óó[ a
->
óóa c
ReceivedPackets
óóc r
.
óór s
Sequence
óós {
)
óó{ |
||
óó} 
shared
òò 
->
òò 
ReceivedPackets
òò (
.
òò( )
AckMask
òò) 0
!=
òò1 3
shared
òò4 :
->
òò: <
ReceivedPackets
òò< K
.
òòK L
LastAckMask
òòL W
)
òòW X
)
òòX Y
return
ôô 
true
ôô 
;
ôô 
return
öö 
false
öö 
;
öö 
}
õõ 	
public
ùù 
static
ùù 
unsafe
ùù 
void
ùù !"
SetMinimumResendTime
ùù" 6
(
ùù6 7
int
ùù7 :
value
ùù; @
,
ùù@ A
NetworkDriver
ùùB O
driver
ùùP V
,
ùùV W
NetworkPipeline
ûû 
pipeline
ûû $
,
ûû$ %
NetworkConnection
ûû& 7
con
ûû8 ;
)
ûû; <
{
üü 	
driver
†† 
.
††  
GetPipelineBuffers
†† %
(
††% &
pipeline
††& .
,
††. /,
NetworkPipelineStageCollection
††0 N
.
††N O

GetStageId
††O Y
(
††Y Z
typeof
††Z `
(
††` a,
ReliableSequencedPipelineStage
††a 
)†† Ä
)††Ä Å
,††Å Ç
con††É Ü
,††Ü á
out††à ã
var††å è
receiveBuffer††ê ù
,††ù û
out††ü ¢
var††£ ¶

sendBuffer††ß ±
,††± ≤
out††≥ ∂
var††∑ ∫
sharedBuffer††ª «
)††« »
;††» …
var
°° 
	sharedCtx
°° 
=
°° 
(
°° 
ReliableUtility
°° ,
.
°°, -
SharedContext
°°- :
*
°°: ;
)
°°; <
sharedBuffer
°°< H
.
°°H I
GetUnsafePtr
°°I U
(
°°U V
)
°°V W
;
°°W X
	sharedCtx
¢¢ 
->
¢¢ 
MinimumResendTime
¢¢ (
=
¢¢) *
value
¢¢+ 0
;
¢¢0 1
}
££ 	
}
§§ 
}•• Ã
jC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\Messages\RelayMessageBind.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
internal 
static 
class 
RelayMessageBind *
{ 
private 
const 
byte "
k_ConnectionDataLength 1
=2 3
$num4 7
;7 8
private		 
const		 
byte		 
k_HMACLength		 '
=		( )
$num		* ,
;		, -
public

 
const

 
int

 
Length

 
=

  !
RelayMessageHeader

" 4
.

4 5
Length

5 ;
+

< =
$num

> ?
+

@ A
$num

B C
+

D E
$num

F G
+

H I"
k_ConnectionDataLength

J `
+

a b
k_HMACLength

c o
;

o p
internal 
static 
unsafe 
void #
Write$ )
() *
DataStreamWriter* :
writer; A
,A B
byteC G

acceptModeH R
,R S
ushortT Z
nonce[ `
,` a
byteb f
*f g
connectionDataPtrh y
,y z
byte{ 
*	 Ä
hmac
Å Ö
)
Ö Ü
{ 	
var 
header 
= 
RelayMessageHeader +
.+ ,
Create, 2
(2 3
RelayMessageType3 C
.C D
BindD H
)H I
;I J
writer 
. 

WriteBytes 
( 
( 
byte #
*# $
)$ %
&% &
header& ,
,, -
RelayMessageHeader. @
.@ A
LengthA G
)G H
;H I
writer 
. 
	WriteByte 
( 

acceptMode '
)' (
;( )
writer 
. 
WriteUShort 
( 
nonce $
)$ %
;% &
writer 
. 
	WriteByte 
( "
k_ConnectionDataLength 3
)3 4
;4 5
writer 
. 

WriteBytes 
( 
connectionDataPtr /
,/ 0"
k_ConnectionDataLength1 G
)G H
;H I
writer 
. 

WriteBytes 
( 
hmac "
," #
k_HMACLength$ 0
)0 1
;1 2
} 	
} 
} í:
\C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkConnection.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
	namespace 
Error 
{ 
public 
enum 
DisconnectReason $
:% &
byte' +
{ 	
Default 
, 
Timeout 
, !
MaxConnectionAttempts!! !
,!!! "
ClosedByRemote'' 
,'' 
Count** 
}++ 	
public// 
enum// 

StatusCode// 
{00 	
Success22 
=22* +
$num22- .
,22. /
NetworkIdMismatch55 
=55* +
-55, -
$num55- .
,55. /"
NetworkVersionMismatch88 "
=88* +
-88, -
$num88- .
,88. / 
NetworkStateMismatch;;  
=;;* +
-;;, -
$num;;- .
,;;. /!
NetworkPacketOverflow>> !
=>>* +
->>, -
$num>>- .
,>>. / 
NetworkSendQueueFullAA  
=AA* +
-AA, -
$numAA- .
,AA. / 
NetworkHeaderInvalidEE  
=EE* +
-EE, -
$numEE- .
,EE. /'
NetworkDriverParallelForErrHH '
=HH* +
-HH, -
$numHH- .
,HH. /$
NetworkSendHandleInvalidKK $
=KK* +
-KK, -
$numKK- .
,KK. /#
NetworkArgumentMismatchNN #
=NN* +
-NN, -
$numNN- .
,NN. /
}OO 	
}PP 
publicVV 

structVV 
NetworkConnectionVV #
:VV$ %

IEquatableVV& 0
<VV0 1
NetworkConnectionVV1 B
>VVB C
{WW 
internalYY 
intYY 
m_NetworkIdYY  
;YY  !
internal\\ 
int\\ 
m_NetworkVersion\\ %
;\\% &
public__ 
enum__ 
State__ 
{`` 	
Disconnectedbb 
,bb 

Connectingdd 
,dd 
	Connectedff 
}gg 	
publicoo 
intoo 

Disconnectoo 
(oo 
NetworkDriveroo +
driveroo, 2
)oo2 3
{pp 	
returnqq 
driverqq 
.qq 

Disconnectqq $
(qq$ %
thisqq% )
)qq) *
;qq* +
}rr 	
public~~ 
NetworkEvent~~ 
.~~ 
Type~~  
PopEvent~~! )
(~~) *
NetworkDriver~~* 7
driver~~8 >
,~~> ?
out~~@ C
DataStreamReader~~D T
stream~~U [
)~~[ \
{ 	
return
ÄÄ 
driver
ÄÄ 
.
ÄÄ #
PopEventForConnection
ÄÄ /
(
ÄÄ/ 0
this
ÄÄ0 4
,
ÄÄ4 5
out
ÄÄ6 9
stream
ÄÄ: @
)
ÄÄ@ A
;
ÄÄA B
}
ÅÅ 	
public
ëë 
NetworkEvent
ëë 
.
ëë 
Type
ëë  
PopEvent
ëë! )
(
ëë) *
NetworkDriver
ëë* 7
driver
ëë8 >
,
ëë> ?
out
ëë@ C
DataStreamReader
ëëD T
stream
ëëU [
,
ëë[ \
out
ëë] `
NetworkPipeline
ëëa p
pipeline
ëëq y
)
ëëy z
{
íí 	
return
ìì 
driver
ìì 
.
ìì #
PopEventForConnection
ìì /
(
ìì/ 0
this
ìì0 4
,
ìì4 5
out
ìì6 9
stream
ìì: @
,
ìì@ A
out
ììB E
pipeline
ììF N
)
ììN O
;
ììO P
}
îî 	
public
úú 
int
úú 
Close
úú 
(
úú 
NetworkDriver
úú &
driver
úú' -
)
úú- .
{
ùù 	
if
ûû 
(
ûû 
m_NetworkId
ûû 
>=
ûû 
$num
ûû  
)
ûû  !
return
üü 
driver
üü 
.
üü 

Disconnect
üü (
(
üü( )
this
üü) -
)
üü- .
;
üü. /
return
†† 
(
†† 
int
†† 
)
†† 
Error
†† 
.
†† 

StatusCode
†† (
.
††( )
NetworkIdMismatch
††) :
;
††: ;
}
°° 	
public
©© 
bool
©© 
	IsCreated
©© 
{
™™ 	
get
´´ 
{
´´ 
return
´´ 
m_NetworkVersion
´´ )
!=
´´* ,
$num
´´- .
;
´´. /
}
´´0 1
}
¨¨ 	
public
±± 
State
±± 
GetState
±± 
(
±± 
NetworkDriver
±± +
driver
±±, 2
)
±±2 3
{
≤≤ 	
return
≥≥ 
driver
≥≥ 
.
≥≥  
GetConnectionState
≥≥ ,
(
≥≥, -
this
≥≥- 1
)
≥≥1 2
;
≥≥2 3
}
¥¥ 	
public
∂∂ 
static
∂∂ 
bool
∂∂ 
operator
∂∂ #
==
∂∂# %
(
∂∂% &
NetworkConnection
∂∂& 7
lhs
∂∂8 ;
,
∂∂; <
NetworkConnection
∂∂= N
rhs
∂∂O R
)
∂∂R S
{
∑∑ 	
return
∏∏ 
lhs
∏∏ 
.
∏∏ 
m_NetworkId
∏∏ "
==
∏∏# %
rhs
∏∏& )
.
∏∏) *
m_NetworkId
∏∏* 5
&&
∏∏6 8
lhs
∏∏9 <
.
∏∏< =
m_NetworkVersion
∏∏= M
==
∏∏N P
rhs
∏∏Q T
.
∏∏T U
m_NetworkVersion
∏∏U e
;
∏∏e f
}
ππ 	
public
ªª 
static
ªª 
bool
ªª 
operator
ªª #
!=
ªª# %
(
ªª% &
NetworkConnection
ªª& 7
lhs
ªª8 ;
,
ªª; <
NetworkConnection
ªª= N
rhs
ªªO R
)
ªªR S
{
ºº 	
return
ΩΩ 
lhs
ΩΩ 
.
ΩΩ 
m_NetworkId
ΩΩ "
!=
ΩΩ# %
rhs
ΩΩ& )
.
ΩΩ) *
m_NetworkId
ΩΩ* 5
||
ΩΩ6 8
lhs
ΩΩ9 <
.
ΩΩ< =
m_NetworkVersion
ΩΩ= M
!=
ΩΩN P
rhs
ΩΩQ T
.
ΩΩT U
m_NetworkVersion
ΩΩU e
;
ΩΩe f
}
ææ 	
public
¿¿ 
override
¿¿ 
bool
¿¿ 
Equals
¿¿ #
(
¿¿# $
object
¿¿$ *
o
¿¿+ ,
)
¿¿, -
{
¡¡ 	
return
¬¬ 
this
¬¬ 
==
¬¬ 
(
¬¬ 
NetworkConnection
¬¬ -
)
¬¬- .
o
¬¬. /
;
¬¬/ 0
}
√√ 	
public
≈≈ 
bool
≈≈ 
Equals
≈≈ 
(
≈≈ 
NetworkConnection
≈≈ ,
o
≈≈- .
)
≈≈. /
{
∆∆ 	
return
«« 
this
«« 
==
«« 
o
«« 
;
«« 
}
»» 	
public
   
override
   
int
   
GetHashCode
   '
(
  ' (
)
  ( )
{
ÀÀ 	
return
ÃÃ 
(
ÃÃ 
m_NetworkId
ÃÃ 
<<
ÃÃ  "
$num
ÃÃ# $
)
ÃÃ$ %
^
ÃÃ& '
m_NetworkVersion
ÃÃ( 8
;
ÃÃ8 9
}
ÕÕ 	
public
–– 
int
–– 

InternalId
–– 
=>
––  
m_NetworkId
––! ,
;
––, -
}
—— 
}““ ∏
cC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\TransportFunctionPointer.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
public

 

struct

 $
TransportFunctionPointer

 *
<

* +
T

+ ,
>

, -
where

. 3
T

4 5
:

6 7
Delegate

8 @
{ 
public $
TransportFunctionPointer '
(' (
T( )
executeDelegate* 9
)9 :
{ 	
Ptr 
= 
BurstCompiler 
.  "
CompileFunctionPointer  6
(6 7
executeDelegate7 F
)F G
;G H
} 	
public $
TransportFunctionPointer '
(' (
FunctionPointer( 7
<7 8
T8 9
>9 :
Pointer; B
)B C
{ 	
Ptr 
= 
Pointer 
; 
} 	
public## 
static## $
TransportFunctionPointer## .
<##. /
T##/ 0
>##0 1
Burst##2 7
(##7 8
T##8 9#
burstCompilableDelegate##: Q
)##Q R
{$$ 	
return%% 
new%% $
TransportFunctionPointer%% /
<%%/ 0
T%%0 1
>%%1 2
(%%2 3
BurstCompiler%%3 @
.%%@ A"
CompileFunctionPointer%%A W
(%%W X#
burstCompilableDelegate%%X o
)%%o p
)%%p q
;%%q r
}&& 	
public-- 
static-- $
TransportFunctionPointer-- .
<--. /
T--/ 0
>--0 1
Managed--2 9
(--9 :
T--: ;
managedDelegate--< K
)--K L
{.. 	
GCHandle// 
.// 
Alloc// 
(// 
managedDelegate// *
)//* +
;//+ ,
return00 
new00 $
TransportFunctionPointer00 /
<00/ 0
T000 1
>001 2
(002 3
new003 6
FunctionPointer007 F
<00F G
T00G H
>00H I
(00I J
Marshal00J Q
.00Q R)
GetFunctionPointerForDelegate00R o
(00o p
managedDelegate00p 
)	00 Ä
)
00Ä Å
)
00Å Ç
;
00Ç É
}11 	
public66 
readonly66 
FunctionPointer66 '
<66' (
T66( )
>66) *
Ptr66+ .
;66. /
}77 
}88 ¨
jC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\Messages\RelayMessagePing.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
internal 
struct 
RelayMessagePing $
{ 
public 
const 
int 
Length 
=  !
RelayMessageHeader" 4
.4 5
Length5 ;
+< =
RelayAllocationId> O
.O P
k_LengthP X
+Y Z
$num[ \
;\ ]
public

 
RelayMessageHeader

 !
Header

" (
;

( )
public 
RelayAllocationId  
FromAllocationId! 1
;1 2
public 
ushort 
SequenceNumber $
;$ %
internal 
static 
RelayMessagePing (
Create) /
(/ 0
RelayAllocationId0 A
fromAllocationIdB R
,R S
ushortT Z

dataLength[ e
)e f
{ 	
return 
new 
RelayMessagePing '
{ 
Header 
= 
RelayMessageHeader +
.+ ,
Create, 2
(2 3
RelayMessageType3 C
.C D
PingD H
)H I
,I J
FromAllocationId  
=! "
fromAllocationId# 3
,3 4
SequenceNumber 
=  
$num! "
} 
; 
} 	
} 
} ‘æ
sC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Pipelines\ReliableSequencedPipelineStage.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
[ 
BurstCompile 
] 
public 

unsafe 
struct *
ReliableSequencedPipelineStage 7
:8 9!
INetworkPipelineStage: O
{ 
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =
ReceiveDelegate= L
>L M"
ReceiveFunctionPointerN d
=e f
newg j%
TransportFunctionPointer	k É
<
É Ñ"
NetworkPipelineStage
Ñ ò
.
ò ô
ReceiveDelegate
ô ®
>
® ©
(
© ™
Receive
™ ±
)
± ≤
;
≤ ≥
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =
SendDelegate= I
>I J
SendFunctionPointerK ^
=_ `
newa d$
TransportFunctionPointere }
<} ~!
NetworkPipelineStage	~ í
.
í ì
SendDelegate
ì ü
>
ü †
(
† °
Send
° •
)
• ¶
;
¶ ß
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =(
InitializeConnectionDelegate= Y
>Y Z/
#InitializeConnectionFunctionPointer[ ~
=	 Ä
new
Å Ñ&
TransportFunctionPointer
Ö ù
<
ù û"
NetworkPipelineStage
û ≤
.
≤ ≥*
InitializeConnectionDelegate
≥ œ
>
œ –
(
– —"
InitializeConnection
— Â
)
Â Ê
;
Ê Á
public  
NetworkPipelineStage #
StaticInitialize$ 4
(4 5
byte5 9
*9 : 
staticInstanceBuffer; O
,O P
intQ T&
staticInstanceBufferLengthU o
,o p
NetworkSettings	q Ä
settings
Å â
)
â ä
{ 	
ReliableUtility 
. 

Parameters &
param' ,
=- .
settings/ 7
.7 8&
GetReliableStageParameters8 R
(R S
)S T
;T U
UnsafeUtility 
. 
MemCpy  
(  ! 
staticInstanceBuffer! 5
,5 6
&7 8
param8 =
,= >
UnsafeUtility? L
.L M
SizeOfM S
<S T
ReliableUtilityT c
.c d

Parametersd n
>n o
(o p
)p q
)q r
;r s
return 
new  
NetworkPipelineStage +
(+ ,
Receive 
: "
ReceiveFunctionPointer /
,/ 0
Send 
: 
SendFunctionPointer )
,) * 
InitializeConnection $
:$ %/
#InitializeConnectionFunctionPointer& I
,I J
ReceiveCapacity 
:  
ReliableUtility! 0
.0 1!
ProcessCapacityNeeded1 F
(F G
paramG L
)L M
,M N
SendCapacity 
: 
ReliableUtility -
.- .!
ProcessCapacityNeeded. C
(C D
paramD I
)I J
,J K
HeaderCapacity 
: 
UnsafeUtility  -
.- .
SizeOf. 4
<4 5
ReliableUtility5 D
.D E
PacketHeaderE Q
>Q R
(R S
)S T
,T U
SharedStateCapacity   #
:  # $
ReliableUtility  % 4
.  4 5 
SharedCapacityNeeded  5 I
(  I J
param  J O
)  O P
)!! 
;!! 
}"" 	
public$$ 
int$$ 

StaticSize$$ 
=>$$  
UnsafeUtility$$! .
.$$. /
SizeOf$$/ 5
<$$5 6
ReliableUtility$$6 E
.$$E F

Parameters$$F P
>$$P Q
($$Q R
)$$R S
;$$S T
[&& 	
BurstCompile&&	 
(&& 
DisableDirectCall&& '
=&&( )
true&&* .
)&&. /
]&&/ 0
['' 	
MonoPInvokeCallback''	 
('' 
typeof'' #
(''# $ 
NetworkPipelineStage''$ 8
.''8 9
ReceiveDelegate''9 H
)''H I
)''I J
]''J K
private(( 
static(( 
void(( 
Receive(( #
(((# $
ref(($ '"
NetworkPipelineContext((( >
ctx((? B
,((B C
ref((D G
InboundRecvBuffer((H Y
inboundBuffer((Z g
,((g h
ref((i l!
NetworkPipelineStage	((m Å
.
((Å Ç
Requests
((Ç ä
requests
((ã ì
,
((ì î
int
((ï ò
systemHeaderSize
((ô ©
)
((© ™
{)) 	
requests++ 
=++  
NetworkPipelineStage++ +
.+++ ,
Requests++, 4
.++4 5

SendUpdate++5 ?
;++? @
bool,, 
needsResume,, 
=,, 
false,, $
;,,$ %
var.. 
header.. 
=.. 
default..  
(..  !
ReliableUtility..! 0
...0 1
PacketHeader..1 =
)..= >
;..> ?
var// 
slice// 
=// 
default// 
(//  
InboundRecvBuffer//  1
)//1 2
;//2 3
ReliableUtility00 
.00 
Context00 #
*00# $
reliable00% -
=00. /
(000 1
ReliableUtility001 @
.00@ A
Context00A H
*00H I
)00I J
ctx00J M
.00M N!
internalProcessBuffer00N c
;00c d
ReliableUtility11 
.11 
SharedContext11 )
*11) *
shared11+ 1
=112 3
(114 5
ReliableUtility115 D
.11D E
SharedContext11E R
*11R S
)11S T
ctx11T W
.11W X'
internalSharedProcessBuffer11X s
;11s t
shared22 
->22 
	errorCode22 
=22 
$num22  !
;22! "
if33 
(33 
reliable33 
->33 
Resume33  
==33! #
ReliableUtility33$ 3
.333 4
	NullEntry334 =
)33= >
{44 
if55 
(55 
inboundBuffer55 !
.55! "
bufferLength55" .
<=55/ 1
$num552 3
)553 4
{66 
inboundBuffer77 !
=77" #
slice77$ )
;77) *
return88 
;88 
}99 
var:: 
inboundArray::  
=::! "$
NativeArrayUnsafeUtility::# ;
.::; <,
 ConvertExistingDataToNativeArray::< \
<::\ ]
byte::] a
>::a b
(::b c
inboundBuffer::c p
.::p q
buffer::q w
,::w x
inboundBuffer	::y Ü
.
::Ü á
bufferLength
::á ì
,
::ì î
	Allocator
::ï û
.
::û ü
Invalid
::ü ¶
)
::¶ ß
;
::ß ®
var<< 
safetyHandle<<  
=<<! "
AtomicSafetyHandle<<# 5
.<<5 6
GetTempMemoryHandle<<6 I
(<<I J
)<<J K
;<<K L$
NativeArrayUnsafeUtility== (
.==( )!
SetAtomicSafetyHandle==) >
(==> ?
ref==? B
inboundArray==C O
,==O P
safetyHandle==Q ]
)==] ^
;==^ _
var?? 
reader?? 
=?? 
new??  
DataStreamReader??! 1
(??1 2
inboundArray??2 >
)??> ?
;??? @
reader@@ 
.@@ 
	ReadBytes@@  
(@@  !
(@@! "
byte@@" &
*@@& '
)@@' (
&@@( )
header@@) /
,@@/ 0
UnsafeUtility@@1 >
.@@> ?
SizeOf@@? E
<@@E F
ReliableUtility@@F U
.@@U V
PacketHeader@@V b
>@@b c
(@@c d
)@@d e
)@@e f
;@@f g
ifBB 
(BB 
headerBB 
.BB 
TypeBB 
==BB  "
(BB# $
ushortBB$ *
)BB* +
ReliableUtilityBB+ :
.BB: ;

PacketTypeBB; E
.BBE F
AckBBF I
)BBI J
{CC 
ReliableUtilityDD #
.DD# $
ReadAckPacketDD$ 1
(DD1 2
ctxDD2 5
,DD5 6
headerDD7 =
)DD= >
;DD> ?
inboundBufferEE !
=EE" #
defaultEE$ +
;EE+ ,
returnFF 
;FF 
}GG 
varII 
resultII 
=II 
ReliableUtilityII ,
.II, -
ReadII- 1
(II1 2
ctxII2 5
,II5 6
headerII7 =
)II= >
;II> ?
ifKK 
(KK 
resultKK 
>=KK 
$numKK 
)KK  
{LL 
varMM "
nextExpectedSequenceIdMM .
=MM/ 0
(MM1 2
ushortMM2 8
)MM8 9
(MM9 :
reliableMM: B
->MMB D
	DeliveredMMD M
+MMN O
$numMMP Q
)MMQ R
;MMR S
ifNN 
(NN 
resultNN 
==NN !"
nextExpectedSequenceIdNN" 8
)NN8 9
{OO 
reliablePP  
->PP  "
	DeliveredPP" +
=PP, -
resultPP. 4
;PP4 5
sliceQQ 
=QQ 
inboundBufferQQ  -
.QQ- .
SliceQQ. 3
(QQ3 4
UnsafeUtilityQQ4 A
.QQA B
SizeOfQQB H
<QQH I
ReliableUtilityQQI X
.QQX Y
PacketHeaderQQY e
>QQe f
(QQf g
)QQg h
)QQh i
;QQi j
ifSS 
(SS 
needsResumeSS '
=SS( )
SequenceHelpersSS* 9
.SS9 :
GreaterThan16SS: G
(SSG H
(SSH I
ushortSSI O
)SSO P
sharedSSP V
->SSV X
ReceivedPacketsSSX g
.SSg h
SequenceSSh p
,SSp q
(SSr s
ushortSSs y
)SSy z
result	SSz Ä
)
SSÄ Å
)
SSÅ Ç
{TT 
reliableUU $
->UU$ &
ResumeUU& ,
=UU- .
(UU/ 0
ushortUU0 6
)UU6 7
(UU7 8
resultUU8 >
+UU? @
$numUUA B
)UUB C
;UUC D
}VV 
}WW 
elseXX 
{YY 
ReliableUtilityZZ '
.ZZ' (
	SetPacketZZ( 1
(ZZ1 2
ctxZZ2 5
.ZZ5 6!
internalProcessBufferZZ6 K
,ZZK L
resultZZM S
,ZZS T
inboundBufferZZU b
.ZZb c
SliceZZc h
(ZZh i
UnsafeUtilityZZi v
.ZZv w
SizeOfZZw }
<ZZ} ~
ReliableUtility	ZZ~ ç
.
ZZç é
PacketHeader
ZZé ö
>
ZZö õ
(
ZZõ ú
)
ZZú ù
)
ZZù û
)
ZZû ü
;
ZZü †
slice[[ 
=[[ 
ReliableUtility[[  /
.[[/ 0
ResumeReceive[[0 =
([[= >
ctx[[> A
,[[A B
reliable[[C K
->[[K M
	Delivered[[M V
+[[W X
$num[[Y Z
,[[Z [
ref[[\ _
needsResume[[` k
)[[k l
;[[l m
}\\ 
}]] 
}^^ 
else__ 
{`` 
sliceaa 
=aa 
ReliableUtilityaa '
.aa' (
ResumeReceiveaa( 5
(aa5 6
ctxaa6 9
,aa9 :
reliableaa; C
->aaC E
ResumeaaE K
,aaK L
refaaM P
needsResumeaaQ \
)aa\ ]
;aa] ^
}bb 
ifcc 
(cc 
needsResumecc 
)cc 
requestsdd 
|=dd  
NetworkPipelineStagedd 0
.dd0 1
Requestsdd1 9
.dd9 :
Resumedd: @
;dd@ A
inboundBufferee 
=ee 
sliceee !
;ee! "
}ff 	
[hh 	
BurstCompilehh	 
(hh 
DisableDirectCallhh '
=hh( )
truehh* .
)hh. /
]hh/ 0
[ii 	
MonoPInvokeCallbackii	 
(ii 
typeofii #
(ii# $ 
NetworkPipelineStageii$ 8
.ii8 9
SendDelegateii9 E
)iiE F
)iiF G
]iiG H
privatejj 
staticjj 
intjj 
Sendjj 
(jj  
refjj  #"
NetworkPipelineContextjj$ :
ctxjj; >
,jj> ?
refjj@ C
InboundSendBufferjjD U
inboundBufferjjV c
,jjc d
refjje h 
NetworkPipelineStagejji }
.jj} ~
Requests	jj~ Ü
requests
jjá è
,
jjè ê
int
jjë î
systemHeaderSize
jjï •
)
jj• ¶
{kk 	
requestsmm 
=mm  
NetworkPipelineStagemm +
.mm+ ,
Requestsmm, 4
.mm4 5
Updatemm5 ;
;mm; <
boolnn 
needsResumenn 
=nn 
falsenn $
;nn$ %
varpp 
headerpp 
=pp 
newpp 
ReliableUtilitypp ,
.pp, -
PacketHeaderpp- 9
(pp9 :
)pp: ;
;pp; <
varqq 
reliableqq 
=qq 
(qq 
ReliableUtilityqq +
.qq+ ,
Contextqq, 3
*qq3 4
)qq4 5
ctxqq5 8
.qq8 9!
internalProcessBufferqq9 N
;qqN O
needsResumess 
=ss 
ReliableUtilityss )
.ss) *"
ReleaseOrResumePacketsss* @
(ss@ A
ctxssA D
)ssD E
;ssE F
iftt 
(tt 
needsResumett 
)tt 
requestsuu 
|=uu  
NetworkPipelineStageuu 0
.uu0 1
Requestsuu1 9
.uu9 :
Resumeuu: @
;uu@ A
ifww 
(ww 
inboundBufferww 
.ww 
bufferLengthww *
>ww+ ,
$numww- .
)ww. /
{xx 
reliableyy 
->yy 
LastSentTimeyy &
=yy' (
ctxyy) ,
.yy, -
	timestampyy- 6
;yy6 7
if{{ 
({{ 
ReliableUtility{{ #
.{{# $
Write{{$ )
({{) *
ctx{{* -
,{{- .
inboundBuffer{{/ <
,{{< =
ref{{> A
header{{B H
){{H I
<{{J K
$num{{L M
){{M N
{|| 
inboundBuffer~~ !
=~~" #
default~~$ +
;~~+ ,
requests 
|=  
NetworkPipelineStage  4
.4 5
Requests5 =
.= >
Error> C
;C D
return
ÄÄ 
(
ÄÄ 
int
ÄÄ 
)
ÄÄ  
Error
ÄÄ  %
.
ÄÄ% &

StatusCode
ÄÄ& 0
.
ÄÄ0 1"
NetworkSendQueueFull
ÄÄ1 E
;
ÄÄE F
}
ÅÅ 
ctx
ÇÇ 
.
ÇÇ 
header
ÇÇ 
.
ÇÇ 

WriteBytes
ÇÇ %
(
ÇÇ% &
(
ÇÇ& '
byte
ÇÇ' +
*
ÇÇ+ ,
)
ÇÇ, -
&
ÇÇ- .
header
ÇÇ. 4
,
ÇÇ4 5
UnsafeUtility
ÇÇ6 C
.
ÇÇC D
SizeOf
ÇÇD J
<
ÇÇJ K
ReliableUtility
ÇÇK Z
.
ÇÇZ [
PacketHeader
ÇÇ[ g
>
ÇÇg h
(
ÇÇh i
)
ÇÇi j
)
ÇÇj k
;
ÇÇk l
if
ÉÉ 
(
ÉÉ 
reliable
ÉÉ 
->
ÉÉ 
Resume
ÉÉ $
!=
ÉÉ% '
ReliableUtility
ÉÉ( 7
.
ÉÉ7 8
	NullEntry
ÉÉ8 A
)
ÉÉA B
requests
ÑÑ 
|=
ÑÑ "
NetworkPipelineStage
ÑÑ  4
.
ÑÑ4 5
Requests
ÑÑ5 =
.
ÑÑ= >
Resume
ÑÑ> D
;
ÑÑD E
reliable
ÜÜ 
->
ÜÜ 
PreviousTimestamp
ÜÜ +
=
ÜÜ, -
ctx
ÜÜ. 1
.
ÜÜ1 2
	timestamp
ÜÜ2 ;
;
ÜÜ; <
return
áá 
(
áá 
int
áá 
)
áá 
Error
áá !
.
áá! "

StatusCode
áá" ,
.
áá, -
Success
áá- 4
;
áá4 5
}
àà 
if
ää 
(
ää 
reliable
ää 
->
ää 
Resume
ää  
!=
ää! #
ReliableUtility
ää$ 3
.
ää3 4
	NullEntry
ää4 =
)
ää= >
{
ãã 
reliable
åå 
->
åå 
LastSentTime
åå &
=
åå' (
ctx
åå) ,
.
åå, -
	timestamp
åå- 6
;
åå6 7
inboundBuffer
çç 
=
çç 
ReliableUtility
çç  /
.
çç/ 0

ResumeSend
çç0 :
(
çç: ;
ctx
çç; >
,
çç> ?
out
çç@ C
header
ççD J
,
ççJ K
ref
ççL O
needsResume
ççP [
)
çç[ \
;
çç\ ]
if
éé 
(
éé 
needsResume
éé 
)
éé  
requests
èè 
|=
èè "
NetworkPipelineStage
èè  4
.
èè4 5
Requests
èè5 =
.
èè= >
Resume
èè> D
;
èèD E
ctx
êê 
.
êê 
header
êê 
.
êê 
Clear
êê  
(
êê  !
)
êê! "
;
êê" #
ctx
ëë 
.
ëë 
header
ëë 
.
ëë 

WriteBytes
ëë %
(
ëë% &
(
ëë& '
byte
ëë' +
*
ëë+ ,
)
ëë, -
&
ëë- .
header
ëë. 4
,
ëë4 5
UnsafeUtility
ëë6 C
.
ëëC D
SizeOf
ëëD J
<
ëëJ K
ReliableUtility
ëëK Z
.
ëëZ [
PacketHeader
ëë[ g
>
ëëg h
(
ëëh i
)
ëëi j
)
ëëj k
;
ëëk l
reliable
íí 
->
íí 
PreviousTimestamp
íí +
=
íí, -
ctx
íí. 1
.
íí1 2
	timestamp
íí2 ;
;
íí; <
return
ìì 
(
ìì 
int
ìì 
)
ìì 
Error
ìì !
.
ìì! "

StatusCode
ìì" ,
.
ìì, -
Success
ìì- 4
;
ìì4 5
}
îî 
if
ññ 
(
ññ 
ReliableUtility
ññ 
.
ññ  
ShouldSendAck
ññ  -
(
ññ- .
ctx
ññ. 1
)
ññ1 2
)
ññ2 3
{
óó 
reliable
òò 
->
òò 
LastSentTime
òò &
=
òò' (
ctx
òò) ,
.
òò, -
	timestamp
òò- 6
;
òò6 7
ReliableUtility
öö 
.
öö  
WriteAckPacket
öö  .
(
öö. /
ctx
öö/ 2
,
öö2 3
ref
öö4 7
header
öö8 >
)
öö> ?
;
öö? @
ctx
õõ 
.
õõ 
header
õõ 
.
õõ 

WriteBytes
õõ %
(
õõ% &
(
õõ& '
byte
õõ' +
*
õõ+ ,
)
õõ, -
&
õõ- .
header
õõ. 4
,
õõ4 5
UnsafeUtility
õõ6 C
.
õõC D
SizeOf
õõD J
<
õõJ K
ReliableUtility
õõK Z
.
õõZ [
PacketHeader
õõ[ g
>
õõg h
(
õõh i
)
õõi j
)
õõj k
;
õõk l
reliable
úú 
->
úú 
PreviousTimestamp
úú +
=
úú, -
ctx
úú. 1
.
úú1 2
	timestamp
úú2 ;
;
úú; <
inboundBuffer
üü 
.
üü %
bufferWithHeadersLength
üü 5
=
üü6 7
inboundBuffer
üü8 E
.
üüE F
headerPadding
üüF S
+
üüT U
$num
üüV W
;
üüW X
inboundBuffer
†† 
.
†† 
bufferWithHeaders
†† /
=
††0 1
(
††2 3
byte
††3 7
*
††7 8
)
††8 9
UnsafeUtility
††9 F
.
††F G
Malloc
††G M
(
††M N
inboundBuffer
††N [
.
††[ \%
bufferWithHeadersLength
††\ s
,
††s t
$num
††u v
,
††v w
	Allocator††x Å
.††Å Ç
Temp††Ç Ü
)††Ü á
;††á à
inboundBuffer
°° 
.
°° ,
SetBufferFrombufferWithHeaders
°° <
(
°°< =
)
°°= >
;
°°> ?
return
¢¢ 
(
¢¢ 
int
¢¢ 
)
¢¢ 
Error
¢¢ !
.
¢¢! "

StatusCode
¢¢" ,
.
¢¢, -
Success
¢¢- 4
;
¢¢4 5
}
££ 
reliable
§§ 
->
§§ 
PreviousTimestamp
§§ '
=
§§( )
ctx
§§* -
.
§§- .
	timestamp
§§. 7
;
§§7 8
return
•• 
(
•• 
int
•• 
)
•• 
Error
•• 
.
•• 

StatusCode
•• (
.
••( )
Success
••) 0
;
••0 1
}
¶¶ 	
[
®® 	
BurstCompile
®®	 
(
®® 
DisableDirectCall
®® '
=
®®( )
true
®®* .
)
®®. /
]
®®/ 0
[
©© 	!
MonoPInvokeCallback
©©	 
(
©© 
typeof
©© #
(
©©# $"
NetworkPipelineStage
©©$ 8
.
©©8 9*
InitializeConnectionDelegate
©©9 U
)
©©U V
)
©©V W
]
©©W X
private
™™ 
static
™™ 
void
™™ "
InitializeConnection
™™ 0
(
™™0 1
byte
™™1 5
*
™™5 6"
staticInstanceBuffer
™™7 K
,
™™K L
int
™™M P(
staticInstanceBufferLength
™™Q k
,
™™k l
byte
´´ 
*
´´ 
sendProcessBuffer
´´ #
,
´´# $
int
´´% (%
sendProcessBufferLength
´´) @
,
´´@ A
byte
´´B F
*
´´F G
recvProcessBuffer
´´H Y
,
´´Y Z
int
´´[ ^%
recvProcessBufferLength
´´_ v
,
´´v w
byte
¨¨ 
*
¨¨ !
sharedProcessBuffer
¨¨ %
,
¨¨% &
int
¨¨' *'
sharedProcessBufferLength
¨¨+ D
)
¨¨D E
{
≠≠ 	
ReliableUtility
ÆÆ 
.
ÆÆ 

Parameters
ÆÆ &
param
ÆÆ' ,
;
ÆÆ, -
UnsafeUtility
ØØ 
.
ØØ 
MemCpy
ØØ  
(
ØØ  !
&
ØØ! "
param
ØØ" '
,
ØØ' ("
staticInstanceBuffer
ØØ) =
,
ØØ= >
UnsafeUtility
ØØ? L
.
ØØL M
SizeOf
ØØM S
<
ØØS T
ReliableUtility
ØØT c
.
ØØc d

Parameters
ØØd n
>
ØØn o
(
ØØo p
)
ØØp q
)
ØØq r
;
ØØr s
if
∞∞ 
(
∞∞ '
sharedProcessBufferLength
∞∞ )
>=
∞∞* ,
ReliableUtility
∞∞- <
.
∞∞< ="
SharedCapacityNeeded
∞∞= Q
(
∞∞Q R
param
∞∞R W
)
∞∞W X
&&
∞∞Y [
(
±± %
sendProcessBufferLength
±± (
+
±±) *%
recvProcessBufferLength
±±+ B
)
±±B C
>=
±±D F
ReliableUtility
±±G V
.
±±V W#
ProcessCapacityNeeded
±±W l
(
±±l m
param
±±m r
)
±±r s
*
±±t u
$num
±±v w
)
±±w x
{
≤≤ 
ReliableUtility
≥≥ 
.
≥≥  
InitializeContext
≥≥  1
(
≥≥1 2!
sharedProcessBuffer
≥≥2 E
,
≥≥E F'
sharedProcessBufferLength
≥≥G `
,
≥≥` a
sendProcessBuffer
≥≥b s
,
≥≥s t&
sendProcessBufferLength≥≥u å
,≥≥å ç!
recvProcessBuffer≥≥é ü
,≥≥ü †'
recvProcessBufferLength≥≥° ∏
,≥≥∏ π
param≥≥∫ ø
)≥≥ø ¿
;≥≥¿ ¡
}
¥¥ 
}
µµ 	
}
∂∂ 
}∑∑ ‰ò
QC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\SHA256.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
internal 
static 
class 
SHA256  
{		 
internal

 
unsafe

 
struct

 
SHA256State

 *
{ 	
public 
fixed 
uint 
state #
[# $
$num$ %
]% &
;& '
public 
fixed 
byte 
buffer $
[$ %
$num% '
]' (
;( )
private 
ulong 
count 
;  
public 
static 
SHA256State %
Create& ,
(, -
)- .
{ 
var 
result 
= 
new  
SHA256State! ,
(, -
)- .
;. /
result 
. 
state 
[ 
$num 
] 
=  !
$num" ,
;, -
result 
. 
state 
[ 
$num 
] 
=  !
$num" ,
;, -
result 
. 
state 
[ 
$num 
] 
=  !
$num" ,
;, -
result 
. 
state 
[ 
$num 
] 
=  !
$num" ,
;, -
result 
. 
state 
[ 
$num 
] 
=  !
$num" ,
;, -
result 
. 
state 
[ 
$num 
] 
=  !
$num" ,
;, -
result 
. 
state 
[ 
$num 
] 
=  !
$num" ,
;, -
result 
. 
state 
[ 
$num 
] 
=  !
$num" ,
;, -
return 
result 
; 
} 
public## 
void## 
Update## 
(## 
byte## #
*### $
data##% )
,##) *
int##+ .
length##/ 5
)##5 6
{$$ 
var%% 
curBufferPos%%  
=%%! "
count%%# (
&%%) *
$num%%+ /
;%%/ 0
while&& 
(&& 
length&& 
>&& 
$num&&  !
)&&! "
{'' 
buffer(( 
[(( 
curBufferPos(( '
++((' )
](() *
=((+ ,
*((- .
data((. 2
++((2 4
;((4 5
count)) 
++)) 
;)) 
length** 
--** 
;** 
if++ 
(++ 
curBufferPos++ $
==++% '
$num++( *
)++* +
{,, 
curBufferPos-- $
=--% &
$num--' (
;--( )
WriteByteBlock.. &
(..& '
)..' (
;..( )
}// 
}00 
}11 
public77 
void77 
Final77 
(77 
byte77 "
*77" #
dest77$ (
)77( )
{88 
var99 
	lenInBits99 
=99 
count99  %
<<99& (
$num99) *
;99* +
var:: 
curBufferPos::  
=::! "
(::# $
uint::$ (
)::( )
(::) *
count::* /
&::0 1
$num::2 6
)::6 7
;::7 8
buffer<< 
[<< 
curBufferPos<< #
++<<# %
]<<% &
=<<' (
$num<<) -
;<<- .
while== 
(== 
curBufferPos== #
!===$ &
$num==' )
-==* +
$num==, -
)==- .
{>> 
curBufferPos??  
&=??! #
$num??$ (
;??( )
if@@ 
(@@ 
curBufferPos@@ $
==@@% '
$num@@( )
)@@) *
WriteByteBlockAA &
(AA& '
)AA' (
;AA( )
bufferCC 
[CC 
curBufferPosCC '
++CC' )
]CC) *
=CC+ ,
$numCC- .
;CC. /
}DD 
forFF 
(FF 
varFF 
iFF 
=FF 
$numFF 
;FF 
iFF  !
<FF" #
$numFF$ %
;FF% &
iFF' (
++FF( *
)FF* +
{GG 
bufferHH 
[HH 
curBufferPosHH '
++HH' )
]HH) *
=HH+ ,
(HH- .
byteHH. 2
)HH2 3
(HH3 4
	lenInBitsHH4 =
>>HH> @
$numHHA C
)HHC D
;HHD E
	lenInBitsII 
<<=II !
$numII" #
;II# $
}JJ 
WriteByteBlockLL 
(LL 
)LL  
;LL  !
forNN 
(NN 
varNN 
iNN 
=NN 
$numNN 
;NN 
iNN  !
<NN" #
$numNN$ %
;NN% &
iNN' (
++NN( *
)NN* +
{OO 
*PP 
destPP 
++PP 
=PP 
(PP 
bytePP #
)PP# $
(PP$ %
statePP% *
[PP* +
iPP+ ,
]PP, -
>>PP. 0
$numPP1 3
)PP3 4
;PP4 5
*QQ 
destQQ 
++QQ 
=QQ 
(QQ 
byteQQ #
)QQ# $
(QQ$ %
stateQQ% *
[QQ* +
iQQ+ ,
]QQ, -
>>QQ. 0
$numQQ1 3
)QQ3 4
;QQ4 5
*RR 
destRR 
++RR 
=RR 
(RR 
byteRR #
)RR# $
(RR$ %
stateRR% *
[RR* +
iRR+ ,
]RR, -
>>RR. 0
$numRR1 2
)RR2 3
;RR3 4
*SS 
destSS 
++SS 
=SS 
(SS 
byteSS #
)SS# $
stateSS$ )
[SS) *
iSS* +
]SS+ ,
;SS, -
}TT 
}UU 
privateWW 
voidWW 
WriteByteBlockWW '
(WW' (
)WW( )
{XX 
varYY 
data32YY 
=YY 

stackallocYY '
uintYY( ,
[YY, -
$numYY- /
]YY/ 0
;YY0 1
forZZ 
(ZZ 
varZZ 
iZZ 
=ZZ 
$numZZ 
;ZZ 
iZZ  !
<ZZ" #
$numZZ$ &
;ZZ& '
iZZ( )
++ZZ) +
)ZZ+ ,
data32[[ 
[[[ 
i[[ 
][[ 
=[[ 
(\\ 
(\\ 
uint\\ 
)\\ 
buffer\\ %
[\\% &
i\\& '
*\\( )
$num\\* +
]\\+ ,
<<\\- /
$num\\0 2
)\\2 3
+\\4 5
(]] 
(]] 
uint]] 
)]] 
buffer]] %
[]]% &
i]]& '
*]]( )
$num]]* +
+]], -
$num]]. /
]]]/ 0
<<]]1 3
$num]]4 6
)]]6 7
+]]8 9
(^^ 
(^^ 
uint^^ 
)^^ 
buffer^^ %
[^^% &
i^^& '
*^^( )
$num^^* +
+^^, -
$num^^. /
]^^/ 0
<<^^1 3
$num^^5 6
)^^6 7
+^^8 9
(__ 
uint__ 
)__ 
buffer__ $
[__$ %
i__% &
*__' (
$num__) *
+__+ ,
$num__- .
]__. /
;__/ 0
	Transform`` 
(`` 
data32``  
)``  !
;``! "
}aa 
staticcc 
readonlycc 
uintcc  
[cc  !
]cc! "
Kcc# $
=cc% &
{dd 
$numee 
,ee 
$numee &
,ee& '
$numee( 2
,ee2 3
$numee4 >
,ee> ?
$numff 
,ff 
$numff &
,ff& '
$numff( 2
,ff2 3
$numff4 >
,ff> ?
$numgg 
,gg 
$numgg &
,gg& '
$numgg( 2
,gg2 3
$numgg4 >
,gg> ?
$numhh 
,hh 
$numhh &
,hh& '
$numhh( 2
,hh2 3
$numhh4 >
,hh> ?
$numii 
,ii 
$numii &
,ii& '
$numii( 2
,ii2 3
$numii4 >
,ii> ?
$numjj 
,jj 
$numjj &
,jj& '
$numjj( 2
,jj2 3
$numjj4 >
,jj> ?
$numkk 
,kk 
$numkk &
,kk& '
$numkk( 2
,kk2 3
$numkk4 >
,kk> ?
$numll 
,ll 
$numll &
,ll& '
$numll( 2
,ll2 3
$numll4 >
,ll> ?
$nummm 
,mm 
$nummm &
,mm& '
$nummm( 2
,mm2 3
$nummm4 >
,mm> ?
$numnn 
,nn 
$numnn &
,nn& '
$numnn( 2
,nn2 3
$numnn4 >
,nn> ?
$numoo 
,oo 
$numoo &
,oo& '
$numoo( 2
,oo2 3
$numoo4 >
,oo> ?
$numpp 
,pp 
$numpp &
,pp& '
$numpp( 2
,pp2 3
$numpp4 >
,pp> ?
$numqq 
,qq 
$numqq &
,qq& '
$numqq( 2
,qq2 3
$numqq4 >
,qq> ?
$numrr 
,rr 
$numrr &
,rr& '
$numrr( 2
,rr2 3
$numrr4 >
,rr> ?
$numss 
,ss 
$numss &
,ss& '
$numss( 2
,ss2 3
$numss4 >
,ss> ?
$numtt 
,tt 
$numtt &
,tt& '
$numtt( 2
,tt2 3
$numtt4 >
}uu 
;uu 
privateww 
voidww 
	Transformww "
(ww" #
uintww# '
*ww' (
dataww) -
)ww- .
{xx 
varyy 
Wyy 
=yy 

stackallocyy "
uintyy# '
[yy' (
$numyy( *
]yy* +
;yy+ ,
varzz 
Tzz 
=zz 

stackalloczz "
uintzz# '
[zz' (
$numzz( )
]zz) *
;zz* +
for{{ 
({{ 
var{{ 
j{{ 
={{ 
$num{{ 
;{{ 
j{{  !
<{{" #
$num{{$ %
;{{% &
j{{' (
++{{( *
){{* +
T|| 
[|| 
j|| 
]|| 
=|| 
state||  
[||  !
j||! "
]||" #
;||# $
for~~ 
(~~ 
var~~ 
j~~ 
=~~ 
$num~~ 
;~~ 
j~~  !
<~~" #
$num~~$ &
;~~& '
j~~( )
+=~~* ,
$num~~- /
)~~/ 0
{ 
for
ÄÄ 
(
ÄÄ 
var
ÄÄ 
i
ÄÄ 
=
ÄÄ  
$num
ÄÄ! "
;
ÄÄ" #
i
ÄÄ$ %
<
ÄÄ& '
$num
ÄÄ( *
;
ÄÄ* +
i
ÄÄ, -
++
ÄÄ- /
)
ÄÄ/ 0
{
ÅÅ 
T
ÇÇ 
[
ÇÇ 
(
ÇÇ 
$num
ÇÇ 
-
ÇÇ 
i
ÇÇ  
)
ÇÇ  !
&
ÇÇ" #
$num
ÇÇ$ %
]
ÇÇ% &
+=
ÇÇ' )
S1
ÇÇ* ,
(
ÇÇ, -
T
ÇÇ- .
[
ÇÇ. /
(
ÇÇ/ 0
$num
ÇÇ0 1
-
ÇÇ2 3
i
ÇÇ4 5
)
ÇÇ5 6
&
ÇÇ7 8
$num
ÇÇ9 :
]
ÇÇ: ;
)
ÇÇ; <
+
ÇÇ= >
Ch
ÇÇ? A
(
ÇÇA B
T
ÇÇB C
[
ÇÇC D
(
ÇÇD E
$num
ÇÇE F
-
ÇÇG H
i
ÇÇI J
)
ÇÇJ K
&
ÇÇL M
$num
ÇÇN O
]
ÇÇO P
,
ÇÇP Q
T
ÇÇR S
[
ÇÇS T
(
ÇÇT U
$num
ÇÇU V
-
ÇÇW X
i
ÇÇY Z
)
ÇÇZ [
&
ÇÇ\ ]
$num
ÇÇ^ _
]
ÇÇ_ `
,
ÇÇ` a
T
ÇÇb c
[
ÇÇc d
(
ÇÇd e
$num
ÇÇe f
-
ÇÇg h
i
ÇÇi j
)
ÇÇj k
&
ÇÇl m
$num
ÇÇn o
]
ÇÇo p
)
ÇÇp q
+
ÇÇr s
K
ÇÇt u
[
ÇÇu v
i
ÇÇv w
+
ÇÇx y
j
ÇÇz {
]
ÇÇ{ |
+
ÇÇ} ~
(ÇÇ Ä
jÇÇÄ Å
!=ÇÇÇ Ñ
$numÇÇÖ Ü
?ÇÇá à
WÇÇâ ä
[ÇÇä ã
iÇÇã å
&ÇÇç é
$numÇÇè ë
]ÇÇë í
+=ÇÇì ï
s1ÇÇñ ò
(ÇÇò ô
WÇÇô ö
[ÇÇö õ
(ÇÇõ ú
iÇÇú ù
-ÇÇû ü
$numÇÇ† °
)ÇÇ° ¢
&ÇÇ£ §
$numÇÇ• ß
]ÇÇß ®
)ÇÇ® ©
+ÇÇ™ ´
WÇÇ¨ ≠
[ÇÇ≠ Æ
(ÇÇÆ Ø
iÇÇØ ∞
-ÇÇ± ≤
$numÇÇ≥ ¥
)ÇÇ¥ µ
&ÇÇ∂ ∑
$numÇÇ∏ ∫
]ÇÇ∫ ª
+ÇÇº Ω
s0ÇÇæ ¿
(ÇÇ¿ ¡
WÇÇ¡ ¬
[ÇÇ¬ √
(ÇÇ√ ƒ
iÇÇƒ ≈
-ÇÇ∆ «
$numÇÇ»  
)ÇÇ  À
&ÇÇÃ Õ
$numÇÇŒ –
]ÇÇ– —
)ÇÇ— “
:ÇÇ” ‘
WÇÇ’ ÷
[ÇÇ÷ ◊
iÇÇ◊ ÿ
]ÇÇÿ Ÿ
=ÇÇ⁄ €
dataÇÇ‹ ‡
[ÇÇ‡ ·
iÇÇ· ‚
]ÇÇ‚ „
)ÇÇ„ ‰
;ÇÇ‰ Â
T
ÉÉ 
[
ÉÉ 
(
ÉÉ 
$num
ÉÉ 
-
ÉÉ 
i
ÉÉ  
)
ÉÉ  !
&
ÉÉ" #
$num
ÉÉ$ %
]
ÉÉ% &
+=
ÉÉ' )
T
ÉÉ* +
[
ÉÉ+ ,
(
ÉÉ, -
$num
ÉÉ- .
-
ÉÉ/ 0
i
ÉÉ1 2
)
ÉÉ2 3
&
ÉÉ4 5
$num
ÉÉ6 7
]
ÉÉ7 8
;
ÉÉ8 9
T
ÑÑ 
[
ÑÑ 
(
ÑÑ 
$num
ÑÑ 
-
ÑÑ 
i
ÑÑ  
)
ÑÑ  !
&
ÑÑ" #
$num
ÑÑ$ %
]
ÑÑ% &
+=
ÑÑ' )
S0
ÑÑ* ,
(
ÑÑ, -
T
ÑÑ- .
[
ÑÑ. /
(
ÑÑ/ 0
$num
ÑÑ0 1
-
ÑÑ2 3
i
ÑÑ4 5
)
ÑÑ5 6
&
ÑÑ7 8
$num
ÑÑ9 :
]
ÑÑ: ;
)
ÑÑ; <
+
ÑÑ= >
Maj
ÑÑ? B
(
ÑÑB C
T
ÑÑC D
[
ÑÑD E
(
ÑÑE F
$num
ÑÑF G
-
ÑÑH I
i
ÑÑJ K
)
ÑÑK L
&
ÑÑM N
$num
ÑÑO P
]
ÑÑP Q
,
ÑÑQ R
T
ÑÑS T
[
ÑÑT U
(
ÑÑU V
$num
ÑÑV W
-
ÑÑX Y
i
ÑÑZ [
)
ÑÑ[ \
&
ÑÑ] ^
$num
ÑÑ_ `
]
ÑÑ` a
,
ÑÑa b
T
ÑÑc d
[
ÑÑd e
(
ÑÑe f
$num
ÑÑf g
-
ÑÑh i
i
ÑÑj k
)
ÑÑk l
&
ÑÑm n
$num
ÑÑo p
]
ÑÑp q
)
ÑÑq r
;
ÑÑr s
}
ÖÖ 
}
ÜÜ 
for
àà 
(
àà 
var
àà 
j
àà 
=
àà 
$num
àà 
;
àà 
j
àà  !
<
àà" #
$num
àà$ %
;
àà% &
j
àà' (
++
àà( *
)
àà* +
state
ââ 
[
ââ 
j
ââ 
]
ââ 
+=
ââ 
T
ââ  !
[
ââ! "
j
ââ" #
]
ââ# $
;
ââ$ %
static
ãã 
uint
ãã 
ROTR32
ãã "
(
ãã" #
uint
ãã# '
x
ãã( )
,
ãã) *
byte
ãã+ /
n
ãã0 1
)
ãã1 2
=>
ãã3 5
(
ãã6 7
x
ãã7 8
<<
ãã9 ;
(
ãã< =
$num
ãã= ?
-
ãã@ A
n
ããB C
)
ããC D
)
ããD E
|
ããF G
(
ããH I
x
ããI J
>>
ããK M
n
ããN O
)
ããO P
;
ããP Q
static
åå 
uint
åå 
S0
åå 
(
åå 
uint
åå #
x
åå$ %
)
åå% &
=>
åå' )
ROTR32
åå* 0
(
åå0 1
x
åå1 2
,
åå2 3
$num
åå4 5
)
åå5 6
^
åå7 8
ROTR32
åå9 ?
(
åå? @
x
åå@ A
,
ååA B
$num
ååC E
)
ååE F
^
ååG H
ROTR32
ååI O
(
ååO P
x
ååP Q
,
ååQ R
$num
ååS U
)
ååU V
;
ååV W
static
çç 
uint
çç 
S1
çç 
(
çç 
uint
çç #
x
çç$ %
)
çç% &
=>
çç' )
ROTR32
çç* 0
(
çç0 1
x
çç1 2
,
çç2 3
$num
çç4 5
)
çç5 6
^
çç7 8
ROTR32
çç9 ?
(
çç? @
x
çç@ A
,
ççA B
$num
ççC E
)
ççE F
^
ççG H
ROTR32
ççI O
(
ççO P
x
ççP Q
,
ççQ R
$num
ççS U
)
ççU V
;
ççV W
static
éé 
uint
éé 
s0
éé 
(
éé 
uint
éé #
x
éé$ %
)
éé% &
=>
éé' )
ROTR32
éé* 0
(
éé0 1
x
éé1 2
,
éé2 3
$num
éé4 5
)
éé5 6
^
éé7 8
ROTR32
éé9 ?
(
éé? @
x
éé@ A
,
ééA B
$num
ééC E
)
ééE F
^
ééG H
(
ééI J
x
ééJ K
>>
ééL N
$num
ééO P
)
ééP Q
;
ééQ R
static
èè 
uint
èè 
s1
èè 
(
èè 
uint
èè #
x
èè$ %
)
èè% &
=>
èè' )
ROTR32
èè* 0
(
èè0 1
x
èè1 2
,
èè2 3
$num
èè4 6
)
èè6 7
^
èè8 9
ROTR32
èè: @
(
èè@ A
x
èèA B
,
èèB C
$num
èèD F
)
èèF G
^
èèH I
(
èèJ K
x
èèK L
>>
èèM O
$num
èèP R
)
èèR S
;
èèS T
static
êê 
uint
êê 
Ch
êê 
(
êê 
uint
êê #
x
êê$ %
,
êê% &
uint
êê' +
y
êê, -
,
êê- .
uint
êê/ 3
z
êê4 5
)
êê5 6
=>
êê7 9
z
êê: ;
^
êê< =
(
êê> ?
x
êê? @
&
êêA B
(
êêC D
y
êêD E
^
êêF G
z
êêH I
)
êêI J
)
êêJ K
;
êêK L
static
ëë 
uint
ëë 
Maj
ëë 
(
ëë  
uint
ëë  $
x
ëë% &
,
ëë& '
uint
ëë( ,
y
ëë- .
,
ëë. /
uint
ëë0 4
z
ëë5 6
)
ëë6 7
=>
ëë8 :
(
ëë; <
x
ëë< =
&
ëë> ?
y
ëë@ A
)
ëëA B
|
ëëC D
(
ëëE F
z
ëëF G
&
ëëH I
(
ëëJ K
x
ëëK L
|
ëëM N
y
ëëO P
)
ëëP Q
)
ëëQ R
;
ëëR S
}
íí 
}
ìì 	
}
îî 
}ïï ⁄
lC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\Messages\RelayMessageHeader.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
internal 
struct 
RelayMessageHeader &
{ 
public 
const 
int 
Length 
=  !
$num" #
;# $
public

 
ushort

 
	Signature

 
;

  
public 
byte 
Version 
; 
public 
RelayMessageType 
Type  $
;$ %
public 
bool 
IsValid 
( 
) 
{ 	
return 
	Signature 
== 
$num  &
&&' )
Version* 1
==2 4
$num5 6
;6 7
} 	
internal 
static 
RelayMessageHeader *
Create+ 1
(1 2
RelayMessageType2 B
typeC G
)G H
{ 	
return 
new 
RelayMessageHeader )
{ 
	Signature 
= 
$num "
," #
Version 
= 
$num 
, 
Type 
= 
type 
, 
} 
; 
} 	
} 
internal 
enum 
RelayMessageType "
:# $
byte% )
{ 
Bind   
=   
$num   
,   
BindReceived!! 
=!! 
$num!! 
,!! 
Ping"" 
="" 
$num"" 
,"" 
ConnectRequest## 
=## 
$num## 
,## 
Accepted$$ 
=$$ 
$num$$ 
,$$ 

Disconnect%% 
=%% 
$num%% 
,%% 
Relay&& 
=&& 
$num&& 
,&& 
Error'' 
='' 
$num'' 
,'' 
}(( 
})) å¯	
XC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkDriver.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
public 

unsafe 
struct 
QueuedSendMessage *
{ 
public 
fixed 
byte 
Data 
[ %
NetworkParameterConstants 8
.8 9
MTU9 <
]< =
;= >
public $
NetworkInterfaceEndPoint '
Dest( ,
;, -
public 
int 

DataLength 
; 
} 
public   

struct   
NetworkDriver   
:    !
IDisposable  " -
{!! 
public%% 

Concurrent%% 
ToConcurrent%% &
(%%& '
)%%' (
{&& 	
return'' 
new'' 

Concurrent'' !
{(( "
m_NetworkSendInterface)) &
=))' ("
m_NetworkSendInterface))) ?
,))? @&
m_NetworkProtocolInterface** *
=**+ ,&
m_NetworkProtocolInterface**- G
,**G H
m_EventQueue++ 
=++ 
m_EventQueue++ +
.+++ ,
ToConcurrent++, 8
(++8 9
)++9 :
,++: ;
m_ConnectionList,,  
=,,! "
m_ConnectionList,,# 3
,,,3 4
m_DataStream-- 
=-- 
m_DataStream-- +
,--+ ,
m_DisconnectReasons.. #
=..$ %
m_DisconnectReasons..& 9
,..9 :
m_PipelineProcessor// #
=//$ %
m_PipelineProcessor//& 9
.//9 :
ToConcurrent//: F
(//F G
)//G H
,//H I 
m_DefaultHeaderFlags00 $
=00% & 
m_DefaultHeaderFlags00' ;
,00; <)
m_ConcurrentParallelSendQueue11 -
=11. /
m_ParallelSendQueue110 C
.11C D
AsParallelWriter11D T
(11T U
)11U V
,11V W
m_ThreadIndex33 
=33 
$num33  !
,33! "
m_PendingBeginSend44 "
=44# $
m_PendingBeginSend44% 7
}66 
;66 
}77 	
private99 

Concurrent99  
ToConcurrentSendOnly99 /
(99/ 0
)990 1
{:: 	
return;; 
new;; 

Concurrent;; !
{<< "
m_NetworkSendInterface== &
===' ("
m_NetworkSendInterface==) ?
,==? @&
m_NetworkProtocolInterface>> *
=>>+ ,&
m_NetworkProtocolInterface>>- G
,>>G H
m_EventQueue?? 
=?? 
default?? &
,??& '
m_ConnectionList@@  
=@@! "
m_ConnectionList@@# 3
,@@3 4
m_DataStreamAA 
=AA 
m_DataStreamAA +
,AA+ ,
m_DisconnectReasonsBB #
=BB$ %
m_DisconnectReasonsBB& 9
,BB9 :
m_PipelineProcessorCC #
=CC$ %
m_PipelineProcessorCC& 9
.CC9 :
ToConcurrentCC: F
(CCF G
)CCG H
,CCH I 
m_DefaultHeaderFlagsDD $
=DD% & 
m_DefaultHeaderFlagsDD' ;
,DD; <)
m_ConcurrentParallelSendQueueEE -
=EE. /
m_ParallelSendQueueEE0 C
.EEC D
AsParallelWriterEED T
(EET U
)EEU V
,EEV W
m_ThreadIndexGG 
=GG 
$numGG  !
,GG! "
m_PendingBeginSendHH "
=HH# $
m_PendingBeginSendHH% 7
}JJ 
;JJ 
}KK 	
publicPP 
structPP 

ConcurrentPP  
{QQ 	
publicXX 
NetworkEventXX 
.XX  
TypeXX  $!
PopEventForConnectionXX% :
(XX: ;
NetworkConnectionXX; L
connectionIdXXM Y
,XXY Z
outXX[ ^
DataStreamReaderXX_ o
readerXXp v
)XXv w
{YY 
returnZZ !
PopEventForConnectionZZ ,
(ZZ, -
connectionIdZZ- 9
,ZZ9 :
outZZ; >
readerZZ? E
,ZZE F
outZZG J
varZZK N
_ZZO P
)ZZP Q
;ZZQ R
}[[ 
publicdd 
NetworkEventdd 
.dd  
Typedd  $!
PopEventForConnectiondd% :
(dd: ;
NetworkConnectiondd; L
connectionIdddM Y
,ddY Z
outdd[ ^
DataStreamReaderdd_ o
readerddp v
,ddv w
outddx {
NetworkPipeline	dd| ã
pipeline
ddå î
)
ddî ï
{ee 
pipelineff 
=ff 
defaultff "
;ff" #
readerhh 
=hh 
defaulthh  
;hh  !
ifii 
(ii 
connectionIdii  
.ii  !
m_NetworkIdii! ,
<ii- .
$numii/ 0
||ii1 3
connectionIdii4 @
.ii@ A
m_NetworkIdiiA L
>=iiM O
m_ConnectionListiiP `
.ii` a
Lengthiia g
||iih j
m_ConnectionListjj $
[jj$ %
connectionIdjj% 1
.jj1 2
m_NetworkIdjj2 =
]jj= >
.jj> ?
Versionjj? F
!=jjG I
connectionIdjjJ V
.jjV W
m_NetworkVersionjjW g
)jjg h
returnkk 
(kk 
intkk 
)kk  
NetworkEventkk  ,
.kk, -
Typekk- 1
.kk1 2
Emptykk2 7
;kk7 8
varmm 
typemm 
=mm 
m_EventQueuemm '
.mm' (!
PopEventForConnectionmm( =
(mm= >
connectionIdmm> J
.mmJ K
m_NetworkIdmmK V
,mmV W
outmmX [
varmm\ _
offsetmm` f
,mmf g
outmmh k
varmml o
sizemmp t
,mmt u
outmmv y
varmmz }

pipelineId	mm~ à
)
mmà â
;
mmâ ä
pipelinenn 
=nn 
newnn 
NetworkPipelinenn .
{nn/ 0
Idnn1 3
=nn4 5

pipelineIdnn6 @
}nnA B
;nnB C
ifpp 
(pp 
typepp 
==pp 
NetworkEventpp (
.pp( )
Typepp) -
.pp- .

Disconnectpp. 8
&&pp9 ;
offsetpp< B
<ppC D
$numppE F
)ppF G
readerqq 
=qq 
newqq  
DataStreamReaderqq! 1
(qq1 2
m_DisconnectReasonsqq2 E
.qqE F
GetSubArrayqqF Q
(qqQ R
mathqqR V
.qqV W
absqqW Z
(qqZ [
offsetqq[ a
)qqa b
,qqb c
$numqqd e
)qqe f
)qqf g
;qqg h
elserr 
ifrr 
(rr 
sizerr 
>rr 
$numrr  !
)rr! "
readerss 
=ss 
newss  
DataStreamReaderss! 1
(ss1 2
(ss2 3
(ss3 4
NativeArrayss4 ?
<ss? @
bytess@ D
>ssD E
)ssE F
m_DataStreamssF R
)ssR S
.ssS T
GetSubArrayssT _
(ss_ `
offsetss` f
,ssf g
sizessh l
)ssl m
)ssm n
;ssn o
returnuu 
typeuu 
;uu 
}vv 
public}} 
int}} 
MaxHeaderSize}} $
(}}$ %
NetworkPipeline}}% 4
pipe}}5 9
)}}9 :
{~~ 
var 

headerSize 
=  &
m_NetworkProtocolInterface! ;
.; <
PaddingSize< G
;G H
if
ÄÄ 
(
ÄÄ 
pipe
ÄÄ 
.
ÄÄ 
Id
ÄÄ 
>
ÄÄ 
$num
ÄÄ 
)
ÄÄ  
{
ÅÅ 

headerSize
ÉÉ 
+=
ÉÉ !!
m_PipelineProcessor
ÉÉ" 5
.
ÉÉ5 6 
SendHeaderCapacity
ÉÉ6 H
(
ÉÉH I
pipe
ÉÉI M
)
ÉÉM N
+
ÉÉO P
$num
ÉÉQ R
;
ÉÉR S
}
ÑÑ 
return
ÜÜ 

headerSize
ÜÜ !
;
ÜÜ! "
}
áá 
internal
ââ 
int
ââ #
MaxProtocolHeaderSize
ââ .
(
ââ. /
)
ââ/ 0
{
ää 
return
ãã (
m_NetworkProtocolInterface
ãã 1
.
ãã1 2
PaddingSize
ãã2 =
;
ãã= >
}
åå 
struct
éé 
PendingSend
éé 
{
èè 
public
êê 
NetworkPipeline
êê &
Pipeline
êê' /
;
êê/ 0
public
ëë 
NetworkConnection
ëë (

Connection
ëë) 3
;
ëë3 4
public
íí (
NetworkInterfaceSendHandle
íí 1

SendHandle
íí2 <
;
íí< =
public
ìì 
int
ìì 

headerSize
ìì %
;
ìì% &
}
îî 
public
ûû 
unsafe
ûû 
int
ûû 
	BeginSend
ûû '
(
ûû' (
NetworkConnection
ûû( 9
id
ûû: <
,
ûû< =
out
ûû> A
DataStreamWriter
ûûB R
writer
ûûS Y
,
ûûY Z
int
ûû[ ^!
requiredPayloadSize
ûû_ r
=
ûûs t
$num
ûûu v
)
ûûv w
{
üü 
return
†† 
	BeginSend
††  
(
††  !
NetworkPipeline
††! 0
.
††0 1
Null
††1 5
,
††5 6
id
††7 9
,
††9 :
out
††; >
writer
††? E
,
††E F!
requiredPayloadSize
††G Z
)
††Z [
;
††[ \
}
°° 
public
¨¨ 
unsafe
¨¨ 
int
¨¨ 
	BeginSend
¨¨ '
(
¨¨' (
NetworkPipeline
¨¨( 7
pipe
¨¨8 <
,
¨¨< =
NetworkConnection
¨¨> O
id
¨¨P R
,
¨¨R S
out
≠≠ 
DataStreamWriter
≠≠ $
writer
≠≠% +
,
≠≠+ ,
int
≠≠- 0!
requiredPayloadSize
≠≠1 D
=
≠≠E F
$num
≠≠G H
)
≠≠H I
{
ÆÆ 
writer
ØØ 
=
ØØ 
default
ØØ  
;
ØØ  !
if
±± 
(
±± 
id
±± 
.
±± 
m_NetworkId
±± "
<
±±# $
$num
±±% &
||
±±' )
id
±±* ,
.
±±, -
m_NetworkId
±±- 8
>=
±±9 ;
m_ConnectionList
±±< L
.
±±L M
Length
±±M S
)
±±S T
return
≤≤ 
(
≤≤ 
int
≤≤ 
)
≤≤  
Error
≤≤  %
.
≤≤% &

StatusCode
≤≤& 0
.
≤≤0 1
NetworkIdMismatch
≤≤1 B
;
≤≤B C
var
¥¥ 

connection
¥¥ 
=
¥¥  
m_ConnectionList
¥¥! 1
[
¥¥1 2
id
¥¥2 4
.
¥¥4 5
m_NetworkId
¥¥5 @
]
¥¥@ A
;
¥¥A B
if
µµ 
(
µµ 

connection
µµ 
.
µµ 
Version
µµ &
!=
µµ' )
id
µµ* ,
.
µµ, -
m_NetworkVersion
µµ- =
)
µµ= >
return
∂∂ 
(
∂∂ 
int
∂∂ 
)
∂∂  
Error
∂∂  %
.
∂∂% &

StatusCode
∂∂& 0
.
∂∂0 1$
NetworkVersionMismatch
∂∂1 G
;
∂∂G H
if
∏∏ 
(
∏∏ 

connection
∏∏ 
.
∏∏ 
State
∏∏ $
!=
∏∏% '
NetworkConnection
∏∏( 9
.
∏∏9 :
State
∏∏: ?
.
∏∏? @
	Connected
∏∏@ I
)
∏∏I J
return
ππ 
(
ππ 
int
ππ 
)
ππ  
Error
ππ  %
.
ππ% &

StatusCode
ππ& 0
.
ππ0 1"
NetworkStateMismatch
ππ1 E
;
ππE F
var
ªª 
pipelineHeader
ªª "
=
ªª# $
(
ªª% &
pipe
ªª& *
.
ªª* +
Id
ªª+ -
>
ªª. /
$num
ªª0 1
)
ªª1 2
?
ªª3 4!
m_PipelineProcessor
ªª5 H
.
ªªH I 
SendHeaderCapacity
ªªI [
(
ªª[ \
pipe
ªª\ `
)
ªª` a
+
ªªb c
$num
ªªd e
:
ªªf g
$num
ªªh i
;
ªªi j
var
ºº %
pipelinePayloadCapacity
ºº +
=
ºº, -!
m_PipelineProcessor
ºº. A
.
ººA B
PayloadCapacity
ººB Q
(
ººQ R
pipe
ººR V
)
ººV W
;
ººW X
var
ææ 
protocolOverhead
ææ $
=
ææ% &(
m_NetworkProtocolInterface
ææ' A
.
ææA B#
ComputePacketOverhead
ææB W
.
ææW X
Ptr
ææX [
.
ææ[ \
Invoke
ææ\ b
(
ææb c
ref
ææc f

connection
ææg q
,
ææq r
out
ææs v
var
ææw z
payloadOffsetææ{ à
)ææà â
;ææâ ä
var
≈≈ 
payloadCapacity
≈≈ #
=
≈≈$ %%
pipelinePayloadCapacity
≈≈& =
==
≈≈> @
$num
≈≈A B
?
∆∆ '
NetworkParameterConstants
∆∆ /
.
∆∆/ 0
MTU
∆∆0 3
-
∆∆4 5
protocolOverhead
∆∆6 F
-
∆∆G H
pipelineHeader
∆∆I W
:
«« %
pipelinePayloadCapacity
«« -
;
««- .
var
ÃÃ 
totalCapacity
ÃÃ !
=
ÃÃ" #%
pipelinePayloadCapacity
ÃÃ$ ;
==
ÃÃ< >
$num
ÃÃ? @
?
ÕÕ '
NetworkParameterConstants
ÕÕ /
.
ÕÕ/ 0
MTU
ÕÕ0 3
:
ŒŒ %
pipelinePayloadCapacity
ŒŒ -
+
ŒŒ. /
protocolOverhead
ŒŒ0 @
+
ŒŒA B
pipelineHeader
ŒŒC Q
;
ŒŒQ R
if
—— 
(
—— 
payloadCapacity
—— #
<
——$ %!
requiredPayloadSize
——& 9
)
——9 :
{
““ 
return
”” 
(
”” 
int
”” 
)
””  
Error
””  %
.
””% &

StatusCode
””& 0
.
””0 1#
NetworkPacketOverflow
””1 F
;
””F G
}
‘‘ 
if
◊◊ 
(
◊◊ !
requiredPayloadSize
◊◊ '
>
◊◊( )
$num
◊◊* +
&&
◊◊, .
payloadCapacity
◊◊/ >
>
◊◊? @!
requiredPayloadSize
◊◊A T
)
◊◊T U
{
ÿÿ 
var
ŸŸ 
extraCapacity
ŸŸ %
=
ŸŸ& '
payloadCapacity
ŸŸ( 7
-
ŸŸ8 9!
requiredPayloadSize
ŸŸ: M
;
ŸŸM N
payloadCapacity
⁄⁄ #
-=
⁄⁄$ &
extraCapacity
⁄⁄' 4
;
⁄⁄4 5
totalCapacity
€€ !
-=
€€" $
extraCapacity
€€% 2
;
€€2 3
}
‹‹ 
var
ﬁﬁ 
result
ﬁﬁ 
=
ﬁﬁ 
$num
ﬁﬁ 
;
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
(
ﬂﬂ 
result
ﬂﬂ 
=
ﬂﬂ $
m_NetworkSendInterface
ﬂﬂ 4
.
ﬂﬂ4 5
BeginSendMessage
ﬂﬂ5 E
.
ﬂﬂE F
Ptr
ﬂﬂF I
.
ﬂﬂI J
Invoke
ﬂﬂJ P
(
ﬂﬂP Q
out
ﬂﬂQ T
var
ﬂﬂU X

sendHandle
ﬂﬂY c
,
ﬂﬂc d$
m_NetworkSendInterface
ﬂﬂe {
.
ﬂﬂ{ |
UserDataﬂﬂ| Ñ
,ﬂﬂÑ Ö
totalCapacityﬂﬂÜ ì
)ﬂﬂì î
)ﬂﬂî ï
!=ﬂﬂñ ò
$numﬂﬂô ö
)ﬂﬂö õ
{
‡‡ 

sendHandle
·· 
.
·· 
data
·· #
=
··$ %
(
··& '
IntPtr
··' -
)
··- .
UnsafeUtility
··. ;
.
··; <
Malloc
··< B
(
··B C
totalCapacity
··C P
,
··P Q
$num
··R S
,
··S T
	Allocator
··U ^
.
··^ _
Temp
··_ c
)
··c d
;
··d e

sendHandle
‚‚ 
.
‚‚ 
capacity
‚‚ '
=
‚‚( )
totalCapacity
‚‚* 7
;
‚‚7 8

sendHandle
„„ 
.
„„ 
id
„„ !
=
„„" #
$num
„„$ %
;
„„% &

sendHandle
‰‰ 
.
‰‰ 
size
‰‰ #
=
‰‰$ %
$num
‰‰& '
;
‰‰' (

sendHandle
ÂÂ 
.
ÂÂ 
flags
ÂÂ $
=
ÂÂ% &
SendHandleFlags
ÂÂ' 6
.
ÂÂ6 7
AllocatedByDriver
ÂÂ7 H
;
ÂÂH I
}
ÊÊ 
if
ËË 
(
ËË 

sendHandle
ËË 
.
ËË 
capacity
ËË '
<
ËË( )
totalCapacity
ËË* 7
)
ËË7 8
return
ÈÈ 
(
ÈÈ 
int
ÈÈ 
)
ÈÈ  
Error
ÈÈ  %
.
ÈÈ% &

StatusCode
ÈÈ& 0
.
ÈÈ0 1#
NetworkPacketOverflow
ÈÈ1 F
;
ÈÈF G
var
ÎÎ 
slice
ÎÎ 
=
ÎÎ &
NativeArrayUnsafeUtility
ÎÎ 4
.
ÎÎ4 5.
 ConvertExistingDataToNativeArray
ÎÎ5 U
<
ÎÎU V
byte
ÎÎV Z
>
ÎÎZ [
(
ÎÎ[ \
(
ÎÎ\ ]
byte
ÎÎ] a
*
ÎÎa b
)
ÎÎb c

sendHandle
ÎÎc m
.
ÎÎm n
data
ÎÎn r
+
ÎÎs t
payloadOffsetÎÎu Ç
+ÎÎÉ Ñ
pipelineHeaderÎÎÖ ì
,ÎÎì î
payloadCapacityÎÎï §
,ÎÎ§ •
	AllocatorÎÎ¶ Ø
.ÎÎØ ∞
InvalidÎÎ∞ ∑
)ÎÎ∑ ∏
;ÎÎ∏ π
var
ÓÓ 
safety
ÓÓ 
=
ÓÓ  
AtomicSafetyHandle
ÓÓ /
.
ÓÓ/ 0!
GetTempMemoryHandle
ÓÓ0 C
(
ÓÓC D
)
ÓÓD E
;
ÓÓE F&
NativeArrayUnsafeUtility
ÔÔ (
.
ÔÔ( )#
SetAtomicSafetyHandle
ÔÔ) >
(
ÔÔ> ?
ref
ÔÔ? B
slice
ÔÔC H
,
ÔÔH I
safety
ÔÔJ P
)
ÔÔP Q
;
ÔÔQ R
writer
ÒÒ 
=
ÒÒ 
new
ÒÒ 
DataStreamWriter
ÒÒ -
(
ÒÒ- .
slice
ÒÒ. 3
)
ÒÒ3 4
;
ÒÒ4 5
writer
ÚÚ 
.
ÚÚ 
m_SendHandleData
ÚÚ '
=
ÚÚ( )
(
ÚÚ* +
IntPtr
ÚÚ+ 1
)
ÚÚ1 2
UnsafeUtility
ÚÚ2 ?
.
ÚÚ? @
Malloc
ÚÚ@ F
(
ÚÚF G
UnsafeUtility
ÚÚG T
.
ÚÚT U
SizeOf
ÚÚU [
<
ÚÚ[ \
PendingSend
ÚÚ\ g
>
ÚÚg h
(
ÚÚh i
)
ÚÚi j
,
ÚÚj k
UnsafeUtility
ÚÚl y
.
ÚÚy z
AlignOfÚÚz Å
<ÚÚÅ Ç
PendingSendÚÚÇ ç
>ÚÚç é
(ÚÚé è
)ÚÚè ê
,ÚÚê ë
	AllocatorÚÚí õ
.ÚÚõ ú
TempÚÚú †
)ÚÚ† °
;ÚÚ° ¢
*
ÛÛ 
(
ÛÛ 
PendingSend
ÛÛ 
*
ÛÛ 
)
ÛÛ 
writer
ÛÛ %
.
ÛÛ% &
m_SendHandleData
ÛÛ& 6
=
ÛÛ7 8
new
ÛÛ9 <
PendingSend
ÛÛ= H
{
ÙÙ 
Pipeline
ıı 
=
ıı 
pipe
ıı #
,
ıı# $

Connection
ˆˆ 
=
ˆˆ  
id
ˆˆ! #
,
ˆˆ# $

SendHandle
˜˜ 
=
˜˜  

sendHandle
˜˜! +
,
˜˜+ ,

headerSize
¯¯ 
=
¯¯  
payloadOffset
¯¯! .
,
¯¯. /
}
˘˘ 
;
˘˘  
m_PendingBeginSend
˚˚ "
[
˚˚" #
m_ThreadIndex
˚˚# 0
*
˚˚1 2
JobsUtility
˚˚3 >
.
˚˚> ?
CacheLineSize
˚˚? L
/
˚˚M N
$num
˚˚O P
]
˚˚P Q
=
˚˚R S 
m_PendingBeginSend
˚˚T f
[
˚˚f g
m_ThreadIndex
˚˚g t
*
˚˚u v
JobsUtility˚˚w Ç
.˚˚Ç É
CacheLineSize˚˚É ê
/˚˚ë í
$num˚˚ì î
]˚˚î ï
+˚˚ñ ó
$num˚˚ò ô
;˚˚ô ö
return
˝˝ 
(
˝˝ 
int
˝˝ 
)
˝˝ 
Error
˝˝ !
.
˝˝! "

StatusCode
˝˝" ,
.
˝˝, -
Success
˝˝- 4
;
˝˝4 5
}
˛˛ 
public
áá 
unsafe
áá 
int
áá 
EndSend
áá %
(
áá% &
DataStreamWriter
áá& 6
writer
áá7 =
)
áá= >
{
àà 
if
ãã 
(
ãã 
writer
ãã 
.
ãã 
Capacity
ãã #
==
ãã$ &
$num
ãã' (
)
ãã( )
throw
åå 
new
åå '
InvalidOperationException
åå 7
(
åå7 8
$str
åå8 \
)
åå\ ]
;
åå] ^
PendingSend
éé 
*
éé 
pendingSendPtr
éé +
=
éé, -
(
éé. /
PendingSend
éé/ :
*
éé: ;
)
éé; <
writer
éé< B
.
ééB C
m_SendHandleData
ééC S
;
ééS T
if
èè 
(
èè 
pendingSendPtr
èè "
==
èè# %
null
èè& *
||
èè+ -
pendingSendPtr
èè. <
->
èè< >

Connection
èè> H
==
èèI K
default
èèL S
)
èèS T
{
êê 
throw
íí 
new
íí '
InvalidOperationException
íí 7
(
íí7 8
$str
íí8 \
)
íí\ ]
;
íí] ^
}
ññ 
if
òò 
(
òò 
m_ConnectionList
òò $
[
òò$ %
pendingSendPtr
òò% 3
->
òò3 5

Connection
òò5 ?
.
òò? @
m_NetworkId
òò@ K
]
òòK L
.
òòL M
Version
òòM T
!=
òòU W
pendingSendPtr
òòX f
->
òòf h

Connection
òòh r
.
òòr s
m_NetworkVersionòòs É
)òòÉ Ñ
{
ôô 
throw
õõ 
new
õõ '
InvalidOperationException
õõ 7
(
õõ7 8
$str
õõ8 f
)
õõf g
;
õõg h
}
üü 
if
°° 
(
°° 
writer
°° 
.
°° 
HasFailedWrites
°° *
)
°°* +
{
¢¢ 
	AbortSend
££ 
(
££ 
writer
££ $
)
££$ %
;
££% &
return
•• 
(
•• 
int
•• 
)
••  
Error
••  %
.
••% &

StatusCode
••& 0
.
••0 1#
NetworkPacketOverflow
••1 F
;
••F G
}
¶¶ 
PendingSend
®® 
pendingSend
®® '
=
®®( )
*
®®* +
(
®®+ ,
PendingSend
®®, 7
*
®®7 8
)
®®8 9
writer
®®9 ?
.
®®? @
m_SendHandleData
®®@ P
;
®®P Q
pendingSendPtr
©© 
->
©©  

Connection
©©  *
=
©©+ ,
default
©©- 4
;
©©4 5 
m_PendingBeginSend
´´ "
[
´´" #
m_ThreadIndex
´´# 0
*
´´1 2
JobsUtility
´´3 >
.
´´> ?
CacheLineSize
´´? L
/
´´M N
$num
´´O P
]
´´P Q
=
´´R S 
m_PendingBeginSend
´´T f
[
´´f g
m_ThreadIndex
´´g t
*
´´u v
JobsUtility´´w Ç
.´´Ç É
CacheLineSize´´É ê
/´´ë í
$num´´ì î
]´´î ï
-´´ñ ó
$num´´ò ô
;´´ô ö
pendingSend
ÆÆ 
.
ÆÆ 

SendHandle
ÆÆ &
.
ÆÆ& '
size
ÆÆ' +
=
ÆÆ, -
pendingSend
ÆÆ. 9
.
ÆÆ9 :

headerSize
ÆÆ: D
+
ÆÆE F
writer
ÆÆG M
.
ÆÆM N
Length
ÆÆN T
;
ÆÆT U
int
ØØ 
retval
ØØ 
=
ØØ 
$num
ØØ 
;
ØØ 
if
∞∞ 
(
∞∞ 
pendingSend
∞∞ 
.
∞∞  
Pipeline
∞∞  (
.
∞∞( )
Id
∞∞) +
>
∞∞, -
$num
∞∞. /
)
∞∞/ 0
{
±± 
pendingSend
≤≤ 
.
≤≤  

SendHandle
≤≤  *
.
≤≤* +
size
≤≤+ /
+=
≤≤0 2!
m_PipelineProcessor
≤≤3 F
.
≤≤F G 
SendHeaderCapacity
≤≤G Y
(
≤≤Y Z
pendingSend
≤≤Z e
.
≤≤e f
Pipeline
≤≤f n
)
≤≤n o
+
≤≤p q
$num
≤≤r s
;
≤≤s t
var
≥≥ 
oldHeaderFlags
≥≥ &
=
≥≥' ("
m_DefaultHeaderFlags
≥≥) =
;
≥≥= >"
m_DefaultHeaderFlags
¥¥ (
=
¥¥) *

UdpCHeader
¥¥+ 5
.
¥¥5 6
HeaderFlags
¥¥6 A
.
¥¥A B
HasPipeline
¥¥B M
;
¥¥M N
retval
µµ 
=
µµ !
m_PipelineProcessor
µµ 0
.
µµ0 1
Send
µµ1 5
(
µµ5 6
this
µµ6 :
,
µµ: ;
pendingSend
µµ< G
.
µµG H
Pipeline
µµH P
,
µµP Q
pendingSend
µµR ]
.
µµ] ^

Connection
µµ^ h
,
µµh i
pendingSend
µµj u
.
µµu v

SendHandleµµv Ä
,µµÄ Å
pendingSendµµÇ ç
.µµç é

headerSizeµµé ò
)µµò ô
;µµô ö"
m_DefaultHeaderFlags
∂∂ (
=
∂∂) *
oldHeaderFlags
∂∂+ 9
;
∂∂9 :
}
∑∑ 
else
∏∏ 
retval
ºº 
=
ºº 
CompleteSend
ºº )
(
ºº) *
pendingSend
ºº* 5
.
ºº5 6

Connection
ºº6 @
,
ºº@ A
pendingSend
ººB M
.
ººM N

SendHandle
ººN X
,
ººX Y
(
ººZ ["
m_DefaultHeaderFlags
ºº[ o
&
ººp q

UdpCHeader
ººr |
.
ºº| }
HeaderFlagsºº} à
.ººà â
HasPipelineººâ î
)ººî ï
!=ººñ ò
$numººô ö
)ººö õ
;ººõ ú
if
ΩΩ 
(
ΩΩ 
retval
ΩΩ 
<=
ΩΩ 
$num
ΩΩ 
)
ΩΩ  
return
ææ 
retval
ææ !
;
ææ! "
return
øø 
writer
øø 
.
øø 
Length
øø $
;
øø$ %
}
¿¿ 
public
…… 
unsafe
…… 
void
…… 
	AbortSend
…… (
(
……( )
DataStreamWriter
……) 9
writer
……: @
)
……@ A
{
   
if
ÕÕ 
(
ÕÕ 
writer
ÕÕ 
.
ÕÕ 
Capacity
ÕÕ #
==
ÕÕ$ &
$num
ÕÕ' (
)
ÕÕ( )
throw
ŒŒ 
new
ŒŒ '
InvalidOperationException
ŒŒ 7
(
ŒŒ7 8
$str
ŒŒ8 \
)
ŒŒ\ ]
;
ŒŒ] ^
PendingSend
–– 
*
–– 
pendingSendPtr
–– +
=
––, -
(
––. /
PendingSend
––/ :
*
––: ;
)
––; <
writer
––< B
.
––B C
m_SendHandleData
––C S
;
––S T
if
—— 
(
—— 
pendingSendPtr
—— "
==
——# %
null
——& *
||
——+ -
pendingSendPtr
——. <
->
——< >

Connection
——> H
==
——I K
default
——L S
)
——S T
{
““ 
throw
‘‘ 
new
‘‘ '
InvalidOperationException
‘‘ 7
(
‘‘7 8
$str
‘‘8 ^
)
‘‘^ _
;
‘‘_ `
}
ŸŸ 
PendingSend
⁄⁄ 
pendingSend
⁄⁄ '
=
⁄⁄( )
*
⁄⁄* +
(
⁄⁄+ ,
PendingSend
⁄⁄, 7
*
⁄⁄7 8
)
⁄⁄8 9
writer
⁄⁄9 ?
.
⁄⁄? @
m_SendHandleData
⁄⁄@ P
;
⁄⁄P Q
pendingSendPtr
€€ 
->
€€  

Connection
€€  *
=
€€+ ,
default
€€- 4
;
€€4 5 
m_PendingBeginSend
›› "
[
››" #
m_ThreadIndex
››# 0
*
››1 2
JobsUtility
››3 >
.
››> ?
CacheLineSize
››? L
/
››M N
$num
››O P
]
››P Q
=
››R S 
m_PendingBeginSend
››T f
[
››f g
m_ThreadIndex
››g t
*
››u v
JobsUtility››w Ç
.››Ç É
CacheLineSize››É ê
/››ë í
$num››ì î
]››î ï
-››ñ ó
$num››ò ô
;››ô ö
	AbortSend
ﬂﬂ 
(
ﬂﬂ 
pendingSend
ﬂﬂ %
.
ﬂﬂ% &

SendHandle
ﬂﬂ& 0
)
ﬂﬂ0 1
;
ﬂﬂ1 2
}
‡‡ 
internal
‚‚ 
unsafe
‚‚ 
int
‚‚ 
CompleteSend
‚‚  ,
(
‚‚, -
NetworkConnection
‚‚- >
sendConnection
‚‚? M
,
‚‚M N(
NetworkInterfaceSendHandle
‚‚O i

sendHandle
‚‚j t
,
‚‚t u
bool
‚‚v z
hasPipeline‚‚{ Ü
)‚‚Ü á
{
„„ 
if
‰‰ 
(
‰‰ 
$num
‰‰ 
!=
‰‰ 
(
‰‰ 

sendHandle
‰‰ $
.
‰‰$ %
flags
‰‰% *
&
‰‰+ ,
SendHandleFlags
‰‰- <
.
‰‰< =
AllocatedByDriver
‰‰= N
)
‰‰N O
)
‰‰O P
{
ÂÂ 
var
ÊÊ 
ret
ÊÊ 
=
ÊÊ 
$num
ÊÊ 
;
ÊÊ  (
NetworkInterfaceSendHandle
ÁÁ .
originalHandle
ÁÁ/ =
=
ÁÁ> ?

sendHandle
ÁÁ@ J
;
ÁÁJ K
if
ËË 
(
ËË 
(
ËË 
ret
ËË 
=
ËË $
m_NetworkSendInterface
ËË 5
.
ËË5 6
BeginSendMessage
ËË6 F
.
ËËF G
Ptr
ËËG J
.
ËËJ K
Invoke
ËËK Q
(
ËËQ R
out
ËËR U

sendHandle
ËËV `
,
ËË` a$
m_NetworkSendInterface
ËËb x
.
ËËx y
UserDataËËy Å
,ËËÅ Ç
originalHandleËËÉ ë
.ËËë í
sizeËËí ñ
)ËËñ ó
)ËËó ò
!=ËËô õ
$numËËú ù
)ËËù û
{
ÈÈ 
return
ÍÍ 
ret
ÍÍ "
;
ÍÍ" #
}
ÎÎ 
UnsafeUtility
ÏÏ !
.
ÏÏ! "
MemCpy
ÏÏ" (
(
ÏÏ( )
(
ÏÏ) *
void
ÏÏ* .
*
ÏÏ. /
)
ÏÏ/ 0

sendHandle
ÏÏ0 :
.
ÏÏ: ;
data
ÏÏ; ?
,
ÏÏ? @
(
ÏÏA B
void
ÏÏB F
*
ÏÏF G
)
ÏÏG H
originalHandle
ÏÏH V
.
ÏÏV W
data
ÏÏW [
,
ÏÏ[ \
originalHandle
ÏÏ] k
.
ÏÏk l
size
ÏÏl p
)
ÏÏp q
;
ÏÏq r

sendHandle
ÌÌ 
.
ÌÌ 
size
ÌÌ #
=
ÌÌ$ %
originalHandle
ÌÌ& 4
.
ÌÌ4 5
size
ÌÌ5 9
;
ÌÌ9 :
}
ÓÓ 
var
 

connection
 
=
  
m_ConnectionList
! 1
[
1 2
sendConnection
2 @
.
@ A
m_NetworkId
A L
]
L M
;
M N
var
ÒÒ 
queueHandle
ÒÒ 
=
ÒÒ  !$
NetworkSendQueueHandle
ÒÒ" 8
.
ÒÒ8 9
ToTempHandle
ÒÒ9 E
(
ÒÒE F+
m_ConcurrentParallelSendQueue
ÒÒF c
)
ÒÒc d
;
ÒÒd e
return
ÚÚ (
m_NetworkProtocolInterface
ÚÚ 1
.
ÚÚ1 2
ProcessSend
ÚÚ2 =
.
ÚÚ= >
Ptr
ÚÚ> A
.
ÚÚA B
Invoke
ÚÚB H
(
ÚÚH I
ref
ÚÚI L

connection
ÚÚM W
,
ÚÚW X
hasPipeline
ÚÚY d
,
ÚÚd e
ref
ÚÚf i%
m_NetworkSendInterfaceÚÚj Ä
,ÚÚÄ Å
refÚÚÇ Ö

sendHandleÚÚÜ ê
,ÚÚê ë
refÚÚí ï
queueHandleÚÚñ °
,ÚÚ° ¢*
m_NetworkProtocolInterfaceÚÚ£ Ω
.ÚÚΩ æ
UserDataÚÚæ ∆
)ÚÚ∆ «
;ÚÚ« »
}
ÛÛ 
internal
ıı 
void
ıı 
	AbortSend
ıı #
(
ıı# $(
NetworkInterfaceSendHandle
ıı$ >

sendHandle
ıı? I
)
ııI J
{
ˆˆ 
if
˜˜ 
(
˜˜ 
$num
˜˜ 
==
˜˜ 
(
˜˜ 

sendHandle
˜˜ $
.
˜˜$ %
flags
˜˜% *
&
˜˜+ ,
SendHandleFlags
˜˜- <
.
˜˜< =
AllocatedByDriver
˜˜= N
)
˜˜N O
)
˜˜O P
{
¯¯ $
m_NetworkSendInterface
˘˘ *
.
˘˘* +
AbortSendMessage
˘˘+ ;
.
˘˘; <
Ptr
˘˘< ?
.
˘˘? @
Invoke
˘˘@ F
(
˘˘F G
ref
˘˘G J

sendHandle
˘˘K U
,
˘˘U V$
m_NetworkSendInterface
˘˘W m
.
˘˘m n
UserData
˘˘n v
)
˘˘v w
;
˘˘w x
}
˙˙ 
}
˚˚ 
public
ÇÇ 
NetworkConnection
ÇÇ $
.
ÇÇ$ %
State
ÇÇ% * 
GetConnectionState
ÇÇ+ =
(
ÇÇ= >
NetworkConnection
ÇÇ> O
id
ÇÇP R
)
ÇÇR S
{
ÉÉ 
if
ÑÑ 
(
ÑÑ 
id
ÑÑ 
.
ÑÑ 
m_NetworkId
ÑÑ "
<
ÑÑ# $
$num
ÑÑ% &
||
ÑÑ' )
id
ÑÑ* ,
.
ÑÑ, -
m_NetworkId
ÑÑ- 8
>=
ÑÑ9 ;
m_ConnectionList
ÑÑ< L
.
ÑÑL M
Length
ÑÑM S
)
ÑÑS T
return
ÖÖ 
NetworkConnection
ÖÖ ,
.
ÖÖ, -
State
ÖÖ- 2
.
ÖÖ2 3
Disconnected
ÖÖ3 ?
;
ÖÖ? @
var
ÜÜ 

connection
ÜÜ 
=
ÜÜ  
m_ConnectionList
ÜÜ! 1
[
ÜÜ1 2
id
ÜÜ2 4
.
ÜÜ4 5
m_NetworkId
ÜÜ5 @
]
ÜÜ@ A
;
ÜÜA B
if
áá 
(
áá 

connection
áá 
.
áá 
Version
áá &
!=
áá' )
id
áá* ,
.
áá, -
m_NetworkVersion
áá- =
)
áá= >
return
àà 
NetworkConnection
àà ,
.
àà, -
State
àà- 2
.
àà2 3
Disconnected
àà3 ?
;
àà? @
return
ââ 

connection
ââ !
.
ââ! "
State
ââ" '
;
ââ' (
}
ää 
internal
åå "
NetworkSendInterface
åå )$
m_NetworkSendInterface
åå* @
;
åå@ A
internal
çç 
NetworkProtocol
çç $(
m_NetworkProtocolInterface
çç% ?
;
çç? @
internal
éé 
NetworkEventQueue
éé &
.
éé& '

Concurrent
éé' 1
m_EventQueue
éé2 >
;
éé> ?
internal
èè 
NativeArray
èè  
<
èè  !
byte
èè! %
>
èè% &!
m_DisconnectReasons
èè' :
;
èè: ;
[
ëë 
ReadOnly
ëë 
]
ëë 
internal
ëë 

NativeList
ëë  *
<
ëë* +

Connection
ëë+ 5
>
ëë5 6
m_ConnectionList
ëë7 G
;
ëëG H
[
íí 
ReadOnly
íí 
]
íí 
internal
íí 

NativeList
íí  *
<
íí* +
byte
íí+ /
>
íí/ 0
m_DataStream
íí1 =
;
íí= >
internal
ìì &
NetworkPipelineProcessor
ìì -
.
ìì- .

Concurrent
ìì. 8!
m_PipelineProcessor
ìì9 L
;
ììL M
internal
îî 

UdpCHeader
îî 
.
îî  
HeaderFlags
îî  +"
m_DefaultHeaderFlags
îî, @
;
îî@ A
internal
ïï 
NativeQueue
ïï  
<
ïï  !
QueuedSendMessage
ïï! 2
>
ïï2 3
.
ïï3 4
ParallelWriter
ïï4 B+
m_ConcurrentParallelSendQueue
ïïC `
;
ïï` a
[
òò "
NativeSetThreadIndex
òò !
]
òò! "
internal
òò# +
int
òò, /
m_ThreadIndex
òò0 =
;
òò= >
[
ôô 1
#NativeDisableParallelForRestriction
ôô 0
]
ôô0 1
internal
ôô2 :
NativeArray
ôô; F
<
ôôF G
int
ôôG J
>
ôôJ K 
m_PendingBeginSend
ôôL ^
;
ôô^ _
}
õõ 	
internal
ùù 
struct
ùù 

Connection
ùù "
{
ûû 	
public
üü &
NetworkInterfaceEndPoint
üü +
Address
üü, 3
;
üü3 4
public
†† 
long
†† 
LastNonDataSend
†† '
;
††' (
public
°° 
long
°° 
LastReceive
°° #
;
°°# $
public
¢¢ 
int
¢¢ 
Id
¢¢ 
;
¢¢ 
public
££ 
int
££ 
Version
££ 
;
££ 
public
§§ 
int
§§ 
ConnectAttempts
§§ &
;
§§& '
public
•• 
NetworkConnection
•• $
.
••$ %
State
••% *
State
••+ 0
;
••0 1
public
¶¶ 
SessionIdToken
¶¶ !
ReceiveToken
¶¶" .
;
¶¶. /
public
ßß 
SessionIdToken
ßß !
	SendToken
ßß" +
;
ßß+ ,
public
®® 
byte
®® 
DidReceiveData
®® &
;
®®& '
public
©© 
byte
©© 

IsAccepted
©© "
;
©©" #
public
´´ 
static
´´ 
bool
´´ 
operator
´´ '
==
´´' )
(
´´) *

Connection
´´* 4
lhs
´´5 8
,
´´8 9

Connection
´´: D
rhs
´´E H
)
´´H I
{
¨¨ 
return
≠≠ 
lhs
≠≠ 
.
≠≠ 
Id
≠≠ 
==
≠≠  
rhs
≠≠! $
.
≠≠$ %
Id
≠≠% '
&&
≠≠( *
lhs
≠≠+ .
.
≠≠. /
Version
≠≠/ 6
==
≠≠7 9
rhs
≠≠: =
.
≠≠= >
Version
≠≠> E
&&
≠≠F H
lhs
≠≠I L
.
≠≠L M
Address
≠≠M T
==
≠≠U W
rhs
≠≠X [
.
≠≠[ \
Address
≠≠\ c
;
≠≠c d
}
ÆÆ 
public
∞∞ 
static
∞∞ 
bool
∞∞ 
operator
∞∞ '
!=
∞∞' )
(
∞∞) *

Connection
∞∞* 4
lhs
∞∞5 8
,
∞∞8 9

Connection
∞∞: D
rhs
∞∞E H
)
∞∞H I
{
±± 
return
≤≤ 
lhs
≤≤ 
.
≤≤ 
Id
≤≤ 
!=
≤≤  
rhs
≤≤! $
.
≤≤$ %
Id
≤≤% '
||
≤≤( *
lhs
≤≤+ .
.
≤≤. /
Version
≤≤/ 6
!=
≤≤7 9
rhs
≤≤: =
.
≤≤= >
Version
≤≤> E
||
≤≤F H
lhs
≤≤I L
.
≤≤L M
Address
≤≤M T
!=
≤≤U W
rhs
≤≤X [
.
≤≤[ \
Address
≤≤\ c
;
≤≤c d
}
≥≥ 
public
µµ 
override
µµ 
bool
µµ  
Equals
µµ! '
(
µµ' (
object
µµ( .
compare
µµ/ 6
)
µµ6 7
{
∂∂ 
return
∑∑ 
this
∑∑ 
==
∑∑ 
(
∑∑  

Connection
∑∑  *
)
∑∑* +
compare
∑∑+ 2
;
∑∑2 3
}
∏∏ 
public
ΩΩ 
static
ΩΩ 

Connection
ΩΩ $
Null
ΩΩ% )
=>
ΩΩ* ,
new
ΩΩ- 0

Connection
ΩΩ1 ;
(
ΩΩ; <
)
ΩΩ< =
{
ΩΩ> ?
Id
ΩΩ? A
=
ΩΩB C
$num
ΩΩD E
,
ΩΩE F
Version
ΩΩG N
=
ΩΩO P
$num
ΩΩQ R
}
ΩΩR S
;
ΩΩS T
public
øø 
override
øø 
int
øø 
GetHashCode
øø  +
(
øø+ ,
)
øø, -
{
¿¿ 
return
¡¡ 
Id
¡¡ 
;
¡¡ 
}
¬¬ 
public
ƒƒ 
bool
ƒƒ 
Equals
ƒƒ 
(
ƒƒ 

Connection
ƒƒ )

connection
ƒƒ* 4
)
ƒƒ4 5
{
≈≈ 
return
∆∆ 

connection
∆∆ !
.
∆∆! "
Id
∆∆" $
==
∆∆% '
Id
∆∆( *
&&
∆∆+ -

connection
∆∆. 8
.
∆∆8 9
Version
∆∆9 @
==
∆∆A C
Version
∆∆D K
&&
∆∆L N

connection
∆∆O Y
.
∆∆Y Z
Address
∆∆Z a
==
∆∆b d
Address
∆∆e l
;
∆∆l m
}
«« 
}
»» 	
static
ÀÀ 
List
ÀÀ 
<
ÀÀ 
INetworkInterface
ÀÀ %
>
ÀÀ% &!
s_NetworkInterfaces
ÀÀ' :
=
ÀÀ; <
new
ÀÀ= @
List
ÀÀA E
<
ÀÀE F
INetworkInterface
ÀÀF W
>
ÀÀW X
(
ÀÀX Y
)
ÀÀY Z
;
ÀÀZ [
static
ÃÃ 
List
ÃÃ 
<
ÃÃ 
INetworkProtocol
ÃÃ $
>
ÃÃ$ % 
s_NetworkProtocols
ÃÃ& 8
=
ÃÃ9 :
new
ÃÃ; >
List
ÃÃ? C
<
ÃÃC D
INetworkProtocol
ÃÃD T
>
ÃÃT U
(
ÃÃU V
)
ÃÃV W
;
ÃÃW X
int
ŒŒ %
m_NetworkInterfaceIndex
ŒŒ #
;
ŒŒ# $"
NetworkSendInterface
œœ $
m_NetworkSendInterface
œœ 3
;
œœ3 4
int
—— $
m_NetworkProtocolIndex
—— "
;
——" #
NetworkProtocol
““ (
m_NetworkProtocolInterface
““ 2
;
““2 3
internal
‘‘ 
INetworkProtocol
‘‘ !
NetworkProtocol
‘‘" 1
=>
‘‘2 4 
s_NetworkProtocols
‘‘5 G
[
‘‘G H$
m_NetworkProtocolIndex
‘‘H ^
]
‘‘^ _
;
‘‘_ `
NativeQueue
÷÷ 
<
÷÷ 
QueuedSendMessage
÷÷ %
>
÷÷% &!
m_ParallelSendQueue
÷÷' :
;
÷÷: ;
NativeArray
ÿÿ 
<
ÿÿ 
int
ÿÿ 
>
ÿÿ  
m_PendingBeginSend
ÿÿ +
;
ÿÿ+ ,
NetworkEventQueue
€€ 
m_EventQueue
€€ &
;
€€& '
private
‹‹ 
NativeArray
‹‹ 
<
‹‹ 
byte
‹‹  
>
‹‹  !!
m_DisconnectReasons
‹‹" 5
;
‹‹5 6
NativeQueue
ﬁﬁ 
<
ﬁﬁ 
int
ﬁﬁ 
>
ﬁﬁ 

m_FreeList
ﬁﬁ #
;
ﬁﬁ# $
NativeQueue
ﬂﬂ 
<
ﬂﬂ 
int
ﬂﬂ 
>
ﬂﬂ "
m_NetworkAcceptQueue
ﬂﬂ -
;
ﬂﬂ- .

NativeList
‡‡ 
<
‡‡ 

Connection
‡‡ 
>
‡‡ 
m_ConnectionList
‡‡ /
;
‡‡/ 0
[
‚‚ 	5
'NativeDisableContainerSafetyRestriction
‚‚	 0
]
‚‚0 1
NativeArray
„„ 
<
„„ 
int
„„ 
>
„„ 
m_InternalState
„„ (
;
„„( )
private
ÂÂ 
NativeReference
ÂÂ 
<
ÂÂ  
int
ÂÂ  #
>
ÂÂ# $
m_ProtocolStatus
ÂÂ% 5
;
ÂÂ5 6
internal
ÊÊ 
int
ÊÊ 
ProtocolStatus
ÊÊ #
=>
ÊÊ$ &
m_ProtocolStatus
ÊÊ' 7
.
ÊÊ7 8
Value
ÊÊ8 =
;
ÊÊ= >
NativeQueue
ËË 
<
ËË 
int
ËË 
>
ËË 
m_PendingFree
ËË &
;
ËË& '
NativeArray
ÈÈ 
<
ÈÈ 
int
ÈÈ 
>
ÈÈ 
m_ErrorCodes
ÈÈ %
;
ÈÈ% &
enum
ÎÎ 
ErrorCodeType
ÎÎ 
{
ÏÏ 	
ReceiveError
ÌÌ 
=
ÌÌ 
$num
ÌÌ 
,
ÌÌ 
	SendError
ÓÓ 
=
ÓÓ 
$num
ÓÓ 
,
ÓÓ 
NumErrorCodes
ÔÔ 
}
 	
struct
ÛÛ 

Parameters
ÛÛ 
{
ÙÙ 	
public
ıı (
NetworkDataStreamParameter
ıı -

dataStream
ıı. 8
;
ıı8 9
public
ˆˆ $
NetworkConfigParameter
ˆˆ )
config
ˆˆ* 0
;
ˆˆ0 1
public
¯¯ 

Parameters
¯¯ 
(
¯¯ 
NetworkSettings
¯¯ -
settings
¯¯. 6
)
¯¯6 7
{
˘˘ 

dataStream
˙˙ 
=
˙˙ 
settings
˙˙ %
.
˙˙% &%
GetDataStreamParameters
˙˙& =
(
˙˙= >
)
˙˙> ?
;
˙˙? @
config
˚˚ 
=
˚˚ 
settings
˚˚ !
.
˚˚! "(
GetNetworkConfigParameters
˚˚" <
(
˚˚< =
)
˚˚= >
;
˚˚> ?
}
¸¸ 
}
˝˝ 	
private
ÄÄ 

Parameters
ÄÄ 
m_NetworkParams
ÄÄ *
;
ÄÄ* +
private
ÅÅ 

NativeList
ÅÅ 
<
ÅÅ 
byte
ÅÅ 
>
ÅÅ  
m_DataStream
ÅÅ! -
;
ÅÅ- .
private
ÇÇ 
NativeArray
ÇÇ 
<
ÇÇ 
int
ÇÇ 
>
ÇÇ  
m_DataStreamHead
ÇÇ! 1
;
ÇÇ1 2
private
ÉÉ &
NetworkPipelineProcessor
ÉÉ (!
m_PipelineProcessor
ÉÉ) <
;
ÉÉ< =
private
ÑÑ 

UdpCHeader
ÑÑ 
.
ÑÑ 
HeaderFlags
ÑÑ &"
m_DefaultHeaderFlags
ÑÑ' ;
;
ÑÑ; <
private
ÜÜ 
long
ÜÜ 
m_UpdateTime
ÜÜ !
;
ÜÜ! "
private
áá 
long
áá $
m_UpdateTimeAdjustment
áá +
;
áá+ ,
private
ââ 
Unity
ââ 
.
ââ 
Mathematics
ââ !
.
ââ! "
Random
ââ" (
m_Rand
ââ) /
;
ââ/ 0
public
éé 
long
éé 
LastUpdateTime
éé "
=>
éé# %
m_UpdateTime
éé& 2
;
éé2 3
private
ëë 
const
ëë 
int
ëë $
InternalStateListening
ëë 0
=
ëë1 2
$num
ëë3 4
;
ëë4 5
private
íí 
const
íí 
int
íí  
InternalStateBound
íí ,
=
íí- .
$num
íí/ 0
;
íí0 1
public
óó 
bool
óó 
	Listening
óó 
{
òò 	
get
ôô 
{
ôô 
return
ôô 
(
ôô 
m_InternalState
ôô )
[
ôô) *$
InternalStateListening
ôô* @
]
ôô@ A
!=
ôôB D
$num
ôôE F
)
ôôF G
;
ôôG H
}
ôôI J
private
öö 
set
öö 
{
öö 
m_InternalState
öö )
[
öö) *$
InternalStateListening
öö* @
]
öö@ A
=
ööB C
value
ööD I
?
ööJ K
$num
ööL M
:
ööN O
$num
ööP Q
;
ööQ R
}
ööS T
}
õõ 	
public
ùù 
bool
ùù 
Bound
ùù 
=>
ùù 
m_InternalState
ùù ,
[
ùù, - 
InternalStateBound
ùù- ?
]
ùù? @
==
ùùA C
$num
ùùD E
;
ùùE F
public
¶¶ 
static
¶¶ 
NetworkDriver
¶¶ #
Create
¶¶$ *
(
¶¶* +
NetworkSettings
¶¶+ :
settings
¶¶; C
)
¶¶C D
{
ßß 	
return
´´ 
new
´´ 
NetworkDriver
´´ $
(
´´$ %
new
´´% (%
BaselibNetworkInterface
´´) @
(
´´@ A
)
´´A B
,
´´B C
settings
´´D L
)
´´L M
;
´´M N
}
≠≠ 	
public
≤≤ 
static
≤≤ 
NetworkDriver
≤≤ #
Create
≤≤$ *
(
≤≤* +
)
≤≤+ ,
=>
≤≤- /
Create
≤≤0 6
(
≤≤6 7
new
≤≤7 :
NetworkSettings
≤≤; J
(
≤≤J K
	Allocator
≤≤K T
.
≤≤T U
Temp
≤≤U Y
)
≤≤Y Z
)
≤≤Z [
;
≤≤[ \
public
ππ 
static
ππ 
NetworkDriver
ππ #
Create
ππ$ *
<
ππ* +
N
ππ+ ,
>
ππ, -
(
ππ- .
N
ππ. /
networkInterface
ππ0 @
)
ππ@ A
where
ππB G
N
ππH I
:
ππJ K
INetworkInterface
ππL ]
=>
∫∫ 
Create
∫∫ 
(
∫∫ 
networkInterface
∫∫ &
,
∫∫& '
new
∫∫( +
NetworkSettings
∫∫, ;
(
∫∫; <
	Allocator
∫∫< E
.
∫∫E F
Temp
∫∫F J
)
∫∫J K
)
∫∫K L
;
∫∫L M
public
¬¬ 
static
¬¬ 
NetworkDriver
¬¬ #
Create
¬¬$ *
<
¬¬* +
N
¬¬+ ,
>
¬¬, -
(
¬¬- .
N
¬¬. /
networkInterface
¬¬0 @
,
¬¬@ A
NetworkSettings
¬¬B Q
settings
¬¬R Z
)
¬¬Z [
where
¬¬\ a
N
¬¬b c
:
¬¬d e
INetworkInterface
¬¬f w
=>
√√ 
new
√√ 
NetworkDriver
√√  
(
√√  !
networkInterface
√√! 1
,
√√1 2
settings
√√3 ;
)
√√; <
;
√√< =
public
≈≈ 
NetworkDriver
≈≈ 
(
≈≈ 
INetworkInterface
≈≈ .
netIf
≈≈/ 4
)
≈≈4 5
:
∆∆ 
this
∆∆ 
(
∆∆ 
netIf
∆∆ 
,
∆∆ 
new
∆∆ 
NetworkSettings
∆∆ -
(
∆∆- .
)
∆∆. /
)
∆∆/ 0
{
∆∆1 2
}
∆∆2 3
[
…… 	
Obsolete
……	 
(
…… 
$str
…… 7
,
……7 8
false
……9 >
)
……> ?
]
……? @
public
   
static
   
NetworkDriver
   #
Create
  $ *
(
  * +
params
  + 1
INetworkParameter
  2 C
[
  C D
]
  D E
param
  F K
)
  K L
{
ÀÀ 	
return
ÃÃ 
Create
ÃÃ 
(
ÃÃ 
NetworkSettings
ÃÃ )
.
ÃÃ) *
	FromArray
ÃÃ* 3
(
ÃÃ3 4
param
ÃÃ4 9
)
ÃÃ9 :
)
ÃÃ: ;
;
ÃÃ; <
}
ÕÕ 	
[
œœ 	
Obsolete
œœ	 
(
œœ 
$str
œœ Q
,
œœQ R
false
œœS X
)
œœX Y
]
œœY Z
public
–– 
NetworkDriver
–– 
(
–– 
INetworkInterface
–– .
netIf
––/ 4
,
––4 5
params
––6 <
INetworkParameter
––= N
[
––N O
]
––O P
param
––Q V
)
––V W
:
—— 
this
—— 
(
—— 
netIf
—— 
,
—— 
NetworkSettings
—— )
.
——) *
	FromArray
——* 3
(
——3 4
param
——4 9
)
——9 :
)
——: ;
{
——< =
}
——= >
[
”” 	
Obsolete
””	 
(
”” 
$str
”” Q
,
””Q R
false
””S X
)
””X Y
]
””Y Z
internal
‘‘ 
NetworkDriver
‘‘ 
(
‘‘ 
INetworkInterface
‘‘ 0
netIf
‘‘1 6
,
‘‘6 7
INetworkProtocol
‘‘8 H
netProtocol
‘‘I T
,
‘‘T U
params
‘‘V \
INetworkParameter
‘‘] n
[
‘‘n o
]
‘‘o p
param
‘‘q v
)
‘‘v w
:
’’ 
this
’’ 
(
’’ 
netIf
’’ 
,
’’ 
netProtocol
’’ %
,
’’% &
NetworkSettings
’’' 6
.
’’6 7
	FromArray
’’7 @
(
’’@ A
param
’’A F
)
’’F G
)
’’G H
{
’’I J
}
’’J K
private
ÿÿ 
static
ÿÿ 
int
ÿÿ $
InsertInAvailableIndex
ÿÿ 1
<
ÿÿ1 2
T
ÿÿ2 3
>
ÿÿ3 4
(
ÿÿ4 5
List
ÿÿ5 9
<
ÿÿ9 :
T
ÿÿ: ;
>
ÿÿ; <
list
ÿÿ= A
,
ÿÿA B
T
ÿÿC D
element
ÿÿE L
)
ÿÿL M
{
ŸŸ 	
var
⁄⁄ 
n
⁄⁄ 
=
⁄⁄ 
list
⁄⁄ 
.
⁄⁄ 
Count
⁄⁄ 
;
⁄⁄ 
for
€€ 
(
€€ 
var
€€ 
i
€€ 
=
€€ 
$num
€€ 
;
€€ 
i
€€ 
<
€€ 
n
€€  !
;
€€! "
++
€€# %
i
€€% &
)
€€& '
{
‹‹ 
if
›› 
(
›› 
list
›› 
[
›› 
i
›› 
]
›› 
==
›› 
null
›› #
)
››# $
{
ﬁﬁ 
list
ﬂﬂ 
[
ﬂﬂ 
i
ﬂﬂ 
]
ﬂﬂ 
=
ﬂﬂ 
element
ﬂﬂ %
;
ﬂﬂ% &
return
‡‡ 
i
‡‡ 
;
‡‡ 
}
·· 
}
‚‚ 
list
‰‰ 
.
‰‰ 
Add
‰‰ 
(
‰‰ 
element
‰‰ 
)
‰‰ 
;
‰‰ 
return
ÂÂ 
n
ÂÂ 
;
ÂÂ 
}
ÊÊ 	
private
ËË 
static
ËË 
INetworkProtocol
ËË '&
GetProtocolForParameters
ËË( @
(
ËË@ A
NetworkSettings
ËËA P
settings
ËËQ Y
)
ËËY Z
{
ÈÈ 	
if
ÍÍ 
(
ÍÍ 
settings
ÍÍ 
.
ÍÍ 
TryGet
ÍÍ 
<
ÍÍ  
Relay
ÍÍ  %
.
ÍÍ% &#
RelayNetworkParameter
ÍÍ& ;
>
ÍÍ; <
(
ÍÍ< =
out
ÍÍ= @
_
ÍÍA B
)
ÍÍB C
)
ÍÍC D
return
ÎÎ 
new
ÎÎ 
Relay
ÎÎ  
.
ÎÎ  !"
RelayNetworkProtocol
ÎÎ! 5
(
ÎÎ5 6
)
ÎÎ6 7
;
ÎÎ7 8
if
ÌÌ 
(
ÌÌ 
settings
ÌÌ 
.
ÌÌ 
TryGet
ÌÌ 
<
ÌÌ  
TLS
ÌÌ  #
.
ÌÌ# $,
SecureNetworkProtocolParameter
ÌÌ$ B
>
ÌÌB C
(
ÌÌC D
out
ÌÌD G
_
ÌÌH I
)
ÌÌI J
)
ÌÌJ K
return
ÓÓ 
new
ÓÓ 
TLS
ÓÓ 
.
ÓÓ #
SecureNetworkProtocol
ÓÓ 4
(
ÓÓ4 5
)
ÓÓ5 6
;
ÓÓ6 7
return
 
new
 $
UnityTransportProtocol
 -
(
- .
)
. /
;
/ 0
}
ÒÒ 	
public
ÛÛ 
NetworkDriver
ÛÛ 
(
ÛÛ 
INetworkInterface
ÛÛ .
netIf
ÛÛ/ 4
,
ÛÛ4 5
NetworkSettings
ÛÛ6 E
settings
ÛÛF N
)
ÛÛN O
:
ÙÙ 
this
ÙÙ 
(
ÙÙ 
netIf
ÙÙ 
,
ÙÙ &
GetProtocolForParameters
ÙÙ 2
(
ÙÙ2 3
settings
ÙÙ3 ;
)
ÙÙ; <
,
ÙÙ< =
settings
ÙÙ> F
)
ÙÙF G
{
ÙÙH I
}
ÙÙI J
internal
ˇˇ 
NetworkDriver
ˇˇ 
(
ˇˇ 
INetworkInterface
ˇˇ 0
netIf
ˇˇ1 6
,
ˇˇ6 7
INetworkProtocol
ˇˇ8 H
netProtocol
ˇˇI T
,
ˇˇT U
NetworkSettings
ˇˇV e
settings
ˇˇf n
)
ˇˇn o
{
ÄÄ 	
m_NetworkParams
ÖÖ 
=
ÖÖ 
new
ÖÖ !

Parameters
ÖÖ" ,
(
ÖÖ, -
settings
ÖÖ- 5
)
ÖÖ5 6
;
ÖÖ6 7
netProtocol
áá 
.
áá 

Initialize
áá "
(
áá" #
settings
áá# +
)
áá+ ,
;
áá, -$
m_NetworkProtocolIndex
àà "
=
àà# $$
InsertInAvailableIndex
àà% ;
(
àà; < 
s_NetworkProtocols
àà< N
,
ààN O
netProtocol
ààP [
)
àà[ \
;
àà\ ](
m_NetworkProtocolInterface
ââ &
=
ââ' (
netProtocol
ââ) 4
.
ââ4 5%
CreateProtocolInterface
ââ5 L
(
ââL M
)
ââM N
;
ââN O%
m_NetworkInterfaceIndex
ãã #
=
ãã$ %$
InsertInAvailableIndex
ãã& <
(
ãã< =!
s_NetworkInterfaces
ãã= P
,
ããP Q
netIf
ããR W
)
ããW X
;
ããX Y
var
çç 
result
çç 
=
çç 
netIf
çç 
.
çç 

Initialize
çç )
(
çç) *
settings
çç* 2
)
çç2 3
;
çç3 4
if
éé 
(
éé 
$num
éé 
!=
éé 
result
éé 
)
éé 
{
èè 
throw
ëë 
new
ëë '
InvalidOperationException
ëë 3
(
ëë3 4
$"
ëë4 6
$str
ëë6 m
{
ëëm n
result
ëën t
}
ëët u
$str
ëëu v
"
ëëv w
)
ëëw x
;
ëëx y
}
ïï $
m_NetworkSendInterface
óó "
=
óó# $
netIf
óó% *
.
óó* +!
CreateSendInterface
óó+ >
(
óó> ?
)
óó? @
;
óó@ A!
m_PipelineProcessor
ôô 
=
ôô  !
new
ôô" %&
NetworkPipelineProcessor
ôô& >
(
ôô> ?
settings
ôô? G
)
ôôG H
;
ôôH I!
m_ParallelSendQueue
öö 
=
öö  !
new
öö" %
NativeQueue
öö& 1
<
öö1 2
QueuedSendMessage
öö2 C
>
ööC D
(
ööD E
	Allocator
ööE N
.
ööN O

Persistent
ööO Y
)
ööY Z
;
ööZ [ 
m_PendingBeginSend
úú 
=
úú  
new
úú! $
NativeArray
úú% 0
<
úú0 1
int
úú1 4
>
úú4 5
(
úú5 6
JobsUtility
úú6 A
.
úúA B
MaxJobThreadCount
úúB S
*
úúT U
JobsUtility
úúV a
.
úúa b
CacheLineSize
úúb o
/
úúp q
$num
úúr s
,
úús t
	Allocator
úúu ~
.
úú~ 

Persistentúú â
)úúâ ä
;úúä ã
var
üü 
stopwatchTime
üü 
=
üü 
	Stopwatch
üü  )
.
üü) *
GetTimestamp
üü* 6
(
üü6 7
)
üü7 8
;
üü8 9
var
†† 
time
†† 
=
†† 
stopwatchTime
†† $
/
††% &
(
††' (
	Stopwatch
††( 1
.
††1 2
	Frequency
††2 ;
/
††< =
$num
††> B
)
††B C
;
††C D
m_UpdateTime
°° 
=
°° 
m_NetworkParams
°° *
.
°°* +
config
°°+ 1
.
°°1 2
fixedFrameTimeMS
°°2 B
>
°°C D
$num
°°E F
?
°°G H
$num
°°I J
:
°°K L
time
°°M Q
;
°°Q R$
m_UpdateTimeAdjustment
¢¢ "
=
¢¢# $
$num
¢¢% &
;
¢¢& '
m_Rand
§§ 
=
§§ 
new
§§ 
Unity
§§ 
.
§§ 
Mathematics
§§ *
.
§§* +
Random
§§+ 1
(
§§1 2
(
§§2 3
uint
§§3 7
)
§§7 8
stopwatchTime
§§8 E
)
§§E F
;
§§F G
int
¶¶ 
initialStreamSize
¶¶ !
=
¶¶" #
m_NetworkParams
¶¶$ 3
.
¶¶3 4

dataStream
¶¶4 >
.
¶¶> ?
size
¶¶? C
;
¶¶C D
if
ßß 
(
ßß 
initialStreamSize
ßß !
==
ßß" $
$num
ßß% &
)
ßß& '
initialStreamSize
®® !
=
®®" #'
NetworkParameterConstants
®®$ =
.
®®= >"
DriverDataStreamSize
®®> R
;
®®R S
m_DataStream
™™ 
=
™™ 
new
™™ 

NativeList
™™ )
<
™™) *
byte
™™* .
>
™™. /
(
™™/ 0
initialStreamSize
™™0 A
,
™™A B
	Allocator
™™C L
.
™™L M

Persistent
™™M W
)
™™W X
;
™™X Y
m_DataStream
´´ 
.
´´ !
ResizeUninitialized
´´ ,
(
´´, -
initialStreamSize
´´- >
)
´´> ?
;
´´? @
m_DataStreamHead
¨¨ 
=
¨¨ 
new
¨¨ "
NativeArray
¨¨# .
<
¨¨. /
int
¨¨/ 2
>
¨¨2 3
(
¨¨3 4
$num
¨¨4 5
,
¨¨5 6
	Allocator
¨¨7 @
.
¨¨@ A

Persistent
¨¨A K
)
¨¨K L
;
¨¨L M"
m_DefaultHeaderFlags
ÆÆ  
=
ÆÆ! "
$num
ÆÆ# $
;
ÆÆ$ %"
m_NetworkAcceptQueue
∞∞  
=
∞∞! "
new
∞∞# &
NativeQueue
∞∞' 2
<
∞∞2 3
int
∞∞3 6
>
∞∞6 7
(
∞∞7 8
	Allocator
∞∞8 A
.
∞∞A B

Persistent
∞∞B L
)
∞∞L M
;
∞∞M N
m_ConnectionList
≤≤ 
=
≤≤ 
new
≤≤ "

NativeList
≤≤# -
<
≤≤- .

Connection
≤≤. 8
>
≤≤8 9
(
≤≤9 :
$num
≤≤: ;
,
≤≤; <
	Allocator
≤≤= F
.
≤≤F G

Persistent
≤≤G Q
)
≤≤Q R
;
≤≤R S

m_FreeList
¥¥ 
=
¥¥ 
new
¥¥ 
NativeQueue
¥¥ (
<
¥¥( )
int
¥¥) ,
>
¥¥, -
(
¥¥- .
	Allocator
¥¥. 7
.
¥¥7 8

Persistent
¥¥8 B
)
¥¥B C
;
¥¥C D
m_EventQueue
µµ 
=
µµ 
new
µµ 
NetworkEventQueue
µµ 0
(
µµ0 1'
NetworkParameterConstants
µµ1 J
.
µµJ K#
InitialEventQueueSize
µµK `
)
µµ` a
;
µµa b
const
∑∑ 
int
∑∑ 
reasons
∑∑ 
=
∑∑ 
(
∑∑  !
int
∑∑! $
)
∑∑$ %
DisconnectReason
∑∑% 5
.
∑∑5 6
Count
∑∑6 ;
;
∑∑; <!
m_DisconnectReasons
∏∏ 
=
∏∏  !
new
∏∏" %
NativeArray
∏∏& 1
<
∏∏1 2
byte
∏∏2 6
>
∏∏6 7
(
∏∏7 8
reasons
∏∏8 ?
,
∏∏? @
	Allocator
∏∏A J
.
∏∏J K

Persistent
∏∏K U
)
∏∏U V
;
∏∏V W
for
ππ 
(
ππ 
var
ππ 
idx
ππ 
=
ππ 
$num
ππ 
;
ππ 
idx
ππ !
<
ππ" #
reasons
ππ$ +
;
ππ+ ,
++
ππ- /
idx
ππ/ 2
)
ππ2 3!
m_DisconnectReasons
∫∫ #
[
∫∫# $
idx
∫∫$ '
]
∫∫' (
=
∫∫) *
(
∫∫+ ,
byte
∫∫, 0
)
∫∫0 1
idx
∫∫1 4
;
∫∫4 5
m_InternalState
ºº 
=
ºº 
new
ºº !
NativeArray
ºº" -
<
ºº- .
int
ºº. 1
>
ºº1 2
(
ºº2 3
$num
ºº3 4
,
ºº4 5
	Allocator
ºº6 ?
.
ºº? @

Persistent
ºº@ J
)
ººJ K
;
ººK L
m_PendingFree
ΩΩ 
=
ΩΩ 
new
ΩΩ 
NativeQueue
ΩΩ  +
<
ΩΩ+ ,
int
ΩΩ, /
>
ΩΩ/ 0
(
ΩΩ0 1
	Allocator
ΩΩ1 :
.
ΩΩ: ;

Persistent
ΩΩ; E
)
ΩΩE F
;
ΩΩF G
m_ProtocolStatus
øø 
=
øø 
new
øø "
NativeReference
øø# 2
<
øø2 3
int
øø3 6
>
øø6 7
(
øø7 8
	Allocator
øø8 A
.
øøA B

Persistent
øøB L
)
øøL M
;
øøM N
m_ProtocolStatus
¿¿ 
.
¿¿ 
Value
¿¿ "
=
¿¿# $
$num
¿¿% &
;
¿¿& '
m_ErrorCodes
¬¬ 
=
¬¬ 
new
¬¬ 
NativeArray
¬¬ *
<
¬¬* +
int
¬¬+ .
>
¬¬. /
(
¬¬/ 0
(
¬¬0 1
int
¬¬1 4
)
¬¬4 5
ErrorCodeType
¬¬5 B
.
¬¬B C
NumErrorCodes
¬¬C P
,
¬¬P Q
	Allocator
¬¬R [
.
¬¬[ \

Persistent
¬¬\ f
)
¬¬f g
;
¬¬g h
	Listening
√√ 
=
√√ 
false
√√ 
;
√√ 
}
ƒƒ 	
public
«« 
void
«« 
Dispose
«« 
(
«« 
)
«« 
{
»» 	
if
…… 
(
…… 
!
…… 
	IsCreated
…… 
)
…… 
return
   
;
    
s_NetworkProtocols
ÃÃ 
[
ÃÃ $
m_NetworkProtocolIndex
ÃÃ 5
]
ÃÃ5 6
.
ÃÃ6 7
Dispose
ÃÃ7 >
(
ÃÃ> ?
)
ÃÃ? @
;
ÃÃ@ A 
s_NetworkProtocols
ÕÕ 
[
ÕÕ $
m_NetworkProtocolIndex
ÕÕ 5
]
ÕÕ5 6
=
ÕÕ7 8
null
ÕÕ9 =
;
ÕÕ= >!
s_NetworkInterfaces
œœ 
[
œœ  %
m_NetworkInterfaceIndex
œœ  7
]
œœ7 8
.
œœ8 9
Dispose
œœ9 @
(
œœ@ A
)
œœA B
;
œœB C!
s_NetworkInterfaces
–– 
[
––  %
m_NetworkInterfaceIndex
––  7
]
––7 8
=
––9 :
null
––; ?
;
––? @$
m_NetworkProtocolIndex
““ "
=
““# $
-
““% &
$num
““& '
;
““' (%
m_NetworkInterfaceIndex
”” #
=
””$ %
-
””& '
$num
””' (
;
””( )
m_DataStream
’’ 
.
’’ 
Dispose
’’  
(
’’  !
)
’’! "
;
’’" #
m_DataStreamHead
÷÷ 
.
÷÷ 
Dispose
÷÷ $
(
÷÷$ %
)
÷÷% &
;
÷÷& '!
m_PipelineProcessor
◊◊ 
.
◊◊  
Dispose
◊◊  '
(
◊◊' (
)
◊◊( )
;
◊◊) *
m_EventQueue
ŸŸ 
.
ŸŸ 
Dispose
ŸŸ  
(
ŸŸ  !
)
ŸŸ! "
;
ŸŸ" #!
m_DisconnectReasons
⁄⁄ 
.
⁄⁄  
Dispose
⁄⁄  '
(
⁄⁄' (
)
⁄⁄( )
;
⁄⁄) *"
m_NetworkAcceptQueue
‹‹  
.
‹‹  !
Dispose
‹‹! (
(
‹‹( )
)
‹‹) *
;
‹‹* +
m_ConnectionList
›› 
.
›› 
Dispose
›› $
(
››$ %
)
››% &
;
››& '

m_FreeList
ﬁﬁ 
.
ﬁﬁ 
Dispose
ﬁﬁ 
(
ﬁﬁ 
)
ﬁﬁ  
;
ﬁﬁ  !
m_InternalState
ﬂﬂ 
.
ﬂﬂ 
Dispose
ﬂﬂ #
(
ﬂﬂ# $
)
ﬂﬂ$ %
;
ﬂﬂ% &
m_PendingFree
‡‡ 
.
‡‡ 
Dispose
‡‡ !
(
‡‡! "
)
‡‡" #
;
‡‡# $
m_ProtocolStatus
·· 
.
·· 
Dispose
·· $
(
··$ %
)
··% &
;
··& '
m_ErrorCodes
‚‚ 
.
‚‚ 
Dispose
‚‚  
(
‚‚  !
)
‚‚! "
;
‚‚" #!
m_ParallelSendQueue
„„ 
.
„„  
Dispose
„„  '
(
„„' (
)
„„( )
;
„„) * 
m_PendingBeginSend
ÂÂ 
.
ÂÂ 
Dispose
ÂÂ &
(
ÂÂ& '
)
ÂÂ' (
;
ÂÂ( )
}
ÁÁ 	
public
ÏÏ 
bool
ÏÏ 
	IsCreated
ÏÏ 
=>
ÏÏ  
m_InternalState
ÏÏ! 0
.
ÏÏ0 1
	IsCreated
ÏÏ1 :
;
ÏÏ: ;
[
ÓÓ 	
BurstCompile
ÓÓ	 
]
ÓÓ 
struct
ÔÔ 
	UpdateJob
ÔÔ 
:
ÔÔ 
IJob
ÔÔ 
{
 	
public
ÒÒ 
NetworkDriver
ÒÒ  
driver
ÒÒ! '
;
ÒÒ' (
public
ÛÛ 
void
ÛÛ 
Execute
ÛÛ 
(
ÛÛ  
)
ÛÛ  !
{
ÙÙ 
driver
ıı 
.
ıı 
InternalUpdate
ıı %
(
ıı% &
)
ıı& '
;
ıı' (
}
ˆˆ 
}
˜˜ 	
[
˘˘ 	
BurstCompile
˘˘	 
]
˘˘ 
struct
˙˙ 
ClearEventQueue
˙˙ 
:
˙˙  
IJob
˙˙! %
{
˚˚ 	
public
¸¸ 

NativeList
¸¸ 
<
¸¸ 
byte
¸¸ "
>
¸¸" #

dataStream
¸¸$ .
;
¸¸. /
public
˝˝ 
NativeArray
˝˝ 
<
˝˝ 
int
˝˝ "
>
˝˝" #
dataStreamHead
˝˝$ 2
;
˝˝2 3
public
˛˛ 
NetworkEventQueue
˛˛ $

eventQueue
˛˛% /
;
˛˛/ 0
public
ÄÄ 
NativeArray
ÄÄ 
<
ÄÄ 
int
ÄÄ "
>
ÄÄ" #
pendingSend
ÄÄ$ /
;
ÄÄ/ 0
[
ÅÅ 
ReadOnly
ÅÅ 
]
ÅÅ 
public
ÅÅ 

NativeList
ÅÅ (
<
ÅÅ( )

Connection
ÅÅ) 3
>
ÅÅ3 4
connectionList
ÅÅ5 C
;
ÅÅC D
[
ÇÇ 
ReadOnly
ÇÇ 
]
ÇÇ 
public
ÇÇ 
NativeArray
ÇÇ )
<
ÇÇ) *
int
ÇÇ* -
>
ÇÇ- .
internalState
ÇÇ/ <
;
ÇÇ< =
public
ÑÑ 
void
ÑÑ 
Execute
ÑÑ 
(
ÑÑ  
)
ÑÑ  !
{
ÖÖ 
for
áá 
(
áá 
int
áá 
i
áá 
=
áá 
$num
áá 
;
áá 
i
áá  !
<
áá" #
connectionList
áá$ 2
.
áá2 3
Length
áá3 9
;
áá9 :
++
áá; =
i
áá= >
)
áá> ?
{
àà 
int
ââ 
conCount
ââ  
=
ââ! "

eventQueue
ââ# -
.
ââ- .#
GetCountForConnection
ââ. C
(
ââC D
i
ââD E
)
ââE F
;
ââF G
if
ää 
(
ää 
conCount
ää  
!=
ää! #
$num
ää$ %
&&
ää& (
connectionList
ää) 7
[
ää7 8
i
ää8 9
]
ää9 :
.
ää: ;
State
ää; @
!=
ääA C
NetworkConnection
ääD U
.
ääU V
State
ääV [
.
ää[ \
Disconnected
ää\ h
)
ääh i
{
ãã 
UnityEngine
åå #
.
åå# $
Debug
åå$ )
.
åå) *
LogError
åå* 2
(
åå2 3
$"
åå3 5
$str
åå5 f
{
ååf g
conCount
ååg o
}
ååo p
$str
ååp 
{åå Ä
iååÄ Å
}ååÅ Ç
$strååÇ è
{ååè ê
internalStateååê ù
[ååù û&
InternalStateListeningååû ¥
]åå¥ µ
}ååµ ∂
"åå∂ ∑
)åå∑ ∏
;åå∏ π
}
çç 
}
éé 
bool
èè 
didPrint
èè 
=
èè 
false
èè  %
;
èè% &
for
êê 
(
êê 
int
êê 
i
êê 
=
êê 
$num
êê 
;
êê 
i
êê  !
<
êê" #
JobsUtility
êê$ /
.
êê/ 0
MaxJobThreadCount
êê0 A
;
êêA B
++
êêC E
i
êêE F
)
êêF G
{
ëë 
if
íí 
(
íí 
pendingSend
íí #
[
íí# $
i
íí$ %
*
íí& '
JobsUtility
íí( 3
.
íí3 4
CacheLineSize
íí4 A
/
ííB C
$num
ííD E
]
ííE F
>
ííG H
$num
ííI J
)
ííJ K
{
ìì 
pendingSend
îî #
[
îî# $
i
îî$ %
*
îî& '
JobsUtility
îî( 3
.
îî3 4
CacheLineSize
îî4 A
/
îîB C
$num
îîD E
]
îîE F
=
îîG H
$num
îîI J
;
îîJ K
if
ïï 
(
ïï 
!
ïï 
didPrint
ïï %
)
ïï% &
{
ññ 
UnityEngine
óó '
.
óó' (
Debug
óó( -
.
óó- .
LogError
óó. 6
(
óó6 7
$str
òò  y
)
òòy z
;
òòz {
didPrint
ôô $
=
ôô% &
true
ôô' +
;
ôô+ ,
}
öö 
}
õõ 
}
úú 

eventQueue
ûû 
.
ûû 
Clear
ûû  
(
ûû  !
)
ûû! "
;
ûû" #
dataStreamHead
üü 
[
üü 
$num
üü  
]
üü  !
=
üü" #
$num
üü$ %
;
üü% &
}
†† 
}
°° 	
private
££ 
SessionIdToken
££ *
GenerateRandomSessionIdToken
££ ;
(
££; <
ref
££< ?
SessionIdToken
££@ N
token
££O T
)
££T U
{
§§ 	
for
¶¶ 
(
¶¶ 
uint
¶¶ 
i
¶¶ 
=
¶¶ 
$num
¶¶ 
;
¶¶ 
i
¶¶ 
<
¶¶  
SessionIdToken
¶¶! /
.
¶¶/ 0
k_Length
¶¶0 8
;
¶¶8 9
++
¶¶: <
i
¶¶< =
)
¶¶= >
{
ßß 
unsafe
®® 
{
©© 
token
™™ 
.
™™ 
Value
™™ 
[
™™  
i
™™  !
]
™™! "
=
™™# $
(
™™% &
byte
™™& *
)
™™* +
(
™™+ ,
m_Rand
™™, 2
.
™™2 3
NextUInt
™™3 ;
(
™™; <
)
™™< =
&
™™> ?
$num
™™@ D
)
™™D E
;
™™E F
}
´´ 
}
¨¨ 
return
≠≠ 
token
≠≠ 
;
≠≠ 
}
ÆÆ 	
private
∞∞ 
void
∞∞ "
UpdateLastUpdateTime
∞∞ )
(
∞∞) *
)
∞∞* +
{
±± 	
var
≤≤ 
stopwatchTime
≤≤ 
=
≤≤ 
	Stopwatch
≤≤  )
.
≤≤) *
GetTimestamp
≤≤* 6
(
≤≤6 7
)
≤≤7 8
;
≤≤8 9
long
≥≥ 
now
≥≥ 
=
≥≥ 
m_NetworkParams
≥≥ &
.
≥≥& '
config
≥≥' -
.
≥≥- .
fixedFrameTimeMS
≥≥. >
>
≥≥? @
$num
≥≥A B
?
¥¥ 
m_UpdateTime
¥¥ 
+
¥¥  
m_NetworkParams
¥¥! 0
.
¥¥0 1
config
¥¥1 7
.
¥¥7 8
fixedFrameTimeMS
¥¥8 H
:
µµ 
stopwatchTime
µµ 
/
µµ  !
(
µµ" #
	Stopwatch
µµ# ,
.
µµ, -
	Frequency
µµ- 6
/
µµ7 8
$num
µµ9 =
)
µµ= >
-
µµ? @$
m_UpdateTimeAdjustment
µµA W
;
µµW X
m_Rand
∑∑ 
.
∑∑ 
	InitState
∑∑ 
(
∑∑ 
(
∑∑ 
uint
∑∑ "
)
∑∑" #
stopwatchTime
∑∑# 0
)
∑∑0 1
;
∑∑1 2
long
ππ 
	frameTime
ππ 
=
ππ 
now
ππ  
-
ππ! "
m_UpdateTime
ππ# /
;
ππ/ 0
if
∫∫ 
(
∫∫ 
m_NetworkParams
∫∫ 
.
∫∫  
config
∫∫  &
.
∫∫& '
maxFrameTimeMS
∫∫' 5
>
∫∫6 7
$num
∫∫8 9
&&
∫∫: <
	frameTime
∫∫= F
>
∫∫G H
m_NetworkParams
∫∫I X
.
∫∫X Y
config
∫∫Y _
.
∫∫_ `
maxFrameTimeMS
∫∫` n
)
∫∫n o
{
ªª $
m_UpdateTimeAdjustment
ºº &
+=
ºº' )
	frameTime
ºº* 3
-
ºº4 5
m_NetworkParams
ºº6 E
.
ººE F
config
ººF L
.
ººL M
maxFrameTimeMS
ººM [
;
ºº[ \
now
ΩΩ 
=
ΩΩ 
m_UpdateTime
ΩΩ "
+
ΩΩ# $
m_NetworkParams
ΩΩ% 4
.
ΩΩ4 5
config
ΩΩ5 ;
.
ΩΩ; <
maxFrameTimeMS
ΩΩ< J
;
ΩΩJ K
}
ææ 
m_UpdateTime
¿¿ 
=
¿¿ 
now
¿¿ 
;
¿¿ 
}
¡¡ 	
public
»» 
	JobHandle
»» 
ScheduleUpdate
»» '
(
»»' (
	JobHandle
»»( 1
dep
»»2 5
=
»»6 7
default
»»8 ?
)
»»? @
{
…… 	"
UpdateLastUpdateTime
    
(
    !
)
  ! "
;
  " #
var
ÃÃ 
	updateJob
ÃÃ 
=
ÃÃ 
new
ÃÃ 
	UpdateJob
ÃÃ  )
{
ÃÃ* +
driver
ÃÃ+ 1
=
ÃÃ2 3
this
ÃÃ4 8
}
ÃÃ8 9
;
ÃÃ9 :
if
œœ 
(
œœ 
Bound
œœ 
)
œœ 
{
–– 
var
—— 
clearJob
—— 
=
—— 
new
—— "
ClearEventQueue
——# 2
{
““ 

dataStream
”” 
=
””  
m_DataStream
””! -
,
””- .
dataStreamHead
‘‘ "
=
‘‘# $
m_DataStreamHead
‘‘% 5
,
‘‘5 6

eventQueue
’’ 
=
’’  
m_EventQueue
’’! -
,
’’- .
pendingSend
◊◊ 
=
◊◊  ! 
m_PendingBeginSend
◊◊" 4
,
◊◊4 5
connectionList
ÿÿ "
=
ÿÿ# $
m_ConnectionList
ÿÿ% 5
,
ÿÿ5 6
internalState
ŸŸ !
=
ŸŸ" #
m_InternalState
ŸŸ$ 3
}
€€ 
;
€€ 
var
›› 
handle
›› 
=
›› 
clearJob
›› %
.
››% &
Schedule
››& .
(
››. /
dep
››/ 2
)
››2 3
;
››3 4
handle
ﬁﬁ 
=
ﬁﬁ 
	updateJob
ﬁﬁ "
.
ﬁﬁ" #
Schedule
ﬁﬁ# +
(
ﬁﬁ+ ,
handle
ﬁﬁ, 2
)
ﬁﬁ2 3
;
ﬁﬁ3 4
handle
ﬂﬂ 
=
ﬂﬂ !
s_NetworkInterfaces
ﬂﬂ ,
[
ﬂﬂ, -%
m_NetworkInterfaceIndex
ﬂﬂ- D
]
ﬂﬂD E
.
ﬂﬂE F
ScheduleReceive
ﬂﬂF U
(
ﬂﬂU V
new
ﬂﬂV Y#
NetworkPacketReceiver
ﬂﬂZ o
{
ﬂﬂp q
m_Driver
ﬂﬂq y
=
ﬂﬂz {
thisﬂﬂ| Ä
}ﬂﬂÄ Å
,ﬂﬂÅ Ç
handleﬂﬂÉ â
)ﬂﬂâ ä
;ﬂﬂä ã
handle
‡‡ 
=
‡‡ !
s_NetworkInterfaces
‡‡ ,
[
‡‡, -%
m_NetworkInterfaceIndex
‡‡- D
]
‡‡D E
.
‡‡E F
ScheduleSend
‡‡F R
(
‡‡R S!
m_ParallelSendQueue
‡‡S f
,
‡‡f g
handle
‡‡h n
)
‡‡n o
;
‡‡o p
return
‚‚ 
handle
‚‚ 
;
‚‚ 
}
„„ 
else
‰‰ 
{
ÂÂ 
return
ÊÊ 
	updateJob
ÊÊ  
.
ÊÊ  !
Schedule
ÊÊ! )
(
ÊÊ) *
dep
ÊÊ* -
)
ÊÊ- .
;
ÊÊ. /
}
ÁÁ 
}
ËË 	
public
 
	JobHandle
 
ScheduleFlushSend
 *
(
* +
	JobHandle
+ 4
dep
5 8
)
8 9
{
ÒÒ 	
return
ÚÚ !
s_NetworkInterfaces
ÚÚ &
[
ÚÚ& '%
m_NetworkInterfaceIndex
ÚÚ' >
]
ÚÚ> ?
.
ÚÚ? @
ScheduleSend
ÚÚ@ L
(
ÚÚL M!
m_ParallelSendQueue
ÚÚM `
,
ÚÚ` a
dep
ÚÚb e
)
ÚÚe f
;
ÚÚf g
}
ÛÛ 	
void
ıı 
InternalUpdate
ıı 
(
ıı 
)
ıı 
{
ˆˆ 	!
m_PipelineProcessor
˜˜ 
.
˜˜  
	Timestamp
˜˜  )
=
˜˜* +
m_UpdateTime
˜˜, 8
;
˜˜8 9
while
¯¯ 
(
¯¯ 
m_PendingFree
¯¯  
.
¯¯  !

TryDequeue
¯¯! +
(
¯¯+ ,
out
¯¯, /
var
¯¯0 3
free
¯¯4 8
)
¯¯8 9
)
¯¯9 :
{
˘˘ 
int
˙˙ 
ver
˙˙ 
=
˙˙ 
m_ConnectionList
˙˙ *
[
˙˙* +
free
˙˙+ /
]
˙˙/ 0
.
˙˙0 1
Version
˙˙1 8
+
˙˙9 :
$num
˙˙; <
;
˙˙< =
if
˚˚ 
(
˚˚ 
ver
˚˚ 
==
˚˚ 
$num
˚˚ 
)
˚˚ 
ver
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸ 
m_ConnectionList
˝˝  
[
˝˝  !
free
˝˝! %
]
˝˝% &
=
˝˝' (
new
˝˝) ,

Connection
˝˝- 7
{
˝˝8 9
Id
˝˝9 ;
=
˝˝< =
free
˝˝> B
,
˝˝B C
Version
˝˝D K
=
˝˝L M
ver
˝˝N Q
,
˝˝Q R

IsAccepted
˝˝S ]
=
˝˝^ _
$num
˝˝` a
}
˝˝a b
;
˝˝b c

m_FreeList
˛˛ 
.
˛˛ 
Enqueue
˛˛ "
(
˛˛" #
free
˛˛# '
)
˛˛' (
;
˛˛( )
}
ˇˇ 
CheckTimeouts
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
if
ÉÉ 
(
ÉÉ (
m_NetworkProtocolInterface
ÉÉ *
.
ÉÉ* +
NeedsUpdate
ÉÉ+ 6
)
ÉÉ6 7
{
ÑÑ 
var
ÖÖ 
queueHandle
ÖÖ 
=
ÖÖ  !$
NetworkSendQueueHandle
ÖÖ" 8
.
ÖÖ8 9
ToTempHandle
ÖÖ9 E
(
ÖÖE F!
m_ParallelSendQueue
ÖÖF Y
.
ÖÖY Z
AsParallelWriter
ÖÖZ j
(
ÖÖj k
)
ÖÖk l
)
ÖÖl m
;
ÖÖm n(
m_NetworkProtocolInterface
ÜÜ *
.
ÜÜ* +
Update
ÜÜ+ 1
.
ÜÜ1 2
Ptr
ÜÜ2 5
.
ÜÜ5 6
Invoke
ÜÜ6 <
(
ÜÜ< =
m_UpdateTime
ÜÜ= I
,
ÜÜI J
ref
ÜÜK N$
m_NetworkSendInterface
ÜÜO e
,
ÜÜe f
ref
ÜÜg j
queueHandle
ÜÜk v
,
ÜÜv w)
m_NetworkProtocolInterfaceÜÜx í
.ÜÜí ì
UserDataÜÜì õ
)ÜÜõ ú
;ÜÜú ù
}
áá !
m_PipelineProcessor
ââ 
.
ââ  
UpdateReceive
ââ  -
(
ââ- .
this
ââ. 2
,
ââ2 3
out
ââ4 7
var
ââ8 ;
updateCount
ââ< G
)
ââG H
;
ââH I
if
åå 
(
åå 
updateCount
åå 
>
åå 
(
åå 
m_ConnectionList
åå /
.
åå/ 0
Length
åå0 6
-
åå7 8

m_FreeList
åå9 C
.
ååC D
Count
ååD I
)
ååI J
*
ååK L
$num
ååM O
)
ååO P
{
çç 
UnityEngine
éé 
.
éé 
Debug
éé !
.
éé! "

LogWarning
éé" ,
(
éé, -
FixedString
èè 
.
èè  
Format
èè  &
(
èè& '
$strèè' ö
,èèö õ
updateCountèèú ß
)èèß ®
)èè® ©
;èè© ™
}
êê "
m_DefaultHeaderFlags
íí  
=
íí! "

UdpCHeader
íí# -
.
íí- .
HeaderFlags
íí. 9
.
íí9 :
HasPipeline
íí: E
;
ííE F!
m_PipelineProcessor
ìì 
.
ìì  

UpdateSend
ìì  *
(
ìì* +"
ToConcurrentSendOnly
ìì+ ?
(
ìì? @
)
ìì@ A
,
ììA B
out
ììC F
updateCount
ììG R
)
ììR S
;
ììS T
if
îî 
(
îî 
updateCount
îî 
>
îî 
(
îî 
m_ConnectionList
îî /
.
îî/ 0
Length
îî0 6
-
îî7 8

m_FreeList
îî9 C
.
îîC D
Count
îîD I
)
îîI J
*
îîK L
$num
îîM O
)
îîO P
{
ïï 
UnityEngine
ññ 
.
ññ 
Debug
ññ !
.
ññ! "

LogWarning
ññ" ,
(
ññ, -
FixedString
óó 
.
óó  
Format
óó  &
(
óó& '
$stróó' ö
,óóö õ
updateCountóóú ß
)óóß ®
)óó® ©
;óó© ™
}
òò "
m_DefaultHeaderFlags
öö  
=
öö! "
$num
öö# $
;
öö$ %
}
õõ 	
public
•• 
NetworkPipeline
•• 
CreatePipeline
•• -
(
••- .
params
••. 4
Type
••5 9
[
••9 :
]
••: ;
stages
••< B
)
••B C
{
¶¶ 	
if
®® 
(
®® 
!
®® 
m_InternalState
®®  
.
®®  !
	IsCreated
®®! *
)
®®* +
throw
©© 
new
©© '
InvalidOperationException
©© 3
(
©©3 4
$str
™™ h
)
™™h i
;
™™i j
if
´´ 
(
´´ 
m_ConnectionList
´´  
.
´´  !
Length
´´! '
>
´´( )
$num
´´* +
)
´´+ ,
throw
¨¨ 
new
¨¨ '
InvalidOperationException
¨¨ 3
(
¨¨3 4
$str
≠≠ P
)
≠≠P Q
;
≠≠Q R
return
ØØ !
m_PipelineProcessor
ØØ &
.
ØØ& '
CreatePipeline
ØØ' 5
(
ØØ5 6
stages
ØØ6 <
)
ØØ< =
;
ØØ= >
}
∞∞ 	
public
∫∫ 
int
∫∫ 
Bind
∫∫ 
(
∫∫ 
NetworkEndPoint
∫∫ '
endpoint
∫∫( 0
)
∫∫0 1
{
ªª 	
if
ºº 
(
ºº !
s_NetworkInterfaces
ºº #
[
ºº# $%
m_NetworkInterfaceIndex
ºº$ ;
]
ºº; <
.
ºº< =%
CreateInterfaceEndPoint
ºº= T
(
ººT U
endpoint
ººU ]
,
ºº] ^
out
ºº_ b
var
ººc f

ifEndPoint
ººg q
)
ººq r
!=
ººs u
$num
ººv w
)
ººw x
{
ΩΩ 
return
ææ 
-
ææ 
$num
ææ 
;
ææ 
}
øø 
if
¬¬ 
(
¬¬ 
!
¬¬ 
m_InternalState
¬¬  
.
¬¬  !
	IsCreated
¬¬! *
)
¬¬* +
throw
√√ 
new
√√ '
InvalidOperationException
√√ 3
(
√√3 4
$str
ƒƒ h
)
ƒƒh i
;
ƒƒi j
if
∆∆ 
(
∆∆ 
m_InternalState
∆∆ 
[
∆∆   
InternalStateBound
∆∆  2
]
∆∆2 3
!=
∆∆4 6
$num
∆∆7 8
)
∆∆8 9
throw
«« 
new
«« '
InvalidOperationException
«« 3
(
««3 4
$str
»» D
)
»»D E
;
»»E F
if
…… 
(
…… 
m_ConnectionList
……  
.
……  !
Length
……! '
>
……( )
$num
……* +
)
……+ ,
throw
   
new
   '
InvalidOperationException
   3
(
  3 4
$str
ÀÀ J
)
ÀÀJ K
;
ÀÀK L
var
ÕÕ 
protocolBind
ÕÕ 
=
ÕÕ  
s_NetworkProtocols
ÕÕ 1
[
ÕÕ1 2$
m_NetworkProtocolIndex
ÕÕ2 H
]
ÕÕH I
.
ÕÕI J
Bind
ÕÕJ N
(
ÕÕN O!
s_NetworkInterfaces
ÕÕO b
[
ÕÕb c%
m_NetworkInterfaceIndex
ÕÕc z
]
ÕÕz {
,
ÕÕ{ |
refÕÕ} Ä

ifEndPointÕÕÅ ã
)ÕÕã å
;ÕÕå ç
m_InternalState
œœ 
[
œœ  
InternalStateBound
œœ .
]
œœ. /
=
œœ0 1
protocolBind
œœ2 >
==
œœ? A
$num
œœB C
?
œœD E
$num
œœF G
:
œœH I
$num
œœJ K
;
œœK L
return
—— 
protocolBind
—— 
;
——  
}
““ 	
public
€€ 
int
€€ 
Listen
€€ 
(
€€ 
)
€€ 
{
‹‹ 	
if
ﬁﬁ 
(
ﬁﬁ 
!
ﬁﬁ 
m_InternalState
ﬁﬁ  
.
ﬁﬁ  !
	IsCreated
ﬁﬁ! *
)
ﬁﬁ* +
throw
ﬂﬂ 
new
ﬂﬂ '
InvalidOperationException
ﬂﬂ 3
(
ﬂﬂ3 4
$str
‡‡ h
)
‡‡h i
;
‡‡i j
if
‚‚ 
(
‚‚ 
	Listening
‚‚ 
)
‚‚ 
throw
„„ 
new
„„ '
InvalidOperationException
„„ 3
(
„„3 4
$str
‰‰ F
)
‰‰F G
;
‰‰G H
if
ÂÂ 
(
ÂÂ 
!
ÂÂ 
Bound
ÂÂ 
)
ÂÂ 
throw
ÊÊ 
new
ÊÊ '
InvalidOperationException
ÊÊ 3
(
ÊÊ3 4
$str
ÁÁ O
)
ÁÁO P
;
ÁÁP Q
if
ÈÈ 
(
ÈÈ 
!
ÈÈ 
Bound
ÈÈ 
)
ÈÈ 
return
ÍÍ 
-
ÍÍ 
$num
ÍÍ 
;
ÍÍ 
var
ÎÎ 
ret
ÎÎ 
=
ÎÎ !
s_NetworkInterfaces
ÎÎ )
[
ÎÎ) *%
m_NetworkInterfaceIndex
ÎÎ* A
]
ÎÎA B
.
ÎÎB C
Listen
ÎÎC I
(
ÎÎI J
)
ÎÎJ K
;
ÎÎK L
if
ÏÏ 
(
ÏÏ 
ret
ÏÏ 
==
ÏÏ 
$num
ÏÏ 
)
ÏÏ 
	Listening
ÌÌ 
=
ÌÌ 
true
ÌÌ  
;
ÌÌ  !
return
ÓÓ 
ret
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
public
ıı 
NetworkConnection
ıı  
Accept
ıı! '
(
ıı' (
)
ıı( )
{
ˆˆ 	
if
˜˜ 
(
˜˜ 
!
˜˜ 
	Listening
˜˜ 
)
˜˜ 
return
¯¯ 
default
¯¯ 
;
¯¯ 
if
˙˙ 
(
˙˙ 
!
˙˙ "
m_NetworkAcceptQueue
˙˙ %
.
˙˙% &

TryDequeue
˙˙& 0
(
˙˙0 1
out
˙˙1 4
var
˙˙5 8
id
˙˙9 ;
)
˙˙; <
)
˙˙< =
return
˚˚ 
default
˚˚ 
;
˚˚ 
var
˝˝ 

connection
˝˝ 
=
˝˝ 
m_ConnectionList
˝˝ -
[
˝˝- .
id
˝˝. 0
]
˝˝0 1
;
˝˝1 2

connection
˛˛ 
.
˛˛ 
State
˛˛ 
=
˛˛ 
NetworkConnection
˛˛ 0
.
˛˛0 1
State
˛˛1 6
.
˛˛6 7
	Connected
˛˛7 @
;
˛˛@ A

connection
ˇˇ 
.
ˇˇ 

IsAccepted
ˇˇ !
=
ˇˇ" #
$num
ˇˇ$ %
;
ˇˇ% &
SetConnection
ÄÄ 
(
ÄÄ 

connection
ÄÄ $
)
ÄÄ$ %
;
ÄÄ% &
return
ÇÇ 
new
ÇÇ 
NetworkConnection
ÇÇ (
{
ÇÇ) *
m_NetworkId
ÇÇ* 5
=
ÇÇ6 7
id
ÇÇ8 :
,
ÇÇ: ;
m_NetworkVersion
ÇÇ< L
=
ÇÇM N
m_ConnectionList
ÇÇO _
[
ÇÇ_ `
id
ÇÇ` b
]
ÇÇb c
.
ÇÇc d
Version
ÇÇd k
}
ÇÇk l
;
ÇÇl m
}
ÉÉ 	
public
ää 
NetworkConnection
ää  
Connect
ää! (
(
ää( )
NetworkEndPoint
ää) 8
endpoint
ää9 A
)
ääA B
{
ãã 	
if
çç 
(
çç 
!
çç 
m_InternalState
çç  
.
çç  !
	IsCreated
çç! *
)
çç* +
throw
éé 
new
éé '
InvalidOperationException
éé 3
(
éé3 4
$str
èè h
)
èèh i
;
èèi j
if
íí 
(
íí 
!
íí 
Bound
íí 
)
íí 
{
ìì 
var
îî 
nep
îî 
=
îî 
endpoint
îî "
.
îî" #
Family
îî# )
==
îî* ,
NetworkFamily
îî- :
.
îî: ;
Ipv6
îî; ?
?
îî@ A
NetworkEndPoint
îîB Q
.
îîQ R
AnyIpv6
îîR Y
:
îîZ [
NetworkEndPoint
îî\ k
.
îîk l
AnyIpv4
îîl s
;
îîs t
if
ïï 
(
ïï 
Bind
ïï 
(
ïï 
nep
ïï 
)
ïï 
!=
ïï  
$num
ïï! "
)
ïï" #
return
ññ 
default
ññ "
;
ññ" #
}
óó 
var
ôô 
result
ôô 
=
ôô  
s_NetworkProtocols
ôô +
[
ôô+ ,$
m_NetworkProtocolIndex
ôô, B
]
ôôB C
.
ôôC D%
CreateConnectionAddress
ôôD [
(
ôô[ \!
s_NetworkInterfaces
öö #
[
öö# $%
m_NetworkInterfaceIndex
öö$ ;
]
öö; <
,
öö< =
endpoint
öö> F
,
ööF G
out
ööH K
var
ööL O
address
ööP W
)
ööW X
;
ööX Y
if
õõ 
(
õõ 
result
õõ 
!=
õõ 
$num
õõ 
)
õõ 
return
úú 
default
úú 
;
úú 
if
ûû 
(
ûû 
!
ûû 

m_FreeList
ûû 
.
ûû 

TryDequeue
ûû &
(
ûû& '
out
ûû' *
var
ûû+ .
id
ûû/ 1
)
ûû1 2
)
ûû2 3
{
üü 
id
†† 
=
†† 
m_ConnectionList
†† %
.
††% &
Length
††& ,
;
††, -
m_ConnectionList
°°  
.
°°  !
Add
°°! $
(
°°$ %
new
°°% (

Connection
°°) 3
{
°°4 5
Id
°°5 7
=
°°8 9
id
°°: <
,
°°< =
Version
°°> E
=
°°F G
$num
°°H I
}
°°I J
)
°°J K
;
°°K L
}
¢¢ 
int
§§ 
ver
§§ 
=
§§ 
m_ConnectionList
§§ &
[
§§& '
id
§§' )
]
§§) *
.
§§* +
Version
§§+ 2
;
§§2 3
var
•• 
receiveToken
•• 
=
•• 
new
•• "
SessionIdToken
••# 1
(
••1 2
)
••2 3
;
••3 4*
GenerateRandomSessionIdToken
¶¶ (
(
¶¶( )
ref
¶¶) ,
receiveToken
¶¶- 9
)
¶¶9 :
;
¶¶: ;
var
ßß 
c
ßß 
=
ßß 
new
ßß 

Connection
ßß "
{
®® 
Id
©© 
=
©© 
id
©© 
,
©© 
Version
™™ 
=
™™ 
ver
™™ 
,
™™ 
State
´´ 
=
´´ 
NetworkConnection
´´ )
.
´´) *
State
´´* /
.
´´/ 0

Connecting
´´0 :
,
´´: ;
Address
¨¨ 
=
¨¨ 
address
¨¨ !
,
¨¨! "
ConnectAttempts
≠≠ 
=
≠≠  !
$num
≠≠" #
,
≠≠# $
LastNonDataSend
ÆÆ 
=
ÆÆ  !
m_UpdateTime
ÆÆ" .
,
ÆÆ. /
LastReceive
ØØ 
=
ØØ 
$num
ØØ 
,
ØØ  
	SendToken
∞∞ 
=
∞∞ 
default
∞∞ #
,
∞∞# $
ReceiveToken
±± 
=
±± 
receiveToken
±± +
,
±±+ ,

IsAccepted
≤≤ 
=
≤≤ 
$num
≤≤ 
}
≥≥ 
;
≥≥ 
SetConnection
µµ 
(
µµ 
c
µµ 
)
µµ 
;
µµ 
var
∂∂ 
netcon
∂∂ 
=
∂∂ 
new
∂∂ 
NetworkConnection
∂∂ .
{
∂∂/ 0
m_NetworkId
∂∂0 ;
=
∂∂< =
id
∂∂> @
,
∂∂@ A
m_NetworkVersion
∂∂B R
=
∂∂S T
ver
∂∂U X
}
∂∂X Y
;
∂∂Y Z
var
∏∏ 
queueHandle
∏∏ 
=
∏∏ $
NetworkSendQueueHandle
∏∏ 4
.
∏∏4 5
ToTempHandle
∏∏5 A
(
∏∏A B!
m_ParallelSendQueue
∏∏B U
.
∏∏U V
AsParallelWriter
∏∏V f
(
∏∏f g
)
∏∏g h
)
∏∏h i
;
∏∏i j(
m_NetworkProtocolInterface
ππ &
.
ππ& '
Connect
ππ' .
.
ππ. /
Ptr
ππ/ 2
.
ππ2 3
Invoke
ππ3 9
(
ππ9 :
ref
ππ: =
c
ππ> ?
,
ππ? @
ref
ππA D$
m_NetworkSendInterface
ππE [
,
ππ[ \
ref
ππ] `
queueHandle
ππa l
,
ππl m)
m_NetworkProtocolInterfaceππn à
.ππà â
UserDataππâ ë
)ππë í
;ππí ì!
m_PipelineProcessor
ªª 
.
ªª  "
initializeConnection
ªª  4
(
ªª4 5
netcon
ªª5 ;
)
ªª; <
;
ªª< =
return
ΩΩ 
netcon
ΩΩ 
;
ΩΩ 
}
ææ 	
public
≈≈ 
int
≈≈ 

Disconnect
≈≈ 
(
≈≈ 
NetworkConnection
≈≈ /
id
≈≈0 2
)
≈≈2 3
{
∆∆ 	

Connection
«« 

connection
«« !
;
««! "
if
»» 
(
»» 
(
»» 

connection
»» 
=
»» 
GetConnection
»» +
(
»»+ ,
id
»», .
)
»». /
)
»»/ 0
==
»»1 3

Connection
»»4 >
.
»»> ?
Null
»»? C
)
»»C D
return
…… 
$num
…… 
;
…… 
if
ÀÀ 
(
ÀÀ 

connection
ÀÀ 
.
ÀÀ 
State
ÀÀ  
==
ÀÀ! #
NetworkConnection
ÀÀ$ 5
.
ÀÀ5 6
State
ÀÀ6 ;
.
ÀÀ; <
	Connected
ÀÀ< E
)
ÀÀE F
{
ÃÃ 
var
ÕÕ 
queueHandle
ÕÕ 
=
ÕÕ  !$
NetworkSendQueueHandle
ÕÕ" 8
.
ÕÕ8 9
ToTempHandle
ÕÕ9 E
(
ÕÕE F!
m_ParallelSendQueue
ÕÕF Y
.
ÕÕY Z
AsParallelWriter
ÕÕZ j
(
ÕÕj k
)
ÕÕk l
)
ÕÕl m
;
ÕÕm n(
m_NetworkProtocolInterface
ŒŒ *
.
ŒŒ* +

Disconnect
ŒŒ+ 5
.
ŒŒ5 6
Ptr
ŒŒ6 9
.
ŒŒ9 :
Invoke
ŒŒ: @
(
ŒŒ@ A
ref
ŒŒA D

connection
ŒŒE O
,
ŒŒO P
ref
ŒŒQ T$
m_NetworkSendInterface
ŒŒU k
,
ŒŒk l
ref
ŒŒm p
queueHandle
ŒŒq |
,
ŒŒ| })
m_NetworkProtocolInterfaceŒŒ~ ò
.ŒŒò ô
UserDataŒŒô °
)ŒŒ° ¢
;ŒŒ¢ £
}
œœ 
RemoveConnection
–– 
(
–– 

connection
–– '
)
––' (
;
––( )
return
““ 
$num
““ 
;
““ 
}
”” 	
public
ﬂﬂ 
void
ﬂﬂ  
GetPipelineBuffers
ﬂﬂ &
(
ﬂﬂ& '
NetworkPipeline
ﬂﬂ' 6
pipeline
ﬂﬂ7 ?
,
ﬂﬂ? @$
NetworkPipelineStageId
ﬂﬂA W
stageId
ﬂﬂX _
,
ﬂﬂ_ `
NetworkConnection
ﬂﬂa r

connection
ﬂﬂs }
,
ﬂﬂ} ~
outﬂﬂ Ç
NativeArrayﬂﬂÉ é
<ﬂﬂé è
byteﬂﬂè ì
>ﬂﬂì î$
readProcessingBufferﬂﬂï ©
,ﬂﬂ© ™
outﬂﬂ´ Æ
NativeArrayﬂﬂØ ∫
<ﬂﬂ∫ ª
byteﬂﬂª ø
>ﬂﬂø ¿%
writeProcessingBufferﬂﬂ¡ ÷
,ﬂﬂ÷ ◊
outﬂﬂÿ €
NativeArrayﬂﬂ‹ Á
<ﬂﬂÁ Ë
byteﬂﬂË Ï
>ﬂﬂÏ Ì
sharedBufferﬂﬂÓ ˙
)ﬂﬂ˙ ˚
{
‡‡ 	
if
·· 
(
·· 

connection
·· 
.
·· 
m_NetworkId
·· &
<
··' (
$num
··) *
||
··+ -

connection
··. 8
.
··8 9
m_NetworkId
··9 D
>=
··E G
m_ConnectionList
··H X
.
··X Y
Length
··Y _
||
··` b
m_ConnectionList
‚‚  
[
‚‚  !

connection
‚‚! +
.
‚‚+ ,
m_NetworkId
‚‚, 7
]
‚‚7 8
.
‚‚8 9
Version
‚‚9 @
!=
‚‚A C

connection
‚‚D N
.
‚‚N O
m_NetworkVersion
‚‚O _
)
‚‚_ `
{
„„ 
throw
ÂÂ 
new
ÂÂ '
InvalidOperationException
ÂÂ 3
(
ÂÂ3 4
$str
ÂÂ4 H
)
ÂÂH I
;
ÂÂI J
}
ÌÌ !
m_PipelineProcessor
ÓÓ 
.
ÓÓ   
GetPipelineBuffers
ÓÓ  2
(
ÓÓ2 3
pipeline
ÓÓ3 ;
,
ÓÓ; <
stageId
ÓÓ= D
,
ÓÓD E

connection
ÓÓF P
,
ÓÓP Q
out
ÓÓR U"
readProcessingBuffer
ÓÓV j
,
ÓÓj k
out
ÓÓl o$
writeProcessingBufferÓÓp Ö
,ÓÓÖ Ü
outÓÓá ä
sharedBufferÓÓã ó
)ÓÓó ò
;ÓÓò ô
}
ÔÔ 	
public
ˆˆ 
NetworkConnection
ˆˆ  
.
ˆˆ  !
State
ˆˆ! & 
GetConnectionState
ˆˆ' 9
(
ˆˆ9 :
NetworkConnection
ˆˆ: K
con
ˆˆL O
)
ˆˆO P
{
˜˜ 	

Connection
¯¯ 

connection
¯¯ !
;
¯¯! "
if
˘˘ 
(
˘˘ 
(
˘˘ 

connection
˘˘ 
=
˘˘ 
GetConnection
˘˘ +
(
˘˘+ ,
con
˘˘, /
)
˘˘/ 0
)
˘˘0 1
==
˘˘2 4

Connection
˘˘5 ?
.
˘˘? @
Null
˘˘@ D
)
˘˘D E
return
˙˙ 
NetworkConnection
˙˙ (
.
˙˙( )
State
˙˙) .
.
˙˙. /
Disconnected
˙˙/ ;
;
˙˙; <
return
˚˚ 

connection
˚˚ 
.
˚˚ 
State
˚˚ #
;
˚˚# $
}
¸¸ 	
public
˛˛ 
NetworkEndPoint
˛˛ 
RemoteEndPoint
˛˛ -
(
˛˛- .
NetworkConnection
˛˛. ?
id
˛˛@ B
)
˛˛B C
{
ˇˇ 	
if
Ä	Ä	 
(
Ä	Ä	 
id
Ä	Ä	 
==
Ä	Ä	 
default
Ä	Ä	 
)
Ä	Ä	 
return
Å	Å	 
default
Å	Å	 
;
Å	Å	 

Connection
É	É	 

connection
É	É	 !
;
É	É	! "
if
Ñ	Ñ	 
(
Ñ	Ñ	 
(
Ñ	Ñ	 

connection
Ñ	Ñ	 
=
Ñ	Ñ	 
GetConnection
Ñ	Ñ	 +
(
Ñ	Ñ	+ ,
id
Ñ	Ñ	, .
)
Ñ	Ñ	. /
)
Ñ	Ñ	/ 0
==
Ñ	Ñ	1 3

Connection
Ñ	Ñ	4 >
.
Ñ	Ñ	> ?
Null
Ñ	Ñ	? C
)
Ñ	Ñ	C D
return
Ö	Ö	 
default
Ö	Ö	 
;
Ö	Ö	 
return
Ü	Ü	  
s_NetworkProtocols
Ü	Ü	 %
[
Ü	Ü	% &$
m_NetworkProtocolIndex
Ü	Ü	& <
]
Ü	Ü	< =
.
Ü	Ü	= >
GetRemoteEndPoint
Ü	Ü	> O
(
Ü	Ü	O P!
s_NetworkInterfaces
Ü	Ü	P c
[
Ü	Ü	c d%
m_NetworkInterfaceIndex
Ü	Ü	d {
]
Ü	Ü	{ |
,
Ü	Ü	| }

connectionÜ	Ü	~ à
.Ü	Ü	à â
AddressÜ	Ü	â ê
)Ü	Ü	ê ë
;Ü	Ü	ë í
}
á	á	 	
public
ç	ç	 
NetworkEndPoint
ç	ç	 
LocalEndPoint
ç	ç	 ,
(
ç	ç	, -
)
ç	ç	- .
{
é	é	 	
var
è	è	 
ep
è	è	 
=
è	è	 !
s_NetworkInterfaces
è	è	 (
[
è	è	( )%
m_NetworkInterfaceIndex
è	è	) @
]
è	è	@ A
.
è	è	A B
LocalEndPoint
è	è	B O
;
è	è	O P
return
ê	ê	 !
s_NetworkInterfaces
ê	ê	 &
[
ê	ê	& '%
m_NetworkInterfaceIndex
ê	ê	' >
]
ê	ê	> ?
.
ê	ê	? @ 
GetGenericEndPoint
ê	ê	@ R
(
ê	ê	R S
ep
ê	ê	S U
)
ê	ê	U V
;
ê	ê	V W
}
ë	ë	 	
public
ò	ò	 
int
ò	ò	 
MaxHeaderSize
ò	ò	  
(
ò	ò	  !
NetworkPipeline
ò	ò	! 0
pipe
ò	ò	1 5
)
ò	ò	5 6
{
ô	ô	 	
return
ö	ö	 "
ToConcurrentSendOnly
ö	ö	 '
(
ö	ö	' (
)
ö	ö	( )
.
ö	ö	) *
MaxHeaderSize
ö	ö	* 7
(
ö	ö	7 8
pipe
ö	ö	8 <
)
ö	ö	< =
;
ö	ö	= >
}
õ	õ	 	
internal
ù	ù	 
int
ù	ù	 #
MaxProtocolHeaderSize
ù	ù	 *
(
ù	ù	* +
)
ù	ù	+ ,
{
û	û	 	
return
ü	ü	 (
m_NetworkProtocolInterface
ü	ü	 -
.
ü	ü	- .
PaddingSize
ü	ü	. 9
;
ü	ü	9 :
}
†	†	 	
public
´	´	 
int
´	´	 
	BeginSend
´	´	 
(
´	´	 
NetworkPipeline
´	´	 ,
pipe
´	´	- 1
,
´	´	1 2
NetworkConnection
´	´	3 D
id
´	´	E G
,
´	´	G H
out
´	´	I L
DataStreamWriter
´	´	M ]
writer
´	´	^ d
,
´	´	d e
int
´	´	f i!
requiredPayloadSize
´	´	j }
=
´	´	~ 
$num´	´	Ä Å
)´	´	Å Ç
{
¨	¨	 	
return
≠	≠	 "
ToConcurrentSendOnly
≠	≠	 '
(
≠	≠	' (
)
≠	≠	( )
.
≠	≠	) *
	BeginSend
≠	≠	* 3
(
≠	≠	3 4
pipe
≠	≠	4 8
,
≠	≠	8 9
id
≠	≠	: <
,
≠	≠	< =
out
≠	≠	> A
writer
≠	≠	B H
,
≠	≠	H I!
requiredPayloadSize
≠	≠	J ]
)
≠	≠	] ^
;
≠	≠	^ _
}
Æ	Æ	 	
public
∏	∏	 
int
∏	∏	 
	BeginSend
∏	∏	 
(
∏	∏	 
NetworkConnection
∏	∏	 .
id
∏	∏	/ 1
,
∏	∏	1 2
out
∏	∏	3 6
DataStreamWriter
∏	∏	7 G
writer
∏	∏	H N
,
∏	∏	N O
int
∏	∏	P S!
requiredPayloadSize
∏	∏	T g
=
∏	∏	h i
$num
∏	∏	j k
)
∏	∏	k l
{
π	π	 	
return
∫	∫	 "
ToConcurrentSendOnly
∫	∫	 '
(
∫	∫	' (
)
∫	∫	( )
.
∫	∫	) *
	BeginSend
∫	∫	* 3
(
∫	∫	3 4
NetworkPipeline
∫	∫	4 C
.
∫	∫	C D
Null
∫	∫	D H
,
∫	∫	H I
id
∫	∫	J L
,
∫	∫	L M
out
∫	∫	N Q
writer
∫	∫	R X
,
∫	∫	X Y!
requiredPayloadSize
∫	∫	Z m
)
∫	∫	m n
;
∫	∫	n o
}
ª	ª	 	
public
ƒ	ƒ	 
int
ƒ	ƒ	 
EndSend
ƒ	ƒ	 
(
ƒ	ƒ	 
DataStreamWriter
ƒ	ƒ	 +
writer
ƒ	ƒ	, 2
)
ƒ	ƒ	2 3
{
≈	≈	 	
return
∆	∆	 "
ToConcurrentSendOnly
∆	∆	 '
(
∆	∆	' (
)
∆	∆	( )
.
∆	∆	) *
EndSend
∆	∆	* 1
(
∆	∆	1 2
writer
∆	∆	2 8
)
∆	∆	8 9
;
∆	∆	9 :
}
«	«	 	
public
–	–	 
void
–	–	 
	AbortSend
–	–	 
(
–	–	 
DataStreamWriter
–	–	 .
writer
–	–	/ 5
)
–	–	5 6
{
—	—	 	"
ToConcurrentSendOnly
“	“	  
(
“	“	  !
)
“	“	! "
.
“	“	" #
	AbortSend
“	“	# ,
(
“	“	, -
writer
“	“	- 3
)
“	“	3 4
;
“	“	4 5
}
”	”	 	
public
ﬂ	ﬂ	 
NetworkEvent
ﬂ	ﬂ	 
.
ﬂ	ﬂ	 
Type
ﬂ	ﬂ	  
PopEvent
ﬂ	ﬂ	! )
(
ﬂ	ﬂ	) *
out
ﬂ	ﬂ	* -
NetworkConnection
ﬂ	ﬂ	. ?
con
ﬂ	ﬂ	@ C
,
ﬂ	ﬂ	C D
out
ﬂ	ﬂ	E H
DataStreamReader
ﬂ	ﬂ	I Y
reader
ﬂ	ﬂ	Z `
)
ﬂ	ﬂ	` a
{
‡	‡	 	
return
·	·	 
PopEvent
·	·	 
(
·	·	 
out
·	·	 
con
·	·	  #
,
·	·	# $
out
·	·	% (
reader
·	·	) /
,
·	·	/ 0
out
·	·	1 4
var
·	·	5 8
_
·	·	9 :
)
·	·	: ;
;
·	·	; <
}
‚	‚	 	
public
Î	Î	 
NetworkEvent
Î	Î	 
.
Î	Î	 
Type
Î	Î	  
PopEvent
Î	Î	! )
(
Î	Î	) *
out
Î	Î	* -
NetworkConnection
Î	Î	. ?
con
Î	Î	@ C
,
Î	Î	C D
out
Î	Î	E H
DataStreamReader
Î	Î	I Y
reader
Î	Î	Z `
,
Î	Î	` a
out
Î	Î	b e
NetworkPipeline
Î	Î	f u
pipeline
Î	Î	v ~
)
Î	Î	~ 
{
Ï	Ï	 	
reader
Ì	Ì	 
=
Ì	Ì	 
default
Ì	Ì	 
;
Ì	Ì	 
NetworkEvent
Ô	Ô	 
.
Ô	Ô	 
Type
Ô	Ô	 
type
Ô	Ô	 "
=
Ô	Ô	# $
default
Ô	Ô	% ,
;
Ô	Ô	, -
int
		 
id
		 
=
		 
default
		 
;
		 
int
Ò	Ò	 
offset
Ò	Ò	 
=
Ò	Ò	 
default
Ò	Ò	  
;
Ò	Ò	  !
int
Ú	Ú	 
size
Ú	Ú	 
=
Ú	Ú	 
default
Ú	Ú	 
;
Ú	Ú	 
int
Û	Û	 

pipelineId
Û	Û	 
=
Û	Û	 
default
Û	Û	 $
;
Û	Û	$ %
while
ı	ı	 
(
ı	ı	 
true
ı	ı	 
)
ı	ı	 
{
ˆ	ˆ	 
type
˜	˜	 
=
˜	˜	 
m_EventQueue
˜	˜	 #
.
˜	˜	# $
PopEvent
˜	˜	$ ,
(
˜	˜	, -
out
˜	˜	- 0
id
˜	˜	1 3
,
˜	˜	3 4
out
˜	˜	5 8
offset
˜	˜	9 ?
,
˜	˜	? @
out
˜	˜	A D
size
˜	˜	E I
,
˜	˜	I J
out
˜	˜	K N

pipelineId
˜	˜	O Y
)
˜	˜	Y Z
;
˜	˜	Z [
if
˝	˝	 
(
˝	˝	 
id
˝	˝	 
>=
˝	˝	 
$num
˝	˝	 
&&
˝	˝	 
type
˝	˝	 #
==
˝	˝	$ &
NetworkEvent
˝	˝	' 3
.
˝	˝	3 4
Type
˝	˝	4 8
.
˝	˝	8 9
Data
˝	˝	9 =
&&
˝	˝	> @
m_ConnectionList
˝	˝	A Q
[
˝	˝	Q R
id
˝	˝	R T
]
˝	˝	T U
.
˝	˝	U V

IsAccepted
˝	˝	V `
==
˝	˝	a c
$num
˝	˝	d e
)
˝	˝	e f
{
˛	˛	 
UnityEngine
ˇ	ˇ	 
.
ˇ	ˇ	  
Debug
ˇ	ˇ	  %
.
ˇ	ˇ	% &

LogWarning
ˇ	ˇ	& 0
(
ˇ	ˇ	0 1
$strˇ	ˇ	1 ¥
+ˇ	ˇ	µ ∂
$strÄ
Ä
 ó
)Ä
Ä
ó ò
;Ä
Ä
ò ô
continue
Å
Å
 
;
Å
Å
 
}
Ç
Ç
 
break
Ñ
Ñ
 
;
Ñ
Ñ
 
}
Ö
Ö
 
pipeline
á
á
 
=
á
á
 
new
á
á
 
NetworkPipeline
á
á
 *
{
á
á
+ ,
Id
á
á
- /
=
á
á
0 1

pipelineId
á
á
2 <
}
á
á
= >
;
á
á
> ?
if
â
â
 
(
â
â
 
type
â
â
 
==
â
â
 
NetworkEvent
â
â
 $
.
â
â
$ %
Type
â
â
% )
.
â
â
) *

Disconnect
â
â
* 4
&&
â
â
5 7
offset
â
â
8 >
<
â
â
? @
$num
â
â
A B
)
â
â
B C
reader
ä
ä
 
=
ä
ä
 
new
ä
ä
 
DataStreamReader
ä
ä
 -
(
ä
ä
- .!
m_DisconnectReasons
ä
ä
. A
.
ä
ä
A B
GetSubArray
ä
ä
B M
(
ä
ä
M N
math
ä
ä
N R
.
ä
ä
R S
abs
ä
ä
S V
(
ä
ä
V W
offset
ä
ä
W ]
)
ä
ä
] ^
,
ä
ä
^ _
$num
ä
ä
` a
)
ä
ä
a b
)
ä
ä
b c
;
ä
ä
c d
else
ã
ã
 
if
ã
ã
 
(
ã
ã
 
size
ã
ã
 
>
ã
ã
 
$num
ã
ã
 
)
ã
ã
 
reader
å
å
 
=
å
å
 
new
å
å
 
DataStreamReader
å
å
 -
(
å
å
- .
(
å
å
. /
(
å
å
/ 0
NativeArray
å
å
0 ;
<
å
å
; <
byte
å
å
< @
>
å
å
@ A
)
å
å
A B
m_DataStream
å
å
B N
)
å
å
N O
.
å
å
O P
GetSubArray
å
å
P [
(
å
å
[ \
offset
å
å
\ b
,
å
å
b c
size
å
å
d h
)
å
å
h i
)
å
å
i j
;
å
å
j k
con
ç
ç
 
=
ç
ç
 
id
ç
ç
 
<
ç
ç
 
$num
ç
ç
 
?
é
é
 
default
é
é
 
:
è
è
 
new
è
è
 
NetworkConnection
è
è
 '
{
è
è
( )
m_NetworkId
è
è
) 4
=
è
è
5 6
id
è
è
7 9
,
è
è
9 :
m_NetworkVersion
è
è
; K
=
è
è
L M
m_ConnectionList
è
è
N ^
[
è
è
^ _
id
è
è
_ a
]
è
è
a b
.
è
è
b c
Version
è
è
c j
}
è
è
j k
;
è
è
k l
return
ë
ë
 
type
ë
ë
 
;
ë
ë
 
}
í
í
 	
public
ú
ú
 
NetworkEvent
ú
ú
 
.
ú
ú
 
Type
ú
ú
  #
PopEventForConnection
ú
ú
! 6
(
ú
ú
6 7
NetworkConnection
ú
ú
7 H
connectionId
ú
ú
I U
,
ú
ú
U V
out
ú
ú
W Z
DataStreamReader
ú
ú
[ k
reader
ú
ú
l r
)
ú
ú
r s
{
ù
ù
 	
return
û
û
 #
PopEventForConnection
û
û
 (
(
û
û
( )
connectionId
û
û
) 5
,
û
û
5 6
out
û
û
7 :
reader
û
û
; A
,
û
û
A B
out
û
û
C F
var
û
û
G J
_
û
û
K L
)
û
û
L M
;
û
û
M N
}
ü
ü
 	
public
®
®
 
NetworkEvent
®
®
 
.
®
®
 
Type
®
®
  #
PopEventForConnection
®
®
! 6
(
®
®
6 7
NetworkConnection
®
®
7 H
connectionId
®
®
I U
,
®
®
U V
out
®
®
W Z
DataStreamReader
®
®
[ k
reader
®
®
l r
,
®
®
r s
out
®
®
t w
NetworkPipeline®
®
x á
pipeline®
®
à ê
)®
®
ê ë
{
©
©
 	
reader
™
™
 
=
™
™
 
default
™
™
 
;
™
™
 
pipeline
´
´
 
=
´
´
 
default
´
´
 
;
´
´
 
if
≠
≠
 
(
≠
≠
 
connectionId
≠
≠
 
.
≠
≠
 
m_NetworkId
≠
≠
 (
<
≠
≠
) *
$num
≠
≠
+ ,
||
≠
≠
- /
connectionId
≠
≠
0 <
.
≠
≠
< =
m_NetworkId
≠
≠
= H
>=
≠
≠
I K
m_ConnectionList
≠
≠
L \
.
≠
≠
\ ]
Length
≠
≠
] c
||
≠
≠
d f
m_ConnectionList
Æ
Æ
  
[
Æ
Æ
  !
connectionId
Æ
Æ
! -
.
Æ
Æ
- .
m_NetworkId
Æ
Æ
. 9
]
Æ
Æ
9 :
.
Æ
Æ
: ;
Version
Æ
Æ
; B
!=
Æ
Æ
C E
connectionId
Æ
Æ
F R
.
Æ
Æ
R S
m_NetworkVersion
Æ
Æ
S c
)
Æ
Æ
c d
return
Ø
Ø
 
(
Ø
Ø
 
int
Ø
Ø
 
)
Ø
Ø
 
NetworkEvent
Ø
Ø
 (
.
Ø
Ø
( )
Type
Ø
Ø
) -
.
Ø
Ø
- .
Empty
Ø
Ø
. 3
;
Ø
Ø
3 4
var
∞
∞
 
type
∞
∞
 
=
∞
∞
 
m_EventQueue
∞
∞
 #
.
∞
∞
# $#
PopEventForConnection
∞
∞
$ 9
(
∞
∞
9 :
connectionId
∞
∞
: F
.
∞
∞
F G
m_NetworkId
∞
∞
G R
,
∞
∞
R S
out
∞
∞
T W
var
∞
∞
X [
offset
∞
∞
\ b
,
∞
∞
b c
out
∞
∞
d g
var
∞
∞
h k
size
∞
∞
l p
,
∞
∞
p q
out
∞
∞
r u
var
∞
∞
v y

pipelineId∞
∞
z Ñ
)∞
∞
Ñ Ö
;∞
∞
Ö Ü
pipeline
±
±
 
=
±
±
 
new
±
±
 
NetworkPipeline
±
±
 *
{
±
±
+ ,
Id
±
±
- /
=
±
±
0 1

pipelineId
±
±
2 <
}
±
±
= >
;
±
±
> ?
if
≥
≥
 
(
≥
≥
 
type
≥
≥
 
==
≥
≥
 
NetworkEvent
≥
≥
 $
.
≥
≥
$ %
Type
≥
≥
% )
.
≥
≥
) *

Disconnect
≥
≥
* 4
&&
≥
≥
5 7
offset
≥
≥
8 >
<
≥
≥
? @
$num
≥
≥
A B
)
≥
≥
B C
reader
¥
¥
 
=
¥
¥
 
new
¥
¥
 
DataStreamReader
¥
¥
 -
(
¥
¥
- .!
m_DisconnectReasons
¥
¥
. A
.
¥
¥
A B
GetSubArray
¥
¥
B M
(
¥
¥
M N
math
¥
¥
N R
.
¥
¥
R S
abs
¥
¥
S V
(
¥
¥
V W
offset
¥
¥
W ]
)
¥
¥
] ^
,
¥
¥
^ _
$num
¥
¥
` a
)
¥
¥
a b
)
¥
¥
b c
;
¥
¥
c d
else
µ
µ
 
if
µ
µ
 
(
µ
µ
 
size
µ
µ
 
>
µ
µ
 
$num
µ
µ
 
)
µ
µ
 
reader
∂
∂
 
=
∂
∂
 
new
∂
∂
 
DataStreamReader
∂
∂
 -
(
∂
∂
- .
(
∂
∂
. /
(
∂
∂
/ 0
NativeArray
∂
∂
0 ;
<
∂
∂
; <
byte
∂
∂
< @
>
∂
∂
@ A
)
∂
∂
A B
m_DataStream
∂
∂
B N
)
∂
∂
N O
.
∂
∂
O P
GetSubArray
∂
∂
P [
(
∂
∂
[ \
offset
∂
∂
\ b
,
∂
∂
b c
size
∂
∂
d h
)
∂
∂
h i
)
∂
∂
i j
;
∂
∂
j k
return
∏
∏
 
type
∏
∏
 
;
∏
∏
 
}
π
π
 	
public
¿
¿
 
int
¿
¿
 ,
GetEventQueueSizeForConnection
¿
¿
 1
(
¿
¿
1 2
NetworkConnection
¿
¿
2 C
connectionId
¿
¿
D P
)
¿
¿
P Q
{
¡
¡
 	
if
¬
¬
 
(
¬
¬
 
connectionId
¬
¬
 
.
¬
¬
 
m_NetworkId
¬
¬
 (
<
¬
¬
) *
$num
¬
¬
+ ,
||
¬
¬
- /
connectionId
¬
¬
0 <
.
¬
¬
< =
m_NetworkId
¬
¬
= H
>=
¬
¬
I K
m_ConnectionList
¬
¬
L \
.
¬
¬
\ ]
Length
¬
¬
] c
||
¬
¬
d f
m_ConnectionList
√
√
  
[
√
√
  !
connectionId
√
√
! -
.
√
√
- .
m_NetworkId
√
√
. 9
]
√
√
9 :
.
√
√
: ;
Version
√
√
; B
!=
√
√
C E
connectionId
√
√
F R
.
√
√
R S
m_NetworkVersion
√
√
S c
)
√
√
c d
return
ƒ
ƒ
 
$num
ƒ
ƒ
 
;
ƒ
ƒ
 
return
≈
≈
 
m_EventQueue
≈
≈
 
.
≈
≈
  #
GetCountForConnection
≈
≈
  5
(
≈
≈
5 6
connectionId
≈
≈
6 B
.
≈
≈
B C
m_NetworkId
≈
≈
C N
)
≈
≈
N O
;
≈
≈
O P
}
∆
∆
 	
void
…
…
 
AddConnectEvent
…
…
 
(
…
…
 
int
…
…
  
id
…
…
! #
)
…
…
# $
{
 
 
 	
m_EventQueue
À
À
 
.
À
À
 
	PushEvent
À
À
 "
(
À
À
" #
new
À
À
# &
NetworkEvent
À
À
' 3
{
À
À
4 5
connectionId
À
À
5 A
=
À
À
B C
id
À
À
D F
,
À
À
F G
type
À
À
H L
=
À
À
M N
NetworkEvent
À
À
O [
.
À
À
[ \
Type
À
À
\ `
.
À
À
` a
Connect
À
À
a h
}
À
À
h i
)
À
À
i j
;
À
À
j k
}
Ã
Ã
 	
void
Œ
Œ
  
AddDisconnectEvent
Œ
Œ
 
(
Œ
Œ
  
int
Œ
Œ
  #
id
Œ
Œ
$ &
,
Œ
Œ
& '
Error
Œ
Œ
( -
.
Œ
Œ
- .
DisconnectReason
Œ
Œ
. >
reason
Œ
Œ
? E
=
Œ
Œ
F G
DisconnectReason
Œ
Œ
H X
.
Œ
Œ
X Y
Default
Œ
Œ
Y `
)
Œ
Œ
` a
{
œ
œ
 	
m_EventQueue
–
–
 
.
–
–
 
	PushEvent
–
–
 "
(
–
–
" #
new
–
–
# &
NetworkEvent
–
–
' 3
{
–
–
4 5
connectionId
–
–
6 B
=
–
–
C D
id
–
–
E G
,
–
–
G H
type
–
–
I M
=
–
–
N O
NetworkEvent
–
–
P \
.
–
–
\ ]
Type
–
–
] a
.
–
–
a b

Disconnect
–
–
b l
,
–
–
l m
status
–
–
n t
=
–
–
u v
(
–
–
w x
int
–
–
x {
)
–
–
{ |
reason–
–
| Ç
}–
–
É Ñ
)–
–
Ñ Ö
;–
–
Ö Ü
}
—
—
 	

Connection
”
”
 
GetConnection
”
”
  
(
”
”
  !
NetworkConnection
”
”
! 2
id
”
”
3 5
)
”
”
5 6
{
‘
‘
 	
if
’
’
 
(
’
’
 
id
’
’
 
.
’
’
 
m_NetworkId
’
’
 
<
’
’
  
$num
’
’
! "
||
’
’
# %
id
’
’
& (
.
’
’
( )
m_NetworkId
’
’
) 4
>=
’
’
5 7
m_ConnectionList
’
’
8 H
.
’
’
H I
Length
’
’
I O
)
’
’
O P
return
÷
÷
 

Connection
÷
÷
 !
.
÷
÷
! "
Null
÷
÷
" &
;
÷
÷
& '
var
ÿ
ÿ
 
con
ÿ
ÿ
 
=
ÿ
ÿ
 
m_ConnectionList
ÿ
ÿ
 &
[
ÿ
ÿ
& '
id
ÿ
ÿ
' )
.
ÿ
ÿ
) *
m_NetworkId
ÿ
ÿ
* 5
]
ÿ
ÿ
5 6
;
ÿ
ÿ
6 7
if
Ÿ
Ÿ
 
(
Ÿ
Ÿ
 
con
Ÿ
Ÿ
 
.
Ÿ
Ÿ
 
Version
Ÿ
Ÿ
 
!=
Ÿ
Ÿ
 
id
Ÿ
Ÿ
 !
.
Ÿ
Ÿ
! "
m_NetworkVersion
Ÿ
Ÿ
" 2
)
Ÿ
Ÿ
2 3
return
⁄
⁄
 

Connection
⁄
⁄
 !
.
⁄
⁄
! "
Null
⁄
⁄
" &
;
⁄
⁄
& '
return
€
€
 
con
€
€
 
;
€
€
 
}
‹
‹
 	

Connection
ﬁ
ﬁ
 
GetConnection
ﬁ
ﬁ
  
(
ﬁ
ﬁ
  !&
NetworkInterfaceEndPoint
ﬁ
ﬁ
! 9
address
ﬁ
ﬁ
: A
,
ﬁ
ﬁ
A B
SessionIdToken
ﬁ
ﬁ
C Q
	sessionId
ﬁ
ﬁ
R [
)
ﬁ
ﬁ
[ \
{
ﬂ
ﬂ
 	
for
‡
‡
 
(
‡
‡
 
int
‡
‡
 
i
‡
‡
 
=
‡
‡
 
$num
‡
‡
 
;
‡
‡
 
i
‡
‡
 
<
‡
‡
 
m_ConnectionList
‡
‡
  0
.
‡
‡
0 1
Length
‡
‡
1 7
;
‡
‡
7 8
i
‡
‡
9 :
++
‡
‡
: <
)
‡
‡
< =
{
·
·
 
if
‚
‚
 
(
‚
‚
 
address
‚
‚
 
==
‚
‚
 
m_ConnectionList
‚
‚
 /
[
‚
‚
/ 0
i
‚
‚
0 1
]
‚
‚
1 2
.
‚
‚
2 3
Address
‚
‚
3 :
&&
‚
‚
; =
m_ConnectionList
‚
‚
> N
[
‚
‚
N O
i
‚
‚
O P
]
‚
‚
P Q
.
‚
‚
Q R
ReceiveToken
‚
‚
R ^
==
‚
‚
_ a
	sessionId
‚
‚
b k
)
‚
‚
k l
return
„
„
 
m_ConnectionList
„
„
 +
[
„
„
+ ,
i
„
„
, -
]
„
„
- .
;
„
„
. /
}
‰
‰
 
return
Ê
Ê
 

Connection
Ê
Ê
 
.
Ê
Ê
 
Null
Ê
Ê
 "
;
Ê
Ê
" #
}
Á
Á
 	

Connection
È
È
 
GetNewConnection
È
È
 #
(
È
È
# $&
NetworkInterfaceEndPoint
È
È
$ <
address
È
È
= D
,
È
È
D E
SessionIdToken
È
È
F T
	sessionId
È
È
U ^
)
È
È
^ _
{
Í
Í
 	
for
Î
Î
 
(
Î
Î
 
int
Î
Î
 
i
Î
Î
 
=
Î
Î
 
$num
Î
Î
 
;
Î
Î
 
i
Î
Î
 
<
Î
Î
 
m_ConnectionList
Î
Î
  0
.
Î
Î
0 1
Length
Î
Î
1 7
;
Î
Î
7 8
i
Î
Î
9 :
++
Î
Î
: <
)
Î
Î
< =
{
Ï
Ï
 
if
Ì
Ì
 
(
Ì
Ì
 
address
Ì
Ì
 
==
Ì
Ì
 
m_ConnectionList
Ì
Ì
 /
[
Ì
Ì
/ 0
i
Ì
Ì
0 1
]
Ì
Ì
1 2
.
Ì
Ì
2 3
Address
Ì
Ì
3 :
&&
Ì
Ì
; =
m_ConnectionList
Ì
Ì
> N
[
Ì
Ì
N O
i
Ì
Ì
O P
]
Ì
Ì
P Q
.
Ì
Ì
Q R
	SendToken
Ì
Ì
R [
==
Ì
Ì
\ ^
	sessionId
Ì
Ì
_ h
)
Ì
Ì
h i
return
Ó
Ó
 
m_ConnectionList
Ó
Ó
 +
[
Ó
Ó
+ ,
i
Ó
Ó
, -
]
Ó
Ó
- .
;
Ó
Ó
. /
}
Ô
Ô
 
return
Ò
Ò
 

Connection
Ò
Ò
 
.
Ò
Ò
 
Null
Ò
Ò
 "
;
Ò
Ò
" #
}
Ú
Ú
 	
void
Ù
Ù
 
SetConnection
Ù
Ù
 
(
Ù
Ù
 

Connection
Ù
Ù
 %

connection
Ù
Ù
& 0
)
Ù
Ù
0 1
{
ı
ı
 	
m_ConnectionList
ˆ
ˆ
 
[
ˆ
ˆ
 

connection
ˆ
ˆ
 '
.
ˆ
ˆ
' (
Id
ˆ
ˆ
( *
]
ˆ
ˆ
* +
=
ˆ
ˆ
, -

connection
ˆ
ˆ
. 8
;
ˆ
ˆ
8 9
}
˜
˜
 	
bool
˘
˘
 
RemoveConnection
˘
˘
 
(
˘
˘
 

Connection
˘
˘
 (

connection
˘
˘
) 3
)
˘
˘
3 4
{
˙
˙
 	
if
˚
˚
 
(
˚
˚
 

connection
˚
˚
 
.
˚
˚
 
State
˚
˚
  
!=
˚
˚
! #
NetworkConnection
˚
˚
$ 5
.
˚
˚
5 6
State
˚
˚
6 ;
.
˚
˚
; <
Disconnected
˚
˚
< H
&&
˚
˚
I K

connection
˚
˚
L V
==
˚
˚
W Y
m_ConnectionList
˚
˚
Z j
[
˚
˚
j k

connection
˚
˚
k u
.
˚
˚
u v
Id
˚
˚
v x
]
˚
˚
x y
)
˚
˚
y z
{
¸
¸
 

connection
˝
˝
 
.
˝
˝
 
State
˝
˝
  
=
˝
˝
! "
NetworkConnection
˝
˝
# 4
.
˝
˝
4 5
State
˝
˝
5 :
.
˝
˝
: ;
Disconnected
˝
˝
; G
;
˝
˝
G H
m_ConnectionList
˛
˛
  
[
˛
˛
  !

connection
˛
˛
! +
.
˛
˛
+ ,
Id
˛
˛
, .
]
˛
˛
. /
=
˛
˛
0 1

connection
˛
˛
2 <
;
˛
˛
< =
m_PendingFree
ˇ
ˇ
 
.
ˇ
ˇ
 
Enqueue
ˇ
ˇ
 %
(
ˇ
ˇ
% &

connection
ˇ
ˇ
& 0
.
ˇ
ˇ
0 1
Id
ˇ
ˇ
1 3
)
ˇ
ˇ
3 4
;
ˇ
ˇ
4 5
return
ÅÅ 
true
ÅÅ 
;
ÅÅ 
}
ÇÇ 
return
ÑÑ 
false
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
void
áá 
UpdateConnection
áá 
(
áá 

Connection
áá (

connection
áá) 3
)
áá3 4
{
àà 	
if
ââ 
(
ââ 

connection
ââ 
==
ââ 
m_ConnectionList
ââ .
[
ââ. /

connection
ââ/ 9
.
ââ9 :
Id
ââ: <
]
ââ< =
)
ââ= >
SetConnection
ää 
(
ää 

connection
ää (
)
ää( )
;
ää) *
}
ãã 	
void
çç 
CheckTimeouts
çç 
(
çç 
)
çç 
{
éé 	
for
èè 
(
èè 
int
èè 
i
èè 
=
èè 
$num
èè 
;
èè 
i
èè 
<
èè 
m_ConnectionList
èè  0
.
èè0 1
Length
èè1 7
;
èè7 8
++
èè9 ;
i
èè; <
)
èè< =
{
êê 
var
ëë 

connection
ëë 
=
ëë  
m_ConnectionList
ëë! 1
[
ëë1 2
i
ëë2 3
]
ëë3 4
;
ëë4 5
if
íí 
(
íí 

connection
íí 
==
íí !

Connection
íí" ,
.
íí, -
Null
íí- 1
)
íí1 2
continue
ìì 
;
ìì 
long
ïï 
now
ïï 
=
ïï 
m_UpdateTime
ïï '
;
ïï' (
var
óó 
netcon
óó 
=
óó 
new
óó  
NetworkConnection
óó! 2
{
óó3 4
m_NetworkId
óó4 ?
=
óó@ A

connection
óóB L
.
óóL M
Id
óóM O
,
óóO P
m_NetworkVersion
óóQ a
=
óób c

connection
óód n
.
óón o
Version
óóo v
}
óóv w
;
óów x
if
õõ 
(
õõ 

connection
õõ 
.
õõ 
State
õõ $
==
õõ% '
NetworkConnection
õõ( 9
.
õõ9 :
State
õõ: ?
.
õõ? @

Connecting
õõ@ J
&&
õõK M
now
úú 
-
úú 

connection
úú $
.
úú$ %
LastNonDataSend
úú% 4
>
úú5 6
m_NetworkParams
úú7 F
.
úúF G
config
úúG M
.
úúM N
connectTimeoutMS
úúN ^
)
úú^ _
{
ùù 
if
ûû 
(
ûû 

connection
ûû "
.
ûû" #
ConnectAttempts
ûû# 2
>=
ûû3 5
m_NetworkParams
ûû6 E
.
ûûE F
config
ûûF L
.
ûûL M 
maxConnectAttempts
ûûM _
)
ûû_ `
{
üü 

Disconnect
†† "
(
††" #
netcon
††# )
)
††) *
;
††* + 
AddDisconnectEvent
°° *
(
°°* +

connection
°°+ 5
.
°°5 6
Id
°°6 8
,
°°8 9
DisconnectReason
°°: J
.
°°J K#
MaxConnectionAttempts
°°K `
)
°°` a
;
°°a b
continue
¢¢  
;
¢¢  !
}
££ 

connection
•• 
.
•• 
ConnectAttempts
•• .
=
••/ 0
++
••1 3

connection
••3 =
.
••= >
ConnectAttempts
••> M
;
••M N

connection
¶¶ 
.
¶¶ 
LastNonDataSend
¶¶ .
=
¶¶/ 0
now
¶¶1 4
;
¶¶4 5
SetConnection
ßß !
(
ßß! "

connection
ßß" ,
)
ßß, -
;
ßß- .
var
©© 
queueHandle
©© #
=
©©$ %$
NetworkSendQueueHandle
©©& <
.
©©< =
ToTempHandle
©©= I
(
©©I J!
m_ParallelSendQueue
©©J ]
.
©©] ^
AsParallelWriter
©©^ n
(
©©n o
)
©©o p
)
©©p q
;
©©q r(
m_NetworkProtocolInterface
™™ .
.
™™. /
Connect
™™/ 6
.
™™6 7
Ptr
™™7 :
.
™™: ;
Invoke
™™; A
(
™™A B
ref
´´ 

connection
´´ &
,
´´& '
ref
´´( +$
m_NetworkSendInterface
´´, B
,
´´B C
ref
´´D G
queueHandle
´´H S
,
´´S T(
m_NetworkProtocolInterface
´´U o
.
´´o p
UserData
´´p x
)
´´x y
;
´´y z
}
¨¨ 
if
ØØ 
(
ØØ 

connection
ØØ 
.
ØØ 
State
ØØ $
==
ØØ% '
NetworkConnection
ØØ( 9
.
ØØ9 :
State
ØØ: ?
.
ØØ? @
	Connected
ØØ@ I
&&
ØØJ L
now
∞∞ 
-
∞∞ 

connection
∞∞ $
.
∞∞$ %
LastReceive
∞∞% 0
>
∞∞1 2
m_NetworkParams
∞∞3 B
.
∞∞B C
config
∞∞C I
.
∞∞I J!
disconnectTimeoutMS
∞∞J ]
)
∞∞] ^
{
±± 

Disconnect
≤≤ 
(
≤≤ 
netcon
≤≤ %
)
≤≤% &
;
≤≤& ' 
AddDisconnectEvent
≥≥ &
(
≥≥& '

connection
≥≥' 1
.
≥≥1 2
Id
≥≥2 4
,
≥≥4 5
DisconnectReason
≥≥6 F
.
≥≥F G
Timeout
≥≥G N
)
≥≥N O
;
≥≥O P
}
¥¥ 
if
∑∑ 
(
∑∑ 

connection
∑∑ 
.
∑∑ 
State
∑∑ $
==
∑∑% '
NetworkConnection
∑∑( 9
.
∑∑9 :
State
∑∑: ?
.
∑∑? @
	Connected
∑∑@ I
&&
∑∑J L

connection
∏∏ 
.
∏∏ 
DidReceiveData
∏∏ -
!=
∏∏. 0
$num
∏∏1 2
&&
∏∏3 5
m_NetworkParams
ππ #
.
ππ# $
config
ππ$ *
.
ππ* + 
heartbeatTimeoutMS
ππ+ =
>
ππ> ?
$num
ππ@ A
&&
ππB D
now
∫∫ 
-
∫∫ 

connection
∫∫ $
.
∫∫$ %
LastReceive
∫∫% 0
>
∫∫1 2
m_NetworkParams
∫∫3 B
.
∫∫B C
config
∫∫C I
.
∫∫I J 
heartbeatTimeoutMS
∫∫J \
&&
∫∫] _
now
ªª 
-
ªª 

connection
ªª $
.
ªª$ %
LastNonDataSend
ªª% 4
>
ªª5 6
m_NetworkParams
ªª7 F
.
ªªF G
config
ªªG M
.
ªªM N 
heartbeatTimeoutMS
ªªN `
)
ªª` a
{
ºº 

connection
ΩΩ 
.
ΩΩ 
LastNonDataSend
ΩΩ .
=
ΩΩ/ 0
now
ΩΩ1 4
;
ΩΩ4 5
SetConnection
ææ !
(
ææ! "

connection
ææ" ,
)
ææ, -
;
ææ- .
var
¿¿ 
queueHandle
¿¿ #
=
¿¿$ %$
NetworkSendQueueHandle
¿¿& <
.
¿¿< =
ToTempHandle
¿¿= I
(
¿¿I J!
m_ParallelSendQueue
¿¿J ]
.
¿¿] ^
AsParallelWriter
¿¿^ n
(
¿¿n o
)
¿¿o p
)
¿¿p q
;
¿¿q r(
m_NetworkProtocolInterface
¡¡ .
.
¡¡. /
ProcessSendPing
¡¡/ >
.
¡¡> ?
Ptr
¡¡? B
.
¡¡B C
Invoke
¡¡C I
(
¡¡I J
ref
¡¡J M

connection
¡¡N X
,
¡¡X Y
ref
¡¡Z ]$
m_NetworkSendInterface
¡¡^ t
,
¡¡t u
ref
¡¡v y
queueHandle¡¡z Ö
,¡¡Ö Ü*
m_NetworkProtocolInterface¡¡á °
.¡¡° ¢
UserData¡¡¢ ™
)¡¡™ ´
;¡¡´ ¨
}
¬¬ 
}
√√ 
}
ƒƒ 	
public
…… 
int
…… 
ReceiveErrorCode
…… #
{
   	
get
ÀÀ 
=>
ÀÀ 
m_ErrorCodes
ÀÀ 
[
ÀÀ  
(
ÀÀ  !
int
ÀÀ! $
)
ÀÀ$ %
ErrorCodeType
ÀÀ% 2
.
ÀÀ2 3
ReceiveError
ÀÀ3 ?
]
ÀÀ? @
;
ÀÀ@ A
internal
ÃÃ 
set
ÃÃ 
{
ÕÕ 
if
ŒŒ 
(
ŒŒ 
value
ŒŒ 
!=
ŒŒ 
$num
ŒŒ 
)
ŒŒ 
{
œœ 
UnityEngine
–– 
.
––  
Debug
––  %
.
––% &
LogError
––& .
(
––. /
FixedString
––/ :
.
––: ;
Format
––; A
(
––A B
$str
––B e
,
––e f
value
––g l
)
––l m
)
––m n
;
––n o
}
—— 
m_ErrorCodes
““ 
[
““ 
(
““ 
int
““ !
)
““! "
ErrorCodeType
““" /
.
““/ 0
ReceiveError
““0 <
]
““< =
=
““> ?
value
““@ E
;
““E F
}
”” 
}
‘‘ 	
internal
÷÷ 
bool
÷÷ 
IsAddressUsed
÷÷ #
(
÷÷# $&
NetworkInterfaceEndPoint
÷÷$ <
address
÷÷= D
)
÷÷D E
{
◊◊ 	
for
ÿÿ 
(
ÿÿ 
int
ÿÿ 
i
ÿÿ 
=
ÿÿ 
$num
ÿÿ 
;
ÿÿ 
i
ÿÿ 
<
ÿÿ 
m_ConnectionList
ÿÿ  0
.
ÿÿ0 1
Length
ÿÿ1 7
;
ÿÿ7 8
i
ÿÿ9 :
++
ÿÿ: <
)
ÿÿ< =
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
address
⁄⁄ 
==
⁄⁄ 
m_ConnectionList
⁄⁄ /
[
⁄⁄/ 0
i
⁄⁄0 1
]
⁄⁄1 2
.
⁄⁄2 3
Address
⁄⁄3 :
)
⁄⁄: ;
return
€€ 
true
€€ 
;
€€  
}
‹‹ 
return
›› 
false
›› 
;
›› 
}
ﬁﬁ 	
internal
‡‡ 
void
‡‡ 
AppendPacket
‡‡ "
(
‡‡" #
IntPtr
‡‡# )

dataStream
‡‡* 4
,
‡‡4 5
ref
‡‡6 9&
NetworkInterfaceEndPoint
‡‡: R
endpoint
‡‡S [
,
‡‡[ \
int
‡‡] `
dataLen
‡‡a h
)
‡‡h i
{
·· 	
var
‚‚ 
command
‚‚ 
=
‚‚ 
default
‚‚ !
(
‚‚! ""
ProcessPacketCommand
‚‚" 6
)
‚‚6 7
;
‚‚7 8
var
‰‰ 
queueHandle
‰‰ 
=
‰‰ $
NetworkSendQueueHandle
‰‰ 4
.
‰‰4 5
ToTempHandle
‰‰5 A
(
‰‰A B!
m_ParallelSendQueue
‰‰B U
.
‰‰U V
AsParallelWriter
‰‰V f
(
‰‰f g
)
‰‰g h
)
‰‰h i
;
‰‰i j(
m_NetworkProtocolInterface
ÂÂ &
.
ÂÂ& '
ProcessReceive
ÂÂ' 5
.
ÂÂ5 6
Ptr
ÂÂ6 9
.
ÂÂ9 :
Invoke
ÂÂ: @
(
ÂÂ@ A

dataStream
ÂÂA K
,
ÂÂK L
ref
ÂÂM P
endpoint
ÂÂQ Y
,
ÂÂY Z
dataLen
ÂÂ[ b
,
ÂÂb c
ref
ÂÂd g$
m_NetworkSendInterface
ÂÂh ~
,
ÂÂ~ 
refÂÂÄ É
queueHandleÂÂÑ è
,ÂÂè ê*
m_NetworkProtocolInterfaceÂÂë ´
.ÂÂ´ ¨
UserDataÂÂ¨ ¥
,ÂÂ¥ µ
refÂÂ∂ π
commandÂÂ∫ ¡
)ÂÂ¡ ¬
;ÂÂ¬ √
switch
ÁÁ 
(
ÁÁ 
command
ÁÁ 
.
ÁÁ 
Type
ÁÁ  
)
ÁÁ  !
{
ËË 
case
ÈÈ &
ProcessPacketCommandType
ÈÈ -
.
ÈÈ- .
AddressUpdate
ÈÈ. ;
:
ÈÈ; <
{
ÍÍ 
for
ÎÎ 
(
ÎÎ 
int
ÎÎ 
i
ÎÎ 
=
ÎÎ  
$num
ÎÎ! "
;
ÎÎ" #
i
ÎÎ$ %
<
ÎÎ& '
m_ConnectionList
ÎÎ( 8
.
ÎÎ8 9
Length
ÎÎ9 ?
;
ÎÎ? @
i
ÎÎA B
++
ÎÎB D
)
ÎÎD E
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
command
ÌÌ #
.
ÌÌ# $
Address
ÌÌ$ +
==
ÌÌ, .
m_ConnectionList
ÌÌ/ ?
[
ÌÌ? @
i
ÌÌ@ A
]
ÌÌA B
.
ÌÌB C
Address
ÌÌC J
&&
ÌÌK M
command
ÌÌN U
.
ÌÌU V
	SessionId
ÌÌV _
==
ÌÌ` b
m_ConnectionList
ÌÌc s
[
ÌÌs t
i
ÌÌt u
]
ÌÌu v
.
ÌÌv w
ReceiveTokenÌÌw É
)ÌÌÉ Ñ
m_ConnectionList
ÓÓ ,
.
ÓÓ, -
	ElementAt
ÓÓ- 6
(
ÓÓ6 7
i
ÓÓ7 8
)
ÓÓ8 9
.
ÓÓ9 :
Address
ÓÓ: A
=
ÓÓB C
command
ÓÓD K
.
ÓÓK L
As
ÓÓL N
.
ÓÓN O
AddressUpdate
ÓÓO \
.
ÓÓ\ ]

NewAddress
ÓÓ] g
;
ÓÓg h
}
ÔÔ 
}
 
break
 
;
 
case
ÚÚ &
ProcessPacketCommandType
ÚÚ -
.
ÚÚ- .
ConnectionAccept
ÚÚ. >
:
ÚÚ> ?
{
ÛÛ 

Connection
ÙÙ 
c
ÙÙ  
=
ÙÙ! "
GetConnection
ÙÙ# 0
(
ÙÙ0 1
command
ÙÙ1 8
.
ÙÙ8 9
Address
ÙÙ9 @
,
ÙÙ@ A
command
ÙÙB I
.
ÙÙI J
	SessionId
ÙÙJ S
)
ÙÙS T
;
ÙÙT U
if
ˆˆ 
(
ˆˆ 
c
ˆˆ 
!=
ˆˆ 

Connection
ˆˆ '
.
ˆˆ' (
Null
ˆˆ( ,
)
ˆˆ, -
{
˜˜ 
c
¯¯ 
.
¯¯ 
DidReceiveData
¯¯ (
=
¯¯) *
$num
¯¯+ ,
;
¯¯, -
c
˘˘ 
.
˘˘ 
LastReceive
˘˘ %
=
˘˘& '
m_UpdateTime
˘˘( 4
;
˘˘4 5
SetConnection
˙˙ %
(
˙˙% &
c
˙˙& '
)
˙˙' (
;
˙˙( )
if
¸¸ 
(
¸¸ 
c
¸¸ 
.
¸¸ 
State
¸¸ #
==
¸¸$ &
NetworkConnection
¸¸' 8
.
¸¸8 9
State
¸¸9 >
.
¸¸> ?

Connecting
¸¸? I
)
¸¸I J
{
˝˝ 
c
˛˛ 
.
˛˛ 
	SendToken
˛˛ '
=
˛˛( )
command
˛˛* 1
.
˛˛1 2
As
˛˛2 4
.
˛˛4 5
ConnectionAccept
˛˛5 E
.
˛˛E F
ConnectionToken
˛˛F U
;
˛˛U V
c
ÄÄ 
.
ÄÄ 
State
ÄÄ #
=
ÄÄ$ %
NetworkConnection
ÄÄ& 7
.
ÄÄ7 8
State
ÄÄ8 =
.
ÄÄ= >
	Connected
ÄÄ> G
;
ÄÄG H
c
ÅÅ 
.
ÅÅ 

IsAccepted
ÅÅ (
=
ÅÅ) *
$num
ÅÅ+ ,
;
ÅÅ, -
UpdateConnection
ÇÇ ,
(
ÇÇ, -
c
ÇÇ- .
)
ÇÇ. /
;
ÇÇ/ 0
AddConnectEvent
ÉÉ +
(
ÉÉ+ ,
c
ÉÉ, -
.
ÉÉ- .
Id
ÉÉ. 0
)
ÉÉ0 1
;
ÉÉ1 2
}
ÑÑ 
}
ÖÖ 
}
ÜÜ 
break
ÜÜ 
;
ÜÜ 
case
àà &
ProcessPacketCommandType
àà -
.
àà- .
ConnectionReject
àà. >
:
àà> ?
break
ââ 
;
ââ 
case
ãã &
ProcessPacketCommandType
ãã -
.
ãã- .
ConnectionRequest
ãã. ?
:
ãã? @
{
åå 
if
çç 
(
çç 
	Listening
çç !
==
çç" $
false
çç% *
)
çç* +
{
éé 
UnityEngine
êê #
.
êê# $
Debug
êê$ )
.
êê) *
LogError
êê* 2
(
êê2 3
string
êê3 9
.
êê9 :
Format
êê: @
(
êê@ A
$strêêA Ö
,êêÖ Ü
commandêêá é
.êêé è
Addressêêè ñ
.êêñ ó
ToFixedStringêêó §
(êê§ •
)êê• ¶
)êê¶ ß
)êêß ®
;êê® ©
return
íí 
;
íí 
}
ìì 

Connection
ïï 
c
ïï  
=
ïï! "
GetNewConnection
ïï# 3
(
ïï3 4
command
ïï4 ;
.
ïï; <
Address
ïï< C
,
ïïC D
command
ïïE L
.
ïïL M
	SessionId
ïïM V
)
ïïV W
;
ïïW X
if
ññ 
(
ññ 
c
ññ 
==
ññ 

Connection
ññ '
.
ññ' (
Null
ññ( ,
||
ññ- /
c
ññ0 1
.
ññ1 2
State
ññ2 7
==
ññ8 :
NetworkConnection
ññ; L
.
ññL M
State
ññM R
.
ññR S
Disconnected
ññS _
)
ññ_ `
{
óó 
var
òò 
	sessionId
òò %
=
òò& '
new
òò( +
SessionIdToken
òò, :
(
òò: ;
)
òò; <
;
òò< =*
GenerateRandomSessionIdToken
ôô 4
(
ôô4 5
ref
ôô5 8
	sessionId
ôô9 B
)
ôôB C
;
ôôC D
if
öö 
(
öö 
!
öö 

m_FreeList
öö '
.
öö' (

TryDequeue
öö( 2
(
öö2 3
out
öö3 6
var
öö7 :
id
öö; =
)
öö= >
)
öö> ?
{
õõ 
id
úú 
=
úú  
m_ConnectionList
úú! 1
.
úú1 2
Length
úú2 8
;
úú8 9
m_ConnectionList
ùù ,
.
ùù, -
Add
ùù- 0
(
ùù0 1
new
ùù1 4

Connection
ùù5 ?
{
ùù@ A
Id
ùùA C
=
ùùD E
id
ùùF H
,
ùùH I
Version
ùùJ Q
=
ùùR S
$num
ùùT U
}
ùùU V
)
ùùV W
;
ùùW X
}
ûû 
int
†† 
ver
†† 
=
††  !
m_ConnectionList
††" 2
[
††2 3
id
††3 5
]
††5 6
.
††6 7
Version
††7 >
;
††> ?
c
°° 
=
°° 
new
°° 

Connection
°°  *
{
¢¢ 
Id
££ 
=
££  
id
££! #
,
££# $
Version
§§ #
=
§§$ %
ver
§§& )
,
§§) *
ReceiveToken
•• (
=
••) *
	sessionId
••+ 4
,
••4 5
	SendToken
¶¶ %
=
¶¶& '
command
¶¶( /
.
¶¶/ 0
	SessionId
¶¶0 9
,
¶¶9 :
State
ßß !
=
ßß" #
NetworkConnection
ßß$ 5
.
ßß5 6
State
ßß6 ;
.
ßß; <
	Connected
ßß< E
,
ßßE F
Address
®® #
=
®®$ %
command
®®& -
.
®®- .
Address
®®. 5
,
®®5 6
ConnectAttempts
©© +
=
©©, -
$num
©©. /
,
©©/ 0
LastReceive
™™ '
=
™™( )
m_UpdateTime
™™* 6
,
™™6 7

IsAccepted
´´ &
=
´´' (
$num
´´) *
}
¨¨ 
;
¨¨ !
m_PipelineProcessor
ÆÆ +
.
ÆÆ+ ,"
initializeConnection
ÆÆ, @
(
ÆÆ@ A
new
ÆÆA D
NetworkConnection
ÆÆE V
{
ÆÆW X
m_NetworkId
ÆÆX c
=
ÆÆd e
id
ÆÆf h
,
ÆÆh i
m_NetworkVersion
ÆÆj z
=
ÆÆ{ |
c
ÆÆ} ~
.
ÆÆ~ 
VersionÆÆ Ü
}ÆÆÜ á
)ÆÆá à
;ÆÆà â"
m_NetworkAcceptQueue
ØØ ,
.
ØØ, -
Enqueue
ØØ- 4
(
ØØ4 5
id
ØØ5 7
)
ØØ7 8
;
ØØ8 9
}
∞∞ 
c
≤≤ 
.
≤≤ 
LastNonDataSend
≤≤ %
=
≤≤& '
m_UpdateTime
≤≤( 4
;
≤≤4 5
SetConnection
≥≥ !
(
≥≥! "
c
≥≥" #
)
≥≥# $
;
≥≥$ %(
m_NetworkProtocolInterface
µµ .
.
µµ. /)
ProcessSendConnectionAccept
µµ/ J
.
µµJ K
Ptr
µµK N
.
µµN O
Invoke
µµO U
(
µµU V
ref
µµV Y
c
µµZ [
,
µµ[ \
ref
µµ] `$
m_NetworkSendInterface
µµa w
,
µµw x
ref
µµy |
queueHandleµµ} à
,µµà â*
m_NetworkProtocolInterfaceµµä §
.µµ§ •
UserDataµµ• ≠
)µµ≠ Æ
;µµÆ Ø
}
∂∂ 
break
∂∂ 
;
∂∂ 
case
∏∏ &
ProcessPacketCommandType
∏∏ -
.
∏∏- .

Disconnect
∏∏. 8
:
∏∏8 9
{
ππ 

Connection
∫∫ 
c
∫∫  
=
∫∫! "
GetConnection
∫∫# 0
(
∫∫0 1
command
∫∫1 8
.
∫∫8 9
Address
∫∫9 @
,
∫∫@ A
command
∫∫B I
.
∫∫I J
	SessionId
∫∫J S
)
∫∫S T
;
∫∫T U
if
ªª 
(
ªª 
c
ªª 
!=
ªª 

Connection
ªª '
.
ªª' (
Null
ªª( ,
)
ªª, -
{
ºº 
if
ΩΩ 
(
ΩΩ 
RemoveConnection
ΩΩ ,
(
ΩΩ, -
c
ΩΩ- .
)
ΩΩ. /
)
ΩΩ/ 0 
AddDisconnectEvent
ææ .
(
ææ. /
c
ææ/ 0
.
ææ0 1
Id
ææ1 3
,
ææ3 4
DisconnectReason
ææ5 E
.
ææE F
ClosedByRemote
ææF T
)
ææT U
;
ææU V
}
øø 
}
¿¿ 
break
¿¿ 
;
¿¿ 
case
¬¬ &
ProcessPacketCommandType
¬¬ -
.
¬¬- .
Ping
¬¬. 2
:
¬¬2 3
{
√√ 

Connection
ƒƒ 
c
ƒƒ  
=
ƒƒ! "
GetConnection
ƒƒ# 0
(
ƒƒ0 1
command
ƒƒ1 8
.
ƒƒ8 9
Address
ƒƒ9 @
,
ƒƒ@ A
command
ƒƒB I
.
ƒƒI J
	SessionId
ƒƒJ S
)
ƒƒS T
;
ƒƒT U
if
≈≈ 
(
≈≈ 
c
≈≈ 
==
≈≈ 

Connection
≈≈ '
.
≈≈' (
Null
≈≈( ,
||
≈≈- /
c
≈≈0 1
.
≈≈1 2
State
≈≈2 7
!=
≈≈8 :
NetworkConnection
≈≈; L
.
≈≈L M
State
≈≈M R
.
≈≈R S
	Connected
≈≈S \
)
≈≈\ ]
{
∆∆ 
return
«« 
;
«« 
}
»» 
c
   
.
   
DidReceiveData
   $
=
  % &
$num
  ' (
;
  ( )
c
ÀÀ 
.
ÀÀ 
LastReceive
ÀÀ !
=
ÀÀ" #
m_UpdateTime
ÀÀ$ 0
;
ÀÀ0 1
c
ÃÃ 
.
ÃÃ 
LastNonDataSend
ÃÃ %
=
ÃÃ& '
m_UpdateTime
ÃÃ( 4
;
ÃÃ4 5
UpdateConnection
ÕÕ $
(
ÕÕ$ %
c
ÕÕ% &
)
ÕÕ& '
;
ÕÕ' ((
m_NetworkProtocolInterface
œœ .
.
œœ. /
ProcessSendPong
œœ/ >
.
œœ> ?
Ptr
œœ? B
.
œœB C
Invoke
œœC I
(
œœI J
ref
œœJ M
c
œœN O
,
œœO P
ref
œœQ T$
m_NetworkSendInterface
œœU k
,
œœk l
ref
œœm p
queueHandle
œœq |
,
œœ| })
m_NetworkProtocolInterfaceœœ~ ò
.œœò ô
UserDataœœô °
)œœ° ¢
;œœ¢ £
}
–– 
break
–– 
;
–– 
case
““ &
ProcessPacketCommandType
““ -
.
““- .
Pong
““. 2
:
““2 3
{
”” 

Connection
‘‘ 
c
‘‘  
=
‘‘! "
GetConnection
‘‘# 0
(
‘‘0 1
command
‘‘1 8
.
‘‘8 9
Address
‘‘9 @
,
‘‘@ A
command
‘‘B I
.
‘‘I J
	SessionId
‘‘J S
)
‘‘S T
;
‘‘T U
if
’’ 
(
’’ 
c
’’ 
!=
’’ 

Connection
’’ '
.
’’' (
Null
’’( ,
)
’’, -
{
÷÷ 
c
◊◊ 
.
◊◊ 
DidReceiveData
◊◊ (
=
◊◊) *
$num
◊◊+ ,
;
◊◊, -
c
ÿÿ 
.
ÿÿ 
LastReceive
ÿÿ %
=
ÿÿ& '
m_UpdateTime
ÿÿ( 4
;
ÿÿ4 5
UpdateConnection
ŸŸ (
(
ŸŸ( )
c
ŸŸ) *
)
ŸŸ* +
;
ŸŸ+ ,
}
⁄⁄ 
}
€€ 
break
€€ 
;
€€ 
case
›› &
ProcessPacketCommandType
›› -
.
››- ..
 DataWithImplicitConnectionAccept
››. N
:
››N O
{
ﬁﬁ 

Connection
ﬂﬂ 
c
ﬂﬂ  
=
ﬂﬂ! "
GetConnection
ﬂﬂ# 0
(
ﬂﬂ0 1
command
ﬂﬂ1 8
.
ﬂﬂ8 9
Address
ﬂﬂ9 @
,
ﬂﬂ@ A
command
ﬂﬂB I
.
ﬂﬂI J
	SessionId
ﬂﬂJ S
)
ﬂﬂS T
;
ﬂﬂT U
if
‡‡ 
(
‡‡ 
c
‡‡ 
==
‡‡ 

Connection
‡‡ '
.
‡‡' (
Null
‡‡( ,
)
‡‡, -
{
·· 
return
ÁÁ 
;
ÁÁ 
}
ËË 
c
ÍÍ 
.
ÍÍ 
DidReceiveData
ÍÍ $
=
ÍÍ% &
$num
ÍÍ' (
;
ÍÍ( )
c
ÎÎ 
.
ÎÎ 
LastReceive
ÎÎ !
=
ÎÎ" #
m_UpdateTime
ÎÎ$ 0
;
ÎÎ0 1
UpdateConnection
ÏÏ $
(
ÏÏ$ %
c
ÏÏ% &
)
ÏÏ& '
;
ÏÏ' (
if
ÓÓ 
(
ÓÓ 
c
ÓÓ 
.
ÓÓ 
State
ÓÓ 
==
ÓÓ  "
NetworkConnection
ÓÓ# 4
.
ÓÓ4 5
State
ÓÓ5 :
.
ÓÓ: ;

Connecting
ÓÓ; E
)
ÓÓE F
{
ÔÔ 
c
 
.
 
	SendToken
 #
=
$ %
command
& -
.
- .
As
. 0
.
0 1.
 DataWithImplicitConnectionAccept
1 Q
.
Q R
ConnectionToken
R a
;
a b
c
ÚÚ 
.
ÚÚ 
State
ÚÚ 
=
ÚÚ  !
NetworkConnection
ÚÚ" 3
.
ÚÚ3 4
State
ÚÚ4 9
.
ÚÚ9 :
	Connected
ÚÚ: C
;
ÚÚC D
UpdateConnection
ÛÛ (
(
ÛÛ( )
c
ÛÛ) *
)
ÛÛ* +
;
ÛÛ+ ,
UnityEngine
ÙÙ #
.
ÙÙ# $

Assertions
ÙÙ$ .
.
ÙÙ. /
Assert
ÙÙ/ 5
.
ÙÙ5 6
IsTrue
ÙÙ6 <
(
ÙÙ< =
!
ÙÙ= >
	Listening
ÙÙ> G
)
ÙÙG H
;
ÙÙH I
AddConnectEvent
ıı '
(
ıı' (
c
ıı( )
.
ıı) *
Id
ıı* ,
)
ıı, -
;
ıı- .
}
ˆˆ 
if
¯¯ 
(
¯¯ 
c
¯¯ 
.
¯¯ 
State
¯¯ 
==
¯¯  "
NetworkConnection
¯¯# 4
.
¯¯4 5
State
¯¯5 :
.
¯¯: ;
	Connected
¯¯; D
)
¯¯D E
{
˘˘ 
var
˙˙ 
memoryOffset
˙˙ (
=
˙˙) *!
PinMemoryTillUpdate
˙˙+ >
(
˙˙> ?
command
˙˙? F
.
˙˙F G
As
˙˙G I
.
˙˙I J.
 DataWithImplicitConnectionAccept
˙˙J j
.
˙˙j k
Offset
˙˙k q
+
˙˙r s
command
˙˙t {
.
˙˙{ |
As
˙˙| ~
.
˙˙~ /
 DataWithImplicitConnectionAccept˙˙ ü
.˙˙ü †
Length˙˙† ¶
)˙˙¶ ß
;˙˙ß ®
var
˚˚ 
sliceOffset
˚˚ '
=
˚˚( )
memoryOffset
˚˚* 6
+
˚˚7 8
command
˚˚9 @
.
˚˚@ A
As
˚˚A C
.
˚˚C D.
 DataWithImplicitConnectionAccept
˚˚D d
.
˚˚d e
Offset
˚˚e k
;
˚˚k l
if
˝˝ 
(
˝˝ 
command
˝˝ #
.
˝˝# $
As
˝˝$ &
.
˝˝& '.
 DataWithImplicitConnectionAccept
˝˝' G
.
˝˝G H
HasPipeline
˝˝H S
)
˝˝S T
{
˛˛ 
var
ˇˇ 
netCon
ˇˇ  &
=
ˇˇ' (
new
ˇˇ) ,
NetworkConnection
ˇˇ- >
{
ˇˇ? @
m_NetworkId
ˇˇ@ K
=
ˇˇL M
c
ˇˇN O
.
ˇˇO P
Id
ˇˇP R
,
ˇˇR S
m_NetworkVersion
ˇˇT d
=
ˇˇe f
c
ˇˇg h
.
ˇˇh i
Version
ˇˇi p
}
ˇˇp q
;
ˇˇq r!
m_PipelineProcessor
ÄÄ /
.
ÄÄ/ 0
Receive
ÄÄ0 7
(
ÄÄ7 8
this
ÄÄ8 <
,
ÄÄ< =
netCon
ÄÄ> D
,
ÄÄD E
(
ÄÄF G
(
ÄÄG H
NativeArray
ÄÄH S
<
ÄÄS T
byte
ÄÄT X
>
ÄÄX Y
)
ÄÄY Z
m_DataStream
ÄÄZ f
)
ÄÄf g
.
ÄÄg h
GetSubArray
ÄÄh s
(
ÄÄs t
sliceOffset
ÄÄt 
,ÄÄ Ä
commandÄÄÅ à
.ÄÄà â
AsÄÄâ ã
.ÄÄã å0
 DataWithImplicitConnectionAcceptÄÄå ¨
.ÄÄ¨ ≠
LengthÄÄ≠ ≥
)ÄÄ≥ ¥
)ÄÄ¥ µ
;ÄÄµ ∂
return
ÇÇ "
;
ÇÇ" #
}
ÉÉ 
m_EventQueue
ÖÖ $
.
ÖÖ$ %
	PushEvent
ÖÖ% .
(
ÖÖ. /
new
ÖÖ/ 2
NetworkEvent
ÖÖ3 ?
{
ÜÜ 
connectionId
áá (
=
áá) *
c
áá+ ,
.
áá, -
Id
áá- /
,
áá/ 0
type
àà  
=
àà! "
NetworkEvent
àà# /
.
àà/ 0
Type
àà0 4
.
àà4 5
Data
àà5 9
,
àà9 :
offset
ââ "
=
ââ# $
sliceOffset
ââ% 0
,
ââ0 1
size
ää  
=
ää! "
command
ää# *
.
ää* +
As
ää+ -
.
ää- ..
 DataWithImplicitConnectionAccept
ää. N
.
ääN O
Length
ääO U
}
ãã 
)
ãã 
;
ãã 
}
åå 
}
çç 
break
çç 
;
çç 
case
èè &
ProcessPacketCommandType
èè -
.
èè- .
Data
èè. 2
:
èè2 3
{
êê 

Connection
ëë 
c
ëë  
=
ëë! "
GetConnection
ëë# 0
(
ëë0 1
command
ëë1 8
.
ëë8 9
Address
ëë9 @
,
ëë@ A
command
ëëB I
.
ëëI J
	SessionId
ëëJ S
)
ëëS T
;
ëëT U
if
íí 
(
íí 
c
íí 
==
íí 

Connection
íí '
.
íí' (
Null
íí( ,
)
íí, -
{
ìì 
return
ôô 
;
ôô 
}
öö 
c
úú 
.
úú 
DidReceiveData
úú $
=
úú% &
$num
úú' (
;
úú( )
c
ùù 
.
ùù 
LastReceive
ùù !
=
ùù" #
m_UpdateTime
ùù$ 0
;
ùù0 1
UpdateConnection
ûû $
(
ûû$ %
c
ûû% &
)
ûû& '
;
ûû' (
if
†† 
(
†† 
c
†† 
.
†† 
State
†† 
==
††  "
NetworkConnection
††# 4
.
††4 5
State
††5 :
.
††: ;
	Connected
††; D
)
††D E
{
°° 
var
¢¢ 
memoryOffset
¢¢ (
=
¢¢) *!
PinMemoryTillUpdate
¢¢+ >
(
¢¢> ?
command
¢¢? F
.
¢¢F G
As
¢¢G I
.
¢¢I J
Data
¢¢J N
.
¢¢N O
Offset
¢¢O U
+
¢¢V W
command
¢¢X _
.
¢¢_ `
As
¢¢` b
.
¢¢b c
Data
¢¢c g
.
¢¢g h
Length
¢¢h n
)
¢¢n o
;
¢¢o p
var
££ 
sliceOffset
££ '
=
££( )
memoryOffset
££* 6
+
££7 8
command
££9 @
.
££@ A
As
££A C
.
££C D
Data
££D H
.
££H I
Offset
££I O
;
££O P
if
•• 
(
•• 
command
•• #
.
••# $
As
••$ &
.
••& '
Data
••' +
.
••+ ,
HasPipeline
••, 7
)
••7 8
{
¶¶ 
var
ßß 
netCon
ßß  &
=
ßß' (
new
ßß) ,
NetworkConnection
ßß- >
{
ßß? @
m_NetworkId
ßß@ K
=
ßßL M
c
ßßN O
.
ßßO P
Id
ßßP R
,
ßßR S
m_NetworkVersion
ßßT d
=
ßße f
c
ßßg h
.
ßßh i
Version
ßßi p
}
ßßp q
;
ßßq r!
m_PipelineProcessor
®® /
.
®®/ 0
Receive
®®0 7
(
®®7 8
this
®®8 <
,
®®< =
netCon
®®> D
,
®®D E
(
®®F G
(
®®G H
NativeArray
®®H S
<
®®S T
byte
®®T X
>
®®X Y
)
®®Y Z
m_DataStream
®®Z f
)
®®f g
.
®®g h
GetSubArray
®®h s
(
®®s t
sliceOffset
®®t 
,®® Ä
command®®Å à
.®®à â
As®®â ã
.®®ã å
Data®®å ê
.®®ê ë
Length®®ë ó
)®®ó ò
)®®ò ô
;®®ô ö
return
©© "
;
©©" #
}
™™ 
m_EventQueue
¨¨ $
.
¨¨$ %
	PushEvent
¨¨% .
(
¨¨. /
new
¨¨/ 2
NetworkEvent
¨¨3 ?
{
≠≠ 
connectionId
ÆÆ (
=
ÆÆ) *
c
ÆÆ+ ,
.
ÆÆ, -
Id
ÆÆ- /
,
ÆÆ/ 0
type
ØØ  
=
ØØ! "
NetworkEvent
ØØ# /
.
ØØ/ 0
Type
ØØ0 4
.
ØØ4 5
Data
ØØ5 9
,
ØØ9 :
offset
∞∞ "
=
∞∞# $
sliceOffset
∞∞% 0
,
∞∞0 1
size
±±  
=
±±! "
command
±±# *
.
±±* +
As
±±+ -
.
±±- .
Data
±±. 2
.
±±2 3
Length
±±3 9
}
≤≤ 
)
≤≤ 
;
≤≤ 
}
≥≥ 
}
¥¥ 
break
¥¥ 
;
¥¥ 
case
∂∂ &
ProcessPacketCommandType
∂∂ -
.
∂∂- ."
ProtocolStatusUpdate
∂∂. B
:
∂∂B C
m_ProtocolStatus
∑∑ $
.
∑∑$ %
Value
∑∑% *
=
∑∑+ ,
command
∑∑- 4
.
∑∑4 5
As
∑∑5 7
.
∑∑7 8"
ProtocolStatusUpdate
∑∑8 L
.
∑∑L M
Status
∑∑M S
;
∑∑S T
break
∏∏ 
;
∏∏ 
case
∫∫ &
ProcessPacketCommandType
∫∫ -
.
∫∫- .
Drop
∫∫. 2
:
∫∫2 3
break
ªª 
;
ªª 
}
ºº 
}
ΩΩ 	
internal
¿¿ 
unsafe
¿¿ 
void
¿¿ 
PushDataEvent
¿¿ *
(
¿¿* +
NetworkConnection
¿¿+ <
con
¿¿= @
,
¿¿@ A
int
¿¿B E

pipelineId
¿¿F P
,
¿¿P Q
byte
¿¿R V
*
¿¿V W
dataPtr
¿¿X _
,
¿¿_ `
int
¿¿a d

dataLength
¿¿e o
)
¿¿o p
{
¡¡ 	
var
¬¬ &
isInsideOurReceiveBuffer
¬¬ (
=
¬¬) *'
IsPointerInsideDataStream
¬¬+ D
(
¬¬D E
dataPtr
¬¬E L
,
¬¬L M

dataLength
¬¬N X
,
¬¬X Y
out
¬¬Z ]
var
¬¬^ a
sliceOffset
¬¬b m
)
¬¬m n
;
¬¬n o
if
√√ 
(
√√ &
isInsideOurReceiveBuffer
√√ (
==
√√) +
false
√√, 1
)
√√1 2
{
ƒƒ 
var
∆∆ 
allocatedLength
∆∆ #
=
∆∆$ %

dataLength
∆∆& 0
;
∆∆0 1
var
«« 
ptr
«« 
=
«« 
AllocateMemory
«« (
(
««( )
ref
««) ,
allocatedLength
««- <
)
««< =
;
««= >
if
…… 
(
…… 
ptr
…… 
==
…… 
IntPtr
…… !
.
……! "
Zero
……" &
||
……' )
allocatedLength
……* 9
<
……: ;

dataLength
……< F
)
……F G
{
   
UnityEngine
ÃÃ 
.
ÃÃ  
Debug
ÃÃ  %
.
ÃÃ% &
LogError
ÃÃ& .
(
ÃÃ. /
$str
ÃÃ/ O
)
ÃÃO P
;
ÃÃP Q
return
ŒŒ 
;
ŒŒ 
}
œœ 
UnsafeUtility
—— 
.
—— 
MemCpy
—— $
(
——$ %
(
——% &
byte
——& *
*
——* +
)
——+ ,
ptr
——, /
.
——/ 0
	ToPointer
——0 9
(
——9 :
)
——: ;
,
——; <
dataPtr
——= D
,
——D E

dataLength
——F P
)
——P Q
;
——Q R
sliceOffset
”” 
=
”” !
PinMemoryTillUpdate
”” 1
(
””1 2

dataLength
””2 <
)
””< =
;
””= >
}
‘‘ 
m_EventQueue
÷÷ 
.
÷÷ 
	PushEvent
÷÷ "
(
÷÷" #
new
÷÷# &
NetworkEvent
÷÷' 3
{
◊◊ 

pipelineId
ÿÿ 
=
ÿÿ 
(
ÿÿ 
short
ÿÿ #
)
ÿÿ# $

pipelineId
ÿÿ$ .
,
ÿÿ. /
connectionId
ŸŸ 
=
ŸŸ 
con
ŸŸ "
.
ŸŸ" #
m_NetworkId
ŸŸ# .
,
ŸŸ. /
type
⁄⁄ 
=
⁄⁄ 
NetworkEvent
⁄⁄ #
.
⁄⁄# $
Type
⁄⁄$ (
.
⁄⁄( )
Data
⁄⁄) -
,
⁄⁄- .
offset
€€ 
=
€€ 
sliceOffset
€€ $
,
€€$ %
size
‹‹ 
=
‹‹ 

dataLength
‹‹ !
}
›› 
)
›› 
;
›› 
}
ﬁﬁ 	
[
ÊÊ 	

MethodImpl
ÊÊ	 
(
ÊÊ 
MethodImplOptions
ÊÊ %
.
ÊÊ% & 
AggressiveInlining
ÊÊ& 8
)
ÊÊ8 9
]
ÊÊ9 :
internal
ÁÁ 
int
ÁÁ !
PinMemoryTillUpdate
ÁÁ (
(
ÁÁ( )
int
ÁÁ) ,
length
ÁÁ- 3
)
ÁÁ3 4
{
ËË 	
if
ÍÍ 
(
ÍÍ 
m_DataStreamHead
ÍÍ  
[
ÍÍ  !
$num
ÍÍ! "
]
ÍÍ" #
+
ÍÍ$ %
length
ÍÍ& ,
>
ÍÍ- .
m_DataStream
ÍÍ/ ;
.
ÍÍ; <
Length
ÍÍ< B
)
ÍÍB C
throw
ÎÎ 
new
ÎÎ 
ArgumentException
ÎÎ +
(
ÎÎ+ ,
$str
ÎÎ, ^
)
ÎÎ^ _
;
ÎÎ_ `
var
ÌÌ 
result
ÌÌ 
=
ÌÌ 
m_DataStreamHead
ÌÌ )
[
ÌÌ) *
$num
ÌÌ* +
]
ÌÌ+ ,
;
ÌÌ, -
m_DataStreamHead
ÓÓ 
[
ÓÓ 
$num
ÓÓ 
]
ÓÓ 
=
ÓÓ  !
result
ÓÓ" (
+
ÓÓ) *
length
ÓÓ+ 1
;
ÓÓ1 2
return
 
result
 
;
 
}
ÒÒ 	
[
˚˚ 	

MethodImpl
˚˚	 
(
˚˚ 
MethodImplOptions
˚˚ %
.
˚˚% & 
AggressiveInlining
˚˚& 8
)
˚˚8 9
]
˚˚9 :
private
¸¸ 
unsafe
¸¸ 
bool
¸¸ '
IsPointerInsideDataStream
¸¸ 5
(
¸¸5 6
byte
¸¸6 :
*
¸¸: ;
dataPtr
¸¸< C
,
¸¸C D
int
¸¸E H

dataLength
¸¸I S
,
¸¸S T
out
¸¸U X
int
¸¸Y \
sliceOffset
¸¸] h
)
¸¸h i
{
˝˝ 	
sliceOffset
˛˛ 
=
˛˛ 
$num
˛˛ 
;
˛˛ 
var
ˇˇ 
streamBasePtr
ˇˇ 
=
ˇˇ 
(
ˇˇ  !
byte
ˇˇ! %
*
ˇˇ% &
)
ˇˇ& '
m_DataStream
ˇˇ' 3
.
ˇˇ3 4
GetUnsafePtr
ˇˇ4 @
(
ˇˇ@ A
)
ˇˇA B
;
ˇˇB C
var
ÄÄ 
isInside
ÄÄ 
=
ÄÄ 
dataPtr
ÄÄ "
>=
ÄÄ# %
streamBasePtr
ÄÄ& 3
&&
ÄÄ4 6
dataPtr
ÄÄ7 >
+
ÄÄ? @

dataLength
ÄÄA K
<=
ÄÄL N
streamBasePtr
ÄÄO \
+
ÄÄ] ^
m_DataStreamHead
ÄÄ_ o
[
ÄÄo p
$num
ÄÄp q
]
ÄÄq r
;
ÄÄr s
if
ÅÅ 
(
ÅÅ 
isInside
ÅÅ 
)
ÅÅ 
{
ÇÇ 
sliceOffset
ÉÉ 
=
ÉÉ 
(
ÉÉ 
int
ÉÉ "
)
ÉÉ" #
(
ÉÉ# $
dataPtr
ÉÉ$ +
-
ÉÉ, -
streamBasePtr
ÉÉ. ;
)
ÉÉ; <
;
ÉÉ< =
}
ÑÑ 
return
ÖÖ 
isInside
ÖÖ 
;
ÖÖ 
}
ÜÜ 	
internal
éé 
IntPtr
éé 
AllocateMemory
éé &
(
éé& '
ref
éé' *
int
éé+ .
dataLen
éé/ 6
)
éé6 7
{
èè 	
if
ëë 
(
ëë 
dataLen
ëë 
<=
ëë 
$num
ëë 
)
ëë 
throw
íí 
new
íí 
ArgumentException
íí +
(
íí+ ,
$str
íí, L
)
ííL M
;
ííM N
var
ïï 
stream
ïï 
=
ïï 
m_DataStream
ïï %
;
ïï% &
var
ññ 
dataStreamHead
ññ 
=
ññ  
m_DataStreamHead
ññ! 1
[
ññ1 2
$num
ññ2 3
]
ññ3 4
;
ññ4 5
if
óó 
(
óó 
m_NetworkParams
óó 
.
óó  

dataStream
óó  *
.
óó* +
size
óó+ /
==
óó0 2
$num
óó3 4
)
óó4 5
{
òò 
stream
ôô 
.
ôô -
ResizeUninitializedTillPowerOf2
ôô 6
(
ôô6 7
dataStreamHead
ôô7 E
+
ôôF G
dataLen
ôôH O
)
ôôO P
;
ôôP Q
}
öö 
else
õõ 
if
õõ 
(
õõ 
dataStreamHead
õõ #
+
õõ$ %
dataLen
õõ& -
>
õõ. /
stream
õõ0 6
.
õõ6 7
Length
õõ7 =
)
õõ= >
{
úú 
dataLen
ùù 
=
ùù 
stream
ùù  
.
ùù  !
Length
ùù! '
-
ùù( )
dataStreamHead
ùù* 8
;
ùù8 9
if
ûû 
(
ûû 
dataLen
ûû 
<=
ûû 
$num
ûû  
)
ûû  !
{
üü 
dataLen
†† 
=
†† 
$num
†† 
;
††  
return
°° 
IntPtr
°° !
.
°°! "
Zero
°°" &
;
°°& '
}
¢¢ 
}
££ 
unsafe
•• 
{
¶¶ 
return
ßß 
new
ßß 
IntPtr
ßß !
(
ßß! "
(
ßß" #
byte
ßß# '
*
ßß' (
)
ßß( )
stream
ßß) /
.
ßß/ 0
GetUnsafePtr
ßß0 <
(
ßß< =
)
ßß= >
+
ßß? @
dataStreamHead
ßßA O
)
ßßO P
;
ßßP Q
}
®® 
}
©© 	
}
™™ 
}´´ ùå
oC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\SecureProtocol\SecureNetworkProtocol.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
TLS% (
{ 
internal 
struct 
SecureClientState %
{ 
public 
unsafe 
Binding 
. 
unitytls_client -
*- .
	ClientPtr/ 8
;8 9
public 
unsafe 
Binding 
. "
unitytls_client_config 4
*4 5
ClientConfig6 B
;B C
public 
SessionIdToken 
ReceiveToken *
;* +
public 
long 
LastHandshakeUpdate '
;' (
} 
struct 
%
SecureNetworkProtocolData $
{   
public!! 
UnsafeHashMap!! 
<!! $
NetworkInterfaceEndPoint!! 5
,!!5 6
SecureClientState!!7 H
>!!H I
SecureClients!!J W
;!!W X
public""  
FixedString4096Bytes"" #
Pem""% (
;""( )
public##  
FixedString4096Bytes## #
Rsa##% (
;##( )
public$$  
FixedString4096Bytes$$ #
RsaKey$$% +
;$$+ ,
public%% 
FixedString32Bytes%% !
Hostname%%% -
;%%- .
public&& 
uint&& 
Protocol&&% -
;&&- .
public'' 
uint'' 
SSLReadTimeoutMs''% 5
;''5 6
public(( 
uint(( "
SSLHandshakeTimeoutMax((% ;
;((; <
public)) 
uint)) "
SSLHandshakeTimeoutMin))% ;
;)); <
public** 
uint** 

ClientAuth**% /
;**/ 0
public++ 
long++ 

LastUpdate++% /
;++/ 0
public,, 
long,, 
LastHalfOpenPrune,,% 6
;,,6 7
}-- 
internal// 
struct// 
SecureUserData// "
{00 
public11 
IntPtr11 

StreamData11  
;11  !
public22  
NetworkSendInterface22 #
	Interface22$ -
;22- .
public33 $
NetworkInterfaceEndPoint33 '
Remote33( .
;33. /
public44 "
NetworkSendQueueHandle44 %
QueueHandle44& 1
;441 2
public55 
int55 
Size55 
;55 
public66 
int66 
BytesProcessed66 !
;66! "
}77 
internal99 
static99 
class99 "
ManagedSecureFunctions99 0
{:: 
private;; 
const;; 
int;; &
UNITYTLS_ERR_SSL_WANT_READ;; 4
=;;5 6
-;;7 8
$num;;8 >
;;;> ?
private<< 
const<< 
int<< '
UNITYTLS_ERR_SSL_WANT_WRITE<< 5
=<<6 7
-<<8 9
$num<<9 ?
;<<? @
private>> 
static>> 
Binding>> 
.>> .
"unitytls_client_data_send_callback>> A
s_sendCallback>>B P
;>>P Q
private?? 
static?? 
Binding?? 
.?? 1
%unitytls_client_data_receive_callback?? D
s_recvCallback??E S
;??S T
privateAA 
staticAA 
boolAA 
IsInitializedAA )
;AA) *
privateCC 
structCC %
ManagedSecureFunctionsKeyCC 0
{CC1 2
}CC2 3
internalEE 
staticEE 
readonlyEE  
SharedStaticEE! -
<EE- .
FunctionPointerEE. =
<EE= >
BindingEE> E
.EEE F.
"unitytls_client_data_send_callbackEEF h
>EEh i
>EEi j
s_SendCallbackFF 
=FF 
SharedStaticFF %
<FF% &
FunctionPointerFF& 5
<FF5 6
BindingFF6 =
.FF= >.
"unitytls_client_data_send_callbackFF> `
>FF` a
>FFa b
.GG 
GetOrCreateGG 
<GG 
FunctionPointerGG (
<GG( )
BindingGG) 0
.GG0 1.
"unitytls_client_data_send_callbackGG1 S
>GGS T
,GGT U%
ManagedSecureFunctionsKeyGGV o
>GGo p
(GGp q
)GGq r
;GGr s
internalII 
staticII 
readonlyII  
SharedStaticII! -
<II- .
FunctionPointerII. =
<II= >
BindingII> E
.IIE F1
%unitytls_client_data_receive_callbackIIF k
>IIk l
>IIl m
s_RecvMethodJJ 
=JJ 
SharedStaticKK 
<KK 
FunctionPointerKK (
<KK( )
BindingKK) 0
.KK0 11
%unitytls_client_data_receive_callbackKK1 V
>KKV W
>KKW X
.LL 
GetOrCreateLL 
<LL 
FunctionPointerLL ,
<LL, -
BindingLL- 4
.LL4 51
%unitytls_client_data_receive_callbackLL5 Z
>LLZ [
,LL[ \%
ManagedSecureFunctionsKeyLL] v
>LLv w
(LLw x
)LLx y
;LLy z
internalNN 
staticNN 
voidNN 

InitializeNN '
(NN' (
)NN( )
{OO 	
ifPP 
(PP 
IsInitializedPP 
)PP 
returnPP %
;PP% &
IsInitializedQQ 
=QQ 
trueQQ  
;QQ  !
unsafeSS 
{TT 
s_sendCallbackUU 
=UU  "
SecureDataSendCallbackUU! 7
;UU7 8
s_recvCallbackVV 
=VV  %
SecureDataReceiveCallbackVV! :
;VV: ;
s_SendCallbackXX 
.XX 
DataXX #
=XX$ %
newXX& )
FunctionPointerXX* 9
<XX9 :
BindingXX: A
.XXA B.
"unitytls_client_data_send_callbackXXB d
>XXd e
(XXe f
MarshalXXf m
.XXm n*
GetFunctionPointerForDelegate	XXn ã
(
XXã å
s_sendCallback
XXå ö
)
XXö õ
)
XXõ ú
;
XXú ù
s_RecvMethodYY 
.YY 
DataYY !
=YY" #
newYY$ '
FunctionPointerYY( 7
<YY7 8
BindingYY8 ?
.YY? @1
%unitytls_client_data_receive_callbackYY@ e
>YYe f
(YYf g
MarshalYYg n
.YYn o*
GetFunctionPointerForDelegate	YYo å
(
YYå ç
s_recvCallback
YYç õ
)
YYõ ú
)
YYú ù
;
YYù û
}ZZ 
}[[ 	
[]] 	
BurstCompile]]	 
(]] 
DisableDirectCall]] '
=]]( )
true]]* .
)]]. /
]]]/ 0
[^^ 	
MonoPInvokeCallback^^	 
(^^ 
typeof^^ #
(^^# $
Binding^^$ +
.^^+ ,.
"unitytls_client_data_send_callback^^, N
)^^N O
)^^O P
]^^P Q
static__ 
unsafe__ 
int__ "
SecureDataSendCallback__ 0
(__0 1
IntPtr`` 
userData`` 
,`` 
byteaa 
*aa 
dataaa 
,aa 
UIntPtrbb 
dataLenbb 
,bb 
uintcc 
statuscc 
)cc 
{dd 	
varee 
protocolDataee 
=ee 
(ee  
SecureUserDataee  .
*ee. /
)ee/ 0
userDataee0 8
;ee8 9
ifff 
(ff 
protocolDataff 
->ff 
	Interfaceff '
.ff' (
BeginSendMessageff( 8
.ff8 9
Ptrff9 <
.ff< =
Invokeff= C
(ffC D
outffD G
varffH K

sendHandleffL V
,ffV W
protocolDatagg 
->gg 
	Interfacegg '
.gg' (
UserDatagg( 0
,gg0 1
(gg2 3
intgg3 6
)gg6 7
dataLengg7 >
.gg> ?
ToUInt32gg? G
(ggG H
)ggH I
)ggI J
!=ggK M
$numggN O
)ggO P
{hh 
returnii '
UNITYTLS_ERR_SSL_WANT_WRITEii 2
;ii2 3
}jj 

sendHandlell 
.ll 
sizell 
=ll 
(ll 
intll "
)ll" #
dataLenll# *
.ll* +
ToUInt32ll+ 3
(ll3 4
)ll4 5
;ll5 6
bytemm 
*mm 
packetmm 
=mm 
(mm 
bytemm  
*mm  !
)mm! "

sendHandlemm" ,
.mm, -
datamm- 1
;mm1 2
UnsafeUtilitynn 
.nn 
MemCpynn  
(nn  !
packetnn! '
,nn' (
datann) -
,nn- .
(nn/ 0
longnn0 4
)nn4 5
dataLennn5 <
.nn< =
ToUInt64nn= E
(nnE F
)nnF G
)nnG H
;nnH I
returnpp 
protocolDatapp 
->pp !
	Interfacepp! *
.pp* +
EndSendMessagepp+ 9
.pp9 :
Ptrpp: =
.pp= >
Invokepp> D
(ppD E
refppE H

sendHandleppI S
,ppS T
refppU X
protocolDatappY e
->ppe g
Remoteppg m
,ppm n
protocolDataqq 
->qq 
	Interfaceqq '
.qq' (
UserDataqq( 0
,qq0 1
refqq2 5
protocolDataqq6 B
->qqB D
QueueHandleqqD O
)qqO P
;qqP Q
}rr 	
[tt 	
BurstCompilett	 
(tt 
DisableDirectCalltt '
=tt( )
truett* .
)tt. /
]tt/ 0
[uu 	
MonoPInvokeCallbackuu	 
(uu 
typeofuu #
(uu# $
Bindinguu$ +
.uu+ ,1
%unitytls_client_data_receive_callbackuu, Q
)uuQ R
)uuR S
]uuS T
staticvv 
unsafevv 
intvv %
SecureDataReceiveCallbackvv 3
(vv3 4
IntPtrww 
userDataww 
,ww 
bytexx 
*xx 
dataxx 
,xx 
UIntPtryy 
dataLenyy 
,yy 
uintzz 
statuszz 
)zz 
{{{ 	
var|| 
protocolData|| 
=|| 
(||  
SecureUserData||  .
*||. /
)||/ 0
userData||0 8
;||8 9
var}} 
packet}} 
=}} 
(}} 
byte}} 
*}} 
)}}  
protocolData}}  ,
->}}, .

StreamData}}. 8
;}}8 9
if~~ 
(~~ 
packet~~ 
==~~ 
null~~ 
||~~ !
protocolData~~" .
->~~. 0
Size~~0 4
<=~~5 7
$num~~8 9
)~~9 :
{ 
return
ÄÄ (
UNITYTLS_ERR_SSL_WANT_READ
ÄÄ 1
;
ÄÄ1 2
}
ÅÅ 
if
áá 
(
áá 
protocolData
áá 
->
áá 
BytesProcessed
áá ,
!=
áá- /
$num
áá0 1
)
áá1 2
{
àà 
return
ââ (
UNITYTLS_ERR_SSL_WANT_READ
ââ 1
;
ââ1 2
}
ää 
UnsafeUtility
åå 
.
åå 
MemCpy
åå  
(
åå  !
data
åå! %
,
åå% &
packet
åå' -
,
åå- .
protocolData
åå/ ;
->
åå; =
Size
åå= A
)
ååA B
;
ååB C
protocolData
çç 
->
çç 
BytesProcessed
çç (
=
çç) *
protocolData
çç+ 7
->
çç7 9
Size
çç9 =
;
çç= >
return
éé 
protocolData
éé 
->
éé !
Size
éé! %
;
éé% &
}
èè 	
}
êê 
[
íí 
BurstCompile
íí 
]
íí 
internal
ìì 
unsafe
ìì 
struct
ìì #
SecureNetworkProtocol
ìì 0
:
ìì1 2
INetworkProtocol
ìì3 C
{
îî 
public
ïï 
IntPtr
ïï 
UserData
ïï 
;
ïï 
public
óó 
static
óó 
readonly
óó ,
SecureNetworkProtocolParameter
óó =
DefaultParameters
óó> O
=
óóP Q
new
óóR U,
SecureNetworkProtocolParameter
óóV t
{
òò 	
Protocol
ôô 
=
ôô %
SecureTransportProtocol
ôô .
.
ôô. /
DTLS
ôô/ 3
,
ôô3 4
SSLReadTimeoutMs
öö 
=
öö 
$num
öö  
,
öö  !$
SSLHandshakeTimeoutMin
õõ "
=
õõ# $
$num
õõ% )
,
õõ) *$
SSLHandshakeTimeoutMax
úú "
=
úú# $
$num
úú% *
,
úú* +(
ClientAuthenticationPolicy
ùù &
=
ùù' ($
SecureClientAuthPolicy
ùù) ?
.
ùù? @
Optional
ùù@ H
}
ûû 	
;
ûû	 

private
†† 
static
†† 
void
††  
CreateSecureClient
†† .
(
††. /
uint
††/ 3
role
††4 8
,
††8 9
SecureClientState
††: K
*
††K L
state
††M R
)
††R S
{
°° 	
var
¢¢ 
client
¢¢ 
=
¢¢ 
Binding
¢¢  
.
¢¢  !$
unitytls_client_create
¢¢! 7
(
¢¢7 8
role
¢¢8 <
,
¢¢< =
state
¢¢> C
->
¢¢C E
ClientConfig
¢¢E Q
)
¢¢Q R
;
¢¢R S
state
££ 
->
££ 
	ClientPtr
££ 
=
££ 
client
££ %
;
££% &
}
§§ 	
private
¶¶ 
static
¶¶ 
Binding
¶¶ 
.
¶¶ $
unitytls_client_config
¶¶ 5
*
¶¶5 6#
GetSecureClientConfig
¶¶7 L
(
¶¶L M'
SecureNetworkProtocolData
¶¶M f
*
¶¶g h
protocolData
¶¶i u
)
¶¶u v
{
ßß 	
var
®® 
config
®® 
=
®® 
(
®® 
Binding
®® !
.
®®! "$
unitytls_client_config
®®" 8
*
®®8 9
)
®®9 :
UnsafeUtility
®®: G
.
®®G H
Malloc
®®H N
(
®®N O
UnsafeUtility
©© 
.
©© 
SizeOf
©© $
<
©©$ %
Binding
©©% ,
.
©©, -$
unitytls_client_config
©©- C
>
©©C D
(
©©D E
)
©©E F
,
©©F G
UnsafeUtility
™™ 
.
™™ 
AlignOf
™™ %
<
™™% &
Binding
™™& -
.
™™- .$
unitytls_client_config
™™. D
>
™™D E
(
™™E F
)
™™F G
,
™™G H
	Allocator
™™I R
.
™™R S

Persistent
™™S ]
)
™™] ^
;
™™^ _
*
¨¨ 
config
¨¨ 
=
¨¨ 
new
¨¨ 
Binding
¨¨ !
.
¨¨! "$
unitytls_client_config
¨¨" 8
(
¨¨8 9
)
¨¨9 :
;
¨¨: ;
Binding
ÆÆ 
.
ÆÆ )
unitytls_client_init_config
ÆÆ /
(
ÆÆ/ 0
config
ÆÆ0 6
)
ÆÆ6 7
;
ÆÆ7 8
config
∞∞ 
->
∞∞ 

dataSendCB
∞∞ 
=
∞∞  $
ManagedSecureFunctions
∞∞! 7
.
∞∞7 8
s_SendCallback
∞∞8 F
.
∞∞F G
Data
∞∞G K
.
∞∞K L
Value
∞∞L Q
;
∞∞Q R
config
±± 
->
±± 
dataReceiveCB
±± !
=
±±" #$
ManagedSecureFunctions
±±$ :
.
±±: ;
s_RecvMethod
±±; G
.
±±G H
Data
±±H L
.
±±L M
Value
±±M R
;
±±R S
config
≤≤ 
->
≤≤ 
logCallback
≤≤ 
=
≤≤  !
IntPtr
≤≤" (
.
≤≤( )
Zero
≤≤) -
;
≤≤- .
config
µµ 
->
µµ 

clientAuth
µµ 
=
µµ  
Binding
µµ! (
.
µµ( )
UnityTLSRole_None
µµ) :
;
µµ: ;
config
∑∑ 
->
∑∑ 
transportProtocol
∑∑ %
=
∑∑& '
protocolData
∑∑( 4
->
∑∑4 6
Protocol
∑∑6 >
;
∑∑> ?
config
∏∏ 
->
∏∏ 

clientAuth
∏∏ 
=
∏∏  
protocolData
∏∏! -
->
∏∏- /

ClientAuth
∏∏/ 9
;
∏∏9 :
config
∫∫ 
->
∫∫ !
ssl_read_timeout_ms
∫∫ '
=
∫∫( )
protocolData
∫∫* 6
->
∫∫6 8
SSLReadTimeoutMs
∫∫8 H
;
∫∫H I
config
ªª 
->
ªª '
ssl_handshake_timeout_min
ªª -
=
ªª. /
protocolData
ªª0 <
->
ªª< >$
SSLHandshakeTimeoutMin
ªª> T
;
ªªT U
config
ºº 
->
ºº '
ssl_handshake_timeout_max
ºº -
=
ºº. /
protocolData
ºº0 <
->
ºº< >$
SSLHandshakeTimeoutMax
ºº> T
;
ººT U
return
ææ 
config
ææ 
;
ææ 
}
øø 	
public
¡¡ 
void
¡¡ 

Initialize
¡¡ 
(
¡¡ 
NetworkSettings
¡¡ .
settings
¡¡/ 7
)
¡¡7 8
{
¬¬ 	
unsafe
√√ 
{
ƒƒ $
ManagedSecureFunctions
≈≈ &
.
≈≈& '

Initialize
≈≈' 1
(
≈≈1 2
)
≈≈2 3
;
≈≈3 4
var
»» 
secureConfig
»»  
=
»»! "
settings
»»# +
.
»»+ ,!
GetSecureParameters
»», ?
(
»»? @
)
»»@ A
;
»»A B
if
œœ 
(
œœ 
settings
œœ 
.
œœ 
TryGet
œœ #
<
œœ# $%
BaselibNetworkParameter
œœ$ ;
>
œœ; <
(
œœ< =
out
œœ= @
var
œœA D
baselibConfig
œœE R
)
œœR S
)
œœS T
{
–– 
if
‘‘ 
(
‘‘ 
baselibConfig
‘‘ %
.
‘‘% & 
maximumPayloadSize
‘‘& 8
<
‘‘9 :
$num
‘‘; ?
)
‘‘? @
{
’’ 
UnityEngine
÷÷ #
.
÷÷# $
Debug
÷÷$ )
.
÷÷) *

LogWarning
÷÷* 4
(
÷÷4 5
$str
◊◊ w
)
◊◊w x
;
◊◊x y
}
ÿÿ 
}
ŸŸ 
UserData
‹‹ 
=
‹‹ 
(
‹‹ 
IntPtr
‹‹ "
)
‹‹" #
UnsafeUtility
‹‹# 0
.
‹‹0 1
Malloc
‹‹1 7
(
‹‹7 8
UnsafeUtility
‹‹8 E
.
‹‹E F
SizeOf
‹‹F L
<
‹‹L M'
SecureNetworkProtocolData
‹‹M f
>
‹‹f g
(
‹‹g h
)
‹‹h i
,
‹‹i j
UnsafeUtility
›› !
.
››! "
AlignOf
››" )
<
››) *'
SecureNetworkProtocolData
››* C
>
››C D
(
››D E
)
››E F
,
››F G
	Allocator
››H Q
.
››Q R

Persistent
››R \
)
››\ ]
;
››] ^
*
ﬁﬁ 
(
ﬁﬁ '
SecureNetworkProtocolData
ﬁﬁ +
*
ﬁﬁ+ ,
)
ﬁﬁ, -
UserData
ﬁﬁ- 5
=
ﬁﬁ6 7
new
ﬁﬁ8 ;'
SecureNetworkProtocolData
ﬁﬁ< U
{
ﬂﬂ 
SecureClients
‡‡ !
=
‡‡" #
new
‡‡$ '
UnsafeHashMap
‡‡( 5
<
‡‡5 6&
NetworkInterfaceEndPoint
‡‡6 N
,
‡‡N O
SecureClientState
‡‡P a
>
‡‡a b
(
‡‡b c
$num
‡‡c d
,
‡‡d e
	Allocator
‡‡f o
.
‡‡o p

Persistent
‡‡p z
)
‡‡z {
,
‡‡{ |
Rsa
·· 
=
·· 
secureConfig
·· &
.
··& '
Rsa
··' *
,
··* +
RsaKey
‚‚ 
=
‚‚ 
secureConfig
‚‚ )
.
‚‚) *
RsaKey
‚‚* 0
,
‚‚0 1
Pem
„„ 
=
„„ 
secureConfig
„„ &
.
„„& '
Pem
„„' *
,
„„* +
Hostname
‰‰ 
=
‰‰ 
secureConfig
‰‰ +
.
‰‰+ ,
Hostname
‰‰, 4
,
‰‰4 5
Protocol
ÂÂ 
=
ÂÂ 
(
ÂÂ  
uint
ÂÂ  $
)
ÂÂ$ %
secureConfig
ÂÂ% 1
.
ÂÂ1 2
Protocol
ÂÂ2 :
,
ÂÂ: ;
SSLReadTimeoutMs
ÊÊ $
=
ÊÊ% &
secureConfig
ÊÊ' 3
.
ÊÊ3 4
SSLReadTimeoutMs
ÊÊ4 D
,
ÊÊD E$
SSLHandshakeTimeoutMin
ÁÁ *
=
ÁÁ+ ,
secureConfig
ÁÁ- 9
.
ÁÁ9 :$
SSLHandshakeTimeoutMin
ÁÁ: P
,
ÁÁP Q$
SSLHandshakeTimeoutMax
ËË *
=
ËË+ ,
secureConfig
ËË- 9
.
ËË9 :$
SSLHandshakeTimeoutMax
ËË: P
,
ËËP Q

ClientAuth
ÈÈ 
=
ÈÈ  
(
ÈÈ! "
uint
ÈÈ" &
)
ÈÈ& '
secureConfig
ÈÈ' 3
.
ÈÈ3 4(
ClientAuthenticationPolicy
ÈÈ4 N
}
ÍÍ 
;
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
public
ÓÓ 
static
ÓÓ 
void
ÓÓ !
DisposeSecureClient
ÓÓ .
(
ÓÓ. /
ref
ÓÓ/ 2
SecureClientState
ÓÓ3 D
state
ÓÓE J
)
ÓÓJ K
{
ÔÔ 	
if
 
(
 
state
 
.
 
ClientConfig
 "
->
" $
transportUserData
$ 5
.
5 6
	ToPointer
6 ?
(
? @
)
@ A
!=
B D
null
E I
)
I J
UnsafeUtility
ÒÒ 
.
ÒÒ 
Free
ÒÒ "
(
ÒÒ" #
state
ÒÒ# (
.
ÒÒ( )
ClientConfig
ÒÒ) 5
->
ÒÒ5 7
transportUserData
ÒÒ7 H
.
ÒÒH I
	ToPointer
ÒÒI R
(
ÒÒR S
)
ÒÒS T
,
ÒÒT U
	Allocator
ÒÒV _
.
ÒÒ_ `

Persistent
ÒÒ` j
)
ÒÒj k
;
ÒÒk l
if
ÛÛ 
(
ÛÛ 
state
ÛÛ 
.
ÛÛ 
ClientConfig
ÛÛ "
!=
ÛÛ# %
null
ÛÛ& *
)
ÛÛ* +
UnsafeUtility
ÙÙ 
.
ÙÙ 
Free
ÙÙ "
(
ÙÙ" #
(
ÙÙ# $
void
ÙÙ$ (
*
ÙÙ( )
)
ÙÙ) *
state
ÙÙ* /
.
ÙÙ/ 0
ClientConfig
ÙÙ0 <
,
ÙÙ< =
	Allocator
ÙÙ> G
.
ÙÙG H

Persistent
ÙÙH R
)
ÙÙR S
;
ÙÙS T
state
ˆˆ 
.
ˆˆ 
ClientConfig
ˆˆ 
=
ˆˆ  
null
ˆˆ! %
;
ˆˆ% &
if
¯¯ 
(
¯¯ 
state
¯¯ 
.
¯¯ 
	ClientPtr
¯¯ 
!=
¯¯  "
null
¯¯# '
)
¯¯' (
Binding
˘˘ 
.
˘˘ %
unitytls_client_destroy
˘˘ /
(
˘˘/ 0
state
˘˘0 5
.
˘˘5 6
	ClientPtr
˘˘6 ?
)
˘˘? @
;
˘˘@ A
}
˙˙ 	
public
¸¸ 
void
¸¸ 
Dispose
¸¸ 
(
¸¸ 
)
¸¸ 
{
˝˝ 	
unsafe
˛˛ 
{
ˇˇ 
var
ÄÄ 
protocolData
ÄÄ  
=
ÄÄ! "
(
ÄÄ# $'
SecureNetworkProtocolData
ÄÄ$ =
*
ÄÄ= >
)
ÄÄ> ?
UserData
ÄÄ? G
;
ÄÄG H
var
ÅÅ 
keys
ÅÅ 
=
ÅÅ 
protocolData
ÅÅ '
->
ÅÅ' )
SecureClients
ÅÅ) 6
.
ÅÅ6 7
GetKeyArray
ÅÅ7 B
(
ÅÅB C
	Allocator
ÅÅC L
.
ÅÅL M
Temp
ÅÅM Q
)
ÅÅQ R
;
ÅÅR S
for
ÇÇ 
(
ÇÇ 
int
ÇÇ 
connectionIndex
ÇÇ (
=
ÇÇ) *
$num
ÇÇ+ ,
;
ÇÇ, -
connectionIndex
ÇÇ. =
<
ÇÇ> ?
keys
ÇÇ@ D
.
ÇÇD E
Length
ÇÇE K
;
ÇÇK L
++
ÇÇM O
connectionIndex
ÇÇO ^
)
ÇÇ^ _
{
ÉÉ 
var
ÑÑ 

connection
ÑÑ "
=
ÑÑ# $
protocolData
ÑÑ% 1
->
ÑÑ1 3
SecureClients
ÑÑ3 @
[
ÑÑ@ A
keys
ÑÑA E
[
ÑÑE F
connectionIndex
ÑÑF U
]
ÑÑU V
]
ÑÑV W
;
ÑÑW X!
DisposeSecureClient
ÜÜ '
(
ÜÜ' (
ref
ÜÜ( +

connection
ÜÜ, 6
)
ÜÜ6 7
;
ÜÜ7 8
protocolData
àà  
->
àà  "
SecureClients
àà" /
.
àà/ 0
Remove
àà0 6
(
àà6 7
keys
àà7 ;
[
àà; <
connectionIndex
àà< K
]
ààK L
)
ààL M
;
ààM N
}
ââ 
if
ãã 
(
ãã 
UserData
ãã 
!=
ãã 
default
ãã  '
)
ãã' (
UnsafeUtility
åå !
.
åå! "
Free
åå" &
(
åå& '
UserData
åå' /
.
åå/ 0
	ToPointer
åå0 9
(
åå9 :
)
åå: ;
,
åå; <
	Allocator
åå= F
.
ååF G

Persistent
ååG Q
)
ååQ R
;
ååR S
UserData
éé 
=
éé 
default
éé "
;
éé" #
}
èè 
}
êê 	
bool
íí "
TryExtractParameters
íí !
<
íí! "
T
íí" #
>
íí# $
(
íí$ %
out
íí% (
T
íí) *
config
íí+ 1
,
íí1 2
params
íí3 9
INetworkParameter
íí: K
[
ííK L
]
ííL M
param
ííN S
)
ííS T
{
ìì 	
for
îî 
(
îî 
var
îî 
i
îî 
=
îî 
$num
îî 
;
îî 
i
îî 
<
îî 
param
îî  %
.
îî% &
Length
îî& ,
;
îî, -
++
îî. 0
i
îî0 1
)
îî1 2
{
ïï 
if
ññ 
(
ññ 
param
ññ 
[
ññ 
i
ññ 
]
ññ 
is
ññ 
T
ññ  !
)
ññ! "
{
óó 
config
òò 
=
òò 
(
òò 
T
òò 
)
òò  
param
òò  %
[
òò% &
i
òò& '
]
òò' (
;
òò( )
return
ôô 
true
ôô 
;
ôô  
}
öö 
}
õõ 
config
ùù 
=
ùù 
default
ùù 
;
ùù 
return
ûû 
false
ûû 
;
ûû 
}
üü 	
public
°° 
int
°° 
Bind
°° 
(
°° 
INetworkInterface
°° )
networkInterface
°°* :
,
°°: ;
ref
°°< ?&
NetworkInterfaceEndPoint
°°@ X
localEndPoint
°°Y f
)
°°f g
{
¢¢ 	
if
££ 
(
££ 
networkInterface
££  
.
££  !
Bind
££! %
(
££% &
localEndPoint
££& 3
)
££3 4
!=
££5 7
$num
££8 9
)
££9 :
return
§§ 
-
§§ 
$num
§§ 
;
§§ 
return
¶¶ 
$num
¶¶ 
;
¶¶ 
}
ßß 	
public
©© 
int
©© %
CreateConnectionAddress
©© *
(
©©* +
INetworkInterface
©©+ <
networkInterface
©©= M
,
©©M N
NetworkEndPoint
©©O ^
remoteEndpoint
©©_ m
,
©©m n
out
©©o r'
NetworkInterfaceEndPoint©©s ã
remoteAddress©©å ô
)©©ô ö
{
™™ 	
remoteAddress
´´ 
=
´´ 
default
´´ #
;
´´# $
return
¨¨ 
networkInterface
¨¨ #
.
¨¨# $%
CreateInterfaceEndPoint
¨¨$ ;
(
¨¨; <
remoteEndpoint
¨¨< J
,
¨¨J K
out
¨¨L O
remoteAddress
¨¨P ]
)
¨¨] ^
;
¨¨^ _
}
≠≠ 	
public
ØØ 
NetworkEndPoint
ØØ 
GetRemoteEndPoint
ØØ 0
(
ØØ0 1
INetworkInterface
ØØ1 B
networkInterface
ØØC S
,
ØØS T&
NetworkInterfaceEndPoint
ØØU m
address
ØØn u
)
ØØu v
{
∞∞ 	
return
±± 
networkInterface
±± #
.
±±# $ 
GetGenericEndPoint
±±$ 6
(
±±6 7
address
±±7 >
)
±±> ?
;
±±? @
}
≤≤ 	
public
¥¥ 
int
¥¥ 
Listen
¥¥ 
(
¥¥ 
INetworkInterface
¥¥ +
networkInterface
¥¥, <
)
¥¥< =
{
µµ 	
return
∂∂ 
networkInterface
∂∂ #
.
∂∂# $
Listen
∂∂$ *
(
∂∂* +
)
∂∂+ ,
;
∂∂, -
}
∑∑ 	
public
ππ 
NetworkProtocol
ππ %
CreateProtocolInterface
ππ 6
(
ππ6 7
)
ππ7 8
{
∫∫ 	
return
ªª 
new
ªª 
NetworkProtocol
ªª &
(
ªª& '#
computePacketOverhead
ºº %
:
ºº% &
new
ºº' *&
TransportFunctionPointer
ºº+ C
<
ººC D
NetworkProtocol
ººD S
.
ººS T+
ComputePacketOverheadDelegate
ººT q
>
ººq r
(
ººr s$
ComputePacketOverheadººs à
)ººà â
,ººâ ä
processReceive
ΩΩ 
:
ΩΩ 
new
ΩΩ  #&
TransportFunctionPointer
ΩΩ$ <
<
ΩΩ< =
NetworkProtocol
ΩΩ= L
.
ΩΩL M$
ProcessReceiveDelegate
ΩΩM c
>
ΩΩc d
(
ΩΩd e
ProcessReceive
ΩΩe s
)
ΩΩs t
,
ΩΩt u
processSend
ææ 
:
ææ 
new
ææ  &
TransportFunctionPointer
ææ! 9
<
ææ9 :
NetworkProtocol
ææ: I
.
ææI J!
ProcessSendDelegate
ææJ ]
>
ææ] ^
(
ææ^ _
ProcessSend
ææ_ j
)
ææj k
,
ææk l)
processSendConnectionAccept
øø +
:
øø+ ,
new
øø- 0&
TransportFunctionPointer
øø1 I
<
øøI J
NetworkProtocol
øøJ Y
.
øøY Z1
#ProcessSendConnectionAcceptDelegate
øøZ }
>
øø} ~
(
øø~ *
ProcessSendConnectionAcceptøø ö
)øøö õ
,øøõ ú
connect
¿¿ 
:
¿¿ 
new
¿¿ &
TransportFunctionPointer
¿¿ 5
<
¿¿5 6
NetworkProtocol
¿¿6 E
.
¿¿E F
ConnectDelegate
¿¿F U
>
¿¿U V
(
¿¿V W
Connect
¿¿W ^
)
¿¿^ _
,
¿¿_ `

disconnect
¡¡ 
:
¡¡ 
new
¡¡ &
TransportFunctionPointer
¡¡  8
<
¡¡8 9
NetworkProtocol
¡¡9 H
.
¡¡H I 
DisconnectDelegate
¡¡I [
>
¡¡[ \
(
¡¡\ ]

Disconnect
¡¡] g
)
¡¡g h
,
¡¡h i
processSendPing
¬¬ 
:
¬¬  
new
¬¬! $&
TransportFunctionPointer
¬¬% =
<
¬¬= >
NetworkProtocol
¬¬> M
.
¬¬M N%
ProcessSendPingDelegate
¬¬N e
>
¬¬e f
(
¬¬f g
ProcessSendPing
¬¬g v
)
¬¬v w
,
¬¬w x
processSendPong
√√ 
:
√√  
new
√√! $&
TransportFunctionPointer
√√% =
<
√√= >
NetworkProtocol
√√> M
.
√√M N%
ProcessSendPongDelegate
√√N e
>
√√e f
(
√√f g
ProcessSendPong
√√g v
)
√√v w
,
√√w x
update
ƒƒ 
:
ƒƒ 
new
ƒƒ &
TransportFunctionPointer
ƒƒ 4
<
ƒƒ4 5
NetworkProtocol
ƒƒ5 D
.
ƒƒD E
UpdateDelegate
ƒƒE S
>
ƒƒS T
(
ƒƒT U
Update
ƒƒU [
)
ƒƒ[ \
,
ƒƒ\ ]
needsUpdate
≈≈ 
:
≈≈ 
true
≈≈ !
,
≈≈! "
userData
∆∆ 
:
∆∆ 
UserData
∆∆ "
,
∆∆" #
maxHeaderSize
«« 
:
«« 

UdpCHeader
«« )
.
««) *
Length
««* 0
,
««0 1
maxFooterSize
»» 
:
»» 
SessionIdToken
»» -
.
»»- .
k_Length
»». 6
)
…… 
;
…… 
}
   	
[
ÃÃ 	
BurstCompile
ÃÃ	 
(
ÃÃ 
DisableDirectCall
ÃÃ '
=
ÃÃ( )
true
ÃÃ* .
)
ÃÃ. /
]
ÃÃ/ 0
[
ÕÕ 	!
MonoPInvokeCallback
ÕÕ	 
(
ÕÕ 
typeof
ÕÕ #
(
ÕÕ# $
NetworkProtocol
ÕÕ$ 3
.
ÕÕ3 4+
ComputePacketOverheadDelegate
ÕÕ4 Q
)
ÕÕQ R
)
ÕÕR S
]
ÕÕS T
public
ŒŒ 
static
ŒŒ 
int
ŒŒ #
ComputePacketOverhead
ŒŒ /
(
ŒŒ/ 0
ref
ŒŒ0 3
NetworkDriver
ŒŒ4 A
.
ŒŒA B

Connection
ŒŒB L

connection
ŒŒM W
,
ŒŒW X
out
ŒŒY \
int
ŒŒ] `

dataOffset
ŒŒa k
)
ŒŒk l
{
œœ 	
return
–– $
UnityTransportProtocol
–– )
.
––) *#
ComputePacketOverhead
––* ?
(
––? @
ref
––@ C

connection
––D N
,
––N O
out
––P S

dataOffset
––T ^
)
––^ _
;
––_ `
}
—— 	
public
”” 
static
”” 
bool
”” 
ServerShouldStep
”” +
(
””+ ,
uint
””, 0
currentState
””1 =
)
””= >
{
‘‘ 	
switch
÷÷ 
(
÷÷ 
currentState
÷÷  
)
÷÷  !
{
◊◊ 
case
ÿÿ 
Binding
ÿÿ 
.
ÿÿ 2
$UNITYTLS_SSL_HANDSHAKE_HELLO_REQUEST
ÿÿ A
:
ÿÿA B
case
ŸŸ 
Binding
ŸŸ 
.
ŸŸ 1
#UNITYTLS_SSL_HANDSHAKE_CLIENT_HELLO
ŸŸ @
:
ŸŸ@ A
case
⁄⁄ 
Binding
⁄⁄ 
.
⁄⁄ 1
#UNITYTLS_SSL_HANDSHAKE_SERVER_HELLO
⁄⁄ @
:
⁄⁄@ A
case
€€ 
Binding
€€ 
.
€€ 7
)UNITYTLS_SSL_HANDSHAKE_SERVER_CERTIFICATE
€€ F
:
€€F G
case
‹‹ 
Binding
‹‹ 
.
‹‹ 8
*UNITYTLS_SSL_HANDSHAKE_SERVER_KEY_EXCHANGE
‹‹ G
:
‹‹G H
case
›› 
Binding
›› 
.
›› 8
*UNITYTLS_SSL_HANDSHAKE_CERTIFICATE_REQUEST
›› G
:
››G H
case
ﬁﬁ 
Binding
ﬁﬁ 
.
ﬁﬁ 6
(UNITYTLS_SSL_HANDSHAKE_SERVER_HELLO_DONE
ﬁﬁ E
:
ﬁﬁE F
case
ﬂﬂ 
Binding
ﬂﬂ 
.
ﬂﬂ >
0UNITYTLS_SSL_HANDSHAKE_SERVER_CHANGE_CIPHER_SPEC
ﬂﬂ M
:
ﬂﬂM N
case
‡‡ 
Binding
‡‡ 
.
‡‡ 4
&UNITYTLS_SSL_HANDSHAKE_SERVER_FINISHED
‡‡ C
:
‡‡C D
case
·· 
Binding
·· 
.
·· 5
'UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_WRAPUP
·· D
:
··D E
case
‚‚ 
Binding
‚‚ 
.
‚‚ 3
%UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_OVER
‚‚ B
:
‚‚B C
case
„„ 
Binding
„„ 
.
„„ <
.UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_FLUSH_BUFFERS
„„ K
:
„„K L
return
‰‰ 
true
‰‰ 
;
‰‰  
}
ÂÂ 
return
ÁÁ 
false
ÁÁ 
;
ÁÁ 
}
ËË 	
private
ÍÍ 
static
ÍÍ 
bool
ÍÍ 
ClientShouldStep
ÍÍ ,
(
ÍÍ, -
uint
ÍÍ- 1
currentState
ÍÍ2 >
)
ÍÍ> ?
{
ÎÎ 	
switch
ÌÌ 
(
ÌÌ 
currentState
ÌÌ  
)
ÌÌ  !
{
ÓÓ 
case
ÔÔ 
Binding
ÔÔ 
.
ÔÔ 2
$UNITYTLS_SSL_HANDSHAKE_HELLO_REQUEST
ÔÔ A
:
ÔÔA B
case
 
Binding
 
.
 1
#UNITYTLS_SSL_HANDSHAKE_CLIENT_HELLO
 @
:
@ A
return
ÒÒ 
true
ÒÒ 
;
ÒÒ  
case
ÚÚ 
Binding
ÚÚ 
.
ÚÚ 1
#UNITYTLS_SSL_HANDSHAKE_SERVER_HELLO
ÚÚ @
:
ÚÚ@ A
case
ÛÛ 
Binding
ÛÛ 
.
ÛÛ 7
)UNITYTLS_SSL_HANDSHAKE_SERVER_CERTIFICATE
ÛÛ F
:
ÛÛF G
case
ÙÙ 
Binding
ÙÙ 
.
ÙÙ 8
*UNITYTLS_SSL_HANDSHAKE_SERVER_KEY_EXCHANGE
ÙÙ G
:
ÙÙG H
case
ıı 
Binding
ıı 
.
ıı 8
*UNITYTLS_SSL_HANDSHAKE_CERTIFICATE_REQUEST
ıı G
:
ııG H
return
ˆˆ 
false
ˆˆ  
;
ˆˆ  !
case
˜˜ 
Binding
˜˜ 
.
˜˜ 6
(UNITYTLS_SSL_HANDSHAKE_SERVER_HELLO_DONE
˜˜ E
:
˜˜E F
case
¯¯ 
Binding
¯¯ 
.
¯¯ 7
)UNITYTLS_SSL_HANDSHAKE_CLIENT_CERTIFICATE
¯¯ F
:
¯¯F G
case
˘˘ 
Binding
˘˘ 
.
˘˘ 8
*UNITYTLS_SSL_HANDSHAKE_CLIENT_KEY_EXCHANGE
˘˘ G
:
˘˘G H
case
˙˙ 
Binding
˙˙ 
.
˙˙ 7
)UNITYTLS_SSL_HANDSHAKE_CERTIFICATE_VERIFY
˙˙ F
:
˙˙F G
case
˚˚ 
Binding
˚˚ 
.
˚˚ >
0UNITYTLS_SSL_HANDSHAKE_CLIENT_CHANGE_CIPHER_SPEC
˚˚ M
:
˚˚M N
case
¸¸ 
Binding
¸¸ 
.
¸¸ 4
&UNITYTLS_SSL_HANDSHAKE_CLIENT_FINISHED
¸¸ C
:
¸¸C D
case
˝˝ 
Binding
˝˝ 
.
˝˝ 5
'UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_WRAPUP
˝˝ D
:
˝˝D E
case
˛˛ 
Binding
˛˛ 
.
˛˛ 3
%UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_OVER
˛˛ B
:
˛˛B C
case
ˇˇ 
Binding
ˇˇ 
.
ˇˇ <
.UNITYTLS_SSL_HANDSHAKE_HANDSHAKE_FLUSH_BUFFERS
ˇˇ K
:
ˇˇK L
return
ÄÄ 
true
ÄÄ 
;
ÄÄ  
}
ÅÅ 
return
ÉÉ 
false
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
internal
ÜÜ 
static
ÜÜ 
void
ÜÜ 
SetSecureUserData
ÜÜ .
(
ÜÜ. /
IntPtr
áá 
inStream
áá 
,
áá 
int
àà 
size
àà 
,
àà 
ref
ââ &
NetworkInterfaceEndPoint
ââ (
remote
ââ) /
,
ââ/ 0
ref
ää "
NetworkSendInterface
ää $"
networkSendInterface
ää% 9
,
ää9 :
ref
ãã $
NetworkSendQueueHandle
ãã &
queueHandle
ãã' 2
,
ãã2 3
SecureUserData
åå 
*
åå 
secureUserData
åå *
)
åå* +
{
çç 	
secureUserData
éé 
->
éé 
	Interface
éé %
=
éé& '"
networkSendInterface
éé( <
;
éé< =
secureUserData
èè 
->
èè 
Remote
èè "
=
èè# $
remote
èè% +
;
èè+ ,
secureUserData
êê 
->
êê 
QueueHandle
êê '
=
êê( )
queueHandle
êê* 5
;
êê5 6
secureUserData
ëë 
->
ëë 
Size
ëë  
=
ëë! "
size
ëë# '
;
ëë' (
secureUserData
íí 
->
íí 

StreamData
íí &
=
íí' (
inStream
íí) 1
;
íí1 2
secureUserData
ìì 
->
ìì 
BytesProcessed
ìì *
=
ìì+ ,
$num
ìì- .
;
ìì. /
}
îî 	
private
ññ 
static
ññ 
bool
ññ (
CreateNewSecureClientState
ññ 6
(
ññ6 7
ref
óó &
NetworkInterfaceEndPoint
óó (
endpoint
óó) 1
,
óó1 2
uint
òò 
tlsRole
òò 
,
òò '
SecureNetworkProtocolData
ôô %
*
ôô% &
protocolData
ôô' 3
,
ôô3 4
SessionIdToken
öö 
receiveToken
öö '
=
öö( )
default
öö* 1
)
öö1 2
{
õõ 	
if
úú 
(
úú 
protocolData
úú 
->
úú 
SecureClients
úú +
.
úú+ ,
TryAdd
úú, 2
(
úú2 3
endpoint
úú3 ;
,
úú; <
new
úú= @
SecureClientState
úúA R
(
úúR S
)
úúS T
)
úúT U
)
úúU V
{
ùù 
var
ûû 
secureClient
ûû  
=
ûû! "
protocolData
ûû# /
->
ûû/ 1
SecureClients
ûû1 >
[
ûû> ?
endpoint
ûû? G
]
ûûG H
;
ûûH I
secureClient
üü 
.
üü 
ClientConfig
üü )
=
üü* +#
GetSecureClientConfig
üü, A
(
üüA B
protocolData
üüB N
)
üüN O
;
üüO P
secureClient
†† 
.
†† 
ReceiveToken
†† )
=
††* +
receiveToken
††, 8
;
††8 9 
CreateSecureClient
¢¢ "
(
¢¢" #
tlsRole
¢¢# *
,
¢¢* +
&
¢¢, -
secureClient
¢¢- 9
)
¢¢9 :
;
¢¢: ;
IntPtr
§§ 
secureUserData
§§ %
=
§§& '
(
§§( )
IntPtr
§§) /
)
§§/ 0
UnsafeUtility
§§0 =
.
§§= >
Malloc
§§> D
(
§§D E
UnsafeUtility
§§E R
.
§§R S
SizeOf
§§S Y
<
§§Y Z
SecureUserData
§§Z h
>
§§h i
(
§§i j
)
§§j k
,
§§k l
UnsafeUtility
•• !
.
••! "
AlignOf
••" )
<
••) *
SecureUserData
••* 8
>
••8 9
(
••9 :
)
••: ;
,
••; <
	Allocator
••= F
.
••F G

Persistent
••G Q
)
••Q R
;
••R S
*
ßß 
(
ßß 
SecureUserData
ßß  
*
ßß  !
)
ßß! "
secureUserData
ßß" 0
=
ßß1 2
new
ßß3 6
SecureUserData
ßß7 E
{
®® 
	Interface
©© 
=
©© 
default
©©  '
,
©©' (
Remote
™™ 
=
™™ 
default
™™ $
,
™™$ %
QueueHandle
´´ 
=
´´  !
default
´´" )
,
´´) *

StreamData
¨¨ 
=
¨¨  
IntPtr
¨¨! '
.
¨¨' (
Zero
¨¨( ,
,
¨¨, -
Size
≠≠ 
=
≠≠ 
$num
≠≠ 
,
≠≠ 
BytesProcessed
ÆÆ "
=
ÆÆ# $
$num
ÆÆ% &
}
ØØ 
;
ØØ 
secureClient
±± 
.
±± 
ClientConfig
±± )
->
±±) +
transportUserData
±±+ <
=
±±= >
secureUserData
±±? M
;
±±M N
if
≥≥ 
(
≥≥ 
protocolData
≥≥  
->
≥≥  "
Hostname
≥≥" *
!=
≥≥+ -
default
≥≥. 5
)
≥≥5 6
{
¥¥ 
secureClient
µµ  
.
µµ  !
ClientConfig
µµ! -
->
µµ- /
hostname
µµ/ 7
=
µµ8 9
protocolData
µµ: F
->
µµF H
Hostname
µµH P
.
µµP Q
GetUnsafePtr
µµQ ]
(
µµ] ^
)
µµ^ _
;
µµ_ `
}
∂∂ 
else
∑∑ 
{
∏∏ 
secureClient
ππ  
.
ππ  !
ClientConfig
ππ! -
->
ππ- /
hostname
ππ/ 7
=
ππ8 9
null
ππ: >
;
ππ> ?
}
∫∫ 
if
ºº 
(
ºº 
protocolData
ºº  
->
ºº  "
Pem
ºº" %
!=
ºº& (
default
ºº) 0
)
ºº0 1
{
ΩΩ 
secureClient
ææ  
.
ææ  !
ClientConfig
ææ! -
->
ææ- /
caPEM
ææ/ 4
=
ææ5 6
new
ææ7 :
Binding
ææ; B
.
ææB C
unitytls_dataRef
ææC S
(
ææS T
)
ææT U
{
øø 
dataPtr
¿¿ 
=
¿¿  !
protocolData
¿¿" .
->
¿¿. 0
Pem
¿¿0 3
.
¿¿3 4
GetUnsafePtr
¿¿4 @
(
¿¿@ A
)
¿¿A B
,
¿¿B C
dataLen
¡¡ 
=
¡¡  !
new
¡¡" %
UIntPtr
¡¡& -
(
¡¡- .
(
¡¡. /
uint
¡¡/ 3
)
¡¡3 4
protocolData
¡¡4 @
->
¡¡@ B
Pem
¡¡B E
.
¡¡E F
Length
¡¡F L
)
¡¡L M
}
¬¬ 
;
¬¬ 
}
√√ 
else
ƒƒ 
{
≈≈ 
secureClient
∆∆  
.
∆∆  !
ClientConfig
∆∆! -
->
∆∆- /
caPEM
∆∆/ 4
=
∆∆5 6
new
∆∆7 :
Binding
∆∆; B
.
∆∆B C
unitytls_dataRef
∆∆C S
(
∆∆S T
)
∆∆T U
{
«« 
dataPtr
»» 
=
»»  !
null
»»" &
,
»»& '
dataLen
…… 
=
……  !
new
……" %
UIntPtr
……& -
(
……- .
$num
……. /
)
……/ 0
}
   
;
   
}
ÀÀ 
if
ÕÕ 
(
ÕÕ 
protocolData
ÕÕ  
->
ÕÕ  "
Rsa
ÕÕ" %
!=
ÕÕ& (
default
ÕÕ) 0
&&
ÕÕ1 3
protocolData
ÕÕ4 @
->
ÕÕ@ B
RsaKey
ÕÕB H
!=
ÕÕI K
default
ÕÕL S
)
ÕÕS T
{
ŒŒ 
secureClient
œœ  
.
œœ  !
ClientConfig
œœ! -
->
œœ- /
	serverPEM
œœ/ 8
=
œœ9 :
new
œœ; >
Binding
œœ? F
.
œœF G
unitytls_dataRef
œœG W
(
œœW X
)
œœX Y
{
–– 
dataPtr
—— 
=
——  !
protocolData
——" .
->
——. 0
Rsa
——0 3
.
——3 4
GetUnsafePtr
——4 @
(
——@ A
)
——A B
,
——B C
dataLen
““ 
=
““  !
new
““" %
UIntPtr
““& -
(
““- .
(
““. /
uint
““/ 3
)
““3 4
protocolData
““4 @
->
““@ B
Rsa
““B E
.
““E F
Length
““F L
)
““L M
}
”” 
;
”” 
secureClient
’’  
.
’’  !
ClientConfig
’’! -
->
’’- /
privateKeyPEM
’’/ <
=
’’= >
new
’’? B
Binding
’’C J
.
’’J K
unitytls_dataRef
’’K [
(
’’[ \
)
’’\ ]
{
÷÷ 
dataPtr
◊◊ 
=
◊◊  !
protocolData
◊◊" .
->
◊◊. 0
RsaKey
◊◊0 6
.
◊◊6 7
GetUnsafePtr
◊◊7 C
(
◊◊C D
)
◊◊D E
,
◊◊E F
dataLen
ÿÿ 
=
ÿÿ  !
new
ÿÿ" %
UIntPtr
ÿÿ& -
(
ÿÿ- .
(
ÿÿ. /
uint
ÿÿ/ 3
)
ÿÿ3 4
protocolData
ÿÿ4 @
->
ÿÿ@ B
RsaKey
ÿÿB H
.
ÿÿH I
Length
ÿÿI O
)
ÿÿO P
}
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
else
€€ 
{
‹‹ 
secureClient
››  
.
››  !
ClientConfig
››! -
->
››- /
	serverPEM
››/ 8
=
››9 :
new
››; >
Binding
››? F
.
››F G
unitytls_dataRef
››G W
(
››W X
)
››X Y
{
ﬁﬁ 
dataPtr
ﬂﬂ 
=
ﬂﬂ  !
null
ﬂﬂ" &
,
ﬂﬂ& '
dataLen
‡‡ 
=
‡‡  !
new
‡‡" %
UIntPtr
‡‡& -
(
‡‡- .
$num
‡‡. /
)
‡‡/ 0
}
·· 
;
·· 
secureClient
„„  
.
„„  !
ClientConfig
„„! -
->
„„- /
privateKeyPEM
„„/ <
=
„„= >
new
„„? B
Binding
„„C J
.
„„J K
unitytls_dataRef
„„K [
(
„„[ \
)
„„\ ]
{
‰‰ 
dataPtr
ÂÂ 
=
ÂÂ  !
null
ÂÂ" &
,
ÂÂ& '
dataLen
ÊÊ 
=
ÊÊ  !
new
ÊÊ" %
UIntPtr
ÊÊ& -
(
ÊÊ- .
$num
ÊÊ. /
)
ÊÊ/ 0
}
ÁÁ 
;
ÁÁ 
}
ËË 
Binding
ÍÍ 
.
ÍÍ "
unitytls_client_init
ÍÍ ,
(
ÍÍ, -
secureClient
ÍÍ- 9
.
ÍÍ9 :
	ClientPtr
ÍÍ: C
)
ÍÍC D
;
ÍÍD E
protocolData
ÏÏ 
->
ÏÏ 
SecureClients
ÏÏ +
[
ÏÏ+ ,
endpoint
ÏÏ, 4
]
ÏÏ4 5
=
ÏÏ6 7
secureClient
ÏÏ8 D
;
ÏÏD E
}
ÌÌ 
return
ÔÔ 
false
ÔÔ 
;
ÔÔ 
}
 	
internal
ÚÚ 
static
ÚÚ 
uint
ÚÚ !
SecureHandshakeStep
ÚÚ 0
(
ÚÚ0 1
ref
ÚÚ1 4
SecureClientState
ÚÚ5 F
clientAgent
ÚÚG R
)
ÚÚR S
{
ÛÛ 	
var
ıı 
isServer
ıı 
=
ıı 
Binding
ıı "
.
ıı" #&
unitytls_client_get_role
ıı# ;
(
ıı; <
clientAgent
ıı< G
.
ııG H
	ClientPtr
ııH Q
)
ııQ R
==
ııS U
Binding
ııV ]
.
ıı] ^!
UnityTLSRole_Server
ıı^ q
;
ııq r
bool
˜˜ 

shouldStep
˜˜ 
=
˜˜ 
true
˜˜ "
;
˜˜" #
uint
¯¯ 
result
¯¯ 
=
¯¯ 
Binding
¯¯ !
.
¯¯! "%
UNITYTLS_HANDSHAKE_STEP
¯¯" 9
;
¯¯9 :
do
˘˘ 
{
˙˙ 

shouldStep
˚˚ 
=
˚˚ 
false
˚˚ "
;
˚˚" #
result
¸¸ 
=
¸¸ 
Binding
¸¸  
.
¸¸  !'
unitytls_client_handshake
¸¸! :
(
¸¸: ;
clientAgent
˝˝ 
.
˝˝  
	ClientPtr
˝˝  )
)
˝˝) *
;
˝˝* +
if
ÄÄ 
(
ÄÄ 
result
ÄÄ 
==
ÄÄ 
Binding
ÄÄ %
.
ÄÄ% &%
UNITYTLS_HANDSHAKE_STEP
ÄÄ& =
)
ÄÄ= >
{
ÅÅ 
uint
ÇÇ 
currentState
ÇÇ %
=
ÇÇ& '
Binding
ÇÇ( /
.
ÇÇ/ 01
#unitytls_client_get_handshake_state
ÇÇ0 S
(
ÇÇS T
clientAgent
ÇÇT _
.
ÇÇ_ `
	ClientPtr
ÇÇ` i
)
ÇÇi j
;
ÇÇj k

shouldStep
ÉÉ 
=
ÉÉ  
isServer
ÉÉ! )
?
ÉÉ* +
ServerShouldStep
ÉÉ, <
(
ÉÉ< =
currentState
ÉÉ= I
)
ÉÉI J
:
ÉÉK L
ClientShouldStep
ÉÉM ]
(
ÉÉ] ^
currentState
ÉÉ^ j
)
ÉÉj k
;
ÉÉk l
}
ÑÑ 
}
ÖÖ 
while
ÜÜ 
(
ÜÜ 

shouldStep
ÜÜ 
)
ÜÜ 
;
ÜÜ 
return
àà 
result
àà 
;
àà 
}
ââ 	
private
ãã 
unsafe
ãã 
static
ãã 
uint
ãã "(
UpdateSecureHandshakeState
ãã# =
(
ãã= >'
SecureNetworkProtocolData
åå %
*
åå% &
protocolData
åå' 3
,
åå3 4
ref
åå5 8&
NetworkInterfaceEndPoint
åå9 Q
endpoint
ååR Z
)
ååZ [
{
çç 	
var
éé 
secureClient
éé 
=
éé 
protocolData
éé +
->
éé+ -
SecureClients
éé- :
[
éé: ;
endpoint
éé; C
]
ééC D
;
ééD E
secureClient
êê 
.
êê !
LastHandshakeUpdate
êê ,
=
êê- .
protocolData
êê/ ;
->
êê; =

LastUpdate
êê= G
;
êêG H
protocolData
ëë 
->
ëë 
SecureClients
ëë '
[
ëë' (
endpoint
ëë( 0
]
ëë0 1
=
ëë2 3
secureClient
ëë4 @
;
ëë@ A
return
ìì !
SecureHandshakeStep
ìì &
(
ìì& '
ref
ìì' *
secureClient
ìì+ 7
)
ìì7 8
;
ìì8 9
}
îî 	
private
ññ 
unsafe
ññ 
static
ññ 
void
ññ "&
PruneHalfOpenConnections
ññ# ;
(
ññ; <'
SecureNetworkProtocolData
ññ< U
*
ññU V
protocolData
ññW c
)
ññc d
{
óó 	
var
òò 
	endpoints
òò 
=
òò 
protocolData
òò (
->
òò( *
SecureClients
òò* 7
.
òò7 8
GetKeyArray
òò8 C
(
òòC D
	Allocator
òòD M
.
òòM N
Temp
òòN R
)
òòR S
;
òòS T
bool
ôô 
pruned
ôô 
=
ôô 
false
ôô 
;
ôô  
for
õõ 
(
õõ 
int
õõ 
i
õõ 
=
õõ 
$num
õõ 
;
õõ 
i
õõ 
<
õõ 
	endpoints
õõ  )
.
õõ) *
Length
õõ* 0
;
õõ0 1
i
õõ2 3
++
õõ3 5
)
õõ5 6
{
úú 
var
ùù 
secureClient
ùù  
=
ùù! "
protocolData
ùù# /
->
ùù/ 1
SecureClients
ùù1 >
[
ùù> ?
	endpoints
ùù? H
[
ùùH I
i
ùùI J
]
ùùJ K
]
ùùK L
;
ùùL M
var
ûû 
state
ûû 
=
ûû 
Binding
ûû #
.
ûû# $'
unitytls_client_get_state
ûû$ =
(
ûû= >
secureClient
ûû> J
.
ûûJ K
	ClientPtr
ûûK T
)
ûûT U
;
ûûU V
if
®® 
(
®® 
state
®® 
==
®® 
Binding
®® $
.
®®$ %+
UnityTLSClientState_Handshake
®®% B
&&
®®C E
secureClient
©©  
.
©©  !!
LastHandshakeUpdate
©©! 4
>
©©5 6
$num
©©7 8
&&
©©9 ;
protocolData
™™  
->
™™  "

LastUpdate
™™" ,
-
™™- .
secureClient
™™/ ;
.
™™; <!
LastHandshakeUpdate
™™< O
>
™™P Q
protocolData
™™R ^
->
™™^ `$
SSLHandshakeTimeoutMax
™™` v
)
™™v w
{
´´ !
DisposeSecureClient
¨¨ '
(
¨¨' (
ref
¨¨( +
secureClient
¨¨, 8
)
¨¨8 9
;
¨¨9 :
protocolData
≠≠  
->
≠≠  "
SecureClients
≠≠" /
.
≠≠/ 0
Remove
≠≠0 6
(
≠≠6 7
	endpoints
≠≠7 @
[
≠≠@ A
i
≠≠A B
]
≠≠B C
)
≠≠C D
;
≠≠D E
pruned
ØØ 
=
ØØ 
true
ØØ !
;
ØØ! "
}
∞∞ 
}
±± 
if
∑∑ 
(
∑∑ 
pruned
∑∑ 
)
∑∑ 
{
∏∏ 
Debug
ππ 
.
ππ 
LogError
ππ 
(
ππ 
$str
ππ m
)
ππm n
;
ππn o
}
∫∫ 
	endpoints
ºº 
.
ºº 
Dispose
ºº 
(
ºº 
)
ºº 
;
ºº  
}
ΩΩ 	
[
øø 	
BurstCompile
øø	 
(
øø 
DisableDirectCall
øø '
=
øø( )
true
øø* .
)
øø. /
]
øø/ 0
[
¿¿ 	!
MonoPInvokeCallback
¿¿	 
(
¿¿ 
typeof
¿¿ #
(
¿¿# $
NetworkProtocol
¿¿$ 3
.
¿¿3 4$
ProcessReceiveDelegate
¿¿4 J
)
¿¿J K
)
¿¿K L
]
¿¿L M
public
¡¡ 
static
¡¡ 
void
¡¡ 
ProcessReceive
¡¡ )
(
¡¡) *
IntPtr
¡¡* 0
stream
¡¡1 7
,
¡¡7 8
ref
¡¡9 <&
NetworkInterfaceEndPoint
¡¡= U
endpoint
¡¡V ^
,
¡¡^ _
int
¡¡` c
size
¡¡d h
,
¡¡h i
ref
¬¬ "
NetworkSendInterface
¬¬ $
sendInterface
¬¬% 2
,
¬¬2 3
ref
¬¬4 7$
NetworkSendQueueHandle
¬¬8 N
queueHandle
¬¬O Z
,
¬¬Z [
IntPtr
¬¬\ b
userData
¬¬c k
,
¬¬k l
ref
√√ "
ProcessPacketCommand
√√ $
command
√√% ,
)
√√, -
{
ƒƒ 	
unsafe
≈≈ 
{
∆∆ 
var
«« 
protocolData
««  
=
««! "
(
««# $'
SecureNetworkProtocolData
««$ =
*
««= >
)
««> ?
userData
««? G
;
««G H(
CreateNewSecureClientState
ÕÕ *
(
ÕÕ* +
ref
ÕÕ+ .
endpoint
ÕÕ/ 7
,
ÕÕ7 8
Binding
ÕÕ9 @
.
ÕÕ@ A!
UnityTLSRole_Server
ÕÕA T
,
ÕÕT U
protocolData
ÕÕV b
)
ÕÕb c
;
ÕÕc d
var
œœ 
secureClient
œœ  
=
œœ! "
protocolData
œœ# /
->
œœ/ 1
SecureClients
œœ1 >
[
œœ> ?
endpoint
œœ? G
]
œœG H
;
œœH I
var
–– 
secureUserData
–– "
=
––# $
(
––% &
SecureUserData
––& 4
*
––4 5
)
––5 6
secureClient
––6 B
.
––B C
ClientConfig
––C O
->
––O Q
transportUserData
––Q b
;
––b c
SetSecureUserData
““ !
(
““! "
stream
““" (
,
““( )
size
““* .
,
““. /
ref
““0 3
endpoint
““4 <
,
““< =
ref
““> A
sendInterface
““B O
,
““O P
ref
““Q T
queueHandle
““U `
,
““` a
secureUserData
““b p
)
““p q
;
““q r
var
”” 
clientState
”” 
=
””  !
Binding
””" )
.
””) *'
unitytls_client_get_state
””* C
(
””C D
secureClient
””D P
.
””P Q
	ClientPtr
””Q Z
)
””Z [
;
””[ \
uint
‘‘ 
handshakeResult
‘‘ $
=
‘‘% &
Binding
‘‘' .
.
‘‘. /
UNITYTLS_SUCCESS
‘‘/ ?
;
‘‘? @
if
◊◊ 
(
◊◊ 
clientState
◊◊ 
==
◊◊  "
Binding
◊◊# *
.
◊◊* ++
UnityTLSClientState_Handshake
◊◊+ H
||
ÿÿ 
clientState
ÿÿ "
==
ÿÿ# %
Binding
ÿÿ& -
.
ÿÿ- .&
UnityTLSClientState_Init
ÿÿ. F
)
ÿÿF G
{
ŸŸ 
bool
⁄⁄ 
shouldRunAgain
⁄⁄ '
=
⁄⁄( )
false
⁄⁄* /
;
⁄⁄/ 0
do
€€ 
{
‹‹ 
handshakeResult
›› '
=
››( )(
UpdateSecureHandshakeState
››* D
(
››D E
protocolData
››E Q
,
››Q R
ref
››S V
endpoint
››W _
)
››_ `
;
››` a
clientState
ﬁﬁ #
=
ﬁﬁ$ %
Binding
ﬁﬁ& -
.
ﬁﬁ- .'
unitytls_client_get_state
ﬁﬁ. G
(
ﬁﬁG H
secureClient
ﬁﬁH T
.
ﬁﬁT U
	ClientPtr
ﬁﬁU ^
)
ﬁﬁ^ _
;
ﬁﬁ_ `
shouldRunAgain
ﬂﬂ &
=
ﬂﬂ' (
(
ﬂﬂ) *
size
ﬂﬂ* .
!=
ﬂﬂ/ 1
$num
ﬂﬂ2 3
&&
ﬂﬂ4 6
secureUserData
ﬂﬂ7 E
->
ﬂﬂE G
BytesProcessed
ﬂﬂG U
==
ﬂﬂV X
$num
ﬂﬂY Z
&&
ﬂﬂ[ ]
clientState
ﬂﬂ^ i
==
ﬂﬂj l
Binding
ﬂﬂm t
.
ﬂﬂt u,
UnityTLSClientState_Handshakeﬂﬂu í
)ﬂﬂí ì
;ﬂﬂì î
}
‡‡ 
while
·· 
(
·· 
shouldRunAgain
·· )
)
··) *
;
··* +
var
ÊÊ 
role
ÊÊ 
=
ÊÊ 
Binding
ÊÊ &
.
ÊÊ& '&
unitytls_client_get_role
ÊÊ' ?
(
ÊÊ? @
secureClient
ÊÊ@ L
.
ÊÊL M
	ClientPtr
ÊÊM V
)
ÊÊV W
;
ÊÊW X
if
ÁÁ 
(
ÁÁ 
role
ÁÁ 
==
ÁÁ 
Binding
ÁÁ  '
.
ÁÁ' (!
UnityTLSRole_Client
ÁÁ( ;
&&
ÁÁ< >
clientState
ÁÁ? J
==
ÁÁK M
Binding
ÁÁN U
.
ÁÁU V+
UnityTLSClientState_Messaging
ÁÁV s
)
ÁÁs t
{
ËË #
SendConnectionRequest
ÈÈ -
(
ÈÈ- .
secureClient
ÍÍ (
.
ÍÍ( )
ReceiveToken
ÍÍ) 5
,
ÍÍ5 6
secureClient
ÍÍ7 C
,
ÍÍC D
ref
ÍÍE H
endpoint
ÍÍI Q
,
ÍÍQ R
ref
ÍÍS V
sendInterface
ÍÍW d
,
ÍÍd e
ref
ÍÍf i
queueHandle
ÍÍj u
)
ÍÍu v
;
ÍÍv w
}
ÎÎ 
command
ÌÌ 
.
ÌÌ 
Type
ÌÌ  
=
ÌÌ! "&
ProcessPacketCommandType
ÌÌ# ;
.
ÌÌ; <
Drop
ÌÌ< @
;
ÌÌ@ A
}
ÓÓ 
else
ÔÔ 
if
ÔÔ 
(
ÔÔ 
clientState
ÔÔ $
==
ÔÔ% '
Binding
ÔÔ( /
.
ÔÔ/ 0+
UnityTLSClientState_Messaging
ÔÔ0 M
)
ÔÔM N
{
 
var
ÒÒ 
buffer
ÒÒ 
=
ÒÒ  
new
ÒÒ! $
NativeArray
ÒÒ% 0
<
ÒÒ0 1
byte
ÒÒ1 5
>
ÒÒ5 6
(
ÒÒ6 7'
NetworkParameterConstants
ÒÒ7 P
.
ÒÒP Q
MTU
ÒÒQ T
,
ÒÒT U
	Allocator
ÒÒV _
.
ÒÒ_ `
Temp
ÒÒ` d
)
ÒÒd e
;
ÒÒe f
var
ÚÚ 
	bytesRead
ÚÚ !
=
ÚÚ" #
new
ÚÚ$ '
UIntPtr
ÚÚ( /
(
ÚÚ/ 0
)
ÚÚ0 1
;
ÚÚ1 2
var
ÛÛ 
result
ÛÛ 
=
ÛÛ  
Binding
ÛÛ! (
.
ÛÛ( )'
unitytls_client_read_data
ÛÛ) B
(
ÛÛB C
secureClient
ÛÛC O
.
ÛÛO P
	ClientPtr
ÛÛP Y
,
ÛÛY Z
(
ÙÙ 
byte
ÙÙ 
*
ÙÙ 
)
ÙÙ 
buffer
ÙÙ %
.
ÙÙ% &
GetUnsafePtr
ÙÙ& 2
(
ÙÙ2 3
)
ÙÙ3 4
,
ÙÙ4 5
new
ÙÙ6 9
UIntPtr
ÙÙ: A
(
ÙÙA B'
NetworkParameterConstants
ÙÙB [
.
ÙÙ[ \
MTU
ÙÙ\ _
)
ÙÙ_ `
,
ÙÙ` a
&
ıı 
	bytesRead
ıı "
)
ıı" #
;
ıı# $
if
˜˜ 
(
˜˜ 
result
˜˜ 
!=
˜˜ !
Binding
˜˜" )
.
˜˜) *
UNITYTLS_SUCCESS
˜˜* :
)
˜˜: ;
{
¯¯ 
command
˝˝ 
.
˝˝  
Type
˝˝  $
=
˝˝% &&
ProcessPacketCommandType
˝˝' ?
.
˝˝? @
Drop
˝˝@ D
;
˝˝D E
return
˛˛ 
;
˛˛ 
}
ˇˇ 
UnsafeUtility
ÉÉ !
.
ÉÉ! "
MemCpy
ÉÉ" (
(
ÉÉ( )
(
ÉÉ) *
void
ÉÉ* .
*
ÉÉ. /
)
ÉÉ/ 0
stream
ÉÉ0 6
,
ÉÉ6 7
buffer
ÉÉ8 >
.
ÉÉ> ?
GetUnsafePtr
ÉÉ? K
(
ÉÉK L
)
ÉÉL M
,
ÉÉM N
	bytesRead
ÉÉO X
.
ÉÉX Y
ToUInt32
ÉÉY a
(
ÉÉa b
)
ÉÉb c
)
ÉÉc d
;
ÉÉd e$
UnityTransportProtocol
ÖÖ *
.
ÖÖ* +
ProcessReceive
ÖÖ+ 9
(
ÖÖ9 :
stream
ÖÖ: @
,
ÖÖ@ A
ref
ÜÜ 
endpoint
ÜÜ $
,
ÜÜ$ %
(
áá 
int
áá 
)
áá 
	bytesRead
áá &
.
áá& '
ToUInt32
áá' /
(
áá/ 0
)
áá0 1
,
áá1 2
ref
àà 
sendInterface
àà )
,
àà) *
ref
ââ 
queueHandle
ââ '
,
ââ' (
IntPtr
ää 
.
ää 
Zero
ää #
,
ää# $
ref
ãã 
command
ãã #
)
ãã# $
;
ãã$ %
if
çç 
(
çç 
command
çç 
.
çç  
Type
çç  $
==
çç% '&
ProcessPacketCommandType
çç( @
.
çç@ A

Disconnect
ççA K
)
ççK L
{
éé !
DisposeSecureClient
êê +
(
êê+ ,
ref
êê, /
secureClient
êê0 <
)
êê< =
;
êê= >
protocolData
ëë $
->
ëë$ &
SecureClients
ëë& 3
.
ëë3 4
Remove
ëë4 :
(
ëë: ;
endpoint
ëë; C
)
ëëC D
;
ëëD E
return
íí 
;
íí 
}
ìì 
}
îî 
clientState
ññ 
=
ññ 
Binding
ññ %
.
ññ% &'
unitytls_client_get_state
ññ& ?
(
ññ? @
secureClient
ññ@ L
.
ññL M
	ClientPtr
ññM V
)
ññV W
;
ññW X
if
óó 
(
óó 
clientState
óó 
==
óó  "
Binding
óó# *
.
óó* +&
UnityTLSClientState_Fail
óó+ C
)
óóC D
{
òò 
if
õõ 
(
õõ 
handshakeResult
õõ '
==
õõ( *
Binding
õõ+ 2
.
õõ2 34
&UNITYTLS_SSL_HANDSHAKE_SERVER_FINISHED
õõ3 Y
)
õõY Z
{
úú 
UnityEngine
ùù #
.
ùù# $
Debug
ùù$ )
.
ùù) *
LogError
ùù* 2
(
ùù2 3
$strùù3 Ä
)ùùÄ Å
;ùùÅ Ç
}
ûû 
command
†† 
.
†† 
Type
††  
=
††! "&
ProcessPacketCommandType
††# ;
.
††; <
Drop
††< @
;
††@ A!
DisposeSecureClient
££ '
(
££' (
ref
££( +
secureClient
££, 8
)
££8 9
;
££9 :
protocolData
••  
->
••  "
SecureClients
••" /
.
••/ 0
Remove
••0 6
(
••6 7
endpoint
••7 ?
)
••? @
;
••@ A
}
¶¶ 
}
ßß 
}
®® 	
[
™™ 	
BurstCompile
™™	 
(
™™ 
DisableDirectCall
™™ '
=
™™( )
true
™™* .
)
™™. /
]
™™/ 0
[
´´ 	!
MonoPInvokeCallback
´´	 
(
´´ 
typeof
´´ #
(
´´# $
NetworkProtocol
´´$ 3
.
´´3 4!
ProcessSendDelegate
´´4 G
)
´´G H
)
´´H I
]
´´I J
public
¨¨ 
static
¨¨ 
int
¨¨ 
ProcessSend
¨¨ %
(
¨¨% &
ref
¨¨& )
NetworkDriver
¨¨* 7
.
¨¨7 8

Connection
¨¨8 B

connection
¨¨C M
,
¨¨M N
bool
¨¨O S
hasPipeline
¨¨T _
,
¨¨_ `
ref
¨¨a d"
NetworkSendInterface
¨¨e y
sendInterface¨¨z á
,¨¨á à
ref¨¨â å*
NetworkInterfaceSendHandle¨¨ç ß

sendHandle¨¨® ≤
,¨¨≤ ≥
ref¨¨¥ ∑&
NetworkSendQueueHandle¨¨∏ Œ
queueHandle¨¨œ ⁄
,¨¨⁄ €
IntPtr¨¨‹ ‚
userData¨¨„ Î
)¨¨Î Ï
{
≠≠ 	
var
ÆÆ 
protocolData
ÆÆ 
=
ÆÆ 
(
ÆÆ  '
SecureNetworkProtocolData
ÆÆ  9
*
ÆÆ9 :
)
ÆÆ: ;
userData
ÆÆ; C
;
ÆÆC D(
CreateNewSecureClientState
∞∞ &
(
∞∞& '
ref
∞∞' *

connection
∞∞+ 5
.
∞∞5 6
Address
∞∞6 =
,
∞∞= >
Binding
∞∞? F
.
∞∞F G!
UnityTLSRole_Server
∞∞G Z
,
∞∞Z [
protocolData
∞∞\ h
)
∞∞h i
;
∞∞i j
var
≤≤ 
secureClient
≤≤ 
=
≤≤ 
protocolData
≤≤ +
->
≤≤+ -
SecureClients
≤≤- :
[
≤≤: ;

connection
≤≤; E
.
≤≤E F
Address
≤≤F M
]
≤≤M N
;
≤≤N O
var
≥≥ 
secureUserData
≥≥ 
=
≥≥  
(
≥≥! "
SecureUserData
≥≥" 0
*
≥≥0 1
)
≥≥1 2
secureClient
≥≥2 >
.
≥≥> ?
ClientConfig
≥≥? K
->
≥≥K M
transportUserData
≥≥M ^
;
≥≥^ _
SetSecureUserData
µµ 
(
µµ 
IntPtr
µµ $
.
µµ$ %
Zero
µµ% )
,
µµ) *
$num
µµ+ ,
,
µµ, -
ref
µµ. 1

connection
µµ2 <
.
µµ< =
Address
µµ= D
,
µµD E
ref
µµF I
sendInterface
µµJ W
,
µµW X
ref
µµY \
queueHandle
µµ] h
,
µµh i
secureUserData
µµj x
)
µµx y
;
µµy z$
UnityTransportProtocol
∑∑ "
.
∑∑" #$
WriteSendMessageHeader
∑∑# 9
(
∑∑9 :
ref
∑∑: =

connection
∑∑> H
,
∑∑H I
hasPipeline
∑∑J U
,
∑∑U V
ref
∑∑W Z

sendHandle
∑∑[ e
,
∑∑e f
$num
∑∑g h
)
∑∑h i
;
∑∑i j
var
ªª 
buffer
ªª 
=
ªª 
new
ªª 
NativeArray
ªª (
<
ªª( )
byte
ªª) -
>
ªª- .
(
ªª. /

sendHandle
ªª/ 9
.
ªª9 :
size
ªª: >
,
ªª> ?
	Allocator
ªª@ I
.
ªªI J
Temp
ªªJ N
)
ªªN O
;
ªªO P
UnsafeUtility
ºº 
.
ºº 
MemCpy
ºº  
(
ºº  !
buffer
ºº! '
.
ºº' (
GetUnsafePtr
ºº( 4
(
ºº4 5
)
ºº5 6
,
ºº6 7
(
ºº8 9
void
ºº9 =
*
ºº= >
)
ºº> ?

sendHandle
ºº? I
.
ººI J
data
ººJ N
,
ººN O

sendHandle
ººP Z
.
ººZ [
size
ºº[ _
)
ºº_ `
;
ºº` a
sendInterface
¿¿ 
.
¿¿ 
AbortSendMessage
¿¿ *
.
¿¿* +
Ptr
¿¿+ .
.
¿¿. /
Invoke
¿¿/ 5
(
¿¿5 6
ref
¿¿6 9

sendHandle
¿¿: D
,
¿¿D E
sendInterface
¿¿F S
.
¿¿S T
UserData
¿¿T \
)
¿¿\ ]
;
¿¿] ^
var
¬¬ 
result
¬¬ 
=
¬¬ 
Binding
¬¬  
.
¬¬  !'
unitytls_client_send_data
¬¬! :
(
¬¬: ;
secureClient
¬¬; G
.
¬¬G H
	ClientPtr
¬¬H Q
,
¬¬Q R
(
¬¬S T
byte
¬¬T X
*
¬¬X Y
)
¬¬Y Z
buffer
¬¬Z `
.
¬¬` a
GetUnsafePtr
¬¬a m
(
¬¬m n
)
¬¬n o
,
¬¬o p
new
¬¬q t
UIntPtr
¬¬u |
(
¬¬| }
(
¬¬} ~
uint¬¬~ Ç
)¬¬Ç É
buffer¬¬É â
.¬¬â ä
Length¬¬ä ê
)¬¬ê ë
)¬¬ë í
;¬¬í ì
if
ƒƒ 
(
ƒƒ 
result
ƒƒ 
!=
ƒƒ 
Binding
ƒƒ !
.
ƒƒ! "
UNITYTLS_SUCCESS
ƒƒ" 2
)
ƒƒ2 3
{
≈≈ 
Debug
∆∆ 
.
∆∆ 
LogError
∆∆ 
(
∆∆ 
$"
∆∆ !
$str
∆∆! @
{
∆∆@ A
result
∆∆A G
}
∆∆G H
"
∆∆H I
)
∆∆I J
;
∆∆J K
return
»» 
(
»» 
int
»» 
)
»» 
Error
»» !
.
»»! "

StatusCode
»»" ,
.
»», -"
NetworkStateMismatch
»»- A
;
»»A B
}
…… 
return
ÀÀ 
buffer
ÀÀ 
.
ÀÀ 
Length
ÀÀ  
;
ÀÀ  !
}
ÃÃ 	
[
ŒŒ 	
BurstCompile
ŒŒ	 
(
ŒŒ 
DisableDirectCall
ŒŒ '
=
ŒŒ( )
true
ŒŒ* .
)
ŒŒ. /
]
ŒŒ/ 0
[
œœ 	!
MonoPInvokeCallback
œœ	 
(
œœ 
typeof
œœ #
(
œœ# $
NetworkProtocol
œœ$ 3
.
œœ3 41
#ProcessSendConnectionAcceptDelegate
œœ4 W
)
œœW X
)
œœX Y
]
œœY Z
public
–– 
static
–– 
void
–– )
ProcessSendConnectionAccept
–– 6
(
––6 7
ref
––7 :
NetworkDriver
––; H
.
––H I

Connection
––I S

connection
––T ^
,
––^ _
ref
—— "
NetworkSendInterface
—— $
sendInterface
——% 2
,
——2 3
ref
——4 7$
NetworkSendQueueHandle
——8 N
queueHandle
——O Z
,
——Z [
IntPtr
——\ b
userData
——c k
)
——k l
{
““ 	
unsafe
”” 
{
‘‘ 
var
’’ 
protocolData
’’  
=
’’! "
(
’’# $'
SecureNetworkProtocolData
’’$ =
*
’’= >
)
’’> ?
userData
’’? G
;
’’G H
var
÷÷ 
secureClient
÷÷  
=
÷÷! "
protocolData
÷÷# /
->
÷÷/ 1
SecureClients
÷÷1 >
[
÷÷> ?

connection
÷÷? I
.
÷÷I J
Address
÷÷J Q
]
÷÷Q R
;
÷÷R S
var
ÿÿ 
packet
ÿÿ 
=
ÿÿ 
new
ÿÿ  
NativeArray
ÿÿ! ,
<
ÿÿ, -
byte
ÿÿ- 1
>
ÿÿ1 2
(
ÿÿ2 3

UdpCHeader
ÿÿ3 =
.
ÿÿ= >
Length
ÿÿ> D
+
ÿÿE F
SessionIdToken
ÿÿG U
.
ÿÿU V
k_Length
ÿÿV ^
,
ÿÿ^ _
	Allocator
ÿÿ` i
.
ÿÿi j
Temp
ÿÿj n
)
ÿÿn o
;
ÿÿo p
var
ŸŸ 
size
ŸŸ 
=
ŸŸ *
WriteConnectionAcceptMessage
ŸŸ 7
(
ŸŸ7 8
ref
ŸŸ8 ;

connection
ŸŸ< F
,
ŸŸF G
(
ŸŸH I
byte
ŸŸI M
*
ŸŸM N
)
ŸŸN O
packet
ŸŸO U
.
ŸŸU V
GetUnsafePtr
ŸŸV b
(
ŸŸb c
)
ŸŸc d
,
ŸŸd e
packet
ŸŸf l
.
ŸŸl m
Length
ŸŸm s
)
ŸŸs t
;
ŸŸt u
if
€€ 
(
€€ 
size
€€ 
<
€€ 
$num
€€ 
)
€€ 
{
‹‹ 
UnityEngine
›› 
.
››  
Debug
››  %
.
››% &
LogError
››& .
(
››. /
$str
››/ Y
)
››Y Z
;
››Z [
return
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
var
·· 
secureUserData
·· "
=
··# $
(
··% &
SecureUserData
··& 4
*
··4 5
)
··5 6
secureClient
··6 B
.
··B C
ClientConfig
··C O
->
··O Q
transportUserData
··Q b
;
··b c
SetSecureUserData
‚‚ !
(
‚‚! "
IntPtr
‚‚" (
.
‚‚( )
Zero
‚‚) -
,
‚‚- .
$num
‚‚/ 0
,
‚‚0 1
ref
‚‚2 5

connection
‚‚6 @
.
‚‚@ A
Address
‚‚A H
,
‚‚H I
ref
‚‚J M
sendInterface
‚‚N [
,
‚‚[ \
ref
‚‚] `
queueHandle
‚‚a l
,
‚‚l m
secureUserData
‚‚n |
)
‚‚| }
;
‚‚} ~
var
‰‰ 
result
‰‰ 
=
‰‰ 
Binding
‰‰ $
.
‰‰$ %'
unitytls_client_send_data
‰‰% >
(
‰‰> ?
secureClient
‰‰? K
.
‰‰K L
	ClientPtr
‰‰L U
,
‰‰U V
(
‰‰W X
byte
‰‰X \
*
‰‰\ ]
)
‰‰] ^
packet
‰‰^ d
.
‰‰d e
GetUnsafePtr
‰‰e q
(
‰‰q r
)
‰‰r s
,
‰‰s t
new
‰‰u x
UIntPtr‰‰y Ä
(‰‰Ä Å
(‰‰Å Ç
uint‰‰Ç Ü
)‰‰Ü á
packet‰‰á ç
.‰‰ç é
Length‰‰é î
)‰‰î ï
)‰‰ï ñ
;‰‰ñ ó
if
ÂÂ 
(
ÂÂ 
result
ÂÂ 
!=
ÂÂ 
Binding
ÂÂ %
.
ÂÂ% &
UNITYTLS_SUCCESS
ÂÂ& 6
)
ÂÂ6 7
{
ÊÊ 
Debug
ÁÁ 
.
ÁÁ 
LogError
ÁÁ "
(
ÁÁ" #
$"
ÁÁ# %
$str
ÁÁ% D
{
ÁÁD E
result
ÁÁE K
}
ÁÁK L
"
ÁÁL M
)
ÁÁM N
;
ÁÁN O
}
ËË 
}
ÈÈ 
}
ÍÍ 	
[
ÏÏ 	
BurstCompile
ÏÏ	 
(
ÏÏ 
DisableDirectCall
ÏÏ '
=
ÏÏ( )
true
ÏÏ* .
)
ÏÏ. /
]
ÏÏ/ 0
internal
ÌÌ 
static
ÌÌ 
unsafe
ÌÌ 
int
ÌÌ "*
WriteConnectionAcceptMessage
ÌÌ# ?
(
ÌÌ? @
ref
ÌÌ@ C
NetworkDriver
ÌÌD Q
.
ÌÌQ R

Connection
ÌÌR \

connection
ÌÌ] g
,
ÌÌg h
byte
ÌÌi m
*
ÌÌm n
packet
ÌÌo u
,
ÌÌu v
int
ÌÌw z
capacityÌÌ{ É
)ÌÌÉ Ñ
{
ÓÓ 	
var
ÔÔ 
size
ÔÔ 
=
ÔÔ 

UdpCHeader
ÔÔ !
.
ÔÔ! "
Length
ÔÔ" (
;
ÔÔ( )
if
ÒÒ 
(
ÒÒ 

connection
ÒÒ 
.
ÒÒ 
DidReceiveData
ÒÒ )
==
ÒÒ* ,
$num
ÒÒ- .
)
ÒÒ. /
size
ÚÚ 
+=
ÚÚ 
SessionIdToken
ÚÚ &
.
ÚÚ& '
k_Length
ÚÚ' /
;
ÚÚ/ 0
if
ÙÙ 
(
ÙÙ 
size
ÙÙ 
>
ÙÙ 
capacity
ÙÙ 
)
ÙÙ  
{
ıı 
UnityEngine
ˆˆ 
.
ˆˆ 
Debug
ˆˆ !
.
ˆˆ! "
LogError
ˆˆ" *
(
ˆˆ* +
$str
ˆˆ+ n
)
ˆˆn o
;
ˆˆo p
return
˜˜ 
-
˜˜ 
$num
˜˜ 
;
˜˜ 
}
¯¯ 
var
˙˙ 
header
˙˙ 
=
˙˙ 
(
˙˙ 

UdpCHeader
˙˙ $
*
˙˙$ %
)
˙˙% &
packet
˙˙& ,
;
˙˙, -
header
˝˝ 
->
˝˝ 
Type
˝˝ 
=
˝˝ 
(
˝˝ 
byte
˝˝  
)
˝˝  !
UdpCProtocol
˝˝! -
.
˝˝- .
ConnectionAccept
˝˝. >
;
˝˝> ?
header
˛˛ 
->
˛˛ 
SessionToken
˛˛  
=
˛˛! "

connection
˛˛# -
.
˛˛- .
	SendToken
˛˛. 7
;
˛˛7 8
header
ˇˇ 
->
ˇˇ 
Flags
ˇˇ 
=
ˇˇ 
$num
ˇˇ 
;
ˇˇ 
if
ÅÅ 
(
ÅÅ 

connection
ÅÅ 
.
ÅÅ 
DidReceiveData
ÅÅ )
==
ÅÅ* ,
$num
ÅÅ- .
)
ÅÅ. /
{
ÇÇ 
header
ÉÉ 
->
ÉÉ 
Flags
ÉÉ 
|=
ÉÉ  

UdpCHeader
ÉÉ! +
.
ÉÉ+ ,
HeaderFlags
ÉÉ, 7
.
ÉÉ7 8
HasConnectToken
ÉÉ8 G
;
ÉÉG H
*
ÑÑ 
(
ÑÑ 
SessionIdToken
ÑÑ  
*
ÑÑ  !
)
ÑÑ! "
(
ÑÑ" #
packet
ÑÑ# )
+
ÑÑ* +

UdpCHeader
ÑÑ, 6
.
ÑÑ6 7
Length
ÑÑ7 =
)
ÑÑ= >
=
ÑÑ? @

connection
ÑÑA K
.
ÑÑK L
ReceiveToken
ÑÑL X
;
ÑÑX Y
}
ÖÖ 
return
áá 
size
áá 
;
áá 
}
àà 	
private
ää 
static
ää 
unsafe
ää 
void
ää "#
SendConnectionRequest
ää# 8
(
ää8 9
SessionIdToken
ää9 G
token
ääH M
,
ääM N
SecureClientState
ääO `
secureClient
ääa m
,
ääm n
ref
ãã &
NetworkInterfaceEndPoint
ãã (
address
ãã) 0
,
ãã0 1
ref
ãã2 5"
NetworkSendInterface
ãã6 J
sendInterface
ããK X
,
ããX Y
ref
ããZ ]$
NetworkSendQueueHandle
ãã^ t
queueHandleããu Ä
)ããÄ Å
{
åå 	
var
çç 
packet
çç 
=
çç 
new
çç 
NativeArray
çç (
<
çç( )
byte
çç) -
>
çç- .
(
çç. /

UdpCHeader
çç/ 9
.
çç9 :
Length
çç: @
,
çç@ A
	Allocator
ççB K
.
ççK L
Temp
ççL P
)
ççP Q
;
ççQ R
var
éé 
header
éé 
=
éé 
(
éé 

UdpCHeader
éé $
*
éé$ %
)
éé% &
packet
éé& ,
.
éé, -
GetUnsafePtr
éé- 9
(
éé9 :
)
éé: ;
;
éé; <
header
èè 
->
èè 
Type
èè 
=
èè 
(
èè 
byte
èè  
)
èè  !
UdpCProtocol
èè! -
.
èè- .
ConnectionRequest
èè. ?
;
èè? @
header
êê 
->
êê 
SessionToken
êê  
=
êê! "
token
êê# (
;
êê( )
header
ëë 
->
ëë 
Flags
ëë 
=
ëë 
$num
ëë 
;
ëë 
var
ìì 
secureUserData
ìì 
=
ìì  
(
ìì! "
SecureUserData
ìì" 0
*
ìì0 1
)
ìì1 2
secureClient
ìì2 >
.
ìì> ?
ClientConfig
ìì? K
->
ììK M
transportUserData
ììM ^
;
ìì^ _
SetSecureUserData
îî 
(
îî 
IntPtr
îî $
.
îî$ %
Zero
îî% )
,
îî) *
$num
îî+ ,
,
îî, -
ref
îî. 1
address
îî2 9
,
îî9 :
ref
îî; >
sendInterface
îî? L
,
îîL M
ref
îîN Q
queueHandle
îîR ]
,
îî] ^
secureUserData
îî_ m
)
îîm n
;
îîn o
var
ññ 
result
ññ 
=
ññ 
Binding
ññ  
.
ññ  !'
unitytls_client_send_data
ññ! :
(
ññ: ;
secureClient
ññ; G
.
ññG H
	ClientPtr
ññH Q
,
ññQ R
(
óó 
byte
óó 
*
óó 
)
óó 
packet
óó 
.
óó 
GetUnsafePtr
óó *
(
óó* +
)
óó+ ,
,
óó, -
new
óó. 1
UIntPtr
óó2 9
(
óó9 :
(
óó: ;
uint
óó; ?
)
óó? @
packet
óó@ F
.
óóF G
Length
óóG M
)
óóM N
)
óóN O
;
óóO P
if
òò 
(
òò 
result
òò 
!=
òò 
Binding
òò !
.
òò! "
UNITYTLS_SUCCESS
òò" 2
)
òò2 3
{
ôô 
Debug
öö 
.
öö 
LogError
öö 
(
öö 
$str
öö W
)
ööW X
;
ööX Y
}
õõ 
}
úú 	
private
ûû 
static
ûû 
unsafe
ûû 
uint
ûû "#
SendHeaderOnlyMessage
ûû# 8
(
ûû8 9
UdpCProtocol
ûû9 E
type
ûûF J
,
ûûJ K
SessionIdToken
ûûL Z
token
ûû[ `
,
ûû` a
SecureClientState
ûûb s
secureClientûût Ä
,ûûÄ Å
ref
üü 
NetworkDriver
üü 
.
üü 

Connection
üü (

connection
üü) 3
,
üü3 4
ref
üü5 8"
NetworkSendInterface
üü9 M
sendInterface
üüN [
,
üü[ \
ref
üü] `$
NetworkSendQueueHandle
üüa w
queueHandleüüx É
)üüÉ Ñ
{
†† 	
var
°° 
packet
°° 
=
°° 
new
°° 
NativeArray
°° (
<
°°( )
byte
°°) -
>
°°- .
(
°°. /

UdpCHeader
°°/ 9
.
°°9 :
Length
°°: @
,
°°@ A
	Allocator
°°B K
.
°°K L
Temp
°°L P
)
°°P Q
;
°°Q R
var
££ 
header
££ 
=
££ 
(
££ 

UdpCHeader
££ $
*
££$ %
)
££% &
packet
££& ,
.
££, -
GetUnsafePtr
££- 9
(
££9 :
)
££: ;
;
££; <
header
§§ 
->
§§ 
Type
§§ 
=
§§ 
(
§§ 
byte
§§  
)
§§  !
type
§§! %
;
§§% &
header
•• 
->
•• 
SessionToken
••  
=
••! "
token
••# (
;
••( )
header
¶¶ 
->
¶¶ 
Flags
¶¶ 
=
¶¶ 
$num
¶¶ 
;
¶¶ 
var
®® 
secureUserData
®® 
=
®®  
(
®®! "
SecureUserData
®®" 0
*
®®0 1
)
®®1 2
secureClient
®®2 >
.
®®> ?
ClientConfig
®®? K
->
®®K M
transportUserData
®®M ^
;
®®^ _
SetSecureUserData
©© 
(
©© 
IntPtr
©© $
.
©©$ %
Zero
©©% )
,
©©) *
$num
©©+ ,
,
©©, -
ref
©©. 1

connection
©©2 <
.
©©< =
Address
©©= D
,
©©D E
ref
©©F I
sendInterface
©©J W
,
©©W X
ref
©©Y \
queueHandle
©©] h
,
©©h i
secureUserData
©©j x
)
©©x y
;
©©y z
return
´´ 
Binding
´´ 
.
´´ '
unitytls_client_send_data
´´ 4
(
´´4 5
secureClient
´´5 A
.
´´A B
	ClientPtr
´´B K
,
´´K L
(
´´M N
byte
´´N R
*
´´R S
)
´´S T
packet
´´T Z
.
´´Z [
GetUnsafePtr
´´[ g
(
´´g h
)
´´h i
,
´´i j
new
´´k n
UIntPtr
´´o v
(
´´v w
(
´´w x
uint
´´x |
)
´´| }
packet´´} É
.´´É Ñ
Length´´Ñ ä
)´´ä ã
)´´ã å
;´´å ç
}
¨¨ 	
[
ÆÆ 	
BurstCompile
ÆÆ	 
(
ÆÆ 
DisableDirectCall
ÆÆ '
=
ÆÆ( )
true
ÆÆ* .
)
ÆÆ. /
]
ÆÆ/ 0
[
ØØ 	!
MonoPInvokeCallback
ØØ	 
(
ØØ 
typeof
ØØ #
(
ØØ# $
NetworkProtocol
ØØ$ 3
.
ØØ3 4
ConnectDelegate
ØØ4 C
)
ØØC D
)
ØØD E
]
ØØE F
public
∞∞ 
static
∞∞ 
void
∞∞ 
Connect
∞∞ "
(
∞∞" #
ref
∞∞# &
NetworkDriver
∞∞' 4
.
∞∞4 5

Connection
∞∞5 ?

connection
∞∞@ J
,
∞∞J K
ref
±± "
NetworkSendInterface
±± $
sendInterface
±±% 2
,
±±2 3
ref
±±4 7$
NetworkSendQueueHandle
±±8 N
queueHandle
±±O Z
,
±±Z [
IntPtr
±±\ b
userData
±±c k
)
±±k l
{
≤≤ 	
unsafe
≥≥ 
{
¥¥ 
var
µµ 
protocolData
µµ  
=
µµ! "
(
µµ# $'
SecureNetworkProtocolData
µµ$ =
*
µµ= >
)
µµ> ?
userData
µµ? G
;
µµG H(
CreateNewSecureClientState
∂∂ *
(
∂∂* +
ref
∑∑ 

connection
∑∑ "
.
∑∑" #
Address
∑∑# *
,
∑∑* +
Binding
∑∑, 3
.
∑∑3 4!
UnityTLSRole_Client
∑∑4 G
,
∑∑G H
protocolData
∑∑I U
,
∑∑U V

connection
∑∑W a
.
∑∑a b
ReceiveToken
∑∑b n
)
∑∑n o
;
∑∑o p
var
ππ 
secureClient
ππ  
=
ππ! "
protocolData
ππ# /
->
ππ/ 1
SecureClients
ππ1 >
[
ππ> ?

connection
ππ? I
.
ππI J
Address
ππJ Q
]
ππQ R
;
ππR S
var
ªª 
secureUserData
ªª "
=
ªª# $
(
ªª% &
SecureUserData
ªª& 4
*
ªª4 5
)
ªª5 6
secureClient
ªª6 B
.
ªªB C
ClientConfig
ªªC O
->
ªªO Q
transportUserData
ªªQ b
;
ªªb c
SetSecureUserData
ºº !
(
ºº! "
IntPtr
ºº" (
.
ºº( )
Zero
ºº) -
,
ºº- .
$num
ºº/ 0
,
ºº0 1
ref
ºº2 5

connection
ºº6 @
.
ºº@ A
Address
ººA H
,
ººH I
ref
ººJ M
sendInterface
ººN [
,
ºº[ \
ref
ºº] `
queueHandle
ººa l
,
ººl m
secureUserData
ººn |
)
ºº| }
;
ºº} ~
var
ææ 
currentState
ææ  
=
ææ! "
Binding
ææ# *
.
ææ* +'
unitytls_client_get_state
ææ+ D
(
ææD E
secureClient
ææE Q
.
ææQ R
	ClientPtr
ææR [
)
ææ[ \
;
ææ\ ]
if
¿¿ 
(
¿¿ 
currentState
¿¿  
==
¿¿! #
Binding
¿¿$ +
.
¿¿+ ,+
UnityTLSClientState_Messaging
¿¿, I
)
¿¿I J
{
¡¡ #
SendConnectionRequest
≈≈ )
(
≈≈) *

connection
∆∆ "
.
∆∆" #
ReceiveToken
∆∆# /
,
∆∆/ 0
secureClient
∆∆1 =
,
∆∆= >
ref
∆∆? B

connection
∆∆C M
.
∆∆M N
Address
∆∆N U
,
∆∆U V
ref
∆∆W Z
sendInterface
∆∆[ h
,
∆∆h i
ref
∆∆j m
queueHandle
∆∆n y
)
∆∆y z
;
∆∆z {
return
»» 
;
»» 
}
…… 
var
ÀÀ 
handshakeResult
ÀÀ #
=
ÀÀ$ %(
UpdateSecureHandshakeState
ÀÀ& @
(
ÀÀ@ A
protocolData
ÀÀA M
,
ÀÀM N
ref
ÀÀO R

connection
ÀÀS ]
.
ÀÀ] ^
Address
ÀÀ^ e
)
ÀÀe f
;
ÀÀf g
currentState
ÃÃ 
=
ÃÃ 
Binding
ÃÃ &
.
ÃÃ& ''
unitytls_client_get_state
ÃÃ' @
(
ÃÃ@ A
secureClient
ÃÃA M
.
ÃÃM N
	ClientPtr
ÃÃN W
)
ÃÃW X
;
ÃÃX Y
if
ÕÕ 
(
ÕÕ 
currentState
ÕÕ  
==
ÕÕ! #
Binding
ÕÕ$ +
.
ÕÕ+ ,&
UnityTLSClientState_Fail
ÕÕ, D
)
ÕÕD E
{
ŒŒ 
Debug
œœ 
.
œœ 
LogError
œœ "
(
œœ" #
$"
œœ# %
$str
œœ% B
{
œœB C
handshakeResult
œœC R
}
œœR S
"
œœS T
)
œœT U
;
œœU V!
DisposeSecureClient
‘‘ '
(
‘‘' (
ref
‘‘( +
secureClient
‘‘, 8
)
‘‘8 9
;
‘‘9 :
protocolData
÷÷  
->
÷÷  "
SecureClients
÷÷" /
.
÷÷/ 0
Remove
÷÷0 6
(
÷÷6 7

connection
÷÷7 A
.
÷÷A B
Address
÷÷B I
)
÷÷I J
;
÷÷J K
}
◊◊ 
}
ÿÿ 
}
ŸŸ 	
[
€€ 	
BurstCompile
€€	 
(
€€ 
DisableDirectCall
€€ '
=
€€( )
true
€€* .
)
€€. /
]
€€/ 0
[
‹‹ 	!
MonoPInvokeCallback
‹‹	 
(
‹‹ 
typeof
‹‹ #
(
‹‹# $
NetworkProtocol
‹‹$ 3
.
‹‹3 4 
DisconnectDelegate
‹‹4 F
)
‹‹F G
)
‹‹G H
]
‹‹H I
public
›› 
static
›› 
void
›› 

Disconnect
›› %
(
››% &
ref
››& )
NetworkDriver
››* 7
.
››7 8

Connection
››8 B

connection
››C M
,
››M N
ref
ﬁﬁ "
NetworkSendInterface
ﬁﬁ $
sendInterface
ﬁﬁ% 2
,
ﬁﬁ2 3
ref
ﬁﬁ4 7$
NetworkSendQueueHandle
ﬁﬁ8 N
queueHandle
ﬁﬁO Z
,
ﬁﬁZ [
IntPtr
ﬁﬁ\ b
userData
ﬁﬁc k
)
ﬁﬁk l
{
ﬂﬂ 	
unsafe
‡‡ 
{
·· 
var
‚‚ 
protocolData
‚‚  
=
‚‚! "
(
‚‚# $'
SecureNetworkProtocolData
‚‚$ =
*
‚‚= >
)
‚‚> ?
userData
‚‚? G
;
‚‚G H
var
„„ 
secureClient
„„  
=
„„! "
protocolData
„„# /
->
„„/ 1
SecureClients
„„1 >
[
„„> ?

connection
„„? I
.
„„I J
Address
„„J Q
]
„„Q R
;
„„R S
if
ÂÂ 
(
ÂÂ 

connection
ÂÂ 
.
ÂÂ 
State
ÂÂ $
==
ÂÂ% '
NetworkConnection
ÂÂ( 9
.
ÂÂ9 :
State
ÂÂ: ?
.
ÂÂ? @
	Connected
ÂÂ@ I
)
ÂÂI J
{
ÊÊ 
var
ÁÁ 
type
ÁÁ 
=
ÁÁ 
UdpCProtocol
ÁÁ +
.
ÁÁ+ ,

Disconnect
ÁÁ, 6
;
ÁÁ6 7
var
ËË 
token
ËË 
=
ËË 

connection
ËË  *
.
ËË* +
	SendToken
ËË+ 4
;
ËË4 5
var
ÈÈ 
res
ÈÈ 
=
ÈÈ #
SendHeaderOnlyMessage
ÈÈ 3
(
ÈÈ3 4
type
ÈÈ4 8
,
ÈÈ8 9
token
ÈÈ: ?
,
ÈÈ? @
secureClient
ÈÈA M
,
ÈÈM N
ref
ÈÈO R

connection
ÈÈS ]
,
ÈÈ] ^
ref
ÈÈ_ b
sendInterface
ÈÈc p
,
ÈÈp q
ref
ÈÈr u
queueHandleÈÈv Å
)ÈÈÅ Ç
;ÈÈÇ É
if
ÍÍ 
(
ÍÍ 
res
ÍÍ 
!=
ÍÍ 
Binding
ÍÍ &
.
ÍÍ& '
UNITYTLS_SUCCESS
ÍÍ' 7
)
ÍÍ7 8
{
ÎÎ 
Debug
ÏÏ 
.
ÏÏ 
LogError
ÏÏ &
(
ÏÏ& '
$"
ÏÏ' )
$str
ÏÏ) [
{
ÏÏ[ \
res
ÏÏ\ _
}
ÏÏ_ `
$str
ÏÏ` a
"
ÏÏa b
)
ÏÏb c
;
ÏÏc d
}
ÌÌ 
}
ÓÓ !
DisposeSecureClient
ÒÒ #
(
ÒÒ# $
ref
ÒÒ$ '
secureClient
ÒÒ( 4
)
ÒÒ4 5
;
ÒÒ5 6
protocolData
ÛÛ 
->
ÛÛ 
SecureClients
ÛÛ +
.
ÛÛ+ ,
Remove
ÛÛ, 2
(
ÛÛ2 3

connection
ÛÛ3 =
.
ÛÛ= >
Address
ÛÛ> E
)
ÛÛE F
;
ÛÛF G
}
ÙÙ 
}
ıı 	
[
˜˜ 	
BurstCompile
˜˜	 
(
˜˜ 
DisableDirectCall
˜˜ '
=
˜˜( )
true
˜˜* .
)
˜˜. /
]
˜˜/ 0
[
¯¯ 	!
MonoPInvokeCallback
¯¯	 
(
¯¯ 
typeof
¯¯ #
(
¯¯# $
NetworkProtocol
¯¯$ 3
.
¯¯3 4%
ProcessSendPingDelegate
¯¯4 K
)
¯¯K L
)
¯¯L M
]
¯¯M N
public
˘˘ 
static
˘˘ 
void
˘˘ 
ProcessSendPing
˘˘ *
(
˘˘* +
ref
˘˘+ .
NetworkDriver
˘˘/ <
.
˘˘< =

Connection
˘˘= G

connection
˘˘H R
,
˘˘R S
ref
˙˙ "
NetworkSendInterface
˙˙ $
sendInterface
˙˙% 2
,
˙˙2 3
ref
˙˙4 7$
NetworkSendQueueHandle
˙˙8 N
queueHandle
˙˙O Z
,
˙˙Z [
IntPtr
˙˙\ b
userData
˙˙c k
)
˙˙k l
{
˚˚ 	
unsafe
¸¸ 
{
˝˝ 
var
˛˛ 
protocolData
˛˛  
=
˛˛! "
(
˛˛# $'
SecureNetworkProtocolData
˛˛$ =
*
˛˛= >
)
˛˛> ?
userData
˛˛? G
;
˛˛G H
var
ˇˇ 
secureClient
ˇˇ  
=
ˇˇ! "
protocolData
ˇˇ# /
->
ˇˇ/ 1
SecureClients
ˇˇ1 >
[
ˇˇ> ?

connection
ˇˇ? I
.
ˇˇI J
Address
ˇˇJ Q
]
ˇˇQ R
;
ˇˇR S
var
ÅÅ 
type
ÅÅ 
=
ÅÅ 
UdpCProtocol
ÅÅ '
.
ÅÅ' (
Ping
ÅÅ( ,
;
ÅÅ, -
var
ÇÇ 
token
ÇÇ 
=
ÇÇ 

connection
ÇÇ &
.
ÇÇ& '
	SendToken
ÇÇ' 0
;
ÇÇ0 1
var
ÉÉ 
res
ÉÉ 
=
ÉÉ #
SendHeaderOnlyMessage
ÉÉ /
(
ÉÉ/ 0
type
ÉÉ0 4
,
ÉÉ4 5
token
ÉÉ6 ;
,
ÉÉ; <
secureClient
ÉÉ= I
,
ÉÉI J
ref
ÉÉK N

connection
ÉÉO Y
,
ÉÉY Z
ref
ÉÉ[ ^
sendInterface
ÉÉ_ l
,
ÉÉl m
ref
ÉÉn q
queueHandle
ÉÉr }
)
ÉÉ} ~
;
ÉÉ~ 
if
ÑÑ 
(
ÑÑ 
res
ÑÑ 
!=
ÑÑ 
Binding
ÑÑ "
.
ÑÑ" #
UNITYTLS_SUCCESS
ÑÑ# 3
)
ÑÑ3 4
{
ÖÖ 
Debug
ÜÜ 
.
ÜÜ 
LogError
ÜÜ "
(
ÜÜ" #
$"
ÜÜ# %
$str
ÜÜ% Q
{
ÜÜQ R
res
ÜÜR U
}
ÜÜU V
$str
ÜÜV W
"
ÜÜW X
)
ÜÜX Y
;
ÜÜY Z
}
áá 
}
àà 
}
ââ 	
[
ãã 	
BurstCompile
ãã	 
(
ãã 
DisableDirectCall
ãã '
=
ãã( )
true
ãã* .
)
ãã. /
]
ãã/ 0
[
åå 	!
MonoPInvokeCallback
åå	 
(
åå 
typeof
åå #
(
åå# $
NetworkProtocol
åå$ 3
.
åå3 4%
ProcessSendPongDelegate
åå4 K
)
ååK L
)
ååL M
]
ååM N
public
çç 
static
çç 
void
çç 
ProcessSendPong
çç *
(
çç* +
ref
çç+ .
NetworkDriver
çç/ <
.
çç< =

Connection
çç= G

connection
ççH R
,
ççR S
ref
éé "
NetworkSendInterface
éé $
sendInterface
éé% 2
,
éé2 3
ref
éé4 7$
NetworkSendQueueHandle
éé8 N
queueHandle
ééO Z
,
ééZ [
IntPtr
éé\ b
userData
ééc k
)
éék l
{
èè 	
unsafe
êê 
{
ëë 
var
íí 
protocolData
íí  
=
íí! "
(
íí# $'
SecureNetworkProtocolData
íí$ =
*
íí= >
)
íí> ?
userData
íí? G
;
ííG H
var
ìì 
secureClient
ìì  
=
ìì! "
protocolData
ìì# /
->
ìì/ 1
SecureClients
ìì1 >
[
ìì> ?

connection
ìì? I
.
ììI J
Address
ììJ Q
]
ììQ R
;
ììR S
var
ïï 
type
ïï 
=
ïï 
UdpCProtocol
ïï '
.
ïï' (
Pong
ïï( ,
;
ïï, -
var
ññ 
token
ññ 
=
ññ 

connection
ññ &
.
ññ& '
	SendToken
ññ' 0
;
ññ0 1
var
óó 
res
óó 
=
óó #
SendHeaderOnlyMessage
óó /
(
óó/ 0
type
óó0 4
,
óó4 5
token
óó6 ;
,
óó; <
secureClient
óó= I
,
óóI J
ref
óóK N

connection
óóO Y
,
óóY Z
ref
óó[ ^
sendInterface
óó_ l
,
óól m
ref
óón q
queueHandle
óór }
)
óó} ~
;
óó~ 
if
òò 
(
òò 
res
òò 
!=
òò 
Binding
òò "
.
òò" #
UNITYTLS_SUCCESS
òò# 3
)
òò3 4
{
ôô 
Debug
öö 
.
öö 
LogError
öö "
(
öö" #
$"
öö# %
$str
öö% Q
{
ööQ R
res
ööR U
}
ööU V
$str
ööV W
"
ööW X
)
ööX Y
;
ööY Z
}
õõ 
}
úú 
}
ùù 	
[
üü 	
BurstCompile
üü	 
(
üü 
DisableDirectCall
üü '
=
üü( )
true
üü* .
)
üü. /
]
üü/ 0
[
†† 	!
MonoPInvokeCallback
††	 
(
†† 
typeof
†† #
(
††# $
NetworkProtocol
††$ 3
.
††3 4
UpdateDelegate
††4 B
)
††B C
)
††C D
]
††D E
public
°° 
static
°° 
void
°° 
Update
°° !
(
°°! "
long
°°" &

updateTime
°°' 1
,
°°1 2
ref
°°3 6"
NetworkSendInterface
°°7 K
sendInterface
°°L Y
,
°°Y Z
ref
°°[ ^$
NetworkSendQueueHandle
°°_ u
queueHandle°°v Å
,°°Å Ç
IntPtr°°É â
userData°°ä í
)°°í ì
{
¢¢ 	
unsafe
££ 
{
§§ 
var
•• 
protocolData
••  
=
••! "
(
••# $'
SecureNetworkProtocolData
••$ =
*
••= >
)
••> ?
userData
••? G
;
••G H
protocolData
¶¶ 
->
¶¶ 

LastUpdate
¶¶ (
=
¶¶) *

updateTime
¶¶+ 5
;
¶¶5 6
if
©© 
(
©© 

updateTime
©© 
-
©©  
protocolData
©©! -
->
©©- /
LastHalfOpenPrune
©©/ @
>
©©A B
protocolData
©©C O
->
©©O Q$
SSLHandshakeTimeoutMin
©©Q g
)
©©g h
{
™™ &
PruneHalfOpenConnections
´´ ,
(
´´, -
protocolData
´´- 9
)
´´9 :
;
´´: ;
protocolData
¨¨  
->
¨¨  "
LastHalfOpenPrune
¨¨" 3
=
¨¨4 5

updateTime
¨¨6 @
;
¨¨@ A
}
≠≠ 
}
ÆÆ 
}
ØØ 	
}
∞∞ 
}±± ù
WC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\AssemblyInfo.cs
[ 
assembly 	
:	 

InternalsVisibleTo 
( 
$str F
)F G
]G H
[ 
assembly 	
:	 

InternalsVisibleTo 
( 
$str G
)G H
]H I
[ 
assembly 	
:	 

InternalsVisibleTo 
( 
$str P
)P Q
]Q R
[		 
assembly		 	
:			 

InternalsVisibleTo		 
(		 
$str		 E
)		E F
]		F Gà–
kC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Pipelines\SimulatorPipelineStage.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
[ 
BurstCompile 
] 
public 

unsafe 
struct "
SimulatorPipelineStage /
:0 1!
INetworkPipelineStage2 G
{ 
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =
ReceiveDelegate= L
>L M"
ReceiveFunctionPointerN d
=e f
newg j%
TransportFunctionPointer	k É
<
É Ñ"
NetworkPipelineStage
Ñ ò
.
ò ô
ReceiveDelegate
ô ®
>
® ©
(
© ™
Receive
™ ±
)
± ≤
;
≤ ≥
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =
SendDelegate= I
>I J
SendFunctionPointerK ^
=_ `
newa d$
TransportFunctionPointere }
<} ~!
NetworkPipelineStage	~ í
.
í ì
SendDelegate
ì ü
>
ü †
(
† °
Send
° •
)
• ¶
;
¶ ß
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =(
InitializeConnectionDelegate= Y
>Y Z/
#InitializeConnectionFunctionPointer[ ~
=	 Ä
new
Å Ñ&
TransportFunctionPointer
Ö ù
<
ù û"
NetworkPipelineStage
û ≤
.
≤ ≥*
InitializeConnectionDelegate
≥ œ
>
œ –
(
– —"
InitializeConnection
— Â
)
Â Ê
;
Ê Á
public  
NetworkPipelineStage #
StaticInitialize$ 4
(4 5
byte5 9
*9 : 
staticInstanceBuffer; O
,O P
intQ T&
staticInstanceBufferLengthU o
,o p
NetworkSettings	q Ä
settings
Å â
)
â ä
{ 	
SimulatorUtility 
. 

Parameters '
param( -
=. /
settings0 8
.8 9'
GetSimulatorStageParameters9 T
(T U
)U V
;V W
UnsafeUtility   
.   
MemCpy    
(    ! 
staticInstanceBuffer  ! 5
,  5 6
&  7 8
param  8 =
,  = >
UnsafeUtility  ? L
.  L M
SizeOf  M S
<  S T
SimulatorUtility  T d
.  d e

Parameters  e o
>  o p
(  p q
)  q r
)  r s
;  s t
return"" 
new""  
NetworkPipelineStage"" +
(""+ ,
Receive## 
:## "
ReceiveFunctionPointer## /
,##/ 0
Send$$ 
:$$ 
SendFunctionPointer$$ )
,$$) * 
InitializeConnection%% $
:%%$ %/
#InitializeConnectionFunctionPointer%%& I
,%%I J
ReceiveCapacity&& 
:&&  
param&&! &
.&&& '
MaxPacketCount&&' 5
*&&6 7
(&&8 9
param&&9 >
.&&> ?
MaxPacketSize&&? L
+&&M N
UnsafeUtility&&O \
.&&\ ]
SizeOf&&] c
<&&c d
SimulatorUtility&&d t
.&&t u
DelayedPacket	&&u Ç
>
&&Ç É
(
&&É Ñ
)
&&Ñ Ö
)
&&Ö Ü
,
&&Ü á
SendCapacity'' 
:'' 
$num'' 
,''  
HeaderCapacity(( 
:(( 
$num((  !
,((! "
SharedStateCapacity)) #
:))# $
UnsafeUtility))% 2
.))2 3
SizeOf))3 9
<))9 :
SimulatorUtility)): J
.))J K
Context))K R
>))R S
())S T
)))T U
)** 
;** 
}++ 	
[-- 	
BurstCompile--	 
(-- 
DisableDirectCall-- '
=--( )
true--* .
)--. /
]--/ 0
[.. 	
MonoPInvokeCallback..	 
(.. 
typeof.. #
(..# $ 
NetworkPipelineStage..$ 8
...8 9(
InitializeConnectionDelegate..9 U
)..U V
)..V W
]..W X
private// 
static// 
void//  
InitializeConnection// 0
(//0 1
byte//1 5
*//5 6 
staticInstanceBuffer//7 K
,//K L
int//M P&
staticInstanceBufferLength//Q k
,//k l
byte00 
*00 
sendProcessBuffer00 #
,00# $
int00% (#
sendProcessBufferLength00) @
,00@ A
byte00B F
*00F G
recvProcessBuffer00H Y
,00Y Z
int00[ ^#
recvProcessBufferLength00_ v
,00v w
byte11 
*11 
sharedProcessBuffer11 %
,11% &
int11' *%
sharedProcessBufferLength11+ D
)11D E
{22 	
SimulatorUtility33 
.33 

Parameters33 '
param33( -
=33. /
default330 7
;337 8
UnsafeUtility55 
.55 
MemCpy55  
(55  !
&55! "
param55" '
,55' ( 
staticInstanceBuffer55) =
,55= >
UnsafeUtility55? L
.55L M
SizeOf55M S
<55S T
SimulatorUtility55T d
.55d e

Parameters55e o
>55o p
(55p q
)55q r
)55r s
;55s t
if66 
(66 %
sharedProcessBufferLength66 )
>=66* ,
UnsafeUtility66- :
.66: ;
SizeOf66; A
<66A B
SimulatorUtility66B R
.66R S

Parameters66S ]
>66] ^
(66^ _
)66_ `
)66` a
{77 
SimulatorUtility88  
.88  !
InitializeContext88! 2
(882 3
param883 8
,888 9
sharedProcessBuffer88: M
)88M N
;88N O
}99 
}:: 	
[<< 	
BurstCompile<<	 
(<< 
DisableDirectCall<< '
=<<( )
true<<* .
)<<. /
]<</ 0
[== 	
MonoPInvokeCallback==	 
(== 
typeof== #
(==# $ 
NetworkPipelineStage==$ 8
.==8 9
SendDelegate==9 E
)==E F
)==F G
]==G H
private>> 
static>> 
int>> 
Send>> 
(>>  
ref>>  #"
NetworkPipelineContext>>$ :
ctx>>; >
,>>> ?
ref>>@ C
InboundSendBuffer>>D U
inboundBuffer>>V c
,>>c d
ref>>e h 
NetworkPipelineStage>>i }
.>>} ~
Requests	>>~ Ü
requests
>>á è
,
>>è ê
int
>>ë î
systemHeaderSize
>>ï •
)
>>• ¶
{?? 	
return@@ 
(@@ 
int@@ 
)@@ 
Error@@ 
.@@ 

StatusCode@@ (
.@@( )
Success@@) 0
;@@0 1
}AA 	
[CC 	
BurstCompileCC	 
(CC 
DisableDirectCallCC '
=CC( )
trueCC* .
)CC. /
]CC/ 0
[DD 	
MonoPInvokeCallbackDD	 
(DD 
typeofDD #
(DD# $ 
NetworkPipelineStageDD$ 8
.DD8 9
ReceiveDelegateDD9 H
)DDH I
)DDI J
]DDJ K
privateEE 
staticEE 
voidEE 
ReceiveEE #
(EE# $
refEE$ '"
NetworkPipelineContextEE( >
ctxEE? B
,EEB C
refEED G
InboundRecvBufferEEH Y
inboundBufferEEZ g
,EEg h
refEEi l!
NetworkPipelineStage	EEm Å
.
EEÅ Ç
Requests
EEÇ ä
requests
EEã ì
,
EEì î
int
EEï ò
systemHeaderSize
EEô ©
)
EE© ™
{FF 	
varGG 
contextGG 
=GG 
(GG 
SimulatorUtilityGG +
.GG+ ,
ContextGG, 3
*GG3 4
)GG4 5
ctxGG5 8
.GG8 9'
internalSharedProcessBufferGG9 T
;GGT U
varHH 
paramHH 
=HH 
*HH 
(HH 
SimulatorUtilityHH *
.HH* +

ParametersHH+ 5
*HH5 6
)HH6 7
ctxHH7 :
.HH: ; 
staticInstanceBufferHH; O
;HHO P
varII 
	simulatorII 
=II 
newII 
SimulatorUtilityII  0
(II0 1
paramII1 6
.II6 7
MaxPacketCountII7 E
,IIE F
paramIIG L
.IIL M
MaxPacketSizeIIM Z
,IIZ [
paramII\ a
.IIa b
PacketDelayMsIIb o
,IIo p
paramIIq v
.IIv w
PacketJitterMs	IIw Ö
)
IIÖ Ü
;
IIÜ á
ifKK 
(KK 
inboundBufferKK 
.KK 
bufferLengthKK *
>KK+ ,
paramKK- 2
.KK2 3
MaxPacketSizeKK3 @
)KK@ A
{LL 
returnOO 
;OO 
}PP 
varRR 
	timestampRR 
=RR 
ctxRR 
.RR  
	timestampRR  )
;RR) *
ifUU 
(UU 
inboundBufferUU 
.UU 
bufferLengthUU *
>UU+ ,
$numUU- .
)UU. /
{VV 
contextWW 
->WW 
PacketCountWW $
++WW$ &
;WW& '
ifYY 
(YY 
	simulatorYY 
.YY 
ShouldDropPacketYY .
(YY. /
contextYY/ 6
,YY6 7
paramYY8 =
,YY= >
	timestampYY? H
)YYH I
)YYI J
{ZZ 
context[[ 
->[[ 
PacketDropCount[[ ,
++[[, .
;[[. /
inboundBuffer\\ !
=\\" #
default\\$ +
;\\+ ,
return]] 
;]] 
}^^ 
var`` 
	bufferVec`` 
=`` 
default``  '
(``' (
InboundSendBuffer``( 9
)``9 :
;``: ;
	bufferVecaa 
.aa 
bufferWithHeadersaa +
=aa, -
inboundBufferaa. ;
.aa; <
bufferaa< B
;aaB C
	bufferVecbb 
.bb #
bufferWithHeadersLengthbb 1
=bb2 3
inboundBufferbb4 A
.bbA B
bufferLengthbbB N
;bbN O
	bufferVeccc 
.cc 
buffercc  
=cc! "
inboundBuffercc# 0
.cc0 1
buffercc1 7
;cc7 8
	bufferVecdd 
.dd 
bufferLengthdd &
=dd' (
inboundBufferdd) 6
.dd6 7
bufferLengthdd7 C
;ddC D
	bufferVecee 
.ee 
headerPaddingee '
=ee( )
$numee* +
;ee+ ,
ifff 
(ff 
contextff 
->ff 
PacketDelayMsff *
==ff+ -
$numff. /
||ff0 2
!gg 
	simulatorgg 
.gg 
DelayPacketgg *
(gg* +
refgg+ .
ctxgg/ 2
,gg2 3
	bufferVecgg4 =
,gg= >
refgg? B
requestsggC K
,ggK L
	timestampggM V
)ggV W
)ggW X
{hh 
returnii 
;ii 
}jj 
}kk 
InboundSendBuffermm 
returnPacketmm *
=mm+ ,
defaultmm- 4
;mm4 5
ifnn 
(nn 
	simulatornn 
.nn 
GetDelayedPacketnn *
(nn* +
refnn+ .
ctxnn/ 2
,nn2 3
refnn4 7
returnPacketnn8 D
,nnD E
refnnF I
requestsnnJ R
,nnR S
	timestampnnT ]
)nn] ^
)nn^ _
{oo 
inboundBufferpp 
.pp 
bufferpp $
=pp% &
returnPacketpp' 3
.pp3 4
bufferWithHeaderspp4 E
;ppE F
inboundBufferqq 
.qq 
bufferLengthqq *
=qq+ ,
returnPacketqq- 9
.qq9 :#
bufferWithHeadersLengthqq: Q
;qqQ R
returnrr 
;rr 
}ss 
inboundBufferuu 
=uu 
defaultuu #
;uu# $
}vv 	
publicxx 
intxx 

StaticSizexx 
=>xx  
UnsafeUtilityxx! .
.xx. /
SizeOfxx/ 5
<xx5 6
SimulatorUtilityxx6 F
.xxF G

ParametersxxG Q
>xxQ R
(xxR S
)xxS T
;xxT U
}yy 
[~~ 
BurstCompile~~ 
]~~ 
public 

unsafe 
struct (
SimulatorPipelineStageInSend 5
:6 7!
INetworkPipelineStage8 M
{
ÄÄ 
static
ÅÅ &
TransportFunctionPointer
ÅÅ '
<
ÅÅ' ("
NetworkPipelineStage
ÅÅ( <
.
ÅÅ< =
ReceiveDelegate
ÅÅ= L
>
ÅÅL M$
ReceiveFunctionPointer
ÅÅN d
=
ÅÅe f
new
ÅÅg j'
TransportFunctionPointerÅÅk É
<ÅÅÉ Ñ$
NetworkPipelineStageÅÅÑ ò
.ÅÅò ô
ReceiveDelegateÅÅô ®
>ÅÅ® ©
(ÅÅ© ™
ReceiveÅÅ™ ±
)ÅÅ± ≤
;ÅÅ≤ ≥
static
ÇÇ &
TransportFunctionPointer
ÇÇ '
<
ÇÇ' ("
NetworkPipelineStage
ÇÇ( <
.
ÇÇ< =
SendDelegate
ÇÇ= I
>
ÇÇI J!
SendFunctionPointer
ÇÇK ^
=
ÇÇ_ `
new
ÇÇa d&
TransportFunctionPointer
ÇÇe }
<
ÇÇ} ~#
NetworkPipelineStageÇÇ~ í
.ÇÇí ì
SendDelegateÇÇì ü
>ÇÇü †
(ÇÇ† °
SendÇÇ° •
)ÇÇ• ¶
;ÇÇ¶ ß
static
ÉÉ &
TransportFunctionPointer
ÉÉ '
<
ÉÉ' ("
NetworkPipelineStage
ÉÉ( <
.
ÉÉ< =*
InitializeConnectionDelegate
ÉÉ= Y
>
ÉÉY Z1
#InitializeConnectionFunctionPointer
ÉÉ[ ~
=ÉÉ Ä
newÉÉÅ Ñ(
TransportFunctionPointerÉÉÖ ù
<ÉÉù û$
NetworkPipelineStageÉÉû ≤
.ÉÉ≤ ≥,
InitializeConnectionDelegateÉÉ≥ œ
>ÉÉœ –
(ÉÉ– —$
InitializeConnectionÉÉ— Â
)ÉÉÂ Ê
;ÉÉÊ Á
public
ãã "
NetworkPipelineStage
ãã #
StaticInitialize
ãã$ 4
(
ãã4 5
byte
ãã5 9
*
ãã9 :"
staticInstanceBuffer
ãã; O
,
ããO P
int
ããQ T(
staticInstanceBufferLength
ããU o
,
ãão p
NetworkSettingsããq Ä
settingsããÅ â
)ããâ ä
{
åå 	
SimulatorUtility
çç 
.
çç 

Parameters
çç '
param
çç( -
=
çç. /
settings
çç0 8
.
çç8 9)
GetSimulatorStageParameters
çç9 T
(
ççT U
)
ççU V
;
ççV W
UnsafeUtility
èè 
.
èè 
MemCpy
èè  
(
èè  !"
staticInstanceBuffer
èè! 5
,
èè5 6
&
èè7 8
param
èè8 =
,
èè= >
UnsafeUtility
èè? L
.
èèL M
SizeOf
èèM S
<
èèS T
SimulatorUtility
èèT d
.
èèd e

Parameters
èèe o
>
èèo p
(
èèp q
)
èèq r
)
èèr s
;
èès t
return
ëë 
new
ëë "
NetworkPipelineStage
ëë +
(
ëë+ ,
Receive
íí 
:
íí $
ReceiveFunctionPointer
íí /
,
íí/ 0
Send
ìì 
:
ìì !
SendFunctionPointer
ìì )
,
ìì) *"
InitializeConnection
îî $
:
îî$ %1
#InitializeConnectionFunctionPointer
îî& I
,
îîI J
ReceiveCapacity
ïï 
:
ïï  
$num
ïï! "
,
ïï" #
SendCapacity
ññ 
:
ññ 
param
ññ #
.
ññ# $
MaxPacketCount
ññ$ 2
*
ññ3 4
(
ññ5 6
param
ññ6 ;
.
ññ; <
MaxPacketSize
ññ< I
+
ññJ K
UnsafeUtility
ññL Y
.
ññY Z
SizeOf
ññZ `
<
ññ` a
SimulatorUtility
ñña q
.
ññq r
DelayedPacket
ññr 
>ññ Ä
(ññÄ Å
)ññÅ Ç
)ññÇ É
,ññÉ Ñ
HeaderCapacity
óó 
:
óó 
$num
óó  !
,
óó! "!
SharedStateCapacity
òò #
:
òò# $
UnsafeUtility
òò% 2
.
òò2 3
SizeOf
òò3 9
<
òò9 :
SimulatorUtility
òò: J
.
òòJ K
Context
òòK R
>
òòR S
(
òòS T
)
òòT U
)
ôô 
;
ôô 
}
öö 	
[
úú 	
BurstCompile
úú	 
(
úú 
DisableDirectCall
úú '
=
úú( )
true
úú* .
)
úú. /
]
úú/ 0
[
ùù 	!
MonoPInvokeCallback
ùù	 
(
ùù 
typeof
ùù #
(
ùù# $"
NetworkPipelineStage
ùù$ 8
.
ùù8 9*
InitializeConnectionDelegate
ùù9 U
)
ùùU V
)
ùùV W
]
ùùW X
private
ûû 
static
ûû 
void
ûû "
InitializeConnection
ûû 0
(
ûû0 1
byte
ûû1 5
*
ûû5 6"
staticInstanceBuffer
ûû7 K
,
ûûK L
int
ûûM P(
staticInstanceBufferLength
ûûQ k
,
ûûk l
byte
üü 
*
üü 
sendProcessBuffer
üü #
,
üü# $
int
üü% (%
sendProcessBufferLength
üü) @
,
üü@ A
byte
üüB F
*
üüF G
recvProcessBuffer
üüH Y
,
üüY Z
int
üü[ ^%
recvProcessBufferLength
üü_ v
,
üüv w
byte
†† 
*
†† !
sharedProcessBuffer
†† %
,
††% &
int
††' *'
sharedProcessBufferLength
††+ D
)
††D E
{
°° 	
SimulatorUtility
¢¢ 
.
¢¢ 

Parameters
¢¢ '
param
¢¢( -
=
¢¢. /
default
¢¢0 7
;
¢¢7 8
UnsafeUtility
§§ 
.
§§ 
MemCpy
§§  
(
§§  !
&
§§! "
param
§§" '
,
§§' ("
staticInstanceBuffer
§§) =
,
§§= >
UnsafeUtility
§§? L
.
§§L M
SizeOf
§§M S
<
§§S T
SimulatorUtility
§§T d
.
§§d e

Parameters
§§e o
>
§§o p
(
§§p q
)
§§q r
)
§§r s
;
§§s t
if
•• 
(
•• '
sharedProcessBufferLength
•• )
>=
••* ,
UnsafeUtility
••- :
.
••: ;
SizeOf
••; A
<
••A B
SimulatorUtility
••B R
.
••R S

Parameters
••S ]
>
••] ^
(
••^ _
)
••_ `
)
••` a
{
¶¶ 
SimulatorUtility
ßß  
.
ßß  !
InitializeContext
ßß! 2
(
ßß2 3
param
ßß3 8
,
ßß8 9!
sharedProcessBuffer
ßß: M
)
ßßM N
;
ßßN O
}
®® 
}
©© 	
[
´´ 	
BurstCompile
´´	 
(
´´ 
DisableDirectCall
´´ '
=
´´( )
true
´´* .
)
´´. /
]
´´/ 0
[
¨¨ 	!
MonoPInvokeCallback
¨¨	 
(
¨¨ 
typeof
¨¨ #
(
¨¨# $"
NetworkPipelineStage
¨¨$ 8
.
¨¨8 9
SendDelegate
¨¨9 E
)
¨¨E F
)
¨¨F G
]
¨¨G H
private
≠≠ 
static
≠≠ 
int
≠≠ 
Send
≠≠ 
(
≠≠  
ref
≠≠  #$
NetworkPipelineContext
≠≠$ :
ctx
≠≠; >
,
≠≠> ?
ref
≠≠@ C
InboundSendBuffer
≠≠D U
inboundBuffer
≠≠V c
,
≠≠c d
ref
≠≠e h"
NetworkPipelineStage
≠≠i }
.
≠≠} ~
Requests≠≠~ Ü
requests≠≠á è
,≠≠è ê
int≠≠ë î 
systemHeaderSize≠≠ï •
)≠≠• ¶
{
ÆÆ 	
var
ØØ 
context
ØØ 
=
ØØ 
(
ØØ 
SimulatorUtility
ØØ +
.
ØØ+ ,
Context
ØØ, 3
*
ØØ3 4
)
ØØ4 5
ctx
ØØ5 8
.
ØØ8 9)
internalSharedProcessBuffer
ØØ9 T
;
ØØT U
var
∞∞ 
param
∞∞ 
=
∞∞ 
*
∞∞ 
(
∞∞ 
SimulatorUtility
∞∞ *
.
∞∞* +

Parameters
∞∞+ 5
*
∞∞5 6
)
∞∞6 7
ctx
∞∞7 :
.
∞∞: ;"
staticInstanceBuffer
∞∞; O
;
∞∞O P
var
≤≤ 
	simulator
≤≤ 
=
≤≤ 
new
≤≤ 
SimulatorUtility
≤≤  0
(
≤≤0 1
param
≤≤1 6
.
≤≤6 7
MaxPacketCount
≤≤7 E
,
≤≤E F
param
≤≤G L
.
≤≤L M
MaxPacketSize
≤≤M Z
,
≤≤Z [
param
≤≤\ a
.
≤≤a b
PacketDelayMs
≤≤b o
,
≤≤o p
param
≤≤q v
.
≤≤v w
PacketJitterMs≤≤w Ö
)≤≤Ö Ü
;≤≤Ü á
if
≥≥ 
(
≥≥ 
inboundBuffer
≥≥ 
.
≥≥ 
headerPadding
≥≥ +
+
≥≥, -
inboundBuffer
≥≥. ;
.
≥≥; <
bufferLength
≥≥< H
>
≥≥I J
param
≥≥K P
.
≥≥P Q
MaxPacketSize
≥≥Q ^
)
≥≥^ _
{
¥¥ 
return
∂∂ 
(
∂∂ 
int
∂∂ 
)
∂∂ 
Error
∂∂ !
.
∂∂! "

StatusCode
∂∂" ,
.
∂∂, -#
NetworkPacketOverflow
∂∂- B
;
∂∂B C
}
∑∑ 
var
ππ 
	timestamp
ππ 
=
ππ 
ctx
ππ 
.
ππ  
	timestamp
ππ  )
;
ππ) *
if
ªª 
(
ªª 
inboundBuffer
ªª 
.
ªª 
bufferLength
ªª *
>
ªª+ ,
$num
ªª- .
)
ªª. /
{
ºº 
context
ΩΩ 
->
ΩΩ 
PacketCount
ΩΩ $
++
ΩΩ$ &
;
ΩΩ& '
if
øø 
(
øø 
	simulator
øø 
.
øø 
ShouldDropPacket
øø .
(
øø. /
context
øø/ 6
,
øø6 7
param
øø8 =
,
øø= >
	timestamp
øø? H
)
øøH I
)
øøI J
{
¿¿ 
context
¡¡ 
->
¡¡ 
PacketDropCount
¡¡ ,
++
¡¡, .
;
¡¡. /
inboundBuffer
¬¬ !
=
¬¬" #
default
¬¬$ +
;
¬¬+ ,
return
√√ 
(
√√ 
int
√√ 
)
√√  
Error
√√  %
.
√√% &

StatusCode
√√& 0
.
√√0 1
Success
√√1 8
;
√√8 9
}
ƒƒ 
if
∆∆ 
(
∆∆ 
context
∆∆ 
->
∆∆ 

FuzzFactor
∆∆ '
>
∆∆( )
$num
∆∆* +
)
∆∆+ ,
{
«« 
	simulator
»» 
.
»» 

FuzzPacket
»» (
(
»»( )
context
»») 0
,
»»0 1
ref
»»2 5
inboundBuffer
»»6 C
)
»»C D
;
»»D E
}
…… 
if
ÀÀ 
(
ÀÀ 
context
ÀÀ 
->
ÀÀ 
PacketDelayMs
ÀÀ *
==
ÀÀ+ -
$num
ÀÀ. /
||
ÀÀ0 2
!
ÃÃ 
	simulator
ÃÃ 
.
ÃÃ 
DelayPacket
ÃÃ *
(
ÃÃ* +
ref
ÃÃ+ .
ctx
ÃÃ/ 2
,
ÃÃ2 3
inboundBuffer
ÃÃ4 A
,
ÃÃA B
ref
ÃÃC F
requests
ÃÃG O
,
ÃÃO P
	timestamp
ÃÃQ Z
)
ÃÃZ [
)
ÃÃ[ \
{
ÕÕ 
return
ŒŒ 
(
ŒŒ 
int
ŒŒ 
)
ŒŒ  
Error
ŒŒ  %
.
ŒŒ% &

StatusCode
ŒŒ& 0
.
ŒŒ0 1
Success
ŒŒ1 8
;
ŒŒ8 9
}
œœ 
}
–– 
InboundSendBuffer
““ 
returnPacket
““ *
=
““+ ,
default
““- 4
;
““4 5
if
”” 
(
”” 
	simulator
”” 
.
”” 
GetDelayedPacket
”” *
(
””* +
ref
””+ .
ctx
””/ 2
,
””2 3
ref
””4 7
returnPacket
””8 D
,
””D E
ref
””F I
requests
””J R
,
””R S
	timestamp
””T ]
)
””] ^
)
””^ _
{
‘‘ 
inboundBuffer
’’ 
=
’’ 
returnPacket
’’  ,
;
’’, -
return
÷÷ 
(
÷÷ 
int
÷÷ 
)
÷÷ 
Error
÷÷ !
.
÷÷! "

StatusCode
÷÷" ,
.
÷÷, -
Success
÷÷- 4
;
÷÷4 5
}
◊◊ 
inboundBuffer
ÿÿ 
=
ÿÿ 
default
ÿÿ #
;
ÿÿ# $
return
ŸŸ 
(
ŸŸ 
int
ŸŸ 
)
ŸŸ 
Error
ŸŸ 
.
ŸŸ 

StatusCode
ŸŸ (
.
ŸŸ( )
Success
ŸŸ) 0
;
ŸŸ0 1
}
⁄⁄ 	
[
‹‹ 	
BurstCompile
‹‹	 
(
‹‹ 
DisableDirectCall
‹‹ '
=
‹‹( )
true
‹‹* .
)
‹‹. /
]
‹‹/ 0
[
›› 	!
MonoPInvokeCallback
››	 
(
›› 
typeof
›› #
(
››# $"
NetworkPipelineStage
››$ 8
.
››8 9
ReceiveDelegate
››9 H
)
››H I
)
››I J
]
››J K
private
ﬁﬁ 
static
ﬁﬁ 
void
ﬁﬁ 
Receive
ﬁﬁ #
(
ﬁﬁ# $
ref
ﬁﬁ$ '$
NetworkPipelineContext
ﬁﬁ( >
ctx
ﬁﬁ? B
,
ﬁﬁB C
ref
ﬁﬁD G
InboundRecvBuffer
ﬁﬁH Y
inboundBuffer
ﬁﬁZ g
,
ﬁﬁg h
ref
ﬂﬂ "
NetworkPipelineStage
ﬂﬂ $
.
ﬂﬂ$ %
Requests
ﬂﬂ% -
requests
ﬂﬂ. 6
,
ﬂﬂ6 7
int
ﬂﬂ8 ;
systemHeaderSize
ﬂﬂ< L
)
ﬂﬂL M
{
‡‡ 	
}
·· 	
public
ÊÊ 
int
ÊÊ 

StaticSize
ÊÊ 
=>
ÊÊ  
UnsafeUtility
ÊÊ! .
.
ÊÊ. /
SizeOf
ÊÊ/ 5
<
ÊÊ5 6
SimulatorUtility
ÊÊ6 F
.
ÊÊF G

Parameters
ÊÊG Q
>
ÊÊQ R
(
ÊÊR S
)
ÊÊS T
;
ÊÊT U
}
ÁÁ 
}ËË ‰
nC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\Messages\RelayMessageAccepted.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
internal 
struct  
RelayMessageAccepted (
{ 
public 
const 
int 
Length 
=  !
RelayMessageHeader" 4
.4 5
Length5 ;
+< =
RelayAllocationId> O
.O P
k_LengthP X
*Y Z
$num[ \
;\ ]
public

 
RelayMessageHeader

 !
Header

" (
;

( )
public 
RelayAllocationId  
FromAllocationId! 1
;1 2
public 
RelayAllocationId  
ToAllocationId! /
;/ 0
internal 
static  
RelayMessageAccepted ,
Create- 3
(3 4
RelayAllocationId4 E
fromAllocationIdF V
,V W
RelayAllocationIdX i
toAllocationIdj x
)x y
{ 	
return 
new  
RelayMessageAccepted +
{ 
Header 
= 
RelayMessageHeader +
.+ ,
Create, 2
(2 3
RelayMessageType3 C
.C D
AcceptedD L
)L M
,M N
FromAllocationId  
=! "
fromAllocationId# 3
,3 4
ToAllocationId 
=  
toAllocationId! /
} 
; 
} 	
} 
} •P
`C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\RelayServerData.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
public 

unsafe 
struct 
RelayServerData (
{ 
public 
NetworkEndPoint 
Endpoint '
;' (
public 
ushort 
Nonce 
; 
public 
RelayConnectionData "
ConnectionData# 1
;1 2
public 
RelayConnectionData "
HostConnectionData# 5
;5 6
public   
RelayAllocationId    
AllocationId  ! -
;  - .
public$$ 
RelayHMACKey$$ 
HMACKey$$ #
;$$# $
public(( 
fixed(( 
byte(( 
HMAC(( 
[(( 
$num(( !
]((! "
;((" #
public,, 
readonly,, 
byte,, 
IsSecure,, %
;,,% &
public88 
RelayServerData88 
(88 
ref88 "
NetworkEndPoint88# 2
endpoint883 ;
,88; <
ushort88= C
nonce88D I
,88I J
RelayAllocationId88K \
allocationId88] i
,88i j
string88k q
connectionData	88r Ä
,
88Ä Å
string
88Ç à 
hostConnectionData
88â õ
,
88õ ú
string
88ù £
key
88§ ß
,
88ß ®
bool
88© ≠
isSecure
88Æ ∂
)
88∂ ∑
{99 	
Endpoint:: 
=:: 
endpoint:: 
;::  
AllocationId;; 
=;; 
allocationId;; '
;;;' (
Nonce<< 
=<< 
nonce<< 
;<< 
IsSecure>> 
=>> 
isSecure>> 
?>>  !
(>>" #
byte>># '
)>>' (
$num>>( )
:>>* +
(>>, -
byte>>- 1
)>>1 2
$num>>2 3
;>>3 4
fixed@@ 
(@@ 
byte@@ 
*@@ 
connPtr@@ 
=@@  !
ConnectionData@@" 0
.@@0 1
Value@@1 6
)@@6 7
fixedAA 
(AA 
byteAA 
*AA 
hostPtrAA 
=AA  !
HostConnectionDataAA" 4
.AA4 5
ValueAA5 :
)AA: ;
fixedBB 
(BB 
byteBB 
*BB 
keyPtrBB 
=BB  
HMACKeyBB! (
.BB( )
ValueBB) .
)BB. /
{CC 
Base64DD 
.DD 
FromBase64StringDD '
(DD' (
connectionDataDD( 6
,DD6 7
connPtrDD8 ?
,DD? @
RelayConnectionDataDDA T
.DDT U
k_LengthDDU ]
)DD] ^
;DD^ _
Base64EE 
.EE 
FromBase64StringEE '
(EE' (
hostConnectionDataEE( :
,EE: ;
hostPtrEE< C
,EEC D
RelayConnectionDataEEE X
.EEX Y
k_LengthEEY a
)EEa b
;EEb c
Base64FF 
.FF 
FromBase64StringFF '
(FF' (
keyFF( +
,FF+ ,
keyPtrFF- 3
,FF3 4
RelayHMACKeyFF5 A
.FFA B
k_LengthFFB J
)FFJ K
;FFK L
}GG 
fixedII 
(II 
byteII 
*II 
hmacPtrII 
=II  !
HMACII" &
)II& '
{JJ 
ComputeBindHMACKK 
(KK  
hmacPtrKK  '
,KK' (
NonceKK) .
,KK. /
refKK0 3
ConnectionDataKK4 B
,KKB C
refKKD G
HMACKeyKKH O
)KKO P
;KKP Q
}LL 
}MM 	
publicYY 
RelayServerDataYY 
(YY 
refYY "
NetworkEndPointYY# 2
endpointYY3 ;
,YY; <
ushortYY= C
nonceYYD I
,YYI J
refYYK N
RelayAllocationIdYYO `
allocationIdYYa m
,YYm n
refZZ "
RelayConnectionDataZZ# 6
connectionDataZZ7 E
,ZZE F
refZZG J
RelayConnectionDataZZK ^
hostConnectionDataZZ_ q
,ZZq r
refZZs v
RelayHMACKey	ZZw É
key
ZZÑ á
,
ZZá à
bool
ZZâ ç
isSecure
ZZé ñ
)
ZZñ ó
{[[ 	
Endpoint\\ 
=\\ 
endpoint\\ 
;\\  
Nonce]] 
=]] 
nonce]] 
;]] 
AllocationId^^ 
=^^ 
allocationId^^ '
;^^' (
ConnectionData__ 
=__ 
connectionData__ +
;__+ ,
HostConnectionData`` 
=``  
hostConnectionData``! 3
;``3 4
HMACKeyaa 
=aa 
keyaa 
;aa 
IsSecurecc 
=cc 
isSecurecc 
?cc  !
(cc" #
bytecc# '
)cc' (
$numcc( )
:cc* +
(cc, -
bytecc- 1
)cc1 2
$numcc2 3
;cc3 4
fixedee 
(ee 
byteee 
*ee 
hmacPtree 
=ee  !
HMACee" &
)ee& '
{ff 
ComputeBindHMACgg 
(gg  
hmacPtrgg  '
,gg' (
Noncegg) .
,gg. /
refgg0 3
connectionDatagg4 B
,ggB C
refggD G
keyggH K
)ggK L
;ggL M
}hh 
}ii 	
publicnn 
voidnn 
ComputeNewNoncenn #
(nn# $
)nn$ %
{oo 	
Noncepp 
=pp 
(pp 
ushortpp 
)pp 
(pp 
newpp  
Unitypp! &
.pp& '
Mathematicspp' 2
.pp2 3
Randompp3 9
(pp9 :
(pp: ;
uintpp; ?
)pp? @
	Stopwatchpp@ I
.ppI J
GetTimestampppJ V
(ppV W
)ppW X
)ppX Y
)ppY Z
.ppZ [
NextUIntpp[ c
(ppc d
$numppd e
,ppe f
$numppg m
)ppm n
;ppn o
fixedrr 
(rr 
byterr 
*rr 
hmacPtrrr 
=rr  !
HMACrr" &
)rr& '
{ss 
ComputeBindHMACtt 
(tt  
hmacPtrtt  '
,tt' (
Noncett) .
,tt. /
reftt0 3
ConnectionDatatt4 B
,ttB C
refttD G
HMACKeyttH O
)ttO P
;ttP Q
}uu 
}vv 	
private 
static 
void 
ComputeBindHMAC +
(+ ,
byte, 0
*0 1
result2 8
,8 9
ushort: @
nonceA F
,F G
refH K
RelayConnectionDataL _
connectionData` n
,n o
refp s
RelayHMACKey	t Ä
key
Å Ñ
)
Ñ Ö
{
ÄÄ 	
var
ÅÅ 
keyArray
ÅÅ 
=
ÅÅ 
new
ÅÅ 
byte
ÅÅ #
[
ÅÅ# $
$num
ÅÅ$ &
]
ÅÅ& '
;
ÅÅ' (
fixed
ÉÉ 
(
ÉÉ 
byte
ÉÉ 
*
ÉÉ 
keyValue
ÉÉ  
=
ÉÉ! "
&
ÉÉ# $
key
ÉÉ$ '
.
ÉÉ' (
Value
ÉÉ( -
[
ÉÉ- .
$num
ÉÉ. /
]
ÉÉ/ 0
)
ÉÉ0 1
{
ÑÑ 
fixed
ÖÖ 
(
ÖÖ 
byte
ÖÖ 
*
ÖÖ 
keyArrayPtr
ÖÖ '
=
ÖÖ( )
&
ÖÖ* +
keyArray
ÖÖ+ 3
[
ÖÖ3 4
$num
ÖÖ4 5
]
ÖÖ5 6
)
ÖÖ6 7
{
ÜÜ 
UnsafeUtility
áá !
.
áá! "
MemCpy
áá" (
(
áá( )
keyArrayPtr
áá) 4
,
áá4 5
keyValue
áá6 >
,
áá> ?
keyArray
áá@ H
.
ááH I
Length
ááI O
)
ááO P
;
ááP Q
}
àà 
const
ää 
int
ää 
messageLength
ää '
=
ää( )
$num
ää* -
;
ää- .
var
åå 
messageBytes
åå  
=
åå! "

stackalloc
åå# -
byte
åå. 2
[
åå2 3
messageLength
åå3 @
]
åå@ A
;
ååA B
messageBytes
éé 
[
éé 
$num
éé 
]
éé 
=
éé  !
$num
éé" &
;
éé& '
messageBytes
èè 
[
èè 
$num
èè 
]
èè 
=
èè  !
$num
èè" &
;
èè& '
messageBytes
ëë 
[
ëë 
$num
ëë 
]
ëë 
=
ëë  !
(
ëë" #
byte
ëë# '
)
ëë' (
nonce
ëë( -
;
ëë- .
messageBytes
íí 
[
íí 
$num
íí 
]
íí 
=
íí  !
(
íí" #
byte
íí# '
)
íí' (
(
íí( )
nonce
íí) .
>>
íí/ 1
$num
íí2 3
)
íí3 4
;
íí4 5
messageBytes
ìì 
[
ìì 
$num
ìì 
]
ìì 
=
ìì  !
$num
ìì" %
;
ìì% &
fixed
ïï 
(
ïï 
byte
ïï 
*
ïï 
	connValue
ïï %
=
ïï& '
&
ïï( )
connectionData
ïï) 7
.
ïï7 8
Value
ïï8 =
[
ïï= >
$num
ïï> ?
]
ïï? @
)
ïï@ A
{
ññ 
UnsafeUtility
óó !
.
óó! "
MemCpy
óó" (
(
óó( )
messageBytes
óó) 5
+
óó6 7
$num
óó8 9
,
óó9 :
	connValue
óó; D
,
óóD E
$num
óóF I
)
óóI J
;
óóJ K
}
òò 

HMACSHA256
öö 
.
öö 
ComputeHash
öö &
(
öö& '
keyValue
öö' /
,
öö/ 0
keyArray
öö1 9
.
öö9 :
Length
öö: @
,
öö@ A
messageBytes
ööB N
,
ööN O
messageLength
ööP ]
,
öö] ^
result
öö_ e
)
ööe f
;
ööf g
}
õõ 
}
úú 	
}
ùù 
}ûû ü
fC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\RelayConnectionStatus.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
public 

enum !
RelayConnectionStatus %
{		 
NotEstablished 
= 
$num 
, 
Established 
, 
AllocationInvalid$$ 
}%% 
public'' 

static'' 
class'' (
NetworkDriverRelayExtensions'' 4
{(( 
public** 
static** !
RelayConnectionStatus** +$
GetRelayConnectionStatus**, D
(**D E
this**E I
NetworkDriver**J W
driver**X ^
)**^ _
{++ 	
if,, 
(,, 
driver,, 
.,, 
NetworkProtocol,, &
is,,' ) 
RelayNetworkProtocol,,* >
),,> ?
{-- 
return.. 
(.. !
RelayConnectionStatus.. -
)..- .
driver... 4
...4 5
ProtocolStatus..5 C
;..C D
}// 
else00 
{11 
throw33 
new33 %
InvalidOperationException33 3
(333 4
$str334 s
)33s t
;33t u
}88 
}99 	
}:: 
};; ˝
pC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\Messages\RelayMessageDisconnect.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
internal 
struct "
RelayMessageDisconnect *
{ 
public 
const 
int 
Length 
=  !
RelayMessageHeader" 4
.4 5
Length5 ;
+< =
RelayAllocationId> O
.O P
k_LengthP X
*Y Z
$num[ \
;\ ]
public

 
RelayMessageHeader

 !
Header

" (
;

( )
public 
RelayAllocationId  
FromAllocationId! 1
;1 2
public 
RelayAllocationId  
ToAllocationId! /
;/ 0
internal 
static "
RelayMessageDisconnect .
Create/ 5
(5 6
RelayAllocationId6 G
fromAllocationIdH X
,X Y
RelayAllocationIdZ k
toAllocationIdl z
)z {
{ 	
return 
new "
RelayMessageDisconnect -
{ 
Header 
= 
RelayMessageHeader +
.+ ,
Create, 2
(2 3
RelayMessageType3 C
.C D

DisconnectD N
)N O
,O P
FromAllocationId  
=! "
fromAllocationId# 3
,3 4
ToAllocationId 
=  
toAllocationId! /
,/ 0
} 
; 
} 	
} 
} Éa
\C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\INetworkInterface.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
public 

struct !
NetworkPacketReceiver '
{ 
[ 	

MethodImpl	 
( 
MethodImplOptions %
.% &
AggressiveInlining& 8
)8 9
]9 :
public 
IntPtr 
AllocateMemory $
($ %
ref% (
int) ,
dataLen- 4
)4 5
{ 	
return 
m_Driver 
. 
AllocateMemory *
(* +
ref+ .
dataLen/ 6
)6 7
;7 8
} 	
[## 	
Flags##	 
]## 
public$$ 
enum$$ 
AppendPacketMode$$ $
{%% 	
None)) 
=)) 
$num)) 
,)) 
NoCopyNeeded-- 
=-- 
$num-- 
}.. 	
public88 
bool88 
AppendPacket88  
(88  !
IntPtr88! '
data88( ,
,88, -
ref88. 1$
NetworkInterfaceEndPoint882 J
address88K R
,88R S
int88T W
dataLen88X _
,88_ `
AppendPacketMode88a q
mode88r v
=88w x
AppendPacketMode	88y â
.
88â ä
None
88ä é
)
88é è
{99 	
if:: 
(:: 
(:: 
mode:: 
&:: 
AppendPacketMode:: (
.::( )
NoCopyNeeded::) 5
)::5 6
!=::7 9
$num::: ;
)::; <
{;; 
m_Driver<< 
.<< 
AppendPacket<< %
(<<% &
data<<& *
,<<* +
ref<<, /
address<<0 7
,<<7 8
dataLen<<9 @
)<<@ A
;<<A B
return== 
true== 
;== 
}>> 
unsafe@@ 
{AA 
varBB 
allocatedLenBB  
=BB! "
dataLenBB# *
;BB* +
varCC 
ptrCC 
=CC 
m_DriverCC "
.CC" #
AllocateMemoryCC# 1
(CC1 2
refCC2 5
allocatedLenCC6 B
)CCB C
;CCC D
ifEE 
(EE 
ptrEE 
==EE 
IntPtrEE !
.EE! "
ZeroEE" &
||EE' )
allocatedLenEE* 6
<EE7 8
dataLenEE9 @
)EE@ A
{FF 
OutOfMemoryErrorGG $
(GG$ %
)GG% &
;GG& '
returnHH 
falseHH  
;HH  !
}II 
UnsafeUtilityKK 
.KK 
MemCpyKK $
(KK$ %
(KK% &
byteKK& *
*KK* +
)KK+ ,
ptrKK, /
.KK/ 0
	ToPointerKK0 9
(KK9 :
)KK: ;
,KK; <
(KK= >
byteKK> B
*KKB C
)KKC D
dataKKD H
.KKH I
	ToPointerKKI R
(KKR S
)KKS T
,KKT U
dataLenKKV ]
)KK] ^
;KK^ _
m_DriverLL 
.LL 
AppendPacketLL %
(LL% &
ptrLL& )
,LL) *
refLL+ .
addressLL/ 6
,LL6 7
dataLenLL8 ?
)LL? @
;LL@ A
}MM 
returnOO 
trueOO 
;OO 
}PP 	
publicVV 
boolVV 
IsAddressUsedVV !
(VV! "$
NetworkInterfaceEndPointVV" :
addressVV; B
)VVB C
{WW 	
returnXX 
m_DriverXX 
.XX 
IsAddressUsedXX )
(XX) *
addressXX* 1
)XX1 2
;XX2 3
}YY 	
public^^ 
long^^ 
LastUpdateTime^^ "
=>^^# %
m_Driver^^& .
.^^. /
LastUpdateTime^^/ =
;^^= >
void`` 
OutOfMemoryError`` 
(`` 
)`` 
{aa 	
ReceiveErrorCodebb 
=bb 
$numbb $
;bb$ %
}cc 	
publichh 
inthh 
ReceiveErrorCodehh #
{ii 	
setjj 
=>jj 
m_Driverjj 
.jj 
ReceiveErrorCodejj ,
=jj- .
valuejj/ 4
;jj4 5
}kk 	
internalmm 
NetworkDrivermm 
m_Drivermm '
;mm' (
}nn 
[ss 
Flagsss 

]ss
 
publictt 

enumtt 
SendHandleFlagstt 
{uu 
AllocatedByDriveryy 
=yy 
$numyy 
<<yy  
$numyy! "
}zz 
public
ÄÄ 

struct
ÄÄ (
NetworkInterfaceSendHandle
ÄÄ ,
{
ÅÅ 
public
ÉÉ 
IntPtr
ÉÉ 
data
ÉÉ 
;
ÉÉ 
public
ÖÖ 
int
ÖÖ 
capacity
ÖÖ 
;
ÖÖ 
public
áá 
int
áá 
size
áá 
;
áá 
public
ââ 
int
ââ 
id
ââ 
;
ââ 
public
ãã 
SendHandleFlags
ãã 
flags
ãã $
;
ãã$ %
}
åå 
public
êê 

struct
êê $
NetworkSendQueueHandle
êê (
{
ëë 
private
íí 
IntPtr
íí 
handle
íí 
;
íí 
internal
îî 
static
îî 
unsafe
îî $
NetworkSendQueueHandle
îî 5
ToTempHandle
îî6 B
(
îîB C
NativeQueue
îîC N
<
îîN O
QueuedSendMessage
îîO `
>
îî` a
.
îîa b
ParallelWriter
îîb p
	sendQueue
îîq z
)
îîz {
{
ïï 	
void
ññ 
*
ññ 
ptr
ññ 
=
ññ 
UnsafeUtility
ññ %
.
ññ% &
Malloc
ññ& ,
(
ññ, -
UnsafeUtility
ññ- :
.
ññ: ;
SizeOf
ññ; A
<
ññA B
NativeQueue
ññB M
<
ññM N
QueuedSendMessage
ññN _
>
ññ_ `
.
ññ` a
ParallelWriter
ñña o
>
ñño p
(
ññp q
)
ññq r
,
ññr s
UnsafeUtilityññt Å
.ññÅ Ç
AlignOfññÇ â
<ññâ ä
NativeQueueññä ï
<ññï ñ!
QueuedSendMessageñññ ß
>ññß ®
.ññ® ©
ParallelWriterññ© ∑
>ññ∑ ∏
(ññ∏ π
)ññπ ∫
,ññ∫ ª
	Allocatorññº ≈
.ññ≈ ∆
Tempññ∆  
)ññ  À
;ññÀ Ã
UnsafeUtility
óó 
.
óó 
WriteArrayElement
óó +
(
óó+ ,
ptr
óó, /
,
óó/ 0
$num
óó1 2
,
óó2 3
	sendQueue
óó4 =
)
óó= >
;
óó> ?
return
òò 
new
òò $
NetworkSendQueueHandle
òò -
{
òò. /
handle
òò0 6
=
òò7 8
(
òò9 :
IntPtr
òò: @
)
òò@ A
ptr
òòA D
}
òòE F
;
òòF G
}
ôô 	
public
üü 
unsafe
üü 
NativeQueue
üü !
<
üü! "
QueuedSendMessage
üü" 3
>
üü3 4
.
üü4 5
ParallelWriter
üü5 C

FromHandle
üüD N
(
üüN O
)
üüO P
{
†† 	
void
°° 
*
°° 
ptr
°° 
=
°° 
(
°° 
void
°° 
*
°° 
)
°° 
handle
°° %
;
°°% &
return
¢¢ 
UnsafeUtility
¢¢  
.
¢¢  !
ReadArrayElement
¢¢! 1
<
¢¢1 2
NativeQueue
¢¢2 =
<
¢¢= >
QueuedSendMessage
¢¢> O
>
¢¢O P
.
¢¢P Q
ParallelWriter
¢¢Q _
>
¢¢_ `
(
¢¢` a
ptr
¢¢a d
,
¢¢d e
$num
¢¢f g
)
¢¢g h
;
¢¢h i
}
££ 	
}
§§ 
public
®® 

struct
®® "
NetworkSendInterface
®® &
{
©© 
[
≠≠ 	&
UnmanagedFunctionPointer
≠≠	 !
(
≠≠! "
CallingConvention
≠≠" 3
.
≠≠3 4
Cdecl
≠≠4 9
)
≠≠9 :
]
≠≠: ;
public
ÆÆ 
delegate
ÆÆ 
int
ÆÆ &
BeginSendMessageDelegate
ÆÆ 4
(
ÆÆ4 5
out
ÆÆ5 8(
NetworkInterfaceSendHandle
ÆÆ9 S
handle
ÆÆT Z
,
ÆÆZ [
IntPtr
ÆÆ\ b
userData
ÆÆc k
,
ÆÆk l
int
ÆÆm p"
requiredPayloadSizeÆÆq Ñ
)ÆÆÑ Ö
;ÆÆÖ Ü
[
≥≥ 	&
UnmanagedFunctionPointer
≥≥	 !
(
≥≥! "
CallingConvention
≥≥" 3
.
≥≥3 4
Cdecl
≥≥4 9
)
≥≥9 :
]
≥≥: ;
public
¥¥ 
delegate
¥¥ 
int
¥¥ $
EndSendMessageDelegate
¥¥ 2
(
¥¥2 3
ref
¥¥3 6(
NetworkInterfaceSendHandle
¥¥7 Q
handle
¥¥R X
,
¥¥X Y
ref
¥¥Z ]&
NetworkInterfaceEndPoint
¥¥^ v
address
¥¥w ~
,
¥¥~ 
IntPtr¥¥Ä Ü
userData¥¥á è
,¥¥è ê
ref¥¥ë î&
NetworkSendQueueHandle¥¥ï ´
	sendQueue¥¥¨ µ
)¥¥µ ∂
;¥¥∂ ∑
[
ππ 	&
UnmanagedFunctionPointer
ππ	 !
(
ππ! "
CallingConvention
ππ" 3
.
ππ3 4
Cdecl
ππ4 9
)
ππ9 :
]
ππ: ;
public
∫∫ 
delegate
∫∫ 
void
∫∫ &
AbortSendMessageDelegate
∫∫ 5
(
∫∫5 6
ref
∫∫6 9(
NetworkInterfaceSendHandle
∫∫: T
handle
∫∫U [
,
∫∫[ \
IntPtr
∫∫] c
userData
∫∫d l
)
∫∫l m
;
∫∫m n
public
øø &
TransportFunctionPointer
øø '
<
øø' (&
BeginSendMessageDelegate
øø( @
>
øø@ A
BeginSendMessage
øøB R
;
øøR S
public
√√ &
TransportFunctionPointer
√√ '
<
√√' ($
EndSendMessageDelegate
√√( >
>
√√> ?
EndSendMessage
√√@ N
;
√√N O
public
«« &
TransportFunctionPointer
«« '
<
««' (&
AbortSendMessageDelegate
««( @
>
««@ A
AbortSendMessage
««B R
;
««R S
[
ÀÀ 	/
!NativeDisableUnsafePtrRestriction
ÀÀ	 *
]
ÀÀ* +
public
ÀÀ, 2
IntPtr
ÀÀ3 9
UserData
ÀÀ: B
;
ÀÀB C
}
ÃÃ 
public
—— 

	interface
—— 
INetworkInterface
—— &
:
——' (
IDisposable
——) 4
{
““ &
NetworkInterfaceEndPoint
÷÷  
LocalEndPoint
÷÷! .
{
÷÷/ 0
get
÷÷1 4
;
÷÷4 5
}
÷÷6 7
int
›› 

Initialize
›› 
(
›› 
NetworkSettings
›› &
settings
››' /
)
››/ 0
;
››0 1
	JobHandle
ÊÊ 
ScheduleReceive
ÊÊ !
(
ÊÊ! "#
NetworkPacketReceiver
ÊÊ" 7
receiver
ÊÊ8 @
,
ÊÊ@ A
	JobHandle
ÊÊB K
dep
ÊÊL O
)
ÊÊO P
;
ÊÊP Q
	JobHandle
ÓÓ 
ScheduleSend
ÓÓ 
(
ÓÓ 
NativeQueue
ÓÓ *
<
ÓÓ* +
QueuedSendMessage
ÓÓ+ <
>
ÓÓ< =
	sendQueue
ÓÓ> G
,
ÓÓG H
	JobHandle
ÓÓI R
dep
ÓÓS V
)
ÓÓV W
;
ÓÓW X
int
˜˜ 
Bind
˜˜ 
(
˜˜ &
NetworkInterfaceEndPoint
˜˜ )
endpoint
˜˜* 2
)
˜˜2 3
;
˜˜3 4
int
˝˝ 
Listen
˝˝ 
(
˝˝ 
)
˝˝ 
;
˝˝ "
NetworkSendInterface
ÉÉ !
CreateSendInterface
ÉÉ 0
(
ÉÉ0 1
)
ÉÉ1 2
;
ÉÉ2 3
int
ãã %
CreateInterfaceEndPoint
ãã #
(
ãã# $
NetworkEndPoint
ãã$ 3
address
ãã4 ;
,
ãã; <
out
ãã= @&
NetworkInterfaceEndPoint
ããA Y
endpoint
ããZ b
)
ããb c
;
ããc d
NetworkEndPoint
íí  
GetGenericEndPoint
íí *
(
íí* +&
NetworkInterfaceEndPoint
íí+ C
endpoint
ííD L
)
ííL M
;
ííM N
}
ìì 
}îî ﬁp
UC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\IPCManager.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
internal 
struct 

IPCManager 
{ 
public 
static 

IPCManager  
Instance! )
=* +
new, /

IPCManager0 :
(: ;
); <
;< =
[ 	
StructLayout	 
( 

LayoutKind  
.  !
Explicit! )
)) *
]* +
internal 
unsafe 
struct 
IPCData &
{ 	
[ 
FieldOffset 
( 
$num 
) 
] 
public #
int$ '
from( ,
;, -
[ 
FieldOffset 
( 
$num 
) 
] 
public #
int$ '
length( .
;. /
[ 
FieldOffset 
( 
$num 
) 
] 
public #
fixed$ )
byte* .
data/ 3
[3 4%
NetworkParameterConstants4 M
.M N
MTUN Q
]Q R
;R S
} 	
private 
NativeMultiQueue  
<  !
IPCData! (
>( )

m_IPCQueue* 4
;4 5
private 
NativeHashMap 
< 
ushort $
,$ %
int& )
>) *
m_IPCChannels+ 8
;8 9
internal 
static 
	JobHandle !
ManagerAccessHandle" 5
;5 6
public 
bool 
	IsCreated 
=>  

m_IPCQueue! +
.+ ,
	IsCreated, 5
;5 6
private   
int   

m_RefCount   
;   
public"" 
void"" 
AddRef"" 
("" 
)"" 
{## 	
if$$ 
($$ 

m_RefCount$$ 
==$$ 
$num$$ 
)$$  
{%% 

m_IPCQueue&& 
=&& 
new&&  
NativeMultiQueue&&! 1
<&&1 2
IPCData&&2 9
>&&9 :
(&&: ;
$num&&; >
)&&> ?
;&&? @
m_IPCChannels'' 
='' 
new''  #
NativeHashMap''$ 1
<''1 2
ushort''2 8
,''8 9
int'': =
>''= >
(''> ?
$num''? A
,''A B
	Allocator''C L
.''L M

Persistent''M W
)''W X
;''X Y
}(( 
++)) 

m_RefCount)) 
;)) 
}** 	
public,, 
void,, 
Release,, 
(,, 
),, 
{-- 	
--.. 

m_RefCount.. 
;.. 
if// 
(// 

m_RefCount// 
==// 
$num// 
)//  
{00 
ManagerAccessHandle11 #
.11# $
Complete11$ ,
(11, -
)11- .
;11. /

m_IPCQueue22 
.22 
Dispose22 "
(22" #
)22# $
;22$ %
m_IPCChannels33 
.33 
Dispose33 %
(33% &
)33& '
;33' (
}44 
}55 	
internal77 
unsafe77 
void77 
Update77 #
(77# $$
NetworkInterfaceEndPoint77$ <
local77= B
,77B C
NativeQueue77D O
<77O P
QueuedSendMessage77P a
>77a b
queue77c h
)77h i
{88 	
QueuedSendMessage99 
val99 !
;99! "
while:: 
(:: 
queue:: 
.:: 

TryDequeue:: #
(::# $
out::$ '
val::( +
)::+ ,
)::, -
{;; 
var<< 
ipcData<< 
=<< 
new<< !
IPCData<<" )
(<<) *
)<<* +
;<<+ ,
UnsafeUtility== 
.== 
MemCpy== $
(==$ %
ipcData==% ,
.==, -
data==- 1
,==1 2
val==3 6
.==6 7
Data==7 ;
,==; <
val=== @
.==@ A

DataLength==A K
)==K L
;==L M
ipcData>> 
.>> 
length>> 
=>>  
val>>! $
.>>$ %

DataLength>>% /
;>>/ 0
ipcData?? 
.?? 
from?? 
=?? 
*??  
(??  !
int??! $
*??$ %
)??% &
local??& +
.??+ ,
data??, 0
;??0 1

m_IPCQueue@@ 
.@@ 
Enqueue@@ "
(@@" #
*@@# $
(@@$ %
int@@% (
*@@( )
)@@) *
val@@* -
.@@- .
Dest@@. 2
.@@2 3
data@@3 7
,@@7 8
ipcData@@9 @
)@@@ A
;@@A B
}AA 
}BB 	
publicDD 
unsafeDD $
NetworkInterfaceEndPointDD .
CreateEndPointDD/ =
(DD= >
ushortDD> D
portDDE I
)DDI J
{EE 	
ManagerAccessHandleFF 
.FF  
CompleteFF  (
(FF( )
)FF) *
;FF* +
intGG 
idGG 
=GG 
$numGG 
;GG 
ifHH 
(HH 
portHH 
==HH 
$numHH 
)HH 
{II 
whileJJ 
(JJ 
idJJ 
==JJ 
$numJJ 
)JJ 
{KK 
portLL 
=LL 
RandomHelpersLL (
.LL( )
GetRandomUShortLL) 8
(LL8 9
)LL9 :
;LL: ;
ifMM 
(MM 
!MM 
m_IPCChannelsMM &
.MM& '
TryGetValueMM' 2
(MM2 3
portMM3 7
,MM7 8
outMM9 <
_MM= >
)MM> ?
)MM? @
{NN 
idOO 
=OO 
m_IPCChannelsOO *
.OO* +
CountOO+ 0
(OO0 1
)OO1 2
+OO3 4
$numOO5 6
;OO6 7
m_IPCChannelsPP %
.PP% &
TryAddPP& ,
(PP, -
portPP- 1
,PP1 2
idPP3 5
)PP5 6
;PP6 7
}QQ 
}RR 
}SS 
elseTT 
{UU 
ifVV 
(VV 
!VV 
m_IPCChannelsVV "
.VV" #
TryGetValueVV# .
(VV. /
portVV/ 3
,VV3 4
outVV5 8
idVV9 ;
)VV; <
)VV< =
{WW 
idXX 
=XX 
m_IPCChannelsXX &
.XX& '
CountXX' ,
(XX, -
)XX- .
+XX/ 0
$numXX1 2
;XX2 3
m_IPCChannelsYY !
.YY! "
TryAddYY" (
(YY( )
portYY) -
,YY- .
idYY/ 1
)YY1 2
;YY2 3
}ZZ 
}[[ 
var]] 
endpoint]] 
=]] 
default]] "
(]]" #$
NetworkInterfaceEndPoint]]# ;
)]]; <
;]]< =
endpoint^^ 
.^^ 

dataLength^^ 
=^^  !
$num^^" #
;^^# $
*__ 
(__ 
int__ 
*__ 
)__ 
endpoint__ 
.__ 
data__  
=__! "
id__# %
;__% &
returnaa 
endpointaa 
;aa 
}bb 	
publicdd 
unsafedd 
booldd 
GetEndPointPortdd *
(dd* +$
NetworkInterfaceEndPointdd+ C
epddD F
,ddF G
outddH K
ushortddL R
portddS W
)ddW X
{ee 	
ManagerAccessHandleff 
.ff  
Completeff  (
(ff( )
)ff) *
;ff* +
intgg 
idgg 
=gg 
*gg 
(gg 
intgg 
*gg 
)gg 
epgg 
.gg 
datagg #
;gg# $
varhh 
valueshh 
=hh 
m_IPCChannelshh &
.hh& '
GetValueArrayhh' 4
(hh4 5
	Allocatorhh5 >
.hh> ?
Temphh? C
)hhC D
;hhD E
varii 
keysii 
=ii 
m_IPCChannelsii $
.ii$ %
GetKeyArrayii% 0
(ii0 1
	Allocatorii1 :
.ii: ;
Tempii; ?
)ii? @
;ii@ A
portjj 
=jj 
$numjj 
;jj 
forkk 
(kk 
varkk 
ikk 
=kk 
$numkk 
;kk 
ikk 
<kk 
m_IPCChannelskk  -
.kk- .
Countkk. 3
(kk3 4
)kk4 5
;kk5 6
++kk7 9
ikk9 :
)kk: ;
{ll 
ifmm 
(mm 
valuesmm 
[mm 
imm 
]mm 
==mm  
idmm! #
)mm# $
{nn 
portoo 
=oo 
keysoo 
[oo  
ioo  !
]oo! "
;oo" #
returnpp 
truepp 
;pp  
}qq 
}rr 
returntt 
falsett 
;tt 
}uu 	
publicww 
unsafeww 
intww 
PeekNextww "
(ww" #$
NetworkInterfaceEndPointww# ;
localww< A
,wwA B
voidwwC G
*wwG H
slicewwI N
,wwN O
outwwP S
intwwT W
lengthwwX ^
,ww^ _
outww` c$
NetworkInterfaceEndPointwwd |
from	ww} Å
)
wwÅ Ç
{xx 	
ManagerAccessHandleyy 
.yy  
Completeyy  (
(yy( )
)yy) *
;yy* +
IPCDatazz 
datazz 
;zz 
from{{ 
={{ 
default{{ 
;{{ 
length|| 
=|| 
$num|| 
;|| 
if~~ 
(~~ 

m_IPCQueue~~ 
.~~ 
Peek~~ 
(~~  
*~~  !
(~~! "
int~~" %
*~~% &
)~~& '
local~~' ,
.~~, -
data~~- 1
,~~1 2
out~~3 6
data~~7 ;
)~~; <
)~~< =
{ 
UnsafeUtility
ÄÄ 
.
ÄÄ 
MemCpy
ÄÄ $
(
ÄÄ$ %
slice
ÄÄ% *
,
ÄÄ* +
data
ÄÄ, 0
.
ÄÄ0 1
data
ÄÄ1 5
,
ÄÄ5 6
data
ÄÄ7 ;
.
ÄÄ; <
length
ÄÄ< B
)
ÄÄB C
;
ÄÄC D
length
ÇÇ 
=
ÇÇ 
data
ÇÇ 
.
ÇÇ 
length
ÇÇ $
;
ÇÇ$ %
}
ÉÉ !
GetEndPointByHandle
ÖÖ 
(
ÖÖ  
data
ÖÖ  $
.
ÖÖ$ %
from
ÖÖ% )
,
ÖÖ) *
out
ÖÖ+ .
from
ÖÖ/ 3
)
ÖÖ3 4
;
ÖÖ4 5
return
áá 
length
áá 
;
áá 
}
àà 	
public
ää 
unsafe
ää 
int
ää 
ReceiveMessageEx
ää *
(
ää* +&
NetworkInterfaceEndPoint
ää+ C
local
ääD I
,
ääI J
void
ääK O
*
ääO P
payloadData
ääQ \
,
ää\ ]
int
ää^ a

payloadLen
ääb l
,
ääl m
ref
ään q'
NetworkInterfaceEndPointäär ä
remoteääã ë
)ääë í
{
ãã 	
IPCData
åå 
data
åå 
;
åå 
if
çç 
(
çç 
!
çç 

m_IPCQueue
çç 
.
çç 
Peek
çç  
(
çç  !
*
çç! "
(
çç" #
int
çç# &
*
çç& '
)
çç' (
local
çç( -
.
çç- .
data
çç. 2
,
çç2 3
out
çç4 7
data
çç8 <
)
çç< =
)
çç= >
return
éé 
$num
éé 
;
éé !
GetEndPointByHandle
èè 
(
èè  
data
èè  $
.
èè$ %
from
èè% )
,
èè) *
out
èè+ .
remote
èè/ 5
)
èè5 6
;
èè6 7
var
ëë 
totalLength
ëë 
=
ëë 
Math
ëë "
.
ëë" #
Min
ëë# &
(
ëë& '

payloadLen
ëë' 1
,
ëë1 2
data
ëë3 7
.
ëë7 8
length
ëë8 >
)
ëë> ?
;
ëë? @
UnsafeUtility
íí 
.
íí 
MemCpy
íí  
(
íí  !
payloadData
íí! ,
,
íí, -
data
íí. 2
.
íí2 3
data
íí3 7
,
íí7 8
totalLength
íí9 D
)
ííD E
;
ííE F
if
îî 
(
îî 
totalLength
îî 
<
îî 
data
îî "
.
îî" #
length
îî# )
)
îî) *
return
ïï 
-
ïï 
$num
ïï 
;
ïï 

m_IPCQueue
ññ 
.
ññ 
Dequeue
ññ 
(
ññ 
*
ññ  
(
ññ  !
int
ññ! $
*
ññ$ %
)
ññ% &
local
ññ& +
.
ññ+ ,
data
ññ, 0
,
ññ0 1
out
ññ2 5
data
ññ6 :
)
ññ: ;
;
ññ; <
return
òò 
totalLength
òò 
;
òò 
}
ôô 	
private
õõ 
unsafe
õõ 
void
õõ !
GetEndPointByHandle
õõ /
(
õõ/ 0
int
õõ0 3
handle
õõ4 :
,
õõ: ;
out
õõ< ?&
NetworkInterfaceEndPoint
õõ@ X
endpoint
õõY a
)
õõa b
{
úú 	
var
ùù 
temp
ùù 
=
ùù 
default
ùù 
(
ùù &
NetworkInterfaceEndPoint
ùù 7
)
ùù7 8
;
ùù8 9
temp
ûû 
.
ûû 

dataLength
ûû 
=
ûû 
$num
ûû 
;
ûû  
*
üü 
(
üü 
int
üü 
*
üü 
)
üü 
temp
üü 
.
üü 
data
üü 
=
üü 
handle
üü %
;
üü% &
endpoint
°° 
=
°° 
temp
°° 
;
°° 
}
¢¢ 	
}
££ 
}§§ £
iC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Pipelines\FragmentationUtility.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
	Utilities% .
{ 
public 

static 
class 1
%FragmentationStageParameterExtensions =
{ 
public		 
static		 
ref		 
NetworkSettings		 ),
 WithFragmentationStageParameters		* J
(		J K
ref

 
this

 
NetworkSettings

 $
settings

% -
,

- .
int 
payloadCapacity 
=  ! 
FragmentationUtility" 6
.6 7

Parameters7 A
.A B$
k_DefaultPayloadCapacityB Z
) 	
{ 	
var 
	parameter 
= 
new  
FragmentationUtility  4
.4 5

Parameters5 ?
{ 
PayloadCapacity 
=  !
payloadCapacity" 1
,1 2
} 
; 
settings 
. !
AddRawParameterStruct *
(* +
ref+ .
	parameter/ 8
)8 9
;9 :
return 
ref 
settings 
;  
} 	
public 
static  
FragmentationUtility *
.* +

Parameters+ 5+
GetFragmentationStageParameters6 U
(U V
refV Y
thisZ ^
NetworkSettings_ n
settingso w
)w x
{ 	
if 
( 
! 
settings 
. 
TryGet  
<  ! 
FragmentationUtility! 5
.5 6

Parameters6 @
>@ A
(A B
outB E
varF I

parametersJ T
)T U
)U V
{ 

parameters   
.   
PayloadCapacity   *
=  + , 
FragmentationUtility  - A
.  A B

Parameters  B L
.  L M$
k_DefaultPayloadCapacity  M e
;  e f
}!! 
return## 

parameters## 
;## 
}$$ 	
}%% 
public'' 

struct''  
FragmentationUtility'' &
{(( 
public** 
struct** 

Parameters**  
:**! "
INetworkParameter**# 4
{++ 	
internal,, 
const,, 
int,, $
k_DefaultPayloadCapacity,, 7
=,,8 9
$num,,: ;
*,,< =
$num,,> B
;,,B C
public// 
int// 
PayloadCapacity// &
;//& '
public11 
bool11 
Validate11  
(11  !
)11! "
{22 
var33 
valid33 
=33 
true33  
;33  !
if55 
(55 
PayloadCapacity55 #
<=55$ &%
NetworkParameterConstants55' @
.55@ A
MTU55A D
)55D E
{66 
valid77 
=77 
false77 !
;77! "
UnityEngine88 
.88  
Debug88  %
.88% &
LogError88& .
(88. /
$"88/ 1
{881 2
nameof882 8
(888 9
PayloadCapacity889 H
)88H I
}88I J
$str88J R
{88R S
PayloadCapacity88S b
}88b c
$str88c 
{	88 Ä'
NetworkParameterConstants
88Ä ô
.
88ô ö
MTU
88ö ù
}
88ù û
$str
88û ü
"
88ü †
)
88† °
;
88° ¢
}99 
return;; 
valid;; 
;;; 
}<< 
}== 	
}>> 
}?? ﬁª
ZC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkSettings.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{		 
public 

struct 
NetworkSettings !
:" #
IDisposable$ /
{ 
private 
struct 
ParameterSlice %
{ 	
public 
int 
Offset 
; 
public 
int 
Size 
; 
} 	
private 
const 
int  
k_MapInitialCapacity .
=/ 0
$num1 2
;2 3
private 
NativeHashMap 
< 
long "
," #
ParameterSlice$ 2
>2 3
m_ParameterOffsets4 F
;F G
private 

NativeList 
< 
byte 
>  
m_Parameters! -
;- .
private 
byte 
m_Initialized "
;" #
private 
bool $
EnsureInitializedOrError -
(- .
). /
{ 	
if 
( 
m_Initialized 
==  
$num! "
)" #
{ 
m_Initialized 
= 
$num  !
;! "
m_Parameters   
=   
new   "

NativeList  # -
<  - .
byte  . 2
>  2 3
(  3 4
	Allocator  4 =
.  = >
Temp  > B
)  B C
;  C D
m_ParameterOffsets!! "
=!!# $
new!!% (
NativeHashMap!!) 6
<!!6 7
long!!7 ;
,!!; <
ParameterSlice!!= K
>!!K L
(!!L M 
k_MapInitialCapacity!!M a
,!!a b
	Allocator!!c l
.!!l m
Temp!!m q
)!!q r
;!!r s
}"" 
if$$ 
($$ 
!$$ 
m_Parameters$$ 
.$$ 
	IsCreated$$ '
)$$' (
{%% 
throw'' 
new'' #
ObjectDisposedException'' 1
(''1 2
null''2 6
,''6 7
$"''8 :
$str'': >
{''> ?
nameof''? E
(''E F
NetworkSettings''F U
)''U V
}''V W
$str	''W ç
"
''ç é
)
''é è
;
''è ê
},, 
return-- 
true-- 
;-- 
}.. 	
public88 
NetworkSettings88 
(88 
	Allocator88 (
	allocator88) 2
)882 3
{99 	
m_Initialized:: 
=:: 
$num:: 
;:: 
m_Parameters;; 
=;; 
new;; 

NativeList;; )
<;;) *
byte;;* .
>;;. /
(;;/ 0
	allocator;;0 9
);;9 :
;;;: ;
m_ParameterOffsets<< 
=<<  
new<<! $
NativeHashMap<<% 2
<<<2 3
long<<3 7
,<<7 8
ParameterSlice<<9 G
><<G H
(<<H I 
k_MapInitialCapacity<<I ]
,<<] ^
	allocator<<_ h
)<<h i
;<<i j
}== 	
public?? 
void?? 
Dispose?? 
(?? 
)?? 
{@@ 	
m_InitializedBB 
=BB 
$numBB 
;BB 
ifDD 
(DD 
m_ParametersDD 
.DD 
	IsCreatedDD &
)DD& '
{EE 
m_ParametersFF 
.FF 
DisposeFF $
(FF$ %
)FF% &
;FF& '
m_ParameterOffsetsGG "
.GG" #
DisposeGG# *
(GG* +
)GG+ ,
;GG, -
}HH 
}II 	
publicQQ 
unsafeQQ 
voidQQ !
AddRawParameterStructQQ 0
<QQ0 1
TQQ1 2
>QQ2 3
(QQ3 4
refQQ4 7
TQQ8 9
	parameterQQ: C
)QQC D
whereQQE J
TQQK L
:QQM N
	unmanagedQQO X
,QQX Y
INetworkParameterQQZ k
{RR 	
ifSS 
(SS 
!SS $
EnsureInitializedOrErrorSS )
(SS) *
)SS* +
)SS+ ,
returnTT 
;TT $
ValidateParameterOrErrorVV $
(VV$ %
refVV% (
	parameterVV) 2
)VV2 3
;VV3 4
varXX 
typeHashXX 
=XX 
BurstRuntimeXX '
.XX' (
GetHashCode64XX( 5
<XX5 6
TXX6 7
>XX7 8
(XX8 9
)XX9 :
;XX: ;
varYY 
parameterSliceYY 
=YY  
newYY! $
ParameterSliceYY% 3
{ZZ 
Offset[[ 
=[[ 
m_Parameters[[ %
.[[% &
Length[[& ,
,[[, -
Size\\ 
=\\ 
UnsafeUtility\\ $
.\\$ %
SizeOf\\% +
<\\+ ,
T\\, -
>\\- .
(\\. /
)\\/ 0
,\\0 1
}]] 
;]] 
if__ 
(__ 
m_ParameterOffsets__ "
.__" #
TryAdd__# )
(__) *
typeHash__* 2
,__2 3
parameterSlice__4 B
)__B C
)__C D
{`` 
m_Parametersaa 
.aa 
Resizeaa #
(aa# $
m_Parametersaa$ 0
.aa0 1
Lengthaa1 7
+aa8 9
parameterSliceaa: H
.aaH I
SizeaaI M
,aaM N
NativeArrayOptionsaaO a
.aaa b
UninitializedMemoryaab u
)aau v
;aav w
}bb 
elsecc 
{dd 
parameterSliceee 
=ee  
m_ParameterOffsetsee! 3
[ee3 4
typeHashee4 <
]ee< =
;ee= >
}ff 
varhh 
valuePtrhh 
=hh 
(hh 
Thh 
*hh 
)hh 
(hh  
(hh  !
bytehh! %
*hh% &
)hh& '
m_Parametershh' 3
.hh3 4
GetUnsafePtrhh4 @
<hh@ A
bytehhA E
>hhE F
(hhF G
)hhG H
+hhI J
parameterSlicehhK Y
.hhY Z
OffsethhZ `
)hh` a
;hha b
*ii 
valuePtrii 
=ii 
	parameterii !
;ii! "
}jj 	
publicrr 
unsaferr 
boolrr 
TryGetrr !
<rr! "
Trr" #
>rr# $
(rr$ %
outrr% (
Trr) *
	parameterrr+ 4
)rr4 5
whererr6 ;
Trr< =
:rr> ?
	unmanagedrr@ I
,rrI J
INetworkParameterrrK \
{ss 	
	parametertt 
=tt 
defaulttt 
;tt  
ifvv 
(vv 
!vv $
EnsureInitializedOrErrorvv )
(vv) *
)vv* +
)vv+ ,
returnww 
falseww 
;ww 
varyy 
typeHashyy 
=yy 
BurstRuntimeyy '
.yy' (
GetHashCode64yy( 5
<yy5 6
Tyy6 7
>yy7 8
(yy8 9
)yy9 :
;yy: ;
if{{ 
({{ 
m_ParameterOffsets{{ "
.{{" #
TryGetValue{{# .
({{. /
typeHash{{/ 7
,{{7 8
out{{9 <
var{{= @
parameterSlice{{A O
){{O P
){{P Q
{|| 
if~~ 
(~~ 
UnsafeUtility~~ !
.~~! "
SizeOf~~" (
<~~( )
T~~) *
>~~* +
(~~+ ,
)~~, -
!=~~. 0
parameterSlice~~1 ?
.~~? @
Size~~@ D
)~~D E
throw 
new 
ArgumentException /
(/ 0
$"0 2
$str2 Q
{Q R
typeofR X
(X Y
TY Z
)Z [
}[ \
$str\ ^
{^ _
UnsafeUtility_ l
.l m
SizeOfm s
<s t
Tt u
>u v
(v w
)w x
}x y
$str	y ú
{
ú ù
parameterSlice
ù ´
.
´ ¨
Size
¨ ∞
}
∞ ±
$str
± ≤
"
≤ ≥
)
≥ ¥
;
¥ µ
if
ÅÅ 
(
ÅÅ 
m_Parameters
ÅÅ  
.
ÅÅ  !
Length
ÅÅ! '
<
ÅÅ( )
parameterSlice
ÅÅ* 8
.
ÅÅ8 9
Offset
ÅÅ9 ?
+
ÅÅ@ A
parameterSlice
ÅÅB P
.
ÅÅP Q
Size
ÅÅQ U
)
ÅÅU V
throw
ÇÇ 
new
ÇÇ 
OverflowException
ÇÇ /
(
ÇÇ/ 0
$"
ÇÇ0 2
$str
ÇÇ2 z
"
ÇÇz {
)
ÇÇ{ |
;
ÇÇ| }
	parameter
ÑÑ 
=
ÑÑ 
*
ÑÑ 
(
ÑÑ 
T
ÑÑ 
*
ÑÑ  
)
ÑÑ  !
(
ÑÑ! "
(
ÑÑ" #
byte
ÑÑ# '
*
ÑÑ' (
)
ÑÑ( )
m_Parameters
ÑÑ) 5
.
ÑÑ5 6"
GetUnsafeReadOnlyPtr
ÑÑ6 J
<
ÑÑJ K
byte
ÑÑK O
>
ÑÑO P
(
ÑÑP Q
)
ÑÑQ R
+
ÑÑS T
parameterSlice
ÑÑU c
.
ÑÑc d
Offset
ÑÑd j
)
ÑÑj k
;
ÑÑk l
return
ÖÖ 
true
ÖÖ 
;
ÖÖ 
}
ÜÜ 
return
àà 
false
àà 
;
àà 
}
ââ 	
internal
ãã 
static
ãã 
void
ãã &
ValidateParameterOrError
ãã 5
<
ãã5 6
T
ãã6 7
>
ãã7 8
(
ãã8 9
ref
ãã9 <
T
ãã= >
	parameter
ãã? H
)
ããH I
where
ããJ O
T
ããP Q
:
ããR S
INetworkParameter
ããT e
{
åå 	
if
çç 
(
çç 
!
çç 
	parameter
çç 
.
çç 
Validate
çç #
(
çç# $
)
çç$ %
)
çç% &
{
éé 
throw
êê 
new
êê 
ArgumentException
êê +
(
êê+ ,
$"
êê, .
$str
êê. N
{
êêN O
	parameter
êêO X
.
êêX Y
GetType
êêY `
(
êê` a
)
êêa b
.
êêb c
Name
êêc g
}
êêg h
$str
êêh v
"
êêv w
)
êêw x
;
êêx y
}
îî 
}
ïï 	
internal
õõ 
static
õõ 
unsafe
õõ 
NetworkSettings
õõ .
	FromArray
õõ/ 8
(
õõ8 9
params
õõ9 ?
INetworkParameter
õõ@ Q
[
õõQ R
]
õõR S

parameters
õõT ^
)
õõ^ _
{
úú 	
var
ùù 
networkParameters
ùù !
=
ùù" #
new
ùù$ '
NetworkSettings
ùù( 7
(
ùù7 8
	Allocator
ùù8 A
.
ùùA B
Temp
ùùB F
)
ùùF G
;
ùùG H
for
üü 
(
üü 
int
üü 
i
üü 
=
üü 
$num
üü 
;
üü 
i
üü 
<
üü 

parameters
üü  *
.
üü* +
Length
üü+ 1
;
üü1 2
i
üü3 4
++
üü4 6
)
üü6 7
{
†† 
var
°° 
	parameter
°° 
=
°° 

parameters
°°  *
[
°°* +
i
°°+ ,
]
°°, -
;
°°- .
var
¢¢ 
type
¢¢ 
=
¢¢ 
	parameter
¢¢ $
.
¢¢$ %
GetType
¢¢% ,
(
¢¢, -
)
¢¢- .
;
¢¢. /
if
ßß 
(
ßß 
type
ßß 
==
ßß 
typeof
ßß "
(
ßß" #%
BaselibNetworkParameter
ßß# :
)
ßß: ;
)
ßß; <
{
®® 
var
©© 
p
©© 
=
©© 
(
©© %
BaselibNetworkParameter
©© 4
)
©©4 5
	parameter
©©5 >
;
©©> ?
if
´´ 
(
´´ 
p
´´ 
.
´´ "
receiveQueueCapacity
´´ .
==
´´/ 1
$num
´´2 3
)
´´3 4
p
¨¨ 
.
¨¨ "
receiveQueueCapacity
¨¨ .
=
¨¨/ 0/
!BaselibNetworkParameterExtensions
¨¨1 R
.
¨¨R S"
k_defaultRxQueueSize
¨¨S g
;
¨¨g h
if
ÆÆ 
(
ÆÆ 
p
ÆÆ 
.
ÆÆ 
sendQueueCapacity
ÆÆ +
==
ÆÆ, .
$num
ÆÆ/ 0
)
ÆÆ0 1
p
ØØ 
.
ØØ 
sendQueueCapacity
ØØ +
=
ØØ, -/
!BaselibNetworkParameterExtensions
ØØ. O
.
ØØO P"
k_defaultTxQueueSize
ØØP d
;
ØØd e
if
±± 
(
±± 
p
±± 
.
±±  
maximumPayloadSize
±± ,
==
±±- /
$num
±±0 1
)
±±1 2
p
≤≤ 
.
≤≤  
maximumPayloadSize
≤≤ ,
=
≤≤- ./
!BaselibNetworkParameterExtensions
≤≤/ P
.
≤≤P Q)
k_defaultMaximumPayloadSize
≤≤Q l
;
≤≤l m
	parameter
¥¥ 
=
¥¥ 
p
¥¥  !
;
¥¥! "
}
µµ 
if
∑∑ 
(
∑∑ 
type
∑∑ 
==
∑∑ 
typeof
∑∑ "
(
∑∑" #
Relay
∑∑# (
.
∑∑( )#
RelayNetworkParameter
∑∑) >
)
∑∑> ?
)
∑∑? @
{
∏∏ 
var
ππ 
p
ππ 
=
ππ 
(
ππ 
Relay
ππ "
.
ππ" ##
RelayNetworkParameter
ππ# 8
)
ππ8 9
	parameter
ππ9 B
;
ππB C
if
ªª 
(
ªª 
p
ªª 
.
ªª #
RelayConnectionTimeMS
ªª /
==
ªª0 2
$num
ªª3 4
)
ªª4 5
p
ºº 
.
ºº #
RelayConnectionTimeMS
ºº /
=
ºº0 1
Relay
ºº2 7
.
ºº7 8#
RelayNetworkParameter
ºº8 M
.
ººM N'
k_DefaultConnectionTimeMS
ººN g
;
ººg h
	parameter
ææ 
=
ææ 
p
ææ  !
;
ææ! "
}
øø 
else
¡¡ 
if
¡¡ 
(
¡¡ 
type
¡¡ 
==
¡¡  
typeof
¡¡! '
(
¡¡' (
Unity
¡¡( -
.
¡¡- .

Networking
¡¡. 8
.
¡¡8 9
	Transport
¡¡9 B
.
¡¡B C
TLS
¡¡C F
.
¡¡F G,
SecureNetworkProtocolParameter
¡¡G e
)
¡¡e f
)
¡¡f g
{
¬¬ 
var
√√ 
p
√√ 
=
√√ 
(
√√ 
Unity
√√ "
.
√√" #

Networking
√√# -
.
√√- .
	Transport
√√. 7
.
√√7 8
TLS
√√8 ;
.
√√; <,
SecureNetworkProtocolParameter
√√< Z
)
√√Z [
	parameter
√√[ d
;
√√d e
if
≈≈ 
(
≈≈ 
p
≈≈ 
.
≈≈ $
SSLHandshakeTimeoutMin
≈≈ 0
==
≈≈1 3
$num
≈≈4 5
)
≈≈5 6
p
∆∆ 
.
∆∆ $
SSLHandshakeTimeoutMin
∆∆ 0
=
∆∆1 2
Unity
∆∆3 8
.
∆∆8 9

Networking
∆∆9 C
.
∆∆C D
	Transport
∆∆D M
.
∆∆M N
TLS
∆∆N Q
.
∆∆Q R#
SecureNetworkProtocol
∆∆R g
.
∆∆g h
DefaultParameters
∆∆h y
.
∆∆y z%
SSLHandshakeTimeoutMin∆∆z ê
;∆∆ê ë
if
»» 
(
»» 
p
»» 
.
»» $
SSLHandshakeTimeoutMax
»» 0
==
»»1 3
$num
»»4 5
)
»»5 6
p
…… 
.
…… $
SSLHandshakeTimeoutMax
…… 0
=
……1 2
Unity
……3 8
.
……8 9

Networking
……9 C
.
……C D
	Transport
……D M
.
……M N
TLS
……N Q
.
……Q R#
SecureNetworkProtocol
……R g
.
……g h
DefaultParameters
……h y
.
……y z%
SSLHandshakeTimeoutMax……z ê
;……ê ë
	parameter
ÀÀ 
=
ÀÀ 
p
ÀÀ  !
;
ÀÀ! "
}
ÃÃ 
try
œœ 
{
–– &
ValidateParameterOrError
—— ,
(
——, -
ref
——- 0
	parameter
——1 :
)
——: ;
;
——; <
}
““ 
catch
”” 
(
”” 
	Exception
””  
e
””! "
)
””" #
{
‘‘ 
networkParameters
’’ %
.
’’% &
Dispose
’’& -
(
’’- .
)
’’. /
;
’’/ 0
throw
÷÷ 
e
÷÷ 
;
÷÷ 
}
◊◊ 
var
ŸŸ 
typeHash
ŸŸ 
=
ŸŸ 
BurstRuntime
ŸŸ +
.
ŸŸ+ ,
GetHashCode64
ŸŸ, 9
(
ŸŸ9 :
type
ŸŸ: >
)
ŸŸ> ?
;
ŸŸ? @
var
⁄⁄ 
parameterSlice
⁄⁄ "
=
⁄⁄# $
new
⁄⁄% (
ParameterSlice
⁄⁄) 7
{
€€ 
Offset
‹‹ 
=
‹‹ 
networkParameters
‹‹ .
.
‹‹. /
m_Parameters
‹‹/ ;
.
‹‹; <
Length
‹‹< B
,
‹‹B C
Size
›› 
=
›› 
UnsafeUtility
›› (
.
››( )
SizeOf
››) /
(
››/ 0
type
››0 4
)
››4 5
,
››5 6
}
ﬁﬁ 
;
ﬁﬁ 
networkParameters
‡‡ !
.
‡‡! " 
m_ParameterOffsets
‡‡" 4
.
‡‡4 5
Add
‡‡5 8
(
‡‡8 9
typeHash
‡‡9 A
,
‡‡A B
parameterSlice
‡‡C Q
)
‡‡Q R
;
‡‡R S
networkParameters
·· !
.
··! "
m_Parameters
··" .
.
··. /
Resize
··/ 5
(
··5 6
networkParameters
··6 G
.
··G H
m_Parameters
··H T
.
··T U
Length
··U [
+
··\ ]
parameterSlice
··^ l
.
··l m
Size
··m q
,
··q r!
NativeArrayOptions··s Ö
.··Ö Ü#
UninitializedMemory··Ü ô
)··ô ö
;··ö õ
var
„„ 
valuePtr
„„ 
=
„„ 
(
„„  
(
„„  !
byte
„„! %
*
„„% &
)
„„& '
networkParameters
„„' 8
.
„„8 9
m_Parameters
„„9 E
.
„„E F
GetUnsafePtr
„„F R
<
„„R S
byte
„„S W
>
„„W X
(
„„X Y
)
„„Y Z
+
„„[ \
parameterSlice
„„] k
.
„„k l
Offset
„„l r
)
„„r s
;
„„s t
var
‰‰ 
parameterPtr
‰‰  
=
‰‰! "
(
‰‰# $
byte
‰‰$ (
*
‰‰( )
)
‰‰) *
UnsafeUtility
‰‰* 7
.
‰‰7 8&
PinGCObjectAndGetAddress
‰‰8 P
(
‰‰P Q
	parameter
‰‰Q Z
,
‰‰Z [
out
‰‰\ _
var
‰‰` c
gcHandle
‰‰d l
)
‰‰l m
+
‰‰n o!
ObjectHeaderOffset‰‰p Ç
;‰‰Ç É
UnsafeUtility
ÊÊ 
.
ÊÊ 
MemCpy
ÊÊ $
(
ÊÊ$ %
valuePtr
ÊÊ% -
,
ÊÊ- .
parameterPtr
ÊÊ/ ;
,
ÊÊ; <
parameterSlice
ÊÊ= K
.
ÊÊK L
Size
ÊÊL P
)
ÊÊP Q
;
ÊÊQ R
UnsafeUtility
ÁÁ 
.
ÁÁ 
ReleaseGCObject
ÁÁ -
(
ÁÁ- .
gcHandle
ÁÁ. 6
)
ÁÁ6 7
;
ÁÁ7 8
}
ËË 
return
ÍÍ 
networkParameters
ÍÍ $
;
ÍÍ$ %
}
ÎÎ 	
internal
ÌÌ 
unsafe
ÌÌ 
bool
ÌÌ 
TryGet
ÌÌ #
(
ÌÌ# $
Type
ÌÌ$ (
parameterType
ÌÌ) 6
,
ÌÌ6 7
out
ÌÌ8 ;
INetworkParameter
ÌÌ< M
	parameter
ÌÌN W
)
ÌÌW X
{
ÓÓ 	
	parameter
ÔÔ 
=
ÔÔ 
default
ÔÔ 
;
ÔÔ  
if
ÒÒ 
(
ÒÒ 
!
ÒÒ 
m_Parameters
ÒÒ 
.
ÒÒ 
	IsCreated
ÒÒ '
)
ÒÒ' (
return
ÚÚ 
false
ÚÚ 
;
ÚÚ 
var
ÙÙ 
typeHash
ÙÙ 
=
ÙÙ 
BurstRuntime
ÙÙ '
.
ÙÙ' (
GetHashCode64
ÙÙ( 5
(
ÙÙ5 6
parameterType
ÙÙ6 C
)
ÙÙC D
;
ÙÙD E
if
ˆˆ 
(
ˆˆ  
m_ParameterOffsets
ˆˆ "
.
ˆˆ" #
TryGetValue
ˆˆ# .
(
ˆˆ. /
typeHash
ˆˆ/ 7
,
ˆˆ7 8
out
ˆˆ9 <
var
ˆˆ= @
parameterSlice
ˆˆA O
)
ˆˆO P
)
ˆˆP Q
{
˜˜ 
if
˘˘ 
(
˘˘ 
UnsafeUtility
˘˘ !
.
˘˘! "
SizeOf
˘˘" (
(
˘˘( )
parameterType
˘˘) 6
)
˘˘6 7
!=
˘˘8 :
parameterSlice
˘˘; I
.
˘˘I J
Size
˘˘J N
)
˘˘N O
throw
˙˙ 
new
˙˙ 
ArgumentException
˙˙ /
(
˙˙/ 0
$"
˙˙0 2
$str
˙˙2 Q
{
˙˙Q R
parameterType
˙˙R _
}
˙˙_ `
$str
˙˙` b
{
˙˙b c
UnsafeUtility
˙˙c p
.
˙˙p q
SizeOf
˙˙q w
(
˙˙w x
parameterType˙˙x Ö
)˙˙Ö Ü
}˙˙Ü á
$str˙˙á ™
{˙˙™ ´
parameterSlice˙˙´ π
.˙˙π ∫
Size˙˙∫ æ
}˙˙æ ø
$str˙˙ø ¿
"˙˙¿ ¡
)˙˙¡ ¬
;˙˙¬ √
if
¸¸ 
(
¸¸ 
m_Parameters
¸¸  
.
¸¸  !
Length
¸¸! '
<
¸¸( )
parameterSlice
¸¸* 8
.
¸¸8 9
Offset
¸¸9 ?
+
¸¸@ A
parameterSlice
¸¸B P
.
¸¸P Q
Size
¸¸Q U
)
¸¸U V
throw
˝˝ 
new
˝˝ 
OverflowException
˝˝ /
(
˝˝/ 0
$"
˝˝0 2
$str
˝˝2 z
"
˝˝z {
)
˝˝{ |
;
˝˝| }
	parameter
ˇˇ 
=
ˇˇ 
	Activator
ˇˇ %
.
ˇˇ% &
CreateInstance
ˇˇ& 4
(
ˇˇ4 5
parameterType
ˇˇ5 B
)
ˇˇB C
as
ˇˇD F
INetworkParameter
ˇˇG X
;
ˇˇX Y
var
ÄÄ 
parameterPtr
ÄÄ  
=
ÄÄ! "
(
ÄÄ# $
byte
ÄÄ$ (
*
ÄÄ( )
)
ÄÄ) *
UnsafeUtility
ÄÄ* 7
.
ÄÄ7 8&
PinGCObjectAndGetAddress
ÄÄ8 P
(
ÄÄP Q
	parameter
ÄÄQ Z
,
ÄÄZ [
out
ÄÄ\ _
var
ÄÄ` c
gcHandle
ÄÄd l
)
ÄÄl m
+
ÄÄn o!
ObjectHeaderOffsetÄÄp Ç
;ÄÄÇ É
UnsafeUtility
ÅÅ 
.
ÅÅ 
MemCpy
ÅÅ $
(
ÅÅ$ %
parameterPtr
ÅÅ% 1
,
ÅÅ1 2
(
ÅÅ3 4
byte
ÅÅ4 8
*
ÅÅ8 9
)
ÅÅ9 :
m_Parameters
ÅÅ: F
.
ÅÅF G"
GetUnsafeReadOnlyPtr
ÅÅG [
<
ÅÅ[ \
byte
ÅÅ\ `
>
ÅÅ` a
(
ÅÅa b
)
ÅÅb c
+
ÅÅd e
parameterSlice
ÅÅf t
.
ÅÅt u
Offset
ÅÅu {
,
ÅÅ{ |
parameterSliceÅÅ} ã
.ÅÅã å
SizeÅÅå ê
)ÅÅê ë
;ÅÅë í
UnsafeUtility
ÇÇ 
.
ÇÇ 
ReleaseGCObject
ÇÇ -
(
ÇÇ- .
gcHandle
ÇÇ. 6
)
ÇÇ6 7
;
ÇÇ7 8
return
ÉÉ 
true
ÉÉ 
;
ÉÉ 
}
ÑÑ 
return
ÜÜ 
false
ÜÜ 
;
ÜÜ 
}
áá 	
internal
ââ 
static
ââ 
int
ââ  
ObjectHeaderOffset
ââ .
=>
ââ/ 1
UnsafeUtility
ââ2 ?
.
ââ? @
SizeOf
ââ@ F
<
ââF G
ObjectOffsetType
ââG W
>
ââW X
(
ââX Y
)
ââY Z
;
ââZ [
private
ãã 
unsafe
ãã 
struct
ãã 
ObjectOffsetType
ãã .
{
åå 	
void
çç 
*
çç 
v0
çç 
;
çç 
void
èè 
*
èè 
v1
èè 
;
èè 
}
ëë 	
}
ïï 
}ññ Ö÷
eC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Pipelines\SimulatorUtility.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
	Utilities% .
{ 
public 

static 
class -
!SimulatorStageParameterExtensions 9
{ 
public 
static 
ref 
NetworkSettings )(
WithSimulatorStageParameters* F
(F G
ref 
this 
NetworkSettings $
settings% -
,- .
int 
maxPacketCount 
, 
int 
maxPacketSize 
, 
int 
packetDelayMs 
= 
$num  !
,! "
int 
packetJitterMs 
=  
$num! "
," #
int 
packetDropInterval "
=# $
$num% &
,& '
int  
packetDropPercentage $
=% &
$num' (
,( )
int 

fuzzFactor 
= 
$num 
, 
int 

fuzzOffset 
= 
$num 
, 
uint 

randomSeed 
= 
$num 
)   	
{!! 	
var"" 
	parameter"" 
="" 
new"" 
SimulatorUtility""  0
.""0 1

Parameters""1 ;
{## 
MaxPacketCount$$ 
=$$  
maxPacketCount$$! /
,$$/ 0
MaxPacketSize%% 
=%% 
maxPacketSize%%  -
,%%- .
PacketDelayMs&& 
=&& 
packetDelayMs&&  -
,&&- .
PacketJitterMs'' 
=''  
packetJitterMs''! /
,''/ 0
PacketDropInterval(( "
=((# $
packetDropInterval((% 7
,((7 8 
PacketDropPercentage)) $
=))% & 
packetDropPercentage))' ;
,)); <

FuzzFactor** 
=** 

fuzzFactor** '
,**' (

FuzzOffset++ 
=++ 

fuzzOffset++ '
,++' (

RandomSeed,, 
=,, 

randomSeed,, '
,,,' (
}-- 
;-- 
settings// 
.// !
AddRawParameterStruct// *
(//* +
ref//+ .
	parameter/// 8
)//8 9
;//9 :
return11 
ref11 
settings11 
;11  
}22 	
public88 
static88 
SimulatorUtility88 &
.88& '

Parameters88' 1'
GetSimulatorStageParameters882 M
(88M N
ref88N Q
this88R V
NetworkSettings88W f
settings88g o
)88o p
{99 	
settings<< 
.<< 
TryGet<< 
<<< 
SimulatorUtility<< ,
.<<, -

Parameters<<- 7
><<7 8
(<<8 9
out<<9 <
var<<= @

parameters<<A K
)<<K L
;<<L M
return== 

parameters== 
;== 
}>> 	
}?? 
publicAA 

structAA 
SimulatorUtilityAA "
{BB 
privateCC 
intCC 
m_PacketCountCC !
;CC! "
privateDD 
intDD 
m_MaxPacketSizeDD #
;DD# $
privateEE 
intEE 
m_PacketDelayMsEE #
;EE# $
privateFF 
intFF 
m_PacketJitterMsFF $
;FF$ %
[KK 	
StructLayoutKK	 
(KK 

LayoutKindKK  
.KK  !

SequentialKK! +
)KK+ ,
]KK, -
publicLL 
structLL 

ParametersLL  
:LL! "
INetworkParameterLL# 4
{MM 	
publicSS 
intSS 
MaxPacketCountSS %
;SS% &
publicXX 
intXX 
MaxPacketSizeXX $
;XX$ %
public\\ 
int\\ 
PacketDelayMs\\ $
;\\$ %
public`` 
int`` 
PacketJitterMs`` %
;``% &
publicff 
intff 
PacketDropIntervalff )
;ff) *
publicll 
intll  
PacketDropPercentagell +
;ll+ ,
publicss 
intss 

FuzzFactorss !
;ss! "
publicxx 
intxx 

FuzzOffsetxx !
;xx! "
public}} 
uint}} 

RandomSeed}} "
;}}" #
public 
bool 
Validate  
(  !
)! "
=># %
true& *
;* +
}
ÄÄ 	
[
ÇÇ 	
StructLayout
ÇÇ	 
(
ÇÇ 

LayoutKind
ÇÇ  
.
ÇÇ  !

Sequential
ÇÇ! +
)
ÇÇ+ ,
]
ÇÇ, -
public
ÉÉ 
struct
ÉÉ 
Context
ÉÉ 
{
ÑÑ 	
public
ÖÖ 
int
ÖÖ 
MaxPacketCount
ÖÖ %
;
ÖÖ% &
public
ÜÜ 
int
ÜÜ 
MaxPacketSize
ÜÜ $
;
ÜÜ$ %
public
áá 
int
áá 
PacketDelayMs
áá $
;
áá$ %
public
àà 
int
àà 
PacketJitterMs
àà %
;
àà% &
public
ââ 
int
ââ 

PacketDrop
ââ !
;
ââ! "
public
ää 
int
ää 

FuzzOffset
ää !
;
ää! "
public
ãã 
int
ãã 

FuzzFactor
ãã !
;
ãã! "
public
çç 
uint
çç 

RandomSeed
çç "
;
çç" #
public
éé 
Random
éé 
Random
éé  
;
éé  !
public
ëë 
int
ëë 
PacketCount
ëë "
;
ëë" #
public
íí 
int
íí 
PacketDropCount
íí &
;
íí& '
public
ìì 
int
ìì 
ReadyPackets
ìì #
;
ìì# $
public
îî 
int
îî 
WaitingPackets
îî %
;
îî% &
public
ïï 
long
ïï 
NextPacketTime
ïï &
;
ïï& '
public
ññ 
long
ññ 
	StatsTime
ññ !
;
ññ! "
}
óó 	
[
ôô 	
StructLayout
ôô	 
(
ôô 

LayoutKind
ôô  
.
ôô  !

Sequential
ôô! +
)
ôô+ ,
]
ôô, -
public
öö 
struct
öö 
DelayedPacket
öö #
{
õõ 	
public
úú 
int
úú !
processBufferOffset
úú *
;
úú* +
public
ùù 
ushort
ùù 

packetSize
ùù $
;
ùù$ %
public
ûû 
ushort
ûû !
packetHeaderPadding
ûû -
;
ûû- .
public
üü 
long
üü 

delayUntil
üü "
;
üü" #
}
†† 	
public
¢¢ 
SimulatorUtility
¢¢ 
(
¢¢  
int
¢¢  #
packetCount
¢¢$ /
,
¢¢/ 0
int
¢¢1 4
maxPacketSize
¢¢5 B
,
¢¢B C
int
¢¢D G
packetDelayMs
¢¢H U
,
¢¢U V
int
¢¢W Z
packetJitterMs
¢¢[ i
)
¢¢i j
{
££ 	
m_PacketCount
§§ 
=
§§ 
packetCount
§§ '
;
§§' (
m_MaxPacketSize
•• 
=
•• 
maxPacketSize
•• +
;
••+ ,
m_PacketDelayMs
¶¶ 
=
¶¶ 
packetDelayMs
¶¶ +
;
¶¶+ ,
m_PacketJitterMs
ßß 
=
ßß 
packetJitterMs
ßß -
;
ßß- .
}
®® 	
public
™™ 
static
™™ 
unsafe
™™ 
void
™™ !
InitializeContext
™™" 3
(
™™3 4

Parameters
™™4 >
param
™™? D
,
™™D E
byte
™™F J
*
™™J K!
sharedProcessBuffer
™™L _
)
™™_ `
{
´´ 	
Context
≠≠ 
*
≠≠ 
ctx
≠≠ 
=
≠≠ 
(
≠≠ 
Context
≠≠ #
*
≠≠# $
)
≠≠$ %!
sharedProcessBuffer
≠≠% 8
;
≠≠8 9
ctx
ÆÆ 
->
ÆÆ 
MaxPacketCount
ÆÆ 
=
ÆÆ  !
param
ÆÆ" '
.
ÆÆ' (
MaxPacketCount
ÆÆ( 6
;
ÆÆ6 7
ctx
ØØ 
->
ØØ 
MaxPacketSize
ØØ 
=
ØØ  
param
ØØ! &
.
ØØ& '
MaxPacketSize
ØØ' 4
;
ØØ4 5
ctx
∞∞ 
->
∞∞ 
PacketDelayMs
∞∞ 
=
∞∞  
param
∞∞! &
.
∞∞& '
PacketDelayMs
∞∞' 4
;
∞∞4 5
ctx
±± 
->
±± 
PacketJitterMs
±± 
=
±±  !
param
±±" '
.
±±' (
PacketJitterMs
±±( 6
;
±±6 7
ctx
≤≤ 
->
≤≤ 

PacketDrop
≤≤ 
=
≤≤ 
param
≤≤ #
.
≤≤# $ 
PacketDropInterval
≤≤$ 6
;
≤≤6 7
ctx
≥≥ 
->
≥≥ 

FuzzFactor
≥≥ 
=
≥≥ 
param
≥≥ #
.
≥≥# $

FuzzFactor
≥≥$ .
;
≥≥. /
ctx
¥¥ 
->
¥¥ 

FuzzOffset
¥¥ 
=
¥¥ 
param
¥¥ #
.
¥¥# $

FuzzOffset
¥¥$ .
;
¥¥. /
ctx
µµ 
->
µµ 
PacketCount
µµ 
=
µµ 
$num
µµ  
;
µµ  !
ctx
∂∂ 
->
∂∂ 
PacketDropCount
∂∂  
=
∂∂! "
$num
∂∂# $
;
∂∂$ %
ctx
∑∑ 
->
∑∑ 
Random
∑∑ 
=
∑∑ 
new
∑∑ 
Random
∑∑ $
(
∑∑$ %
)
∑∑% &
;
∑∑& '
if
∏∏ 
(
∏∏ 
param
∏∏ 
.
∏∏ 

RandomSeed
∏∏  
>
∏∏! "
$num
∏∏# $
)
∏∏$ %
{
ππ 
ctx
∫∫ 
->
∫∫ 
Random
∫∫ 
.
∫∫ 
	InitState
∫∫ %
(
∫∫% &
param
∫∫& +
.
∫∫+ ,

RandomSeed
∫∫, 6
)
∫∫6 7
;
∫∫7 8
ctx
ªª 
->
ªª 

RandomSeed
ªª 
=
ªª  !
param
ªª" '
.
ªª' (

RandomSeed
ªª( 2
;
ªª2 3
}
ºº 
else
ΩΩ 
ctx
ææ 
->
ææ 
Random
ææ 
.
ææ 
	InitState
ææ %
(
ææ% &
)
ææ& '
;
ææ' (
}
øø 	
public
¡¡ 
unsafe
¡¡ 
bool
¡¡ 
GetEmptyDataSlot
¡¡ +
(
¡¡+ ,
byte
¡¡, 0
*
¡¡0 1
processBufferPtr
¡¡2 B
,
¡¡B C
ref
¡¡D G
int
¡¡H K!
packetPayloadOffset
¡¡L _
,
¡¡_ `
ref
¬¬ 
int
¬¬ 
packetDataOffset
¬¬ $
)
¬¬$ %
{
√√ 	
var
ƒƒ 
dataSize
ƒƒ 
=
ƒƒ 
UnsafeUtility
ƒƒ (
.
ƒƒ( )
SizeOf
ƒƒ) /
<
ƒƒ/ 0
DelayedPacket
ƒƒ0 =
>
ƒƒ= >
(
ƒƒ> ?
)
ƒƒ? @
;
ƒƒ@ A
var
≈≈ &
packetPayloadStartOffset
≈≈ (
=
≈≈) *
m_PacketCount
≈≈+ 8
*
≈≈9 :
dataSize
≈≈; C
;
≈≈C D
bool
«« 
	foundSlot
«« 
=
«« 
false
«« "
;
««" #
for
»» 
(
»» 
int
»» 
i
»» 
=
»» 
$num
»» 
;
»» 
i
»» 
<
»» 
m_PacketCount
»»  -
;
»»- .
i
»»/ 0
++
»»0 2
)
»»2 3
{
…… 
packetDataOffset
    
=
  ! "
dataSize
  # +
*
  , -
i
  . /
;
  / 0
DelayedPacket
ÀÀ 
*
ÀÀ 

packetData
ÀÀ )
=
ÀÀ* +
(
ÀÀ, -
DelayedPacket
ÀÀ- :
*
ÀÀ: ;
)
ÀÀ; <
(
ÀÀ< =
processBufferPtr
ÀÀ= M
+
ÀÀN O
packetDataOffset
ÀÀP `
)
ÀÀ` a
;
ÀÀa b
if
ŒŒ 
(
ŒŒ 

packetData
ŒŒ 
->
ŒŒ  

delayUntil
ŒŒ  *
==
ŒŒ+ -
$num
ŒŒ. /
)
ŒŒ/ 0
{
œœ 
	foundSlot
–– 
=
–– 
true
––  $
;
––$ %!
packetPayloadOffset
—— '
=
——( )&
packetPayloadStartOffset
——* B
+
——C D
m_MaxPacketSize
——E T
*
——U V
i
——W X
;
——X Y
break
““ 
;
““ 
}
”” 
}
‘‘ 
return
÷÷ 
	foundSlot
÷÷ 
;
÷÷ 
}
◊◊ 	
public
ŸŸ 
unsafe
ŸŸ 
bool
ŸŸ 
GetDelayedPacket
ŸŸ +
(
ŸŸ+ ,
ref
ŸŸ, /$
NetworkPipelineContext
ŸŸ0 F
ctx
ŸŸG J
,
ŸŸJ K
ref
ŸŸL O
InboundSendBuffer
ŸŸP a
delayedPacket
ŸŸb o
,
ŸŸo p
ref
⁄⁄ "
NetworkPipelineStage
⁄⁄ $
.
⁄⁄$ %
Requests
⁄⁄% -
requests
⁄⁄. 6
,
⁄⁄6 7
long
⁄⁄8 <
currentTimestamp
⁄⁄= M
)
⁄⁄M N
{
€€ 	
requests
‹‹ 
=
‹‹ "
NetworkPipelineStage
‹‹ +
.
‹‹+ ,
Requests
‹‹, 4
.
‹‹4 5
None
‹‹5 9
;
‹‹9 :
var
ﬁﬁ 
dataSize
ﬁﬁ 
=
ﬁﬁ 
UnsafeUtility
ﬁﬁ (
.
ﬁﬁ( )
SizeOf
ﬁﬁ) /
<
ﬁﬁ/ 0
DelayedPacket
ﬁﬁ0 =
>
ﬁﬁ= >
(
ﬁﬁ> ?
)
ﬁﬁ? @
;
ﬁﬁ@ A
byte
ﬂﬂ 
*
ﬂﬂ 
processBufferPtr
ﬂﬂ "
=
ﬂﬂ# $
(
ﬂﬂ% &
byte
ﬂﬂ& *
*
ﬂﬂ* +
)
ﬂﬂ+ ,
ctx
ﬂﬂ, /
.
ﬂﬂ/ 0#
internalProcessBuffer
ﬂﬂ0 E
;
ﬂﬂE F
var
‡‡ 
simCtx
‡‡ 
=
‡‡ 
(
‡‡ 
Context
‡‡ !
*
‡‡! "
)
‡‡" #
ctx
‡‡# &
.
‡‡& ')
internalSharedProcessBuffer
‡‡' B
;
‡‡B C
int
·· 
oldestPacketIndex
·· !
=
··" #
-
··$ %
$num
··% &
;
··& '
long
‚‚ 

oldestTime
‚‚ 
=
‚‚ 
long
‚‚ "
.
‚‚" #
MaxValue
‚‚# +
;
‚‚+ ,
int
„„ 
readyPackets
„„ 
=
„„ 
$num
„„  
;
„„  !
int
‰‰ 
packetsInQueue
‰‰ 
=
‰‰  
$num
‰‰! "
;
‰‰" #
for
ÂÂ 
(
ÂÂ 
int
ÂÂ 
i
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
;
ÂÂ 
i
ÂÂ 
<
ÂÂ 
m_PacketCount
ÂÂ  -
;
ÂÂ- .
i
ÂÂ/ 0
++
ÂÂ0 2
)
ÂÂ2 3
{
ÊÊ 
DelayedPacket
ÁÁ 
*
ÁÁ 
packet
ÁÁ %
=
ÁÁ& '
(
ÁÁ( )
DelayedPacket
ÁÁ) 6
*
ÁÁ6 7
)
ÁÁ7 8
(
ÁÁ8 9
processBufferPtr
ÁÁ9 I
+
ÁÁJ K
dataSize
ÁÁL T
*
ÁÁU V
i
ÁÁW X
)
ÁÁX Y
;
ÁÁY Z
if
ËË 
(
ËË 
(
ËË 
int
ËË 
)
ËË 
packet
ËË 
->
ËË !

delayUntil
ËË! +
==
ËË, .
$num
ËË/ 0
)
ËË0 1
continue
ËË2 :
;
ËË: ;
packetsInQueue
ÈÈ 
++
ÈÈ  
;
ÈÈ  !
if
ÎÎ 
(
ÎÎ 
packet
ÎÎ 
->
ÎÎ 

delayUntil
ÎÎ &
>
ÎÎ' (
currentTimestamp
ÎÎ) 9
)
ÎÎ9 :
continue
ÎÎ; C
;
ÎÎC D
readyPackets
ÏÏ 
++
ÏÏ 
;
ÏÏ 
if
ÓÓ 
(
ÓÓ 

oldestTime
ÓÓ 
<=
ÓÓ !
packet
ÓÓ" (
->
ÓÓ( *

delayUntil
ÓÓ* 4
)
ÓÓ4 5
continue
ÓÓ6 >
;
ÓÓ> ?
oldestPacketIndex
ÔÔ !
=
ÔÔ" #
i
ÔÔ$ %
;
ÔÔ% &

oldestTime
 
=
 
packet
 #
->
# %

delayUntil
% /
;
/ 0
}
ÒÒ 
simCtx
ÛÛ 
->
ÛÛ 
ReadyPackets
ÛÛ  
=
ÛÛ! "
readyPackets
ÛÛ# /
;
ÛÛ/ 0
simCtx
ÙÙ 
->
ÙÙ 
WaitingPackets
ÙÙ "
=
ÙÙ# $
packetsInQueue
ÙÙ% 3
;
ÙÙ3 4
simCtx
ıı 
->
ıı 
NextPacketTime
ıı "
=
ıı# $

oldestTime
ıı% /
;
ıı/ 0
simCtx
ˆˆ 
->
ˆˆ 
	StatsTime
ˆˆ 
=
ˆˆ 
currentTimestamp
ˆˆ  0
;
ˆˆ0 1
if
˘˘ 
(
˘˘ 
readyPackets
˘˘ 
>
˘˘ 
$num
˘˘  
)
˘˘  !
{
˙˙ 
requests
˚˚ 
|=
˚˚ "
NetworkPipelineStage
˚˚ 0
.
˚˚0 1
Requests
˚˚1 9
.
˚˚9 :
Resume
˚˚: @
;
˚˚@ A
}
¸¸ 
else
ˇˇ 
if
ˇˇ 
(
ˇˇ 
packetsInQueue
ˇˇ #
>
ˇˇ$ %
$num
ˇˇ& '
)
ˇˇ' (
{
ÄÄ 
requests
ÅÅ 
|=
ÅÅ "
NetworkPipelineStage
ÅÅ 0
.
ÅÅ0 1
Requests
ÅÅ1 9
.
ÅÅ9 :
Update
ÅÅ: @
;
ÅÅ@ A
}
ÇÇ 
if
ÑÑ 
(
ÑÑ 
oldestPacketIndex
ÑÑ !
>=
ÑÑ" $
$num
ÑÑ% &
)
ÑÑ& '
{
ÖÖ 
DelayedPacket
ÜÜ 
*
ÜÜ 
packet
ÜÜ %
=
ÜÜ& '
(
ÜÜ( )
DelayedPacket
ÜÜ) 6
*
ÜÜ6 7
)
ÜÜ7 8
(
ÜÜ8 9
processBufferPtr
ÜÜ9 I
+
ÜÜJ K
dataSize
ÜÜL T
*
ÜÜU V
oldestPacketIndex
ÜÜW h
)
ÜÜh i
;
ÜÜi j
packet
áá 
->
áá 

delayUntil
áá "
=
áá# $
$num
áá% &
;
áá& '
delayedPacket
ââ 
.
ââ 
bufferWithHeaders
ââ /
=
ââ0 1
ctx
ââ2 5
.
ââ5 6#
internalProcessBuffer
ââ6 K
+
ââL M
packet
ââN T
->
ââT V!
processBufferOffset
ââV i
;
ââi j
delayedPacket
ää 
.
ää %
bufferWithHeadersLength
ää 5
=
ää6 7
packet
ää8 >
->
ää> @

packetSize
ää@ J
;
ääJ K
delayedPacket
ãã 
.
ãã 
headerPadding
ãã +
=
ãã, -
packet
ãã. 4
->
ãã4 6!
packetHeaderPadding
ãã6 I
;
ããI J
delayedPacket
åå 
.
åå ,
SetBufferFrombufferWithHeaders
åå <
(
åå< =
)
åå= >
;
åå> ?
return
çç 
true
çç 
;
çç 
}
éé 
return
êê 
false
êê 
;
êê 
}
ëë 	
public
ìì 
unsafe
ìì 
void
ìì 

FuzzPacket
ìì %
(
ìì% &
Context
ìì& -
*
ìì. /
ctx
ìì/ 2
,
ìì2 3
ref
ìì4 7
InboundSendBuffer
ìì8 I
inboundBuffer
ììJ W
)
ììW X
{
îî 	
int
ïï 

fuzzFactor
ïï 
=
ïï 
ctx
ïï  
->
ïï  "

FuzzFactor
ïï" ,
;
ïï, -
int
ññ 

fuzzOffset
ññ 
=
ññ 
ctx
ññ  
->
ññ  "

FuzzOffset
ññ" ,
;
ññ, -
int
óó 
rand
óó 
=
óó 
ctx
óó 
->
óó 
Random
óó "
.
óó" #
NextInt
óó# *
(
óó* +
$num
óó+ ,
,
óó, -
$num
óó. 1
)
óó1 2
;
óó2 3
if
òò 
(
òò 
rand
òò 
>
òò 

fuzzFactor
òò !
)
òò! "
return
ôô 
;
ôô 
var
õõ 
length
õõ 
=
õõ 
inboundBuffer
õõ &
.
õõ& '
bufferLength
õõ' 3
;
õõ3 4
for
úú 
(
úú 
int
úú 
i
úú 
=
úú 

fuzzOffset
úú #
;
úú# $
i
úú% &
<
úú' (
length
úú) /
;
úú/ 0
++
úú1 3
i
úú3 4
)
úú4 5
{
ùù 
for
ûû 
(
ûû 
int
ûû 
j
ûû 
=
ûû 
$num
ûû 
;
ûû 
j
ûû  !
<
ûû" #
$num
ûû$ %
;
ûû% &
++
ûû' )
j
ûû) *
)
ûû* +
{
üü 
if
†† 
(
†† 

fuzzFactor
†† "
>
††# $
ctx
††% (
->
††( *
Random
††* 0
.
††0 1
NextInt
††1 8
(
††8 9
$num
††9 :
,
††: ;
$num
††< ?
)
††? @
)
††@ A
{
°° 
inboundBuffer
¢¢ %
.
¢¢% &
buffer
¢¢& ,
[
¢¢, -
i
¢¢- .
]
¢¢. /
^=
¢¢0 2
(
¢¢3 4
byte
¢¢4 8
)
¢¢8 9
(
¢¢9 :
$num
¢¢: ;
<<
¢¢< >
j
¢¢? @
)
¢¢@ A
;
¢¢A B
}
££ 
}
§§ 
}
•• 
}
¶¶ 	
public
®® 
unsafe
®® 
bool
®® 
DelayPacket
®® &
(
®®& '
ref
®®' *$
NetworkPipelineContext
®®+ A
ctx
®®B E
,
®®E F
InboundSendBuffer
®®G X
inboundBuffer
®®Y f
,
®®f g
ref
©© "
NetworkPipelineStage
©© $
.
©©$ %
Requests
©©% -
requests
©©. 6
,
©©6 7
long
™™ 
	timestamp
™™ 
)
™™ 
{
´´ 	
int
≠≠ !
packetPayloadOffset
≠≠ #
=
≠≠$ %
$num
≠≠& '
;
≠≠' (
int
ÆÆ 
packetDataOffset
ÆÆ  
=
ÆÆ! "
$num
ÆÆ# $
;
ÆÆ$ %
var
ØØ 
processBufferPtr
ØØ  
=
ØØ! "
(
ØØ# $
byte
ØØ$ (
*
ØØ( )
)
ØØ) *
ctx
ØØ* -
.
ØØ- .#
internalProcessBuffer
ØØ. C
;
ØØC D
bool
∞∞ 
	foundSlot
∞∞ 
=
∞∞ 
GetEmptyDataSlot
∞∞ -
(
∞∞- .
processBufferPtr
∞∞. >
,
∞∞> ?
ref
∞∞@ C!
packetPayloadOffset
∞∞D W
,
∞∞W X
ref
∞∞Y \
packetDataOffset
∞∞] m
)
∞∞m n
;
∞∞n o
if
≤≤ 
(
≤≤ 
!
≤≤ 
	foundSlot
≤≤ 
)
≤≤ 
{
≥≥ 
return
µµ 
false
µµ 
;
µµ 
}
∂∂ 
UnsafeUtility
∏∏ 
.
∏∏ 
MemCpy
∏∏  
(
∏∏  !
ctx
∏∏! $
.
∏∏$ %#
internalProcessBuffer
∏∏% :
+
∏∏; <!
packetPayloadOffset
∏∏= P
+
∏∏Q R
inboundBuffer
∏∏S `
.
∏∏` a
headerPadding
∏∏a n
,
∏∏n o
inboundBuffer
∏∏p }
.
∏∏} ~
buffer∏∏~ Ñ
,∏∏Ñ Ö
inboundBuffer∏∏Ü ì
.∏∏ì î
bufferLength∏∏î †
)∏∏† °
;∏∏° ¢
var
∫∫ 
param
∫∫ 
=
∫∫ 
(
∫∫ 
SimulatorUtility
∫∫ )
.
∫∫) *
Context
∫∫* 1
*
∫∫1 2
)
∫∫2 3
ctx
∫∫3 6
.
∫∫6 7)
internalSharedProcessBuffer
∫∫7 R
;
∫∫R S
DelayedPacket
ºº 
packet
ºº  
;
ºº  !
packet
ΩΩ 
.
ΩΩ 

delayUntil
ΩΩ 
=
ΩΩ 
	timestamp
ΩΩ  )
+
ΩΩ* +
m_PacketDelayMs
ΩΩ, ;
+
ΩΩ< =
param
ΩΩ> C
->
ΩΩC E
Random
ΩΩE K
.
ΩΩK L
NextInt
ΩΩL S
(
ΩΩS T
m_PacketJitterMs
ΩΩT d
*
ΩΩe f
$num
ΩΩg h
)
ΩΩh i
-
ΩΩj k
m_PacketJitterMs
ΩΩl |
;
ΩΩ| }
packet
ææ 
.
ææ !
processBufferOffset
ææ &
=
ææ' (!
packetPayloadOffset
ææ) <
;
ææ< =
packet
øø 
.
øø 

packetSize
øø 
=
øø 
(
øø  !
ushort
øø! '
)
øø' (
(
øø( )
inboundBuffer
øø) 6
.
øø6 7
headerPadding
øø7 D
+
øøE F
inboundBuffer
øøG T
.
øøT U
bufferLength
øøU a
)
øøa b
;
øøb c
packet
¿¿ 
.
¿¿ !
packetHeaderPadding
¿¿ &
=
¿¿' (
(
¿¿) *
ushort
¿¿* 0
)
¿¿0 1
inboundBuffer
¿¿1 >
.
¿¿> ?
headerPadding
¿¿? L
;
¿¿L M
byte
¡¡ 
*
¡¡ 
	packetPtr
¡¡ 
=
¡¡ 
(
¡¡ 
byte
¡¡ #
*
¡¡# $
)
¡¡$ %
&
¡¡% &
packet
¡¡& ,
;
¡¡, -
UnsafeUtility
¬¬ 
.
¬¬ 
MemCpy
¬¬  
(
¬¬  !
processBufferPtr
¬¬! 1
+
¬¬2 3
packetDataOffset
¬¬4 D
,
¬¬D E
	packetPtr
¬¬F O
,
¬¬O P
UnsafeUtility
¬¬Q ^
.
¬¬^ _
SizeOf
¬¬_ e
<
¬¬e f
DelayedPacket
¬¬f s
>
¬¬s t
(
¬¬t u
)
¬¬u v
)
¬¬v w
;
¬¬w x
requests
≈≈ 
|=
≈≈ "
NetworkPipelineStage
≈≈ ,
.
≈≈, -
Requests
≈≈- 5
.
≈≈5 6
Update
≈≈6 <
;
≈≈< =
return
∆∆ 
true
∆∆ 
;
∆∆ 
}
«« 	
public
…… 
unsafe
…… 
bool
…… 
ShouldDropPacket
…… +
(
……+ ,
Context
……, 3
*
……3 4
ctx
……5 8
,
……8 9

Parameters
……: D
param
……E J
,
……J K
long
……L P
	timestamp
……Q Z
)
……Z [
{
   	
if
ÀÀ 
(
ÀÀ 
param
ÀÀ 
.
ÀÀ  
PacketDropInterval
ÀÀ (
>
ÀÀ) *
$num
ÀÀ+ ,
&&
ÀÀ- /
(
ÀÀ0 1
(
ÀÀ1 2
ctx
ÀÀ2 5
->
ÀÀ5 7
PacketCount
ÀÀ7 B
-
ÀÀC D
$num
ÀÀE F
)
ÀÀF G
%
ÀÀH I
param
ÀÀJ O
.
ÀÀO P 
PacketDropInterval
ÀÀP b
)
ÀÀb c
==
ÀÀd f
$num
ÀÀg h
)
ÀÀh i
return
ÃÃ 
true
ÃÃ 
;
ÃÃ 
if
ÕÕ 
(
ÕÕ 
param
ÕÕ 
.
ÕÕ "
PacketDropPercentage
ÕÕ *
>
ÕÕ+ ,
$num
ÕÕ- .
)
ÕÕ. /
{
ŒŒ 
var
–– 

packetLoss
–– 
=
––  
ctx
––! $
->
––$ &
Random
––& ,
.
––, -
NextInt
––- 4
(
––4 5
$num
––5 6
,
––6 7
$num
––8 ;
)
––; <
;
––< =
if
—— 
(
—— 

packetLoss
—— 
<
——  
param
——! &
.
——& '"
PacketDropPercentage
——' ;
)
——; <
return
““ 
true
““ 
;
““  
}
”” 
return
’’ 
false
’’ 
;
’’ 
}
÷÷ 	
}
◊◊ 
}ÿÿ ú*
bC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\RelayAllocationId.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
public

 

unsafe

 
struct

 
RelayAllocationId

 *
:

+ ,

IEquatable

- 7
<

7 8
RelayAllocationId

8 I
>

I J
,

J K
IComparable

L W
<

W X
RelayAllocationId

X i
>

i j
{ 
public 
const 
int 
k_Length !
=" #
$num$ &
;& '
public 
fixed 
byte 
Value 
[  
k_Length  (
]( )
;) *
public 
static 
RelayAllocationId '
FromBytePointer( 7
(7 8
byte8 <
*< =
dataPtr> E
,E F
intG J
lengthK Q
)Q R
{ 	
if 
( 
length 
!= 
k_Length "
)" #
{   
throw"" 
new"" 
ArgumentException"" +
(""+ ,
$""", .
$str"". ]
{""] ^
k_Length""^ f
}""f g
$str""g p
{""p q
length""q w
}""w x
$str""x y
"""y z
)""z {
;""{ |
}'' 
var)) 
allocationId)) 
=)) 
new)) "
RelayAllocationId))# 4
())4 5
)))5 6
;))6 7
UnsafeUtility** 
.** 
MemCpy**  
(**  !
allocationId**! -
.**- .
Value**. 3
,**3 4
dataPtr**5 <
,**< =
k_Length**> F
)**F G
;**G H
return++ 
allocationId++ 
;++  
},, 	
public.. 
static.. 
bool.. 
operator.. #
==..# %
(..% &
RelayAllocationId..& 7
lhs..8 ;
,..; <
RelayAllocationId..= N
rhs..O R
)..R S
{// 	
return00 
lhs00 
.00 
Compare00 
(00 
rhs00 "
)00" #
==00$ &
$num00' (
;00( )
}11 	
public33 
static33 
bool33 
operator33 #
!=33# %
(33% &
RelayAllocationId33& 7
lhs338 ;
,33; <
RelayAllocationId33= N
rhs33O R
)33R S
{44 	
return55 
lhs55 
.55 
Compare55 
(55 
rhs55 "
)55" #
!=55$ &
$num55' (
;55( )
}66 	
public88 
bool88 
Equals88 
(88 
RelayAllocationId88 ,
other88- 2
)882 3
{99 	
return:: 
Compare:: 
(:: 
other::  
)::  !
==::" $
$num::% &
;::& '
};; 	
public== 
int== 
	CompareTo== 
(== 
RelayAllocationId== .
other==/ 4
)==4 5
{>> 	
return?? 
Compare?? 
(?? 
other??  
)??  !
;??! "
}@@ 	
publicBB 
overrideBB 
boolBB 
EqualsBB #
(BB# $
objectBB$ *
otherBB+ 0
)BB0 1
{CC 	
returnDD 
otherDD 
!=DD 
nullDD  
&&DD! #
thisDD$ (
==DD) +
(DD, -
RelayAllocationIdDD- >
)DD> ?
otherDD? D
;DDD E
}EE 	
publicGG 
overrideGG 
intGG 
GetHashCodeGG '
(GG' (
)GG( )
{HH 	
fixedII 
(II 
byteII 
*II 
pII 
=II 
ValueII !
)II! "
	uncheckedJJ 
{KK 
varLL 
resultLL 
=LL 
$numLL 
;LL 
forNN 
(NN 
intNN 
iNN 
=NN 
$numNN 
;NN 
iNN  !
<NN" #
k_LengthNN$ ,
;NN, -
iNN. /
++NN/ 1
)NN1 2
{OO 
resultPP 
=PP 
(PP 
resultPP $
*PP% &
$numPP' )
)PP) *
^PP+ ,
(PP- .
intPP. 1
)PP1 2
pPP2 3
[PP3 4
iPP4 5
]PP5 6
;PP6 7
}QQ 
returnSS 
resultSS 
;SS 
}TT 
}UU 	
intWW 
CompareWW 
(WW 
RelayAllocationIdWW %
otherWW& +
)WW+ ,
{XX 	
fixedYY 
(YY 
voidYY 
*YY 
pYY 
=YY 
ValueYY !
)YY! "
{ZZ 
return[[ 
UnsafeUtility[[ $
.[[$ %
MemCmp[[% +
([[+ ,
p[[, -
,[[- .
other[[/ 4
.[[4 5
Value[[5 :
,[[: ;
k_Length[[< D
)[[D E
;[[E F
}\\ 
}]] 	
}^^ 
}__ ∑ª
TC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Utilities.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
	Utilities% .
{ 
internal 
struct 
NativeMultiQueue $
<$ %
T% &
>& '
:( )
IDisposable* 5
where6 ;
T< =
:> ?
	unmanaged@ I
{ 
private 

NativeList 
< 
T 
> 
m_Queue %
;% &
private 

NativeList 
< 
int 
> 
m_QueueHeadTail  /
;/ 0
private 
NativeArray 
< 
int 
>  

m_MaxItems! +
;+ ,
public 
bool 
	IsCreated 
=>  
m_Queue! (
.( )
	IsCreated) 2
;2 3
public 
NativeMultiQueue 
(  
int  #"
initialMessageCapacity$ :
): ;
{ 	

m_MaxItems   
=   
new   
NativeArray   (
<  ( )
int  ) ,
>  , -
(  - .
$num  . /
,  / 0
	Allocator  1 :
.  : ;

Persistent  ; E
)  E F
;  F G

m_MaxItems!! 
[!! 
$num!! 
]!! 
=!! "
initialMessageCapacity!! 2
;!!2 3
m_Queue"" 
="" 
new"" 

NativeList"" $
<""$ %
T""% &
>""& '
(""' ("
initialMessageCapacity""( >
,""> ?
	Allocator""@ I
.""I J

Persistent""J T
)""T U
;""U V
m_QueueHeadTail## 
=## 
new## !

NativeList##" ,
<##, -
int##- 0
>##0 1
(##1 2
$num##2 3
,##3 4
	Allocator##5 >
.##> ?

Persistent##? I
)##I J
;##J K
}$$ 	
public)) 
void)) 
Dispose)) 
()) 
))) 
{** 	

m_MaxItems++ 
.++ 
Dispose++ 
(++ 
)++  
;++  !
m_Queue,, 
.,, 
Dispose,, 
(,, 
),, 
;,, 
m_QueueHeadTail-- 
.-- 
Dispose-- #
(--# $
)--$ %
;--% &
}.. 	
public66 
void66 
Enqueue66 
(66 
int66 
bucket66  &
,66& '
T66( )
value66* /
)66/ 0
{77 	
if99 
(99 
bucket99 
>=99 
m_QueueHeadTail99 )
.99) *
Length99* 0
/991 2
$num993 4
)994 5
{:: 
int;; 
oldSize;; 
=;; 
m_QueueHeadTail;; -
.;;- .
Length;;. 4
;;;4 5
m_QueueHeadTail<< 
.<<  
ResizeUninitialized<<  3
(<<3 4
(<<4 5
bucket<<5 ;
+<<< =
$num<<> ?
)<<? @
*<<A B
$num<<C D
)<<D E
;<<E F
for== 
(== 
;== 
oldSize== 
<==  
m_QueueHeadTail==! 0
.==0 1
Length==1 7
;==7 8
++==9 ;
oldSize==; B
)==B C
m_QueueHeadTail>> #
[>># $
oldSize>>$ +
]>>+ ,
=>>- .
$num>>/ 0
;>>0 1
m_Queue?? 
.?? 
ResizeUninitialized?? +
(??+ ,
(??, -
m_QueueHeadTail??- <
.??< =
Length??= C
/??D E
$num??F G
)??G H
*??I J

m_MaxItems??K U
[??U V
$num??V W
]??W X
)??X Y
;??Y Z
}@@ 
intAA 
idxAA 
=AA 
m_QueueHeadTailAA %
[AA% &
bucketAA& ,
*AA- .
$numAA/ 0
+AA1 2
$numAA3 4
]AA4 5
;AA5 6
ifBB 
(BB 
idxBB 
>=BB 

m_MaxItemsBB !
[BB! "
$numBB" #
]BB# $
)BB$ %
{CC 
intEE 
oldMaxEE 
=EE 

m_MaxItemsEE '
[EE' (
$numEE( )
]EE) *
;EE* +
whileFF 
(FF 
idxFF 
>=FF 

m_MaxItemsFF (
[FF( )
$numFF) *
]FF* +
)FF+ ,

m_MaxItemsGG 
[GG 
$numGG  
]GG  !
=GG" #

m_MaxItemsGG$ .
[GG. /
$numGG/ 0
]GG0 1
*GG2 3
$numGG4 5
;GG5 6
intHH 

maxBucketsHH 
=HH  
m_QueueHeadTailHH! 0
.HH0 1
LengthHH1 7
/HH8 9
$numHH: ;
;HH; <
m_QueueII 
.II 
ResizeUninitializedII +
(II+ ,

maxBucketsII, 6
*II7 8

m_MaxItemsII9 C
[IIC D
$numIID E
]IIE F
)IIF G
;IIG H
forJJ 
(JJ 
intJJ 
bJJ 
=JJ 

maxBucketsJJ '
-JJ( )
$numJJ* +
;JJ+ ,
bJJ- .
>=JJ/ 1
$numJJ2 3
;JJ3 4
--JJ5 7
bJJ7 8
)JJ8 9
{KK 
forLL 
(LL 
intLL 
iLL 
=LL  
m_QueueHeadTailLL! 0
[LL0 1
bLL1 2
*LL3 4
$numLL5 6
+LL7 8
$numLL9 :
]LL: ;
-LL< =
$numLL> ?
;LL? @
iLLA B
>=LLC E
m_QueueHeadTailLLF U
[LLU V
bLLV W
*LLX Y
$numLLZ [
]LL[ \
;LL\ ]
--LL^ `
iLL` a
)LLa b
{MM 
m_QueueNN 
[NN  
bNN  !
*NN" #

m_MaxItemsNN$ .
[NN. /
$numNN/ 0
]NN0 1
+NN2 3
iNN4 5
]NN5 6
=NN7 8
m_QueueNN9 @
[NN@ A
bNNA B
*NNC D
oldMaxNNE K
+NNL M
iNNN O
]NNO P
;NNP Q
}OO 
}PP 
}QQ 
m_QueueRR 
[RR 

m_MaxItemsRR 
[RR 
$numRR  
]RR  !
*RR" #
bucketRR$ *
+RR+ ,
idxRR- 0
]RR0 1
=RR2 3
valueRR4 9
;RR9 :
m_QueueHeadTailSS 
[SS 
bucketSS "
*SS# $
$numSS% &
+SS' (
$numSS) *
]SS* +
=SS, -
idxSS. 1
+SS2 3
$numSS4 5
;SS5 6
}TT 	
publicZZ 
boolZZ 
DequeueZZ 
(ZZ 
intZZ 
bucketZZ  &
,ZZ& '
outZZ( +
TZZ, -
valueZZ. 3
)ZZ3 4
{[[ 	
if\\ 
(\\ 
bucket\\ 
<\\ 
$num\\ 
||\\ 
bucket\\ $
>=\\% '
m_QueueHeadTail\\( 7
.\\7 8
Length\\8 >
/\\? @
$num\\A B
)\\B C
{]] 
value^^ 
=^^ 
default^^ 
;^^  
return__ 
false__ 
;__ 
}`` 
intaa 
idxaa 
=aa 
m_QueueHeadTailaa %
[aa% &
bucketaa& ,
*aa- .
$numaa/ 0
]aa0 1
;aa1 2
ifbb 
(bb 
idxbb 
>=bb 
m_QueueHeadTailbb &
[bb& '
bucketbb' -
*bb. /
$numbb0 1
+bb2 3
$numbb4 5
]bb5 6
)bb6 7
{cc 
m_QueueHeadTaildd 
[dd  
bucketdd  &
*dd' (
$numdd) *
]dd* +
=dd, -
m_QueueHeadTaildd. =
[dd= >
bucketdd> D
*ddE F
$numddG H
+ddI J
$numddK L
]ddL M
=ddN O
$numddP Q
;ddQ R
valueee 
=ee 
defaultee 
;ee  
returnff 
falseff 
;ff 
}gg 
elsehh 
ifhh 
(hh 
idxhh 
+hh 
$numhh 
==hh 
m_QueueHeadTailhh  /
[hh/ 0
buckethh0 6
*hh7 8
$numhh9 :
+hh; <
$numhh= >
]hh> ?
)hh? @
{ii 
m_QueueHeadTailjj 
[jj  
bucketjj  &
*jj' (
$numjj) *
]jj* +
=jj, -
m_QueueHeadTailjj. =
[jj= >
bucketjj> D
*jjE F
$numjjG H
+jjI J
$numjjK L
]jjL M
=jjN O
$numjjP Q
;jjQ R
}kk 
elsell 
{mm 
m_QueueHeadTailnn 
[nn  
bucketnn  &
*nn' (
$numnn) *
]nn* +
=nn, -
idxnn. 1
+nn2 3
$numnn4 5
;nn5 6
}oo 
valueqq 
=qq 
m_Queueqq 
[qq 

m_MaxItemsqq &
[qq& '
$numqq' (
]qq( )
*qq* +
bucketqq, 2
+qq3 4
idxqq5 8
]qq8 9
;qq9 :
returnrr 
truerr 
;rr 
}ss 	
publicyy 
boolyy 
Peekyy 
(yy 
intyy 
bucketyy #
,yy# $
outyy% (
Tyy) *
valueyy+ 0
)yy0 1
{zz 	
if{{ 
({{ 
bucket{{ 
<{{ 
$num{{ 
||{{ 
bucket{{ $
>={{% '
m_QueueHeadTail{{( 7
.{{7 8
Length{{8 >
/{{? @
$num{{A B
){{B C
{|| 
value}} 
=}} 
default}} 
;}}  
return~~ 
false~~ 
;~~ 
} 
int
ÄÄ 
idx
ÄÄ 
=
ÄÄ 
m_QueueHeadTail
ÄÄ %
[
ÄÄ% &
bucket
ÄÄ& ,
*
ÄÄ- .
$num
ÄÄ/ 0
]
ÄÄ0 1
;
ÄÄ1 2
if
ÅÅ 
(
ÅÅ 
idx
ÅÅ 
>=
ÅÅ 
m_QueueHeadTail
ÅÅ &
[
ÅÅ& '
bucket
ÅÅ' -
*
ÅÅ. /
$num
ÅÅ0 1
+
ÅÅ2 3
$num
ÅÅ4 5
]
ÅÅ5 6
)
ÅÅ6 7
{
ÇÇ 
value
ÉÉ 
=
ÉÉ 
default
ÉÉ 
;
ÉÉ  
return
ÑÑ 
false
ÑÑ 
;
ÑÑ 
}
ÖÖ 
value
áá 
=
áá 
m_Queue
áá 
[
áá 

m_MaxItems
áá &
[
áá& '
$num
áá' (
]
áá( )
*
áá* +
bucket
áá, 2
+
áá3 4
idx
áá5 8
]
áá8 9
;
áá9 :
return
àà 
true
àà 
;
àà 
}
ââ 	
public
èè 
void
èè 
Clear
èè 
(
èè 
int
èè 
bucket
èè $
)
èè$ %
{
êê 	
if
ëë 
(
ëë 
bucket
ëë 
<
ëë 
$num
ëë 
||
ëë 
bucket
ëë $
>=
ëë% '
m_QueueHeadTail
ëë( 7
.
ëë7 8
Length
ëë8 >
/
ëë? @
$num
ëëA B
)
ëëB C
return
íí 
;
íí 
m_QueueHeadTail
ìì 
[
ìì 
bucket
ìì "
*
ìì# $
$num
ìì% &
]
ìì& '
=
ìì( )
$num
ìì* +
;
ìì+ ,
m_QueueHeadTail
îî 
[
îî 
bucket
îî "
*
îî# $
$num
îî% &
+
îî' (
$num
îî) *
]
îî* +
=
îî, -
$num
îî. /
;
îî/ 0
}
ïï 	
}
ññ 
public
úú 

static
úú 
class
úú 
SequenceHelpers
úú '
{
ùù 
public
•• 
static
•• 
int
•• 
AbsDistance
•• %
(
••% &
ushort
••& ,
lhs
••- 0
,
••0 1
ushort
••2 8
rhs
••9 <
)
••< =
{
¶¶ 	
int
ßß 
distance
ßß 
;
ßß 
if
®® 
(
®® 
lhs
®® 
<
®® 
rhs
®® 
)
®® 
distance
©© 
=
©© 
lhs
©© 
+
©©  
ushort
©©! '
.
©©' (
MaxValue
©©( 0
+
©©1 2
$num
©©3 4
-
©©5 6
rhs
©©7 :
;
©©: ;
else
™™ 
distance
´´ 
=
´´ 
lhs
´´ 
-
´´  
rhs
´´! $
;
´´$ %
return
¨¨ 
distance
¨¨ 
;
¨¨ 
}
≠≠ 	
public
∑∑ 
static
∑∑ 
bool
∑∑ 
IsNewer
∑∑ "
(
∑∑" #
uint
∑∑# '
current
∑∑( /
,
∑∑/ 0
uint
∑∑1 5
old
∑∑6 9
)
∑∑9 :
{
∏∏ 	
return
∫∫ 
!
∫∫ 
(
∫∫ 
old
∫∫ 
-
∫∫ 
current
∫∫ "
<
∫∫# $
(
∫∫% &
$num
∫∫& (
<<
∫∫) +
$num
∫∫, .
)
∫∫. /
)
∫∫/ 0
;
∫∫0 1
}
ªª 	
public
≈≈ 
static
≈≈ 
bool
≈≈ 
GreaterThan16
≈≈ (
(
≈≈( )
ushort
≈≈) /
lhs
≈≈0 3
,
≈≈3 4
ushort
≈≈5 ;
rhs
≈≈< ?
)
≈≈? @
{
∆∆ 	
const
«« 
uint
«« #
max_sequence_divide_2
«« ,
=
««- .
$num
««/ 5
;
««5 6
return
»» 
lhs
»» 
>
»» 
rhs
»» 
&&
»» 
lhs
»»  #
-
»»$ %
rhs
»»& )
<=
»»* ,
(
»»- .
ushort
»». 4
)
»»4 5#
max_sequence_divide_2
»»5 J
||
»»K M
lhs
…… 
<
…… 
rhs
…… 
&&
…… 
rhs
……  
-
……! "
lhs
……# &
>
……' (
(
……) *
ushort
……* 0
)
……0 1#
max_sequence_divide_2
……1 F
;
……F G
}
   	
public
‘‘ 
static
‘‘ 
bool
‘‘ 

LessThan16
‘‘ %
(
‘‘% &
ushort
‘‘& ,
lhs
‘‘- 0
,
‘‘0 1
ushort
‘‘2 8
rhs
‘‘9 <
)
‘‘< =
{
’’ 	
return
÷÷ 
GreaterThan16
÷÷  
(
÷÷  !
rhs
÷÷! $
,
÷÷$ %
lhs
÷÷& )
)
÷÷) *
;
÷÷* +
}
◊◊ 	
public
‡‡ 
static
‡‡ 
bool
‡‡ 
StalePacket
‡‡ &
(
‡‡& '
ushort
‡‡' -
sequence
‡‡. 6
,
‡‡6 7
ushort
‡‡8 >
oldSequence
‡‡? J
,
‡‡J K
ushort
‡‡L R

windowSize
‡‡S ]
)
‡‡] ^
{
·· 	
return
‚‚ 

LessThan16
‚‚ 
(
‚‚ 
sequence
‚‚ &
,
‚‚& '
(
‚‚( )
ushort
‚‚) /
)
‚‚/ 0
(
‚‚0 1
oldSequence
‚‚1 <
-
‚‚= >

windowSize
‚‚? I
)
‚‚I J
)
‚‚J K
;
‚‚K L
}
„„ 	
public
ÏÏ 
static
ÏÏ 
string
ÏÏ 
BitMaskToString
ÏÏ ,
(
ÏÏ, -
uint
ÏÏ- 1
mask
ÏÏ2 6
)
ÏÏ6 7
{
ÌÌ 	
const
ÚÚ 
int
ÚÚ 
bits
ÚÚ 
=
ÚÚ 
$num
ÚÚ 
*
ÚÚ  
$num
ÚÚ! "
;
ÚÚ" #
var
ÛÛ 
sb
ÛÛ 
=
ÛÛ 
new
ÛÛ 
char
ÛÛ 
[
ÛÛ 
bits
ÛÛ "
]
ÛÛ" #
;
ÛÛ# $
for
ıı 
(
ıı 
var
ıı 
i
ıı 
=
ıı 
bits
ıı 
-
ıı 
$num
ıı  !
;
ıı! "
i
ıı# $
>=
ıı% '
$num
ıı( )
;
ıı) *
i
ıı+ ,
--
ıı, .
)
ıı. /
{
ˆˆ 
sb
˜˜ 
[
˜˜ 
i
˜˜ 
]
˜˜ 
=
˜˜ 
(
˜˜ 
mask
˜˜ 
&
˜˜ 
$num
˜˜  !
)
˜˜! "
!=
˜˜# %
$num
˜˜& '
?
˜˜( )
$char
˜˜* -
:
˜˜. /
$char
˜˜0 3
;
˜˜3 4
mask
¯¯ 
>>=
¯¯ 
$num
¯¯ 
;
¯¯ 
}
˘˘ 
return
˚˚ 
new
˚˚ 
string
˚˚ 
(
˚˚ 
sb
˚˚  
)
˚˚  !
;
˚˚! "
}
¸¸ 	
}
˝˝ 
public
ÇÇ 

static
ÇÇ 
class
ÇÇ 
FixedStringHexExt
ÇÇ )
{
ÉÉ 
public
ãã 
static
ãã 
FormatError
ãã !
	AppendHex
ãã" +
<
ãã+ ,
T
ãã, -
>
ãã- .
(
ãã. /
ref
ãã/ 2
this
ãã3 7
T
ãã8 9
str
ãã: =
,
ãã= >
ushort
ãã? E
val
ããF I
)
ããI J
where
ããK P
T
ããQ R
:
ããS T
	unmanaged
ããU ^
,
ãã^ _
INativeList
ãã` k
<
ããk l
byte
ããl p
>
ããp q
,
ããq r

IUTF8Bytes
ããs }
{
åå 	
int
çç 
shamt
çç 
=
çç 
$num
çç 
;
çç 
while
èè 
(
èè 
shamt
èè 
>
èè 
$num
èè 
)
èè 
{
êê 
if
ëë 
(
ëë 
(
ëë 
(
ëë 
val
ëë 
>>
ëë 
shamt
ëë "
)
ëë" #
&
ëë$ %
$num
ëë& )
)
ëë) *
!=
ëë+ -
$num
ëë. /
)
ëë/ 0
break
íí 
;
íí 
shamt
ìì 
-=
ìì 
$num
ìì 
;
ìì 
}
îî 
var
ïï 
err
ïï 
=
ïï 
FormatError
ïï !
.
ïï! "
None
ïï" &
;
ïï& '
while
ññ 
(
ññ 
shamt
ññ 
>=
ññ 
$num
ññ 
)
ññ 
{
óó 
var
òò 
nibble
òò 
=
òò 
(
òò 
val
òò !
>>
òò" $
shamt
òò% *
)
òò* +
&
òò, -
$num
òò. 1
;
òò1 2
if
ôô 
(
ôô 
nibble
ôô 
>=
ôô 
$num
ôô  
)
ôô  !
err
öö 
|=
öö 
str
öö 
.
öö 
AppendRawByte
öö ,
(
öö, -
(
öö- .
byte
öö. 2
)
öö2 3
(
öö3 4
$char
öö4 7
+
öö8 9
nibble
öö: @
-
ööA B
$num
ööC E
)
ööE F
)
ööF G
;
ööG H
else
õõ 
err
úú 
|=
úú 
str
úú 
.
úú 
AppendRawByte
úú ,
(
úú, -
(
úú- .
byte
úú. 2
)
úú2 3
(
úú3 4
$char
úú4 7
+
úú8 9
nibble
úú: @
)
úú@ A
)
úúA B
;
úúB C
shamt
ùù 
-=
ùù 
$num
ùù 
;
ùù 
}
ûû 
return
üü 
err
üü 
!=
üü 
FormatError
üü %
.
üü% &
None
üü& *
?
üü+ ,
FormatError
üü- 8
.
üü8 9
Overflow
üü9 A
:
üüB C
FormatError
üüD O
.
üüO P
None
üüP T
;
üüT U
}
†† 	
}
°° 
public
¶¶ 

static
¶¶ 
class
¶¶ 
NativeListExt
¶¶ %
{
ßß 
public
ØØ 
static
ØØ 
void
ØØ -
ResizeUninitializedTillPowerOf2
ØØ :
<
ØØ: ;
T
ØØ; <
>
ØØ< =
(
ØØ= >
this
ØØ> B

NativeList
ØØC M
<
ØØM N
T
ØØN O
>
ØØO P
list
ØØQ U
,
ØØU V
int
ØØW Z
	sizeToFit
ØØ[ d
)
ØØd e
where
ØØf k
T
ØØl m
:
ØØn o
	unmanaged
ØØp y
{
∞∞ 	
var
±± 
n
±± 
=
±± 
list
±± 
.
±± 
Length
±± 
;
±±  
if
≥≥ 
(
≥≥ 
	sizeToFit
≥≥ 
>=
≥≥ 
n
≥≥ 
)
≥≥ 
{
¥¥ 
	sizeToFit
∂∂ 
|=
∂∂ 
	sizeToFit
∂∂ &
>>
∂∂' )
$num
∂∂* +
;
∂∂+ ,
	sizeToFit
∑∑ 
|=
∑∑ 
	sizeToFit
∑∑ &
>>
∑∑' )
$num
∑∑* +
;
∑∑+ ,
	sizeToFit
∏∏ 
|=
∏∏ 
	sizeToFit
∏∏ &
>>
∏∏' )
$num
∏∏* +
;
∏∏+ ,
	sizeToFit
ππ 
|=
ππ 
	sizeToFit
ππ &
>>
ππ' )
$num
ππ* +
;
ππ+ ,
	sizeToFit
∫∫ 
|=
∫∫ 
	sizeToFit
∫∫ &
>>
∫∫' )
$num
∫∫* ,
;
∫∫, -
	sizeToFit
ªª 
++
ªª 
;
ªª 
list
ææ 
.
ææ !
ResizeUninitialized
ææ (
(
ææ( )
	sizeToFit
ææ) 2
)
ææ2 3
;
ææ3 4
}
øø 
}
¿¿ 	
}
¡¡ 
public
«« 

static
«« 
class
«« 
RandomHelpers
«« %
{
»» 
public
   
static
   
ushort
   
GetRandomUShort
   ,
(
  , -
)
  - .
{
ÀÀ 	
var
ÃÃ 
rnd
ÃÃ 
=
ÃÃ 
new
ÃÃ 
Unity
ÃÃ 
.
ÃÃ  
Mathematics
ÃÃ  +
.
ÃÃ+ ,
Random
ÃÃ, 2
(
ÃÃ2 3
(
ÃÃ3 4
uint
ÃÃ4 8
)
ÃÃ8 9
	Stopwatch
ÃÃ9 B
.
ÃÃB C
GetTimestamp
ÃÃC O
(
ÃÃO P
)
ÃÃP Q
)
ÃÃQ R
;
ÃÃR S
return
ÕÕ 
(
ÕÕ 
ushort
ÕÕ 
)
ÕÕ 
rnd
ÕÕ 
.
ÕÕ 
NextUInt
ÕÕ '
(
ÕÕ' (
$num
ÕÕ( )
,
ÕÕ) *
ushort
ÕÕ+ 1
.
ÕÕ1 2
MaxValue
ÕÕ2 :
-
ÕÕ; <
$num
ÕÕ= >
)
ÕÕ> ?
;
ÕÕ? @
}
ŒŒ 	
public
—— 
static
—— 
ulong
—— 
GetRandomULong
—— *
(
——* +
)
——+ ,
{
““ 	
var
”” 
rnd
”” 
=
”” 
new
”” 
Unity
”” 
.
””  
Mathematics
””  +
.
””+ ,
Random
””, 2
(
””2 3
(
””3 4
uint
””4 8
)
””8 9
	Stopwatch
””9 B
.
””B C
GetTimestamp
””C O
(
””O P
)
””P Q
)
””Q R
;
””R S
var
‘‘ 
high
‘‘ 
=
‘‘ 
rnd
‘‘ 
.
‘‘ 
NextUInt
‘‘ #
(
‘‘# $
$num
‘‘$ %
,
‘‘% &
uint
‘‘' +
.
‘‘+ ,
MaxValue
‘‘, 4
-
‘‘5 6
$num
‘‘7 8
)
‘‘8 9
;
‘‘9 :
var
’’ 
low
’’ 
=
’’ 
rnd
’’ 
.
’’ 
NextUInt
’’ "
(
’’" #
$num
’’# $
,
’’$ %
uint
’’& *
.
’’* +
MaxValue
’’+ 3
-
’’4 5
$num
’’6 7
)
’’7 8
;
’’8 9
return
÷÷ 
(
÷÷ 
(
÷÷ 
ulong
÷÷ 
)
÷÷ 
high
÷÷ 
<<
÷÷  "
$num
÷÷# %
)
÷÷% &
|
÷÷' (
(
÷÷) *
ulong
÷÷* /
)
÷÷/ 0
low
÷÷0 3
;
÷÷3 4
}
◊◊ 	
}
ÿÿ 
}ŸŸ úà
jC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\SecureProtocol\SecureParameters.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
TLS% (
{ 
public

 

enum

 #
SecureTransportProtocol

 '
:

( )
uint

* .
{ 
TLS 
= 
$num 
, 
DTLS 
= 
$num 
, 
} 
public 

enum "
SecureClientAuthPolicy &
:' (
uint) -
{ 
None 
= 
$num 
, 
Optional 
= 
$num 
, 
Required 
= 
$num 
, 
} 
public   

struct   *
SecureNetworkProtocolParameter   0
:  1 2
INetworkParameter  3 D
{!! 
public##  
FixedString4096Bytes## #
Pem##4 7
;##7 8
public%%  
FixedString4096Bytes%% #
Rsa%%4 7
;%%7 8
public''  
FixedString4096Bytes'' #
RsaKey''4 :
;'': ;
public)) 
FixedString32Bytes)) !
Hostname))4 <
;))< =
public++ #
SecureTransportProtocol++ &
Protocol++4 <
;++< =
public-- "
SecureClientAuthPolicy-- %&
ClientAuthenticationPolicy--4 N
;--N O
public// 
uint// 
SSLReadTimeoutMs//4 D
;//D E
public11 
uint11 "
SSLHandshakeTimeoutMax114 J
;11J K
public33 
uint33 "
SSLHandshakeTimeoutMin334 J
;33J K
public55 
bool55 
Validate55 
(55 
)55 
=>55 !
true55" &
;55& '
}66 
public88 

static88 
class88 %
SecureParameterExtensions88 1
{99 
public@@ 
static@@ 
ref@@ 
NetworkSettings@@ )&
WithSecureClientParameters@@* D
(@@D E
refAA 
thisAA 
NetworkSettingsAA $
settingsAA( 0
,AA0 1
refBB  
FixedString4096BytesBB $
caCertificateBB( 5
,BB5 6
refCC 
FixedString32BytesCC "

serverNameCC( 2
,CC2 3
uintDD 
readTimeoutDD( 3
=DDE F
$numDDG H
,DDH I
uintEE 
handshakeTimeoutMaxEE( ;
=EEE F
$numEEG L
,EEL M
uintFF 
handshakeTimeoutMinFF( ;
=FFE F
$numFFG K
)GG 	
{HH 	
varII 
	parameterII 
=II 
newII *
SecureNetworkProtocolParameterII  >
{JJ 
PemKK 
=KK, -
caCertificateKK. ;
,KK; <
RsaLL 
=LL, -
defaultLL. 5
,LL5 6
RsaKeyMM 
=MM, -
defaultMM. 5
,MM5 6
HostnameNN 
=NN, -

serverNameNN. 8
,NN8 9
ProtocolOO 
=OO, -#
SecureTransportProtocolOO. E
.OOE F
DTLSOOF J
,OOJ K&
ClientAuthenticationPolicyPP *
=PP, -"
SecureClientAuthPolicyPP. D
.PPD E
NonePPE I
,PPI J
SSLReadTimeoutMsQQ  
=QQ, -
readTimeoutQQ. 9
,QQ9 :"
SSLHandshakeTimeoutMaxRR &
=RR, -
handshakeTimeoutMaxRR. A
,RRA B"
SSLHandshakeTimeoutMinSS &
=SS, -
handshakeTimeoutMinSS. A
,SSA B
}TT 
;TT 
settingsVV 
.VV !
AddRawParameterStructVV *
(VV* +
refVV+ .
	parameterVV/ 8
)VV8 9
;VV9 :
returnXX 
refXX 
settingsXX 
;XX  
}YY 	
publiccc 
staticcc 
refcc 
NetworkSettingscc )&
WithSecureClientParameterscc* D
(ccD E
refdd 
thisdd 
NetworkSettingsdd $
settingsdd( 0
,dd0 1
refee  
FixedString4096Bytesee $
certificateee( 3
,ee3 4
refff  
FixedString4096Bytesff $

privateKeyff( 2
,ff2 3
refgg  
FixedString4096Bytesgg $
caCertificategg( 5
,gg5 6
refhh 
FixedString32Byteshh "

serverNamehh( 2
,hh2 3
uintii 
readTimeoutii( 3
=iiE F
$numiiG H
,iiH I
uintjj 
handshakeTimeoutMaxjj( ;
=jjE F
$numjjG L
,jjL M
uintkk 
handshakeTimeoutMinkk( ;
=kkE F
$numkkG K
)ll 	
{mm 	
varnn 
	parameternn 
=nn 
newnn *
SecureNetworkProtocolParameternn  >
{oo 
Pempp 
=pp, -
caCertificatepp. ;
,pp; <
Rsaqq 
=qq, -
certificateqq. 9
,qq9 :
RsaKeyrr 
=rr, -

privateKeyrr. 8
,rr8 9
Hostnamess 
=ss, -

serverNamess. 8
,ss8 9
Protocoltt 
=tt, -#
SecureTransportProtocoltt. E
.ttE F
DTLSttF J
,ttJ K&
ClientAuthenticationPolicyuu *
=uu, -"
SecureClientAuthPolicyuu. D
.uuD E
NoneuuE I
,uuI J
SSLReadTimeoutMsvv  
=vv, -
readTimeoutvv. 9
,vv9 :"
SSLHandshakeTimeoutMaxww &
=ww, -
handshakeTimeoutMaxww. A
,wwA B"
SSLHandshakeTimeoutMinxx &
=xx, -
handshakeTimeoutMinxx. A
,xxA B
}yy 
;yy 
settings{{ 
.{{ !
AddRawParameterStruct{{ *
({{* +
ref{{+ .
	parameter{{/ 8
){{8 9
;{{9 :
return}} 
ref}} 
settings}} 
;}}  
}~~ 	
public
ÜÜ 
static
ÜÜ 
ref
ÜÜ 
NetworkSettings
ÜÜ )(
WithSecureServerParameters
ÜÜ* D
(
ÜÜD E
ref
áá 
this
áá 
NetworkSettings
áá $
settings
áá( 0
,
áá0 1
ref
àà "
FixedString4096Bytes
àà $
certificate
àà( 3
,
àà3 4
ref
ââ "
FixedString4096Bytes
ââ $

privateKey
ââ( 2
,
ââ2 3
uint
ää 
readTimeout
ää( 3
=
ääE F
$num
ääG H
,
ääH I
uint
ãã !
handshakeTimeoutMax
ãã( ;
=
ããE F
$num
ããG L
,
ããL M
uint
åå !
handshakeTimeoutMin
åå( ;
=
ååE F
$num
ååG K
)
çç 	
{
éé 	
var
èè 
	parameter
èè 
=
èè 
new
èè ,
SecureNetworkProtocolParameter
èè  >
{
êê 
Pem
ëë 
=
ëë, -
default
ëë. 5
,
ëë5 6
Rsa
íí 
=
íí, -
certificate
íí. 9
,
íí9 :
RsaKey
ìì 
=
ìì, -

privateKey
ìì. 8
,
ìì8 9
Hostname
îî 
=
îî, -
default
îî. 5
,
îî5 6
Protocol
ïï 
=
ïï, -%
SecureTransportProtocol
ïï. E
.
ïïE F
DTLS
ïïF J
,
ïïJ K(
ClientAuthenticationPolicy
ññ *
=
ññ, -$
SecureClientAuthPolicy
ññ. D
.
ññD E
None
ññE I
,
ññI J
SSLReadTimeoutMs
óó  
=
óó, -
readTimeout
óó. 9
,
óó9 :$
SSLHandshakeTimeoutMax
òò &
=
òò, -!
handshakeTimeoutMax
òò. A
,
òòA B$
SSLHandshakeTimeoutMin
ôô &
=
ôô, -!
handshakeTimeoutMin
ôô. A
,
ôôA B
}
öö 
;
öö 
settings
úú 
.
úú #
AddRawParameterStruct
úú *
(
úú* +
ref
úú+ .
	parameter
úú/ 8
)
úú8 9
;
úú9 :
return
ûû 
ref
ûû 
settings
ûû 
;
ûû  
}
üü 	
public
™™ 
static
™™ 
ref
™™ 
NetworkSettings
™™ )(
WithSecureServerParameters
™™* D
(
™™D E
ref
´´ 
this
´´ 
NetworkSettings
´´ $
settings
´´( 0
,
´´0 1
ref
¨¨ "
FixedString4096Bytes
¨¨ $
certificate
¨¨( 3
,
¨¨3 4
ref
≠≠ "
FixedString4096Bytes
≠≠ $

privateKey
≠≠( 2
,
≠≠2 3
ref
ÆÆ "
FixedString4096Bytes
ÆÆ $
caCertificate
ÆÆ( 5
,
ÆÆ5 6
ref
ØØ  
FixedString32Bytes
ØØ "

clientName
ØØ( 2
,
ØØ2 3$
SecureClientAuthPolicy
∞∞ "(
clientAuthenticationPolicy
∞∞( B
=
∞∞E F$
SecureClientAuthPolicy
∞∞G ]
.
∞∞] ^
Required
∞∞^ f
,
∞∞f g
uint
±± 
readTimeout
±±( 3
=
±±E F
$num
±±G H
,
±±H I
uint
≤≤ !
handshakeTimeoutMax
≤≤( ;
=
≤≤E F
$num
≤≤G L
,
≤≤L M
uint
≥≥ !
handshakeTimeoutMin
≥≥( ;
=
≥≥E F
$num
≥≥G K
)
¥¥ 	
{
µµ 	
var
∂∂ 
	parameter
∂∂ 
=
∂∂ 
new
∂∂ ,
SecureNetworkProtocolParameter
∂∂  >
{
∑∑ 
Pem
∏∏ 
=
∏∏, -
caCertificate
∏∏. ;
,
∏∏; <
Rsa
ππ 
=
ππ, -
certificate
ππ. 9
,
ππ9 :
RsaKey
∫∫ 
=
∫∫, -

privateKey
∫∫. 8
,
∫∫8 9
Hostname
ªª 
=
ªª, -

clientName
ªª. 8
,
ªª8 9
Protocol
ºº 
=
ºº, -%
SecureTransportProtocol
ºº. E
.
ººE F
DTLS
ººF J
,
ººJ K(
ClientAuthenticationPolicy
ΩΩ *
=
ΩΩ, -(
clientAuthenticationPolicy
ΩΩ. H
,
ΩΩH I
SSLReadTimeoutMs
ææ  
=
ææ, -
readTimeout
ææ. 9
,
ææ9 :$
SSLHandshakeTimeoutMax
øø &
=
øø, -!
handshakeTimeoutMax
øø. A
,
øøA B$
SSLHandshakeTimeoutMin
¿¿ &
=
¿¿, -!
handshakeTimeoutMin
¿¿. A
,
¿¿A B
}
¡¡ 
;
¡¡ 
settings
√√ 
.
√√ #
AddRawParameterStruct
√√ *
(
√√* +
ref
√√+ .
	parameter
√√/ 8
)
√√8 9
;
√√9 :
return
≈≈ 
ref
≈≈ 
settings
≈≈ 
;
≈≈  
}
∆∆ 	
[
»» 	
Obsolete
»»	 
(
»» 
$str
»» Y
)
»»Y Z
]
»»Z [
public
…… 
static
…… 
ref
…… 
NetworkSettings
…… )"
WithSecureParameters
……* >
(
……> ?
ref
   
this
   
NetworkSettings
   $
settings
  ( 0
,
  0 1
ref
ÀÀ "
FixedString4096Bytes
ÀÀ $
pem
ÀÀ( +
,
ÀÀ+ ,
ref
ÃÃ  
FixedString32Bytes
ÃÃ "
hostname
ÃÃ( 0
,
ÃÃ0 1%
SecureTransportProtocol
ÕÕ #
protocol
ÕÕ( 0
=
ÕÕH I%
SecureTransportProtocol
ÕÕJ a
.
ÕÕa b
DTLS
ÕÕb f
,
ÕÕf g$
SecureClientAuthPolicy
ŒŒ "(
clientAuthenticationPolicy
ŒŒ( B
=
ŒŒH I$
SecureClientAuthPolicy
ŒŒJ `
.
ŒŒ` a
Optional
ŒŒa i
,
ŒŒi j
uint
œœ 
sslReadTimeoutMs
œœ( 8
=
œœH I
$num
œœJ K
,
œœK L
uint
–– $
sslHandshakeTimeoutMax
––( >
=
––H I
$num
––J O
,
––O P
uint
—— $
sslHandshakeTimeoutMin
——( >
=
——H I
$num
——J N
)
““ 	
{
”” 	
var
‘‘ 
	parameter
‘‘ 
=
‘‘ 
new
‘‘ ,
SecureNetworkProtocolParameter
‘‘  >
{
’’ 
Pem
÷÷ 
=
÷÷, -
pem
÷÷. 1
,
÷÷1 2
Rsa
◊◊ 
=
◊◊, -
default
◊◊. 5
,
◊◊5 6
RsaKey
ÿÿ 
=
ÿÿ, -
default
ÿÿ. 5
,
ÿÿ5 6
Hostname
ŸŸ 
=
ŸŸ, -
hostname
ŸŸ. 6
,
ŸŸ6 7
Protocol
⁄⁄ 
=
⁄⁄, -
protocol
⁄⁄. 6
,
⁄⁄6 7(
ClientAuthenticationPolicy
€€ *
=
€€, -(
clientAuthenticationPolicy
€€. H
,
€€H I
SSLReadTimeoutMs
‹‹  
=
‹‹, -
sslReadTimeoutMs
‹‹. >
,
‹‹> ?$
SSLHandshakeTimeoutMax
›› &
=
››, -$
sslHandshakeTimeoutMax
››. D
,
››D E$
SSLHandshakeTimeoutMin
ﬁﬁ &
=
ﬁﬁ, -$
sslHandshakeTimeoutMin
ﬁﬁ. D
,
ﬁﬁD E
}
ﬂﬂ 
;
ﬂﬂ 
settings
·· 
.
·· #
AddRawParameterStruct
·· *
(
··* +
ref
··+ .
	parameter
··/ 8
)
··8 9
;
··9 :
return
„„ 
ref
„„ 
settings
„„ 
;
„„  
}
‰‰ 	
[
ÊÊ 	
Obsolete
ÊÊ	 
(
ÊÊ 
$str
ÊÊ Y
)
ÊÊY Z
]
ÊÊZ [
public
ÁÁ 
static
ÁÁ 
ref
ÁÁ 
NetworkSettings
ÁÁ )"
WithSecureParameters
ÁÁ* >
(
ÁÁ> ?
ref
ËË 
this
ËË 
NetworkSettings
ËË $
settings
ËË( 0
,
ËË0 1
ref
ÈÈ "
FixedString4096Bytes
ÈÈ $
pem
ÈÈ( +
,
ÈÈ+ ,
ref
ÍÍ "
FixedString4096Bytes
ÍÍ $
rsa
ÍÍ( +
,
ÍÍ+ ,
ref
ÎÎ "
FixedString4096Bytes
ÎÎ $
rsaKey
ÎÎ( .
,
ÎÎ. /
ref
ÏÏ  
FixedString32Bytes
ÏÏ "
hostname
ÏÏ( 0
,
ÏÏ0 1%
SecureTransportProtocol
ÌÌ #
protocol
ÌÌ( 0
=
ÌÌH I%
SecureTransportProtocol
ÌÌJ a
.
ÌÌa b
DTLS
ÌÌb f
,
ÌÌf g$
SecureClientAuthPolicy
ÓÓ "(
clientAuthenticationPolicy
ÓÓ( B
=
ÓÓH I$
SecureClientAuthPolicy
ÓÓJ `
.
ÓÓ` a
Optional
ÓÓa i
,
ÓÓi j
uint
ÔÔ 
sslReadTimeoutMs
ÔÔ( 8
=
ÔÔH I
$num
ÔÔJ K
,
ÔÔK L
uint
 $
sslHandshakeTimeoutMax
( >
=
H I
$num
J O
,
O P
uint
ÒÒ $
sslHandshakeTimeoutMin
ÒÒ( >
=
ÒÒH I
$num
ÒÒJ N
)
ÚÚ 	
{
ÛÛ 	
var
ÙÙ 
	parameter
ÙÙ 
=
ÙÙ 
new
ÙÙ ,
SecureNetworkProtocolParameter
ÙÙ  >
{
ıı 
Pem
ˆˆ 
=
ˆˆ, -
pem
ˆˆ. 1
,
ˆˆ1 2
Rsa
˜˜ 
=
˜˜, -
rsa
˜˜. 1
,
˜˜1 2
RsaKey
¯¯ 
=
¯¯, -
rsaKey
¯¯. 4
,
¯¯4 5
Hostname
˘˘ 
=
˘˘, -
hostname
˘˘. 6
,
˘˘6 7
Protocol
˙˙ 
=
˙˙, -
protocol
˙˙. 6
,
˙˙6 7(
ClientAuthenticationPolicy
˚˚ *
=
˚˚, -(
clientAuthenticationPolicy
˚˚. H
,
˚˚H I
SSLReadTimeoutMs
¸¸  
=
¸¸, -
sslReadTimeoutMs
¸¸. >
,
¸¸> ?$
SSLHandshakeTimeoutMax
˝˝ &
=
˝˝, -$
sslHandshakeTimeoutMax
˝˝. D
,
˝˝D E$
SSLHandshakeTimeoutMin
˛˛ &
=
˛˛, -$
sslHandshakeTimeoutMin
˛˛. D
,
˛˛D E
}
ˇˇ 
;
ˇˇ 
settings
ÅÅ 
.
ÅÅ #
AddRawParameterStruct
ÅÅ *
(
ÅÅ* +
ref
ÅÅ+ .
	parameter
ÅÅ/ 8
)
ÅÅ8 9
;
ÅÅ9 :
return
ÉÉ 
ref
ÉÉ 
settings
ÉÉ 
;
ÉÉ  
}
ÑÑ 	
public
ÜÜ 
static
ÜÜ ,
SecureNetworkProtocolParameter
ÜÜ 4!
GetSecureParameters
ÜÜ5 H
(
ÜÜH I
ref
ÜÜI L
this
ÜÜM Q
NetworkSettings
ÜÜR a
settings
ÜÜb j
)
ÜÜj k
{
áá 	
if
àà 
(
àà 
!
àà 
settings
àà 
.
àà 
TryGet
àà  
<
àà  !,
SecureNetworkProtocolParameter
àà! ?
>
àà? @
(
àà@ A
out
ààA D
var
ààE H

parameters
ààI S
)
ààS T
)
ààT U
{
ââ 
throw
ää 
new
ää 
System
ää  
.
ää  !'
InvalidOperationException
ää! :
(
ää: ;
$"
ää; =
$str
ää= ^
{
ää^ _
nameof
ää_ e
(
ääe f-
SecureNetworkProtocolParameterääf Ñ
)ääÑ Ö
}ääÖ Ü
$strääÜ ü
{ääü †
nameofää† ¶
(ää¶ ß
NetworkSettingsääß ∂
)ää∂ ∑
}ää∑ ∏
"ää∏ π
)ääπ ∫
;ää∫ ª
}
ãã 
return
çç 

parameters
çç 
;
çç 
}
éé 	
}
èè 
}êê …
kC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\Messages\RelayMessageError.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
internal 
struct 
RelayMessageError %
{ 
public 
const 
int 
Length 
=  !
RelayMessageHeader" 4
.4 5
Length5 ;
+< =
RelayAllocationId> O
.O P
k_LengthP X
+Y Z
sizeof[ a
(a b
byteb f
)f g
;g h
public

 
RelayMessageHeader

 !
Header

" (
;

( )
public 
RelayAllocationId  
AllocationId! -
;- .
public 
byte 
	ErrorCode 
; 
internal 
static 
RelayMessageError )
Create* 0
(0 1
RelayAllocationId1 B
allocationIdC O
,O P
byteQ U
	errorCodeV _
)_ `
{ 	
return 
new 
RelayMessageError (
{ 
Header 
= 
RelayMessageHeader +
.+ ,
Create, 2
(2 3
RelayMessageType3 C
.C D
ErrorD I
)I J
,J K
AllocationId 
= 
allocationId +
,+ ,
	ErrorCode 
= 
	errorCode %
} 
; 
} 	
} 
} ûõ
^C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\IPCNetworkInterface.cs
	namespace

 	
Unity


 
.

 

Networking

 
.

 
	Transport

 $
{ 
[ 
BurstCompile 
] 
public 

struct 
IPCNetworkInterface %
:& '
INetworkInterface( 9
{ 
[ 	
ReadOnly	 
] 
private 
NativeArray &
<& '$
NetworkInterfaceEndPoint' ?
>? @
m_LocalEndPointA P
;P Q
public $
NetworkInterfaceEndPoint '
LocalEndPoint( 5
=>6 8
m_LocalEndPoint9 H
[H I
$numI J
]J K
;K L
public"" 
int"" #
CreateInterfaceEndPoint"" *
(""* +
NetworkEndPoint""+ :
address""; B
,""B C
out""D G$
NetworkInterfaceEndPoint""H `
endpoint""a i
)""i j
{## 	
if$$ 
($$ 
!$$ 
address$$ 
.$$ 

IsLoopback$$ #
&&$$$ &
!$$' (
address$$( /
.$$/ 0
IsAny$$0 5
)$$5 6
{%% 
throw'' 
new'' 
ArgumentException'' +
(''+ ,
$str'', c
)''c d
;''d e
},, 
endpoint.. 
=.. 

IPCManager.. !
...! "
Instance.." *
...* +
CreateEndPoint..+ 9
(..9 :
address..: A
...A B
Port..B F
)..F G
;..G H
return// 
(// 
int// 
)// 
Error// 
.// 

StatusCode// (
.//( )
Success//) 0
;//0 1
}00 	
public77 
NetworkEndPoint77 
GetGenericEndPoint77 1
(771 2$
NetworkInterfaceEndPoint772 J
endpoint77K S
)77S T
{88 	
if99 
(99 
!99 

IPCManager99 
.99 
Instance99 $
.99$ %
GetEndPointPort99% 4
(994 5
endpoint995 =
,99= >
out99? B
var99C F
port99G K
)99K L
)99L M
return:: 
default:: 
;:: 
return;; 
NetworkEndPoint;; "
.;;" #
LoopbackIpv4;;# /
.;;/ 0
WithPort;;0 8
(;;8 9
port;;9 =
);;= >
;;;> ?
}<< 	
publicCC 
intCC 

InitializeCC 
(CC 
NetworkSettingsCC -
settingsCC. 6
)CC6 7
{DD 	

IPCManagerEE 
.EE 
InstanceEE 
.EE  
AddRefEE  &
(EE& '
)EE' (
;EE( )
m_LocalEndPointFF 
=FF 
newFF !
NativeArrayFF" -
<FF- .$
NetworkInterfaceEndPointFF. F
>FFF G
(FFG H
$numFFH I
,FFI J
	AllocatorFFK T
.FFT U

PersistentFFU _
)FF_ `
;FF` a
varHH 
epHH 
=HH 
defaultHH 
(HH $
NetworkInterfaceEndPointHH 5
)HH5 6
;HH6 7
varII 
resultII 
=II 
$numII 
;II 
ifKK 
(KK 
(KK 
resultKK 
=KK #
CreateInterfaceEndPointKK 1
(KK1 2
NetworkEndPointKK2 A
.KKA B
LoopbackIpv4KKB N
,KKN O
outKKP S
epKKT V
)KKV W
)KKW X
!=KKY [
(KK\ ]
intKK] `
)KK` a
ErrorKKa f
.KKf g

StatusCodeKKg q
.KKq r
SuccessKKr y
)KKy z
returnLL 
resultLL 
;LL 
m_LocalEndPointNN 
[NN 
$numNN 
]NN 
=NN  
epNN! #
;NN# $
returnOO 
$numOO 
;OO 
}PP 	
publicUU 
voidUU 
DisposeUU 
(UU 
)UU 
{VV 	
m_LocalEndPointWW 
.WW 
DisposeWW #
(WW# $
)WW$ %
;WW% &

IPCManagerXX 
.XX 
InstanceXX 
.XX  
ReleaseXX  '
(XX' (
)XX( )
;XX) *
}YY 	
[[[ 	
BurstCompile[[	 
][[ 
struct\\ 

SendUpdate\\ 
:\\ 
IJob\\  
{]] 	
public^^ 

IPCManager^^ 

ipcManager^^ (
;^^( )
public__ 
NativeQueue__ 
<__ 
QueuedSendMessage__ 0
>__0 1
ipcQueue__2 :
;__: ;
[`` 
ReadOnly`` 
]`` 
public`` 
NativeArray`` )
<``) *$
NetworkInterfaceEndPoint``* B
>``B C
localEndPoint``D Q
;``Q R
publicbb 
voidbb 
Executebb 
(bb  
)bb  !
{cc 

ipcManagerdd 
.dd 
Updatedd !
(dd! "
localEndPointdd" /
[dd/ 0
$numdd0 1
]dd1 2
,dd2 3
ipcQueuedd4 <
)dd< =
;dd= >
}ee 
}ff 	
[hh 	
BurstCompilehh	 
]hh 
structii 

ReceiveJobii 
:ii 
IJobii  
{jj 	
publickk !
NetworkPacketReceiverkk (
receiverkk) 1
;kk1 2
publicll 

IPCManagerll 

ipcManagerll (
;ll( )
publicmm $
NetworkInterfaceEndPointmm +
localEndPointmm, 9
;mm9 :
publicoo 
unsafeoo 
voidoo 
Executeoo &
(oo& '
)oo' (
{pp 
receiverqq 
.qq 
ReceiveErrorCodeqq )
=qq* +
$numqq, -
;qq- .
whiless 
(ss 
truess 
)ss 
{tt 
varuu 
sizeuu 
=uu %
NetworkParameterConstantsuu 8
.uu8 9
MTUuu9 <
;uu< =
varvv 
ptrvv 
=vv 
receivervv &
.vv& '
AllocateMemoryvv' 5
(vv5 6
refvv6 9
sizevv: >
)vv> ?
;vv? @
ifww 
(ww 
ptrww 
==ww 
IntPtrww %
.ww% &
Zeroww& *
)ww* +
returnxx 
;xx 
varzz 
endpointzz  
=zz! "
defaultzz# *
(zz* +$
NetworkInterfaceEndPointzz+ C
)zzC D
;zzD E
var{{ 
resultReceive{{ %
={{& '
NativeReceive{{( 5
({{5 6
({{6 7
byte{{7 ;
*{{; <
){{< =
ptr{{= @
.{{@ A
	ToPointer{{A J
({{J K
){{K L
,{{L M
size{{N R
,{{R S
ref{{T W
endpoint{{X `
){{` a
;{{a b
if|| 
(|| 
resultReceive|| %
<=||& (
$num||) *
)||* +
{}} 
if~~ 
(~~ 
resultReceive~~ )
!=~~* ,
$num~~- .
)~~. /
receiver $
.$ %
ReceiveErrorCode% 5
=6 7
-8 9
resultReceive9 F
;F G
return
ÄÄ 
;
ÄÄ 
}
ÅÅ 
var
ÉÉ 
resultAppend
ÉÉ $
=
ÉÉ% &
receiver
ÉÉ' /
.
ÉÉ/ 0
AppendPacket
ÉÉ0 <
(
ÉÉ< =
ptr
ÉÉ= @
,
ÉÉ@ A
ref
ÉÉB E
endpoint
ÉÉF N
,
ÉÉN O
resultReceive
ÉÉP ]
)
ÉÉ] ^
;
ÉÉ^ _
if
ÑÑ 
(
ÑÑ 
resultAppend
ÑÑ $
==
ÑÑ% '
false
ÑÑ( -
)
ÑÑ- .
return
ÖÖ 
;
ÖÖ 
}
ÜÜ 
}
áá 
unsafe
êê 
int
êê 
NativeReceive
êê $
(
êê$ %
void
êê% )
*
êê) *
data
êê+ /
,
êê/ 0
int
êê1 4
length
êê5 ;
,
êê; <
ref
êê= @&
NetworkInterfaceEndPoint
êêA Y
address
êêZ a
)
êêa b
{
ëë 
if
ìì 
(
ìì 
length
ìì 
<=
ìì 
$num
ìì 
)
ìì  
throw
îî 
new
îî 
ArgumentException
îî /
(
îî/ 0
$str
îî0 e
)
îîe f
;
îîf g
return
ññ 

ipcManager
ññ !
.
ññ! "
ReceiveMessageEx
ññ" 2
(
ññ2 3
localEndPoint
ññ3 @
,
ññ@ A
data
ññB F
,
ññF G
length
ññH N
,
ññN O
ref
ññP S
address
ññT [
)
ññ[ \
;
ññ\ ]
}
óó 
}
òò 	
public
°° 
	JobHandle
°° 
ScheduleReceive
°° (
(
°°( )#
NetworkPacketReceiver
°°) >
receiver
°°? G
,
°°G H
	JobHandle
°°I R
dep
°°S V
)
°°V W
{
¢¢ 	
var
££ 
job
££ 
=
££ 
new
££ 

ReceiveJob
££ $
{
§§ 
receiver
•• 
=
•• 
receiver
•• #
,
••# $

ipcManager
¶¶ 
=
¶¶ 

IPCManager
¶¶ '
.
¶¶' (
Instance
¶¶( 0
,
¶¶0 1
localEndPoint
ßß 
=
ßß 
LocalEndPoint
ßß  -
}
®® 
;
®® 
dep
©© 
=
©© 
job
©© 
.
©© 
Schedule
©© 
(
©© 
	JobHandle
©© (
.
©©( )!
CombineDependencies
©©) <
(
©©< =
dep
©©= @
,
©©@ A

IPCManager
©©B L
.
©©L M!
ManagerAccessHandle
©©M `
)
©©` a
)
©©a b
;
©©b c

IPCManager
™™ 
.
™™ !
ManagerAccessHandle
™™ *
=
™™+ ,
dep
™™- 0
;
™™0 1
return
´´ 
dep
´´ 
;
´´ 
}
¨¨ 	
public
¥¥ 
	JobHandle
¥¥ 
ScheduleSend
¥¥ %
(
¥¥% &
NativeQueue
¥¥& 1
<
¥¥1 2
QueuedSendMessage
¥¥2 C
>
¥¥C D
	sendQueue
¥¥E N
,
¥¥N O
	JobHandle
¥¥P Y
dep
¥¥Z ]
)
¥¥] ^
{
µµ 	
var
∂∂ 
sendJob
∂∂ 
=
∂∂ 
new
∂∂ 

SendUpdate
∂∂ (
{
∂∂) *

ipcManager
∂∂* 4
=
∂∂5 6

IPCManager
∂∂7 A
.
∂∂A B
Instance
∂∂B J
,
∂∂J K
ipcQueue
∂∂L T
=
∂∂U V
	sendQueue
∂∂W `
,
∂∂` a
localEndPoint
∂∂b o
=
∂∂p q
m_LocalEndPoint∂∂r Å
}∂∂Å Ç
;∂∂Ç É
dep
∑∑ 
=
∑∑ 
sendJob
∑∑ 
.
∑∑ 
Schedule
∑∑ "
(
∑∑" #
	JobHandle
∑∑# ,
.
∑∑, -!
CombineDependencies
∑∑- @
(
∑∑@ A
dep
∑∑A D
,
∑∑D E

IPCManager
∑∑F P
.
∑∑P Q!
ManagerAccessHandle
∑∑Q d
)
∑∑d e
)
∑∑e f
;
∑∑f g

IPCManager
∏∏ 
.
∏∏ !
ManagerAccessHandle
∏∏ *
=
∏∏+ ,
dep
∏∏- 0
;
∏∏0 1
return
ππ 
dep
ππ 
;
ππ 
}
∫∫ 	
public
√√ 
unsafe
√√ 
int
√√ 
Bind
√√ 
(
√√ &
NetworkInterfaceEndPoint
√√ 7
endpoint
√√8 @
)
√√@ A
{
ƒƒ 	
if
∆∆ 
(
∆∆ 
endpoint
∆∆ 
.
∆∆ 

dataLength
∆∆ #
!=
∆∆$ &
$num
∆∆' (
||
∆∆) +
*
∆∆, -
(
∆∆- .
int
∆∆. 1
*
∆∆1 2
)
∆∆2 3
endpoint
∆∆3 ;
.
∆∆; <
data
∆∆< @
==
∆∆A C
$num
∆∆D E
)
∆∆E F
throw
«« 
new
«« '
InvalidOperationException
«« 3
(
««3 4
)
««4 5
;
««5 6
m_LocalEndPoint
…… 
[
…… 
$num
…… 
]
…… 
=
……  
endpoint
……! )
;
……) *
return
   
$num
   
;
   
}
ÀÀ 	
public
—— 
int
—— 
Listen
—— 
(
—— 
)
—— 
{
““ 	
return
”” 
$num
”” 
;
”” 
}
‘‘ 	
static
ŸŸ &
TransportFunctionPointer
ŸŸ '
<
ŸŸ' ("
NetworkSendInterface
ŸŸ( <
.
ŸŸ< =&
BeginSendMessageDelegate
ŸŸ= U
>
ŸŸU V-
BeginSendMessageFunctionPointer
ŸŸW v
=
ŸŸw x
new
ŸŸy |'
TransportFunctionPointerŸŸ} ï
<ŸŸï ñ$
NetworkSendInterfaceŸŸñ ™
.ŸŸ™ ´(
BeginSendMessageDelegateŸŸ´ √
>ŸŸ√ ƒ
(ŸŸƒ ≈ 
BeginSendMessageŸŸ≈ ’
)ŸŸ’ ÷
;ŸŸ÷ ◊
static
›› &
TransportFunctionPointer
›› '
<
››' ("
NetworkSendInterface
››( <
.
››< =$
EndSendMessageDelegate
››= S
>
››S T+
EndSendMessageFunctionPointer
››U r
=
››s t
new
››u x'
TransportFunctionPointer››y ë
<››ë í$
NetworkSendInterface››í ¶
.››¶ ß&
EndSendMessageDelegate››ß Ω
>››Ω æ
(››æ ø
EndSendMessage››ø Õ
)››Õ Œ
;››Œ œ
static
·· &
TransportFunctionPointer
·· '
<
··' ("
NetworkSendInterface
··( <
.
··< =&
AbortSendMessageDelegate
··= U
>
··U V-
AbortSendMessageFunctionPointer
··W v
=
··w x
new
··y |'
TransportFunctionPointer··} ï
<··ï ñ$
NetworkSendInterface··ñ ™
.··™ ´(
AbortSendMessageDelegate··´ √
>··√ ƒ
(··ƒ ≈ 
AbortSendMessage··≈ ’
)··’ ÷
;··÷ ◊
public
ÁÁ "
NetworkSendInterface
ÁÁ #!
CreateSendInterface
ÁÁ$ 7
(
ÁÁ7 8
)
ÁÁ8 9
{
ËË 	
return
ÈÈ 
new
ÈÈ "
NetworkSendInterface
ÈÈ +
{
ÍÍ 
BeginSendMessage
ÎÎ  
=
ÎÎ! "-
BeginSendMessageFunctionPointer
ÎÎ# B
,
ÎÎB C
EndSendMessage
ÏÏ 
=
ÏÏ  +
EndSendMessageFunctionPointer
ÏÏ! >
,
ÏÏ> ?
AbortSendMessage
ÌÌ  
=
ÌÌ! "-
AbortSendMessageFunctionPointer
ÌÌ# B
,
ÌÌB C
}
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
[
¯¯ 	
BurstCompile
¯¯	 
(
¯¯ 
DisableDirectCall
¯¯ '
=
¯¯( )
true
¯¯* .
)
¯¯. /
]
¯¯/ 0
[
˘˘ 	
AOT
˘˘	 
.
˘˘ !
MonoPInvokeCallback
˘˘  
(
˘˘  !
typeof
˘˘! '
(
˘˘' ("
NetworkSendInterface
˘˘( <
.
˘˘< =&
BeginSendMessageDelegate
˘˘= U
)
˘˘U V
)
˘˘V W
]
˘˘W X
private
˙˙ 
static
˙˙ 
unsafe
˙˙ 
int
˙˙ !
BeginSendMessage
˙˙" 2
(
˙˙2 3
out
˙˙3 6(
NetworkInterfaceSendHandle
˙˙7 Q
handle
˙˙R X
,
˙˙X Y
IntPtr
˙˙Z `
userData
˙˙a i
,
˙˙i j
int
˙˙k n"
requiredPayloadSize˙˙o Ç
)˙˙Ç É
{
˚˚ 	
handle
¸¸ 
.
¸¸ 
id
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸ 
handle
˝˝ 
.
˝˝ 
size
˝˝ 
=
˝˝ 
$num
˝˝ 
;
˝˝ 
handle
˛˛ 
.
˛˛ 
capacity
˛˛ 
=
˛˛ !
requiredPayloadSize
˛˛ 1
;
˛˛1 2
handle
ˇˇ 
.
ˇˇ 
data
ˇˇ 
=
ˇˇ 
(
ˇˇ 
IntPtr
ˇˇ !
)
ˇˇ! "
UnsafeUtility
ˇˇ" /
.
ˇˇ/ 0
Malloc
ˇˇ0 6
(
ˇˇ6 7
handle
ˇˇ7 =
.
ˇˇ= >
capacity
ˇˇ> F
,
ˇˇF G
$num
ˇˇH I
,
ˇˇI J
	Allocator
ˇˇK T
.
ˇˇT U
Temp
ˇˇU Y
)
ˇˇY Z
;
ˇˇZ [
handle
ÄÄ 
.
ÄÄ 
flags
ÄÄ 
=
ÄÄ 
default
ÄÄ "
;
ÄÄ" #
return
ÅÅ 
$num
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
[
åå 	
BurstCompile
åå	 
(
åå 
DisableDirectCall
åå '
=
åå( )
true
åå* .
)
åå. /
]
åå/ 0
[
çç 	
AOT
çç	 
.
çç !
MonoPInvokeCallback
çç  
(
çç  !
typeof
çç! '
(
çç' ("
NetworkSendInterface
çç( <
.
çç< =$
EndSendMessageDelegate
çç= S
)
ççS T
)
ççT U
]
ççU V
private
éé 
static
éé 
unsafe
éé 
int
éé !
EndSendMessage
éé" 0
(
éé0 1
ref
éé1 4(
NetworkInterfaceSendHandle
éé5 O
handle
ééP V
,
ééV W
ref
ééX [&
NetworkInterfaceEndPoint
éé\ t
address
ééu |
,
éé| }
IntPtréé~ Ñ
userDataééÖ ç
,ééç é
refééè í&
NetworkSendQueueHandleééì ©
sendQueueHandleéé™ π
)ééπ ∫
{
èè 	
var
êê 
	sendQueue
êê 
=
êê 
sendQueueHandle
êê +
.
êê+ ,

FromHandle
êê, 6
(
êê6 7
)
êê7 8
;
êê8 9
var
ëë 
msg
ëë 
=
ëë 
default
ëë 
(
ëë 
QueuedSendMessage
ëë /
)
ëë/ 0
;
ëë0 1
msg
íí 
.
íí 
Dest
íí 
=
íí 
address
íí 
;
íí 
msg
ìì 
.
ìì 

DataLength
ìì 
=
ìì 
handle
ìì #
.
ìì# $
size
ìì$ (
;
ìì( )
UnsafeUtility
îî 
.
îî 
MemCpy
îî  
(
îî  !
msg
îî! $
.
îî$ %
Data
îî% )
,
îî) *
(
îî+ ,
void
îî, 0
*
îî0 1
)
îî1 2
handle
îî2 8
.
îî8 9
data
îî9 =
,
îî= >
handle
îî? E
.
îîE F
size
îîF J
)
îîJ K
;
îîK L
	sendQueue
ññ 
.
ññ 
Enqueue
ññ 
(
ññ 
msg
ññ !
)
ññ! "
;
ññ" #
return
óó 
handle
óó 
.
óó 
size
óó 
;
óó 
}
òò 	
[
üü 	
BurstCompile
üü	 
(
üü 
DisableDirectCall
üü '
=
üü( )
true
üü* .
)
üü. /
]
üü/ 0
[
†† 	
AOT
††	 
.
†† !
MonoPInvokeCallback
††  
(
††  !
typeof
††! '
(
††' ("
NetworkSendInterface
††( <
.
††< =&
AbortSendMessageDelegate
††= U
)
††U V
)
††V W
]
††W X
private
°° 
static
°° 
void
°° 
AbortSendMessage
°° ,
(
°°, -
ref
°°- 0(
NetworkInterfaceSendHandle
°°1 K
handle
°°L R
,
°°R S
IntPtr
°°T Z
userData
°°[ c
)
°°c d
{
¢¢ 	
}
££ 	
}
§§ 
}•• ¶
dC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\RelayConnectionData.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
public

 

unsafe

 
struct

 
RelayConnectionData

 ,
{ 
public 
const 
int 
k_Length !
=" #
$num$ '
;' (
public 
fixed 
byte 
Value 
[  
k_Length  (
]( )
;) *
public 
static 
RelayConnectionData )
FromBytePointer* 9
(9 :
byte: >
*> ?
dataPtr@ G
,G H
intI L
lengthM S
)S T
{ 	
if 
( 
length 
!= 
k_Length "
)" #
{   
throw"" 
new"" 
ArgumentException"" +
(""+ ,
$""", .
$str"". ]
{""] ^
k_Length""^ f
}""f g
$str""g p
{""p q
length""q w
}""w x
$str""x y
"""y z
)""z {
;""{ |
}'' 
var)) 
connectionData)) 
=))  
new))! $
RelayConnectionData))% 8
())8 9
)))9 :
;)): ;
UnsafeUtility** 
.** 
MemCpy**  
(**  !
connectionData**! /
.**/ 0
Value**0 5
,**5 6
dataPtr**7 >
,**> ?
length**@ F
)**F G
;**G H
return++ 
connectionData++ !
;++! "
},, 	
}-- 
}.. î’
aC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\UnityTransportProtocol.cs
	namespace		 	
Unity		
 
.		 

Networking		 
.		 
	Transport		 $
{

 
[ 
BurstCompile 
] 
internal 
struct "
UnityTransportProtocol *
:+ ,
INetworkProtocol- =
{ 
public 
void 

Initialize 
( 
NetworkSettings .
settings/ 7
)7 8
{9 :
}: ;
public 
void 
Dispose 
( 
) 
{ 
}  
public 
int 
Bind 
( 
INetworkInterface )
networkInterface* :
,: ;
ref< ?$
NetworkInterfaceEndPoint@ X
localEndPointY f
)f g
{ 	
if 
( 
networkInterface  
.  !
Bind! %
(% &
localEndPoint& 3
)3 4
!=5 7
$num8 9
)9 :
return 
- 
$num 
; 
return 
$num 
; 
} 	
public 
int #
CreateConnectionAddress *
(* +
INetworkInterface+ <
networkInterface= M
,M N
NetworkEndPointO ^
remoteEndpoint_ m
,m n
outo r%
NetworkInterfaceEndPoint	s ã
remoteAddress
å ô
)
ô ö
{ 	
remoteAddress 
= 
default #
;# $
return 
networkInterface #
.# $#
CreateInterfaceEndPoint$ ;
(; <
remoteEndpoint< J
,J K
outL O
remoteAddressP ]
)] ^
;^ _
} 	
public 
NetworkEndPoint 
GetRemoteEndPoint 0
(0 1
INetworkInterface1 B
networkInterfaceC S
,S T$
NetworkInterfaceEndPointU m
addressn u
)u v
{   	
return!! 
networkInterface!! #
.!!# $
GetGenericEndPoint!!$ 6
(!!6 7
address!!7 >
)!!> ?
;!!? @
}"" 	
public$$ 
NetworkProtocol$$ #
CreateProtocolInterface$$ 6
($$6 7
)$$7 8
{%% 	
return&& 
new&& 
NetworkProtocol&& &
(&&& '!
computePacketOverhead'' %
:''% &
new''' *$
TransportFunctionPointer''+ C
<''C D
NetworkProtocol''D S
.''S T)
ComputePacketOverheadDelegate''T q
>''q r
(''r s"
ComputePacketOverhead	''s à
)
''à â
,
''â ä
processReceive(( 
:(( 
new((  #$
TransportFunctionPointer(($ <
<((< =
NetworkProtocol((= L
.((L M"
ProcessReceiveDelegate((M c
>((c d
(((d e
ProcessReceive((e s
)((s t
,((t u
processSend)) 
:)) 
new))  $
TransportFunctionPointer))! 9
<))9 :
NetworkProtocol)): I
.))I J
ProcessSendDelegate))J ]
>))] ^
())^ _
ProcessSend))_ j
)))j k
,))k l'
processSendConnectionAccept** +
:**+ ,
new**- 0$
TransportFunctionPointer**1 I
<**I J
NetworkProtocol**J Y
.**Y Z/
#ProcessSendConnectionAcceptDelegate**Z }
>**} ~
(**~ (
ProcessSendConnectionAccept	** ö
)
**ö õ
,
**õ ú
connect++ 
:++ 
new++ $
TransportFunctionPointer++ 5
<++5 6
NetworkProtocol++6 E
.++E F
ConnectDelegate++F U
>++U V
(++V W
Connect++W ^
)++^ _
,++_ `

disconnect,, 
:,, 
new,, $
TransportFunctionPointer,,  8
<,,8 9
NetworkProtocol,,9 H
.,,H I
DisconnectDelegate,,I [
>,,[ \
(,,\ ]

Disconnect,,] g
),,g h
,,,h i
processSendPing-- 
:--  
new--! $$
TransportFunctionPointer--% =
<--= >
NetworkProtocol--> M
.--M N#
ProcessSendPingDelegate--N e
>--e f
(--f g
ProcessSendPing--g v
)--v w
,--w x
processSendPong.. 
:..  
new..! $$
TransportFunctionPointer..% =
<..= >
NetworkProtocol..> M
...M N#
ProcessSendPongDelegate..N e
>..e f
(..f g
ProcessSendPong..g v
)..v w
,..w x
update// 
:// 
new// $
TransportFunctionPointer// 4
<//4 5
NetworkProtocol//5 D
.//D E
UpdateDelegate//E S
>//S T
(//T U
Update//U [
)//[ \
,//\ ]
needsUpdate00 
:00 
false00 "
,00" #
userData11 
:11 
IntPtr11  
.11  !
Zero11! %
,11% &
maxHeaderSize22 
:22 

UdpCHeader22 )
.22) *
Length22* 0
,220 1
maxFooterSize33 
:33 
SessionIdToken33 -
.33- .
k_Length33. 6
)44 
;44 
}55 	
[77 	
BurstCompile77	 
(77 
DisableDirectCall77 '
=77( )
true77* .
)77. /
]77/ 0
[88 	
MonoPInvokeCallback88	 
(88 
typeof88 #
(88# $
NetworkProtocol88$ 3
.883 4)
ComputePacketOverheadDelegate884 Q
)88Q R
)88R S
]88S T
public99 
static99 
int99 !
ComputePacketOverhead99 /
(99/ 0
ref990 3
NetworkDriver994 A
.99A B

Connection99B L

connection99M W
,99W X
out99Y \
int99] `

dataOffset99a k
)99k l
{:: 	

dataOffset;; 
=;; 

UdpCHeader;; #
.;;# $
Length;;$ *
;;;* +
var<< 

footerSize<< 
=<< 

connection<< '
.<<' (
DidReceiveData<<( 6
==<<7 9
$num<<: ;
?<<< =
SessionIdToken<<> L
.<<L M
k_Length<<M U
:<<V W
$num<<X Y
;<<Y Z
return== 

dataOffset== 
+== 

footerSize==  *
;==* +
}>> 	
[@@ 	
BurstCompile@@	 
(@@ 
DisableDirectCall@@ '
=@@( )
true@@* .
)@@. /
]@@/ 0
[AA 	
MonoPInvokeCallbackAA	 
(AA 
typeofAA #
(AA# $
NetworkProtocolAA$ 3
.AA3 4"
ProcessReceiveDelegateAA4 J
)AAJ K
)AAK L
]AAL M
publicBB 
staticBB 
voidBB 
ProcessReceiveBB )
(BB) *
IntPtrBB* 0
streamBB1 7
,BB7 8
refBB9 <$
NetworkInterfaceEndPointBB= U
endpointBBV ^
,BB^ _
intBB` c
sizeBBd h
,BBh i
refBBj m!
NetworkSendInterface	BBn Ç
sendInterface
BBÉ ê
,
BBê ë
ref
BBí ï$
NetworkSendQueueHandle
BBñ ¨
queueHandle
BB≠ ∏
,
BB∏ π
IntPtr
BB∫ ¿
userData
BB¡ …
,
BB…  
ref
BBÀ Œ"
ProcessPacketCommand
BBœ „
command
BB‰ Î
)
BBÎ Ï
{CC 	
unsafeDD 
{EE 
varFF 
dataFF 
=FF 
(FF 
byteFF  
*FF  !
)FF! "
streamFF" (
;FF( )
varGG 
headerGG 
=GG 
*GG 
(GG 

UdpCHeaderGG )
*GG) *
)GG* +
dataGG+ /
;GG/ 0
ifII 
(II 
sizeII 
<II 

UdpCHeaderII %
.II% &
LengthII& ,
)II, -
{JJ 
UnityEngineKK 
.KK  
DebugKK  %
.KK% &
LogErrorKK& .
(KK. /
$strKK/ S
)KKS T
;KKT U
commandLL 
.LL 
TypeLL  
=LL! "$
ProcessPacketCommandTypeLL# ;
.LL; <
DropLL< @
;LL@ A
returnMM 
;MM 
}NN 
varPP 
typePP 
=PP 
(PP 
UdpCProtocolPP (
)PP( )
headerPP) /
.PP/ 0
TypePP0 4
;PP4 5
commandRR 
.RR 
AddressRR 
=RR  !
endpointRR" *
;RR* +
commandSS 
.SS 
	SessionIdSS !
=SS" #
headerSS$ *
.SS* +
SessionTokenSS+ 7
;SS7 8
ifUU 
(UU 
typeUU 
!=UU 
UdpCProtocolUU (
.UU( )
DataUU) -
&&UU. 0
(UU1 2
headerUU2 8
.UU8 9
FlagsUU9 >
&UU? @

UdpCHeaderUUA K
.UUK L
HeaderFlagsUUL W
.UUW X
HasPipelineUUX c
)UUc d
!=UUe g
$numUUh i
)UUi j
{VV 
UnityEngineWW 
.WW  
DebugWW  %
.WW% &
LogErrorWW& .
(WW. /
$strWW/ e
)WWe f
;WWf g
commandXX 
.XX 
TypeXX  
=XX! "$
ProcessPacketCommandTypeXX# ;
.XX; <
DropXX< @
;XX@ A
returnYY 
;YY 
}ZZ 
switch\\ 
(\\ 
type\\ 
)\\ 
{]] 
case^^ 
UdpCProtocol^^ %
.^^% &
ConnectionAccept^^& 6
:^^6 7
if__ 
(__ 
(__ 
header__ #
.__# $
Flags__$ )
&__* +

UdpCHeader__, 6
.__6 7
HeaderFlags__7 B
.__B C
HasConnectToken__C R
)__R S
==__T V
$num__W X
)__X Y
{`` 
UnityEngineaa '
.aa' (
Debugaa( -
.aa- .
LogErroraa. 6
(aa6 7
$straa7 m
)aam n
;aan o
commandbb #
.bb# $
Typebb$ (
=bb) *$
ProcessPacketCommandTypebb+ C
.bbC D
DropbbD H
;bbH I
returncc "
;cc" #
}dd 
ifff 
(ff 
sizeff  
!=ff! #

UdpCHeaderff$ .
.ff. /
Lengthff/ 5
+ff6 7
SessionIdTokenff8 F
.ffF G
k_LengthffG O
)ffO P
{gg 
UnityEnginehh '
.hh' (
Debughh( -
.hh- .
LogErrorhh. 6
(hh6 7
$strhh7 o
)hho p
;hhp q
commandii #
.ii# $
Typeii$ (
=ii) *$
ProcessPacketCommandTypeii+ C
.iiC D
DropiiD H
;iiH I
returnjj "
;jj" #
}kk 
commandmm 
.mm  
Typemm  $
=mm% &$
ProcessPacketCommandTypemm' ?
.mm? @
ConnectionAcceptmm@ P
;mmP Q
commandnn 
.nn  
Asnn  "
.nn" #
ConnectionAcceptnn# 3
.nn3 4
ConnectionTokennn4 C
=nnD E
*nnF G
(nnG H
SessionIdTokennnH V
*nnV W
)nnW X
(nnX Y
streamnnY _
+nn` a

UdpCHeadernnb l
.nnl m
Lengthnnm s
)nns t
;nnt u
returnoo 
;oo 
caseqq 
UdpCProtocolqq %
.qq% &
ConnectionRejectqq& 6
:qq6 7
commandrr 
.rr  
Typerr  $
=rr% &$
ProcessPacketCommandTyperr' ?
.rr? @
ConnectionRejectrr@ P
;rrP Q
returnss 
;ss 
caseuu 
UdpCProtocoluu %
.uu% &
ConnectionRequestuu& 7
:uu7 8
commandvv 
.vv  
Typevv  $
=vv% &$
ProcessPacketCommandTypevv' ?
.vv? @
ConnectionRequestvv@ Q
;vvQ R
returnww 
;ww 
caseyy 
UdpCProtocolyy %
.yy% &

Disconnectyy& 0
:yy0 1
commandzz 
.zz  
Typezz  $
=zz% &$
ProcessPacketCommandTypezz' ?
.zz? @

Disconnectzz@ J
;zzJ K
return{{ 
;{{ 
case}} 
UdpCProtocol}} %
.}}% &
Ping}}& *
:}}* +
command~~ 
.~~  
Type~~  $
=~~% &$
ProcessPacketCommandType~~' ?
.~~? @
Ping~~@ D
;~~D E
return 
; 
case
ÅÅ 
UdpCProtocol
ÅÅ %
.
ÅÅ% &
Pong
ÅÅ& *
:
ÅÅ* +
command
ÇÇ 
.
ÇÇ  
Type
ÇÇ  $
=
ÇÇ% &&
ProcessPacketCommandType
ÇÇ' ?
.
ÇÇ? @
Pong
ÇÇ@ D
;
ÇÇD E
return
ÉÉ 
;
ÉÉ 
case
ÖÖ 
UdpCProtocol
ÖÖ %
.
ÖÖ% &
Data
ÖÖ& *
:
ÖÖ* +
var
ÜÜ 
payloadLength
ÜÜ )
=
ÜÜ* +
size
ÜÜ, 0
-
ÜÜ1 2

UdpCHeader
ÜÜ3 =
.
ÜÜ= >
Length
ÜÜ> D
;
ÜÜD E
var
áá 
hasPipeline
áá '
=
áá( )
(
áá* +
header
áá+ 1
.
áá1 2
Flags
áá2 7
&
áá8 9

UdpCHeader
áá: D
.
ááD E
HeaderFlags
ááE P
.
ááP Q
HasPipeline
ááQ \
)
áá\ ]
!=
áá^ `
$num
ááa b
?
áác d
(
ááe f
byte
ááf j
)
ááj k
$num
áák l
:
áám n
(
ááo p
byte
ááp t
)
áát u
$num
ááu v
;
ááv w
var
àà  
hasConnectionToken
àà .
=
àà/ 0
(
àà1 2
header
àà2 8
.
àà8 9
Flags
àà9 >
&
àà? @

UdpCHeader
ààA K
.
ààK L
HeaderFlags
ààL W
.
ààW X
HasConnectToken
ààX g
)
ààg h
!=
àài k
$num
ààl m
;
ààm n
if
ää 
(
ää  
hasConnectionToken
ää .
)
ää. /
{
ãã 
payloadLength
åå )
-=
åå* ,
SessionIdToken
åå- ;
.
åå; <
k_Length
åå< D
;
ååD E
command
çç #
.
çç# $
Type
çç$ (
=
çç) *&
ProcessPacketCommandType
çç+ C
.
ççC D.
 DataWithImplicitConnectionAccept
ççD d
;
ççd e
command
éé #
.
éé# $
As
éé$ &
.
éé& '.
 DataWithImplicitConnectionAccept
éé' G
.
ééG H
Offset
ééH N
=
ééO P

UdpCHeader
ééQ [
.
éé[ \
Length
éé\ b
;
ééb c
command
èè #
.
èè# $
As
èè$ &
.
èè& '.
 DataWithImplicitConnectionAccept
èè' G
.
èèG H
Length
èèH N
=
èèO P
payloadLength
èèQ ^
;
èè^ _
command
êê #
.
êê# $
As
êê$ &
.
êê& '.
 DataWithImplicitConnectionAccept
êê' G
.
êêG H
HasPipelineByte
êêH W
=
êêX Y
hasPipeline
êêZ e
;
êêe f
command
ëë #
.
ëë# $
As
ëë$ &
.
ëë& '.
 DataWithImplicitConnectionAccept
ëë' G
.
ëëG H
ConnectionToken
ëëH W
=
ëëX Y
*
ëëZ [
(
ëë[ \
SessionIdToken
ëë\ j
*
ëëj k
)
ëëk l
(
ëël m
stream
ëëm s
+
ëët u

UdpCHeaderëëv Ä
.ëëÄ Å
LengthëëÅ á
+ëëà â
payloadLengthëëä ó
)ëëó ò
;ëëò ô
return
íí "
;
íí" #
}
ìì 
else
îî 
{
ïï 
command
ññ #
.
ññ# $
Type
ññ$ (
=
ññ) *&
ProcessPacketCommandType
ññ+ C
.
ññC D
Data
ññD H
;
ññH I
command
óó #
.
óó# $
As
óó$ &
.
óó& '
Data
óó' +
.
óó+ ,
Offset
óó, 2
=
óó3 4

UdpCHeader
óó5 ?
.
óó? @
Length
óó@ F
;
óóF G
command
òò #
.
òò# $
As
òò$ &
.
òò& '
Data
òò' +
.
òò+ ,
Length
òò, 2
=
òò3 4
payloadLength
òò5 B
;
òòB C
command
ôô #
.
ôô# $
As
ôô$ &
.
ôô& '
Data
ôô' +
.
ôô+ ,
HasPipelineByte
ôô, ;
=
ôô< =
hasPipeline
ôô> I
;
ôôI J
return
öö "
;
öö" #
}
õõ 
}
úú 
command
ûû 
.
ûû 
Type
ûû 
=
ûû &
ProcessPacketCommandType
ûû 7
.
ûû7 8
Drop
ûû8 <
;
ûû< =
}
üü 
}
†† 	
[
¢¢ 	
BurstCompile
¢¢	 
(
¢¢ 
DisableDirectCall
¢¢ '
=
¢¢( )
true
¢¢* .
)
¢¢. /
]
¢¢/ 0
[
££ 	!
MonoPInvokeCallback
££	 
(
££ 
typeof
££ #
(
££# $
NetworkProtocol
££$ 3
.
££3 4!
ProcessSendDelegate
££4 G
)
££G H
)
££H I
]
££I J
public
§§ 
static
§§ 
int
§§ 
ProcessSend
§§ %
(
§§% &
ref
§§& )
NetworkDriver
§§* 7
.
§§7 8

Connection
§§8 B

connection
§§C M
,
§§M N
bool
§§O S
hasPipeline
§§T _
,
§§_ `
ref
§§a d"
NetworkSendInterface
§§e y
sendInterface§§z á
,§§á à
ref§§â å*
NetworkInterfaceSendHandle§§ç ß

sendHandle§§® ≤
,§§≤ ≥
ref§§¥ ∑&
NetworkSendQueueHandle§§∏ Œ
queueHandle§§œ ⁄
,§§⁄ €
IntPtr§§‹ ‚
userData§§„ Î
)§§Î Ï
{
•• 	$
WriteSendMessageHeader
¶¶ "
(
¶¶" #
ref
¶¶# &

connection
¶¶' 1
,
¶¶1 2
hasPipeline
¶¶3 >
,
¶¶> ?
ref
¶¶@ C

sendHandle
¶¶D N
,
¶¶N O
$num
¶¶P Q
)
¶¶Q R
;
¶¶R S
return
ßß 
sendInterface
ßß  
.
ßß  !
EndSendMessage
ßß! /
.
ßß/ 0
Ptr
ßß0 3
.
ßß3 4
Invoke
ßß4 :
(
ßß: ;
ref
ßß; >

sendHandle
ßß? I
,
ßßI J
ref
ßßK N

connection
ßßO Y
.
ßßY Z
Address
ßßZ a
,
ßßa b
sendInterface
ßßc p
.
ßßp q
UserData
ßßq y
,
ßßy z
ref
ßß{ ~
queueHandleßß ä
)ßßä ã
;ßßã å
}
®® 	
internal
™™ 
static
™™ 
unsafe
™™ 
int
™™ "$
WriteSendMessageHeader
™™# 9
(
™™9 :
ref
™™: =
NetworkDriver
™™> K
.
™™K L

Connection
™™L V

connection
™™W a
,
™™a b
bool
™™c g
hasPipeline
™™h s
,
™™s t
ref
™™u x)
NetworkInterfaceSendHandle™™y ì

sendHandle™™î û
,™™û ü
int™™† £
offset™™§ ™
)™™™ ´
{
´´ 	
unsafe
¨¨ 
{
≠≠ 
var
ÆÆ 
flags
ÆÆ 
=
ÆÆ 
default
ÆÆ #
(
ÆÆ# $

UdpCHeader
ÆÆ$ .
.
ÆÆ. /
HeaderFlags
ÆÆ/ :
)
ÆÆ: ;
;
ÆÆ; <
var
ØØ 
capacity
ØØ 
=
ØØ 

sendHandle
ØØ )
.
ØØ) *
capacity
ØØ* 2
-
ØØ3 4
offset
ØØ5 ;
;
ØØ; <
var
∞∞ 
size
∞∞ 
=
∞∞ 

sendHandle
∞∞ %
.
∞∞% &
size
∞∞& *
-
∞∞+ ,
offset
∞∞- 3
;
∞∞3 4
if
≤≤ 
(
≤≤ 

connection
≤≤ 
.
≤≤ 
DidReceiveData
≤≤ -
==
≤≤. 0
$num
≤≤1 2
)
≤≤2 3
{
≥≥ 
flags
¥¥ 
|=
¥¥ 

UdpCHeader
¥¥ '
.
¥¥' (
HeaderFlags
¥¥( 3
.
¥¥3 4
HasConnectToken
¥¥4 C
;
¥¥C D
if
∑∑ 
(
∑∑ 
size
∑∑ 
+
∑∑ 
SessionIdToken
∑∑ -
.
∑∑- .
k_Length
∑∑. 6
>
∑∑7 8
capacity
∑∑9 A
)
∑∑A B
throw
∏∏ 
new
∏∏ !'
InvalidOperationException
∏∏" ;
(
∏∏; <
$str
∏∏< Z
)
∏∏Z [
;
∏∏[ \
SessionIdToken
∫∫ "
*
∫∫" #
connectionToken
∫∫$ 3
=
∫∫4 5
(
∫∫6 7
SessionIdToken
∫∫7 E
*
∫∫E F
)
∫∫F G
(
∫∫G H
(
∫∫H I
byte
∫∫I M
*
∫∫M N
)
∫∫N O

sendHandle
∫∫O Y
.
∫∫Y Z
data
∫∫Z ^
+
∫∫_ `

sendHandle
∫∫a k
.
∫∫k l
size
∫∫l p
)
∫∫p q
;
∫∫q r
*
ªª 
connectionToken
ªª $
=
ªª% &

connection
ªª' 1
.
ªª1 2
ReceiveToken
ªª2 >
;
ªª> ?

sendHandle
ºº 
.
ºº 
size
ºº #
+=
ºº$ &
SessionIdToken
ºº' 5
.
ºº5 6
k_Length
ºº6 >
;
ºº> ?
}
ΩΩ 
if
øø 
(
øø 
hasPipeline
øø 
)
øø  
{
¿¿ 
flags
¡¡ 
|=
¡¡ 

UdpCHeader
¡¡ '
.
¡¡' (
HeaderFlags
¡¡( 3
.
¡¡3 4
HasPipeline
¡¡4 ?
;
¡¡? @
}
¬¬ 

UdpCHeader
ƒƒ 
*
ƒƒ 
header
ƒƒ "
=
ƒƒ# $
(
ƒƒ% &

UdpCHeader
ƒƒ& 0
*
ƒƒ0 1
)
ƒƒ1 2
(
ƒƒ2 3

sendHandle
ƒƒ3 =
.
ƒƒ= >
data
ƒƒ> B
+
ƒƒC D
offset
ƒƒE K
)
ƒƒK L
;
ƒƒL M
*
≈≈ 
header
≈≈ 
=
≈≈ 
new
≈≈ 

UdpCHeader
≈≈ (
{
∆∆ 
Type
«« 
=
«« 
(
«« 
byte
««  
)
««  !
UdpCProtocol
««! -
.
««- .
Data
««. 2
,
««2 3
SessionToken
»»  
=
»»! "

connection
»»# -
.
»»- .
	SendToken
»». 7
,
»»7 8
Flags
…… 
=
…… 
flags
…… !
}
   
;
   
return
ÃÃ 

sendHandle
ÃÃ !
.
ÃÃ! "
size
ÃÃ" &
-
ÃÃ' (
offset
ÃÃ) /
;
ÃÃ/ 0
}
ÕÕ 
}
ŒŒ 	
[
–– 	
BurstCompile
––	 
(
–– 
DisableDirectCall
–– '
=
––( )
true
––* .
)
––. /
]
––/ 0
[
—— 	!
MonoPInvokeCallback
——	 
(
—— 
typeof
—— #
(
——# $
NetworkProtocol
——$ 3
.
——3 41
#ProcessSendConnectionAcceptDelegate
——4 W
)
——W X
)
——X Y
]
——Y Z
public
““ 
static
““ 
void
““ )
ProcessSendConnectionAccept
““ 6
(
““6 7
ref
““7 :
NetworkDriver
““; H
.
““H I

Connection
““I S

connection
““T ^
,
““^ _
ref
““` c"
NetworkSendInterface
““d x
sendInterface““y Ü
,““Ü á
ref““à ã&
NetworkSendQueueHandle““å ¢
queueHandle““£ Æ
,““Æ Ø
IntPtr““∞ ∂
userData““∑ ø
)““ø ¿
{
”” 	
unsafe
‘‘ 
{
’’ (
NetworkInterfaceSendHandle
÷÷ *

sendHandle
÷÷+ 5
;
÷÷5 6
if
◊◊ 
(
◊◊ 
sendInterface
◊◊ !
.
◊◊! "
BeginSendMessage
◊◊" 2
.
◊◊2 3
Ptr
◊◊3 6
.
◊◊6 7
Invoke
◊◊7 =
(
◊◊= >
out
◊◊> A

sendHandle
◊◊B L
,
◊◊L M
sendInterface
◊◊N [
.
◊◊[ \
UserData
◊◊\ d
,
◊◊d e

UdpCHeader
◊◊f p
.
◊◊p q
Length
◊◊q w
+
◊◊x y
SessionIdToken◊◊z à
.◊◊à â
k_Length◊◊â ë
)◊◊ë í
!=◊◊ì ï
$num◊◊ñ ó
)◊◊ó ò
{
ÿÿ 
UnityEngine
ŸŸ 
.
ŸŸ  
Debug
ŸŸ  %
.
ŸŸ% &
LogError
ŸŸ& .
(
ŸŸ. /
$str
ŸŸ/ Y
)
ŸŸY Z
;
ŸŸZ [
return
⁄⁄ 
;
⁄⁄ 
}
€€ 
byte
›› 
*
›› 
packet
›› 
=
›› 
(
››  
byte
››  $
*
››$ %
)
››% &

sendHandle
››& 0
.
››0 1
data
››1 5
;
››5 6
var
ﬁﬁ 
size
ﬁﬁ 
=
ﬁﬁ *
WriteConnectionAcceptMessage
ﬁﬁ 7
(
ﬁﬁ7 8
ref
ﬁﬁ8 ;

connection
ﬁﬁ< F
,
ﬁﬁF G
packet
ﬁﬁH N
,
ﬁﬁN O

sendHandle
ﬁﬁP Z
.
ﬁﬁZ [
capacity
ﬁﬁ[ c
)
ﬁﬁc d
;
ﬁﬁd e
if
‡‡ 
(
‡‡ 
size
‡‡ 
<
‡‡ 
$num
‡‡ 
)
‡‡ 
{
·· 
sendInterface
‚‚ !
.
‚‚! "
AbortSendMessage
‚‚" 2
.
‚‚2 3
Ptr
‚‚3 6
.
‚‚6 7
Invoke
‚‚7 =
(
‚‚= >
ref
‚‚> A

sendHandle
‚‚B L
,
‚‚L M
sendInterface
‚‚N [
.
‚‚[ \
UserData
‚‚\ d
)
‚‚d e
;
‚‚e f
UnityEngine
„„ 
.
„„  
Debug
„„  %
.
„„% &
LogError
„„& .
(
„„. /
$str
„„/ Y
)
„„Y Z
;
„„Z [
return
‰‰ 
;
‰‰ 
}
ÂÂ 

sendHandle
ÁÁ 
.
ÁÁ 
size
ÁÁ 
=
ÁÁ  !
size
ÁÁ" &
;
ÁÁ& '
if
ÈÈ 
(
ÈÈ 
sendInterface
ÈÈ !
.
ÈÈ! "
EndSendMessage
ÈÈ" 0
.
ÈÈ0 1
Ptr
ÈÈ1 4
.
ÈÈ4 5
Invoke
ÈÈ5 ;
(
ÈÈ; <
ref
ÈÈ< ?

sendHandle
ÈÈ@ J
,
ÈÈJ K
ref
ÈÈL O

connection
ÈÈP Z
.
ÈÈZ [
Address
ÈÈ[ b
,
ÈÈb c
sendInterface
ÈÈd q
.
ÈÈq r
UserData
ÈÈr z
,
ÈÈz {
ref
ÈÈ| 
queueHandleÈÈÄ ã
)ÈÈã å
<ÈÈç é
$numÈÈè ê
)ÈÈê ë
{
ÍÍ 
UnityEngine
ÎÎ 
.
ÎÎ  
Debug
ÎÎ  %
.
ÎÎ% &
LogError
ÎÎ& .
(
ÎÎ. /
$str
ÎÎ/ Y
)
ÎÎY Z
;
ÎÎZ [
return
ÏÏ 
;
ÏÏ 
}
ÌÌ 
}
ÓÓ 
}
ÔÔ 	
internal
ÒÒ 
static
ÒÒ 
int
ÒÒ 1
#GetConnectionAcceptMessageMaxLength
ÒÒ ?
(
ÒÒ? @
)
ÒÒ@ A
=>
ÒÒB D

UdpCHeader
ÒÒE O
.
ÒÒO P
Length
ÒÒP V
+
ÒÒW X
SessionIdToken
ÒÒY g
.
ÒÒg h
k_Length
ÒÒh p
;
ÒÒp q
internal
ÛÛ 
static
ÛÛ 
unsafe
ÛÛ 
int
ÛÛ "*
WriteConnectionAcceptMessage
ÛÛ# ?
(
ÛÛ? @
ref
ÛÛ@ C
NetworkDriver
ÛÛD Q
.
ÛÛQ R

Connection
ÛÛR \

connection
ÛÛ] g
,
ÛÛg h
byte
ÛÛi m
*
ÛÛm n
packet
ÛÛo u
,
ÛÛu v
int
ÛÛw z
capacityÛÛ{ É
)ÛÛÉ Ñ
{
ÙÙ 	
var
ıı 
size
ıı 
=
ıı 

UdpCHeader
ıı !
.
ıı! "
Length
ıı" (
;
ıı( )
if
˜˜ 
(
˜˜ 

connection
˜˜ 
.
˜˜ 
DidReceiveData
˜˜ )
==
˜˜* ,
$num
˜˜- .
)
˜˜. /
size
¯¯ 
+=
¯¯ 
SessionIdToken
¯¯ &
.
¯¯& '
k_Length
¯¯' /
;
¯¯/ 0
if
˙˙ 
(
˙˙ 
size
˙˙ 
>
˙˙ 
capacity
˙˙ 
)
˙˙  
{
˚˚ 
UnityEngine
¸¸ 
.
¸¸ 
Debug
¸¸ !
.
¸¸! "
LogError
¸¸" *
(
¸¸* +
$str
¸¸+ n
)
¸¸n o
;
¸¸o p
return
˝˝ 
-
˝˝ 
$num
˝˝ 
;
˝˝ 
}
˛˛ 
var
ÄÄ 
header
ÄÄ 
=
ÄÄ 
(
ÄÄ 

UdpCHeader
ÄÄ $
*
ÄÄ$ %
)
ÄÄ% &
packet
ÄÄ& ,
;
ÄÄ, -
*
ÅÅ 
header
ÅÅ 
=
ÅÅ 
new
ÅÅ 

UdpCHeader
ÅÅ $
{
ÇÇ 
Type
ÉÉ 
=
ÉÉ 
(
ÉÉ 
byte
ÉÉ 
)
ÉÉ 
UdpCProtocol
ÉÉ )
.
ÉÉ) *
ConnectionAccept
ÉÉ* :
,
ÉÉ: ;
SessionToken
ÑÑ 
=
ÑÑ 

connection
ÑÑ )
.
ÑÑ) *
	SendToken
ÑÑ* 3
,
ÑÑ3 4
Flags
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
}
ÜÜ 
;
ÜÜ 
if
àà 
(
àà 

connection
àà 
.
àà 
DidReceiveData
àà )
==
àà* ,
$num
àà- .
)
àà. /
{
ââ 
header
ää 
->
ää 
Flags
ää 
|=
ää  

UdpCHeader
ää! +
.
ää+ ,
HeaderFlags
ää, 7
.
ää7 8
HasConnectToken
ää8 G
;
ääG H
*
ãã 
(
ãã 
SessionIdToken
ãã  
*
ãã  !
)
ãã! "
(
ãã" #
packet
ãã# )
+
ãã* +

UdpCHeader
ãã, 6
.
ãã6 7
Length
ãã7 =
)
ãã= >
=
ãã? @

connection
ããA K
.
ããK L
ReceiveToken
ããL X
;
ããX Y
}
åå 
Assert
éé 
.
éé 
IsTrue
éé 
(
éé 
size
éé 
<=
éé !1
#GetConnectionAcceptMessageMaxLength
éé" E
(
ééE F
)
ééF G
)
ééG H
;
ééH I
return
êê 
size
êê 
;
êê 
}
ëë 	
private
ìì 
static
ìì 
unsafe
ìì 
int
ìì !#
SendHeaderOnlyMessage
ìì" 7
(
ìì7 8
UdpCProtocol
ìì8 D
type
ììE I
,
ììI J
SessionIdToken
ììK Y
token
ììZ _
,
ìì_ `
ref
ììa d
NetworkDriver
ììe r
.
ììr s

Connection
ììs }

connectionìì~ à
,ììà â
refììä ç$
NetworkSendInterfaceììé ¢
sendInterfaceìì£ ∞
,ìì∞ ±
refìì≤ µ&
NetworkSendQueueHandleìì∂ Ã
queueHandleììÕ ÿ
)ììÿ Ÿ
{
îî 	(
NetworkInterfaceSendHandle
ïï &

sendHandle
ïï' 1
;
ïï1 2
if
ññ 
(
ññ 
sendInterface
ññ 
.
ññ 
BeginSendMessage
ññ .
.
ññ. /
Ptr
ññ/ 2
.
ññ2 3
Invoke
ññ3 9
(
ññ9 :
out
ññ: =

sendHandle
ññ> H
,
ññH I
sendInterface
ññJ W
.
ññW X
UserData
ññX `
,
ññ` a

UdpCHeader
ññb l
.
ññl m
Length
ññm s
)
ññs t
!=
ññu w
$num
ññx y
)
ññy z
{
óó 
return
òò 
-
òò 
$num
òò 
;
òò 
}
ôô 
byte
õõ 
*
õõ 
packet
õõ 
=
õõ 
(
õõ 
byte
õõ  
*
õõ  !
)
õõ! "

sendHandle
õõ" ,
.
õõ, -
data
õõ- 1
;
õõ1 2

sendHandle
úú 
.
úú 
size
úú 
=
úú 

UdpCHeader
úú (
.
úú( )
Length
úú) /
;
úú/ 0
if
ùù 
(
ùù 

sendHandle
ùù 
.
ùù 
size
ùù 
>
ùù  !

sendHandle
ùù" ,
.
ùù, -
capacity
ùù- 5
)
ùù5 6
{
ûû 
sendInterface
üü 
.
üü 
AbortSendMessage
üü .
.
üü. /
Ptr
üü/ 2
.
üü2 3
Invoke
üü3 9
(
üü9 :
ref
üü: =

sendHandle
üü> H
,
üüH I
sendInterface
üüJ W
.
üüW X
UserData
üüX `
)
üü` a
;
üüa b
return
†† 
-
†† 
$num
†† 
;
†† 
}
°° 
var
££ 
header
££ 
=
££ 
(
££ 

UdpCHeader
££ $
*
££$ %
)
££% &
packet
££& ,
;
££, -
*
§§ 
header
§§ 
=
§§ 
new
§§ 

UdpCHeader
§§ $
{
•• 
Type
¶¶ 
=
¶¶ 
(
¶¶ 
byte
¶¶ 
)
¶¶ 
type
¶¶ !
,
¶¶! "
SessionToken
ßß 
=
ßß 
token
ßß $
,
ßß$ %
Flags
®® 
=
®® 
$num
®® 
}
©© 
;
©© 
if
¨¨ 
(
¨¨ 
sendInterface
¨¨ 
.
¨¨ 
EndSendMessage
¨¨ ,
.
¨¨, -
Ptr
¨¨- 0
.
¨¨0 1
Invoke
¨¨1 7
(
¨¨7 8
ref
¨¨8 ;

sendHandle
¨¨< F
,
¨¨F G
ref
¨¨H K

connection
¨¨L V
.
¨¨V W
Address
¨¨W ^
,
¨¨^ _
sendInterface
¨¨` m
.
¨¨m n
UserData
¨¨n v
,
¨¨v w
ref
¨¨x {
queueHandle¨¨| á
)¨¨á à
<¨¨â ä
$num¨¨ã å
)¨¨å ç
{
≠≠ 
return
ÆÆ 
-
ÆÆ 
$num
ÆÆ 
;
ÆÆ 
}
ØØ 
return
±± 

UdpCHeader
±± 
.
±± 
Length
±± $
;
±±$ %
}
≤≤ 	
[
¥¥ 	
BurstCompile
¥¥	 
(
¥¥ 
DisableDirectCall
¥¥ '
=
¥¥( )
true
¥¥* .
)
¥¥. /
]
¥¥/ 0
[
µµ 	!
MonoPInvokeCallback
µµ	 
(
µµ 
typeof
µµ #
(
µµ# $
NetworkProtocol
µµ$ 3
.
µµ3 4
ConnectDelegate
µµ4 C
)
µµC D
)
µµD E
]
µµE F
public
∂∂ 
static
∂∂ 
void
∂∂ 
Connect
∂∂ "
(
∂∂" #
ref
∂∂# &
NetworkDriver
∂∂' 4
.
∂∂4 5

Connection
∂∂5 ?

connection
∂∂@ J
,
∂∂J K
ref
∂∂L O"
NetworkSendInterface
∂∂P d
sendInterface
∂∂e r
,
∂∂r s
ref
∂∂t w%
NetworkSendQueueHandle∂∂x é
queueHandle∂∂è ö
,∂∂ö õ
IntPtr∂∂ú ¢
userData∂∂£ ´
)∂∂´ ¨
{
∑∑ 	
unsafe
∏∏ 
{
ππ 
var
∫∫ 
type
∫∫ 
=
∫∫ 
UdpCProtocol
∫∫ '
.
∫∫' (
ConnectionRequest
∫∫( 9
;
∫∫9 :
var
ªª 
token
ªª 
=
ªª 

connection
ªª &
.
ªª& '
ReceiveToken
ªª' 3
;
ªª3 4
var
ºº 
res
ºº 
=
ºº #
SendHeaderOnlyMessage
ºº /
(
ºº/ 0
type
ºº0 4
,
ºº4 5
token
ºº6 ;
,
ºº; <
ref
ºº= @

connection
ººA K
,
ººK L
ref
ººM P
sendInterface
ººQ ^
,
ºº^ _
ref
ºº` c
queueHandle
ººd o
)
ººo p
;
ººp q
if
ΩΩ 
(
ΩΩ 
res
ΩΩ 
==
ΩΩ 
-
ΩΩ 
$num
ΩΩ 
)
ΩΩ 
{
ææ 
UnityEngine
øø 
.
øø  
Debug
øø  %
.
øø% &
LogError
øø& .
(
øø. /
$str
øø/ Y
)
øøY Z
;
øøZ [
}
¿¿ 
}
¡¡ 
}
¬¬ 	
[
ƒƒ 	
BurstCompile
ƒƒ	 
(
ƒƒ 
DisableDirectCall
ƒƒ '
=
ƒƒ( )
true
ƒƒ* .
)
ƒƒ. /
]
ƒƒ/ 0
[
≈≈ 	!
MonoPInvokeCallback
≈≈	 
(
≈≈ 
typeof
≈≈ #
(
≈≈# $
NetworkProtocol
≈≈$ 3
.
≈≈3 4 
DisconnectDelegate
≈≈4 F
)
≈≈F G
)
≈≈G H
]
≈≈H I
public
∆∆ 
static
∆∆ 
void
∆∆ 

Disconnect
∆∆ %
(
∆∆% &
ref
∆∆& )
NetworkDriver
∆∆* 7
.
∆∆7 8

Connection
∆∆8 B

connection
∆∆C M
,
∆∆M N
ref
∆∆O R"
NetworkSendInterface
∆∆S g
sendInterface
∆∆h u
,
∆∆u v
ref
∆∆w z%
NetworkSendQueueHandle∆∆{ ë
queueHandle∆∆í ù
,∆∆ù û
IntPtr∆∆ü •
userData∆∆¶ Æ
)∆∆Æ Ø
{
«« 	
unsafe
»» 
{
…… 
var
   
type
   
=
   
UdpCProtocol
   '
.
  ' (

Disconnect
  ( 2
;
  2 3
var
ÀÀ 
token
ÀÀ 
=
ÀÀ 

connection
ÀÀ &
.
ÀÀ& '
	SendToken
ÀÀ' 0
;
ÀÀ0 1
var
ÃÃ 
res
ÃÃ 
=
ÃÃ #
SendHeaderOnlyMessage
ÃÃ /
(
ÃÃ/ 0
type
ÃÃ0 4
,
ÃÃ4 5
token
ÃÃ6 ;
,
ÃÃ; <
ref
ÃÃ= @

connection
ÃÃA K
,
ÃÃK L
ref
ÃÃM P
sendInterface
ÃÃQ ^
,
ÃÃ^ _
ref
ÃÃ` c
queueHandle
ÃÃd o
)
ÃÃo p
;
ÃÃp q
if
ÕÕ 
(
ÕÕ 
res
ÕÕ 
==
ÕÕ 
-
ÕÕ 
$num
ÕÕ 
)
ÕÕ 
{
ŒŒ 
UnityEngine
œœ 
.
œœ  
Debug
œœ  %
.
œœ% &
LogError
œœ& .
(
œœ. /
$str
œœ/ R
)
œœR S
;
œœS T
}
–– 
}
—— 
}
““ 	
[
‘‘ 	
BurstCompile
‘‘	 
(
‘‘ 
DisableDirectCall
‘‘ '
=
‘‘( )
true
‘‘* .
)
‘‘. /
]
‘‘/ 0
[
’’ 	!
MonoPInvokeCallback
’’	 
(
’’ 
typeof
’’ #
(
’’# $
NetworkProtocol
’’$ 3
.
’’3 4%
ProcessSendPingDelegate
’’4 K
)
’’K L
)
’’L M
]
’’M N
public
÷÷ 
static
÷÷ 
void
÷÷ 
ProcessSendPing
÷÷ *
(
÷÷* +
ref
÷÷+ .
NetworkDriver
÷÷/ <
.
÷÷< =

Connection
÷÷= G

connection
÷÷H R
,
÷÷R S
ref
÷÷T W"
NetworkSendInterface
÷÷X l
sendInterface
÷÷m z
,
÷÷z {
ref
÷÷| &
NetworkSendQueueHandle÷÷Ä ñ
queueHandle÷÷ó ¢
,÷÷¢ £
IntPtr÷÷§ ™
userData÷÷´ ≥
)÷÷≥ ¥
{
◊◊ 	
unsafe
ÿÿ 
{
ŸŸ 
var
⁄⁄ 
type
⁄⁄ 
=
⁄⁄ 
UdpCProtocol
⁄⁄ '
.
⁄⁄' (
Ping
⁄⁄( ,
;
⁄⁄, -
var
€€ 
token
€€ 
=
€€ 

connection
€€ &
.
€€& '
	SendToken
€€' 0
;
€€0 1
var
‹‹ 
res
‹‹ 
=
‹‹ #
SendHeaderOnlyMessage
‹‹ /
(
‹‹/ 0
type
‹‹0 4
,
‹‹4 5
token
‹‹6 ;
,
‹‹; <
ref
‹‹= @

connection
‹‹A K
,
‹‹K L
ref
‹‹M P
sendInterface
‹‹Q ^
,
‹‹^ _
ref
‹‹` c
queueHandle
‹‹d o
)
‹‹o p
;
‹‹p q
if
›› 
(
›› 
res
›› 
==
›› 
-
›› 
$num
›› 
)
›› 
{
ﬁﬁ 
UnityEngine
ﬂﬂ 
.
ﬂﬂ  
Debug
ﬂﬂ  %
.
ﬂﬂ% &
LogError
ﬂﬂ& .
(
ﬂﬂ. /
$str
ﬂﬂ/ L
)
ﬂﬂL M
;
ﬂﬂM N
}
‡‡ 
}
·· 
}
‚‚ 	
[
‰‰ 	
BurstCompile
‰‰	 
(
‰‰ 
DisableDirectCall
‰‰ '
=
‰‰( )
true
‰‰* .
)
‰‰. /
]
‰‰/ 0
[
ÂÂ 	!
MonoPInvokeCallback
ÂÂ	 
(
ÂÂ 
typeof
ÂÂ #
(
ÂÂ# $
NetworkProtocol
ÂÂ$ 3
.
ÂÂ3 4%
ProcessSendPongDelegate
ÂÂ4 K
)
ÂÂK L
)
ÂÂL M
]
ÂÂM N
public
ÊÊ 
static
ÊÊ 
void
ÊÊ 
ProcessSendPong
ÊÊ *
(
ÊÊ* +
ref
ÊÊ+ .
NetworkDriver
ÊÊ/ <
.
ÊÊ< =

Connection
ÊÊ= G

connection
ÊÊH R
,
ÊÊR S
ref
ÊÊT W"
NetworkSendInterface
ÊÊX l
sendInterface
ÊÊm z
,
ÊÊz {
ref
ÊÊ| &
NetworkSendQueueHandleÊÊÄ ñ
queueHandleÊÊó ¢
,ÊÊ¢ £
IntPtrÊÊ§ ™
userDataÊÊ´ ≥
)ÊÊ≥ ¥
{
ÁÁ 	
unsafe
ËË 
{
ÈÈ 
var
ÍÍ 
type
ÍÍ 
=
ÍÍ 
UdpCProtocol
ÍÍ '
.
ÍÍ' (
Pong
ÍÍ( ,
;
ÍÍ, -
var
ÎÎ 
token
ÎÎ 
=
ÎÎ 

connection
ÎÎ &
.
ÎÎ& '
	SendToken
ÎÎ' 0
;
ÎÎ0 1
var
ÏÏ 
res
ÏÏ 
=
ÏÏ #
SendHeaderOnlyMessage
ÏÏ /
(
ÏÏ/ 0
type
ÏÏ0 4
,
ÏÏ4 5
token
ÏÏ6 ;
,
ÏÏ; <
ref
ÏÏ= @

connection
ÏÏA K
,
ÏÏK L
ref
ÏÏM P
sendInterface
ÏÏQ ^
,
ÏÏ^ _
ref
ÏÏ` c
queueHandle
ÏÏd o
)
ÏÏo p
;
ÏÏp q
if
ÌÌ 
(
ÌÌ 
res
ÌÌ 
==
ÌÌ 
-
ÌÌ 
$num
ÌÌ 
)
ÌÌ 
{
ÓÓ 
UnityEngine
ÔÔ 
.
ÔÔ  
Debug
ÔÔ  %
.
ÔÔ% &
LogError
ÔÔ& .
(
ÔÔ. /
$str
ÔÔ/ L
)
ÔÔL M
;
ÔÔM N
}
 
}
ÒÒ 
}
ÚÚ 	
[
ÙÙ 	
BurstCompile
ÙÙ	 
(
ÙÙ 
DisableDirectCall
ÙÙ '
=
ÙÙ( )
true
ÙÙ* .
)
ÙÙ. /
]
ÙÙ/ 0
[
ıı 	!
MonoPInvokeCallback
ıı	 
(
ıı 
typeof
ıı #
(
ıı# $
NetworkProtocol
ıı$ 3
.
ıı3 4
UpdateDelegate
ıı4 B
)
ııB C
)
ııC D
]
ııD E
public
ˆˆ 
static
ˆˆ 
void
ˆˆ 
Update
ˆˆ !
(
ˆˆ! "
long
ˆˆ" &

updateTime
ˆˆ' 1
,
ˆˆ1 2
ref
ˆˆ3 6"
NetworkSendInterface
ˆˆ7 K
sendInterface
ˆˆL Y
,
ˆˆY Z
ref
ˆˆ[ ^$
NetworkSendQueueHandle
ˆˆ_ u
queueHandleˆˆv Å
,ˆˆÅ Ç
IntPtrˆˆÉ â
userDataˆˆä í
)ˆˆí ì
{
˜˜ 	
}
˘˘ 	
}
˙˙ 
}˚˚ œ1
YC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\AtomicFreeList.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
	Utilities% .
.. /
LowLevel/ 7
.7 8
Unsafe8 >
{ 
internal 
unsafe 
struct  
UnsafeAtomicFreeList /
:0 1
IDisposable2 =
{		 
[ 	-
!NativeDisableUnsafePtrRestriction	 *
]* +
private 
int 
* 
m_Buffer 
; 
private 
int 
m_Length 
; 
private 
	Allocator 
m_Allocator %
;% &
public 
int 
Capacity 
=> 
m_Length '
;' (
public 
int 
InUse 
=> 
m_Buffer $
[$ %
$num% &
]& '
-( )
m_Buffer* 2
[2 3
$num3 4
]4 5
;5 6
public 
bool 
	IsCreated 
=>  
m_Buffer! )
!=* ,
null- 1
;1 2
public  
UnsafeAtomicFreeList #
(# $
int$ '
capacity( 0
,0 1
	Allocator2 ;
	allocator< E
)E F
{ 	
m_Allocator 
= 
	allocator #
;# $
m_Length 
= 
capacity 
;  
var   
size   
=   
UnsafeUtility   $
.  $ %
SizeOf  % +
<  + ,
int  , /
>  / 0
(  0 1
)  1 2
*  3 4
(  5 6
capacity  6 >
+  ? @
$num  A B
)  B C
;  C D
m_Buffer!! 
=!! 
(!! 
int!! 
*!! 
)!! 
UnsafeUtility!! *
.!!* +
Malloc!!+ 1
(!!1 2
size!!2 6
,!!6 7
UnsafeUtility!!8 E
.!!E F
AlignOf!!F M
<!!M N
int!!N Q
>!!Q R
(!!R S
)!!S T
,!!T U
	allocator!!V _
)!!_ `
;!!` a
UnsafeUtility"" 
."" 
MemClear"" "
(""" #
m_Buffer""# +
,""+ ,
size""- 1
)""1 2
;""2 3
}## 	
public%% 
void%% 
Dispose%% 
(%% 
)%% 
{&& 	
if'' 
('' 
	IsCreated'' 
)'' 
UnsafeUtility(( 
.(( 
Free(( "
(((" #
m_Buffer((# +
,((+ ,
m_Allocator((- 8
)((8 9
;((9 :
})) 	
public// 
unsafe// 
void// 
Push// 
(//  
int//  #
item//$ (
)//( )
{00 	
int11 
*11 
buffer11 
=11 
m_Buffer11 "
;11" #
int22 
idx22 
=22 
Interlocked22 !
.22! "
	Increment22" +
(22+ ,
ref22, /
buffer220 6
[226 7
$num227 8
]228 9
)229 :
-22; <
$num22= >
;22> ?
while33 
(33 
Interlocked33 
.33 
CompareExchange33 .
(33. /
ref33/ 2
buffer333 9
[339 :
idx33: =
+33> ?
$num33@ A
]33A B
,33B C
item33D H
+33I J
$num33K L
,33L M
$num33N O
)33O P
!=33Q S
$num33T U
)33U V
{44 
}55 
}66 	
public== 
unsafe== 
int== 
Pop== 
(== 
)== 
{>> 	
int?? 
*?? 
buffer?? 
=?? 
m_Buffer?? "
;??" #
int@@ 
idx@@ 
=@@ 
buffer@@ 
[@@ 
$num@@ 
]@@ 
-@@  !
$num@@" #
;@@# $
whileAA 
(AA 
idxAA 
>=AA 
$numAA 
&&AA 
InterlockedAA *
.AA* +
CompareExchangeAA+ :
(AA: ;
refAA; >
bufferAA? E
[AAE F
$numAAF G
]AAG H
,AAH I
idxAAJ M
,AAM N
idxAAO R
+AAS T
$numAAU V
)AAV W
!=AAX Z
idxAA[ ^
+AA_ `
$numAAa b
)AAb c
idxBB 
=BB 
bufferBB 
[BB 
$numBB 
]BB 
-BB  !
$numBB" #
;BB# $
ifDD 
(DD 
idxDD 
>=DD 
$numDD 
)DD 
{EE 
intFF 
valFF 
=FF 
$numFF 
;FF 
whileGG 
(GG 
valGG 
==GG 
$numGG 
)GG  
{HH 
valII 
=II 
InterlockedII %
.II% &
ExchangeII& .
(II. /
refII/ 2
bufferII3 9
[II9 :
$numII: ;
+II< =
idxII> A
]IIA B
,IIB C
$numIID E
)IIE F
;IIF G
}JJ 
returnLL 
valLL 
-LL 
$numLL 
;LL 
}MM 
idxOO 
=OO 
InterlockedOO 
.OO 
	IncrementOO '
(OO' (
refOO( +
bufferOO, 2
[OO2 3
$numOO3 4
]OO4 5
)OO5 6
-OO7 8
$numOO9 :
;OO: ;
ifPP 
(PP 
idxPP 
>=PP 
CapacityPP 
)PP  
{QQ 
InterlockedRR 
.RR 
	DecrementRR %
(RR% &
refRR& )
bufferRR* 0
[RR0 1
$numRR1 2
]RR2 3
)RR3 4
;RR4 5
returnSS 
-SS 
$numSS 
;SS 
}TT 
returnVV 
idxVV 
;VV 
}WW 	
}XX 
}YY Îi
XC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkParams.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
public 

	interface 
INetworkParameter &
{		 
bool 
Validate 
( 
) 
; 
} 
public 

struct %
NetworkParameterConstants +
{ 
public 
const 
int !
InitialEventQueueSize .
=/ 0
$num1 4
;4 5
public 
const 
int 
InvalidConnectionId ,
=- .
-/ 0
$num0 1
;1 2
public"" 
const"" 
int""  
DriverDataStreamSize"" -
="". /
$num""0 2
*""3 4
$num""5 9
;""9 :
public$$ 
const$$ 
int$$ 
ConnectTimeoutMS$$ )
=$$* +
$num$$, 0
;$$0 1
public&& 
const&& 
int&& 
MaxConnectAttempts&& +
=&&, -
$num&&. 0
;&&0 1
public(( 
const(( 
int(( 
DisconnectTimeoutMS(( ,
=((- .
$num((/ 1
*((2 3
$num((4 8
;((8 9
public** 
const** 
int** 
HeartbeatTimeoutMS** +
=**, -
$num**. 1
;**1 2
public// 
const// 
int// 
MTU// 
=// 
$num// #
;//# $
}00 
public66 

struct66 &
NetworkDataStreamParameter66 ,
:66- .
INetworkParameter66/ @
{77 
internal88 
const88 
int88 
k_DefaultSize88 (
=88) *
$num88+ ,
;88, -
public;; 
int;; 
size;; 
;;; 
public== 
bool== 
Validate== 
(== 
)== 
{>> 	
var?? 
valid?? 
=?? 
true?? 
;?? 
ifAA 
(AA 
sizeAA 
<AA 
$numAA 
)AA 
{BB 
validCC 
=CC 
falseCC 
;CC 
UnityEngineDD 
.DD 
DebugDD !
.DD! "
LogErrorDD" *
(DD* +
$"DD+ -
{DD- .
nameofDD. 4
(DD4 5
sizeDD5 9
)DD9 :
}DD: ;
$strDD; C
{DDC D
sizeDDD H
}DDH I
$strDDI h
"DDh i
)DDi j
;DDj k
}EE 
returnGG 
validGG 
;GG 
}HH 	
}II 
publicNN 

structNN "
NetworkConfigParameterNN (
:NN) *
INetworkParameterNN+ <
{OO 
publicQQ 
intQQ 
connectTimeoutMSQQ #
;QQ# $
publicSS 
intSS 
maxConnectAttemptsSS %
;SS% &
public[[ 
int[[ 
disconnectTimeoutMS[[ &
;[[& '
public]] 
int]] 
heartbeatTimeoutMS]] %
;]]% &
public`` 
int`` 
maxFrameTimeMS`` !
;``! "
publiccc 
intcc 
fixedFrameTimeMScc #
;cc# $
publicee 
boolee 
Validateee 
(ee 
)ee 
{ff 	
vargg 
validgg 
=gg 
truegg 
;gg 
ifii 
(ii 
connectTimeoutMSii  
<ii! "
$numii# $
)ii$ %
{jj 
validkk 
=kk 
falsekk 
;kk 
UnityEnginell 
.ll 
Debugll !
.ll! "
LogErrorll" *
(ll* +
$"ll+ -
{ll- .
nameofll. 4
(ll4 5
connectTimeoutMSll5 E
)llE F
}llF G
$strllG O
{llO P
connectTimeoutMSllP `
}ll` a
$str	lla Ä
"
llÄ Å
)
llÅ Ç
;
llÇ É
}mm 
ifnn 
(nn 
maxConnectAttemptsnn "
<nn# $
$numnn% &
)nn& '
{oo 
validpp 
=pp 
falsepp 
;pp 
UnityEngineqq 
.qq 
Debugqq !
.qq! "
LogErrorqq" *
(qq* +
$"qq+ -
{qq- .
nameofqq. 4
(qq4 5
maxConnectAttemptsqq5 G
)qqG H
}qqH I
$strqqI Q
{qqQ R
maxConnectAttemptsqqR d
}qqd e
$str	qqe Ñ
"
qqÑ Ö
)
qqÖ Ü
;
qqÜ á
}rr 
ifss 
(ss 
disconnectTimeoutMSss #
<ss$ %
$numss& '
)ss' (
{tt 
validuu 
=uu 
falseuu 
;uu 
UnityEnginevv 
.vv 
Debugvv !
.vv! "
LogErrorvv" *
(vv* +
$"vv+ -
{vv- .
nameofvv. 4
(vv4 5
disconnectTimeoutMSvv5 H
)vvH I
}vvI J
$strvvJ R
{vvR S
disconnectTimeoutMSvvS f
}vvf g
$str	vvg Ü
"
vvÜ á
)
vvá à
;
vvà â
}ww 
ifxx 
(xx 
heartbeatTimeoutMSxx "
<xx# $
$numxx% &
)xx& '
{yy 
validzz 
=zz 
falsezz 
;zz 
UnityEngine{{ 
.{{ 
Debug{{ !
.{{! "
LogError{{" *
({{* +
$"{{+ -
{{{- .
nameof{{. 4
({{4 5
heartbeatTimeoutMS{{5 G
){{G H
}{{H I
$str{{I Q
{{{Q R
heartbeatTimeoutMS{{R d
}{{d e
$str	{{e Ñ
"
{{Ñ Ö
)
{{Ö Ü
;
{{Ü á
}|| 
if}} 
(}} 
maxFrameTimeMS}} 
<}}  
$num}}! "
)}}" #
{~~ 
valid 
= 
false 
; 
UnityEngine
ÄÄ 
.
ÄÄ 
Debug
ÄÄ !
.
ÄÄ! "
LogError
ÄÄ" *
(
ÄÄ* +
$"
ÄÄ+ -
{
ÄÄ- .
nameof
ÄÄ. 4
(
ÄÄ4 5
maxFrameTimeMS
ÄÄ5 C
)
ÄÄC D
}
ÄÄD E
$str
ÄÄE M
{
ÄÄM N
maxFrameTimeMS
ÄÄN \
}
ÄÄ\ ]
$str
ÄÄ] |
"
ÄÄ| }
)
ÄÄ} ~
;
ÄÄ~ 
}
ÅÅ 
if
ÇÇ 
(
ÇÇ 
fixedFrameTimeMS
ÇÇ  
<
ÇÇ! "
$num
ÇÇ# $
)
ÇÇ$ %
{
ÉÉ 
valid
ÑÑ 
=
ÑÑ 
false
ÑÑ 
;
ÑÑ 
UnityEngine
ÖÖ 
.
ÖÖ 
Debug
ÖÖ !
.
ÖÖ! "
LogError
ÖÖ" *
(
ÖÖ* +
$"
ÖÖ+ -
{
ÖÖ- .
nameof
ÖÖ. 4
(
ÖÖ4 5
fixedFrameTimeMS
ÖÖ5 E
)
ÖÖE F
}
ÖÖF G
$str
ÖÖG O
{
ÖÖO P
fixedFrameTimeMS
ÖÖP `
}
ÖÖ` a
$strÖÖa Ä
"ÖÖÄ Å
)ÖÖÅ Ç
;ÖÖÇ É
}
ÜÜ 
return
àà 
valid
àà 
;
àà 
}
ââ 	
}
ää 
public
åå 

static
åå 
class
åå /
!CommonNetworkParametersExtensions
åå 9
{
çç 
[
íí 	
Obsolete
íí	 
(
íí 
$str
íí 
)íí Ä
]ííÄ Å
public
ìì 
static
ìì 
ref
ìì 
NetworkSettings
ìì )&
WithDataStreamParameters
ìì* B
(
ììB C
ref
ììC F
this
ììG K
NetworkSettings
ììL [
settings
ìì\ d
,
ììd e
int
ììf i
size
ììj n
=
ììo p)
NetworkDataStreamParameterììq ã
.ììã å
k_DefaultSizeììå ô
)ììô ö
{
îî 	
var
ïï 
	parameter
ïï 
=
ïï 
new
ïï (
NetworkDataStreamParameter
ïï  :
{
ññ 
size
óó 
=
óó 
size
óó 
,
óó 
}
òò 
;
òò 
settings
öö 
.
öö #
AddRawParameterStruct
öö *
(
öö* +
ref
öö+ .
	parameter
öö/ 8
)
öö8 9
;
öö9 :
return
úú 
ref
úú 
settings
úú 
;
úú  
}
ùù 	
public
££ 
static
££ (
NetworkDataStreamParameter
££ 0%
GetDataStreamParameters
££1 H
(
££H I
ref
££I L
this
££M Q
NetworkSettings
££R a
settings
££b j
)
££j k
{
§§ 	
if
•• 
(
•• 
!
•• 
settings
•• 
.
•• 
TryGet
••  
<
••  !(
NetworkDataStreamParameter
••! ;
>
••; <
(
••< =
out
••= @
var
••A D

parameters
••E O
)
••O P
)
••P Q
{
¶¶ 

parameters
ßß 
.
ßß 
size
ßß 
=
ßß  !(
NetworkDataStreamParameter
ßß" <
.
ßß< =
k_DefaultSize
ßß= J
;
ßßJ K
}
®® 
return
™™ 

parameters
™™ 
;
™™ 
}
´´ 	
public
∑∑ 
static
∑∑ 
ref
∑∑ 
NetworkSettings
∑∑ ))
WithNetworkConfigParameters
∑∑* E
(
∑∑E F
ref
∏∏ 
this
∏∏ 
NetworkSettings
∏∏ $
settings
∏∏% -
,
∏∏- .
int
ππ 
connectTimeoutMS
ππ  
=
ππ( )'
NetworkParameterConstants
ππ* C
.
ππC D
ConnectTimeoutMS
ππD T
,
ππT U
int
∫∫  
maxConnectAttempts
∫∫ "
=
∫∫( )'
NetworkParameterConstants
∫∫* C
.
∫∫C D 
MaxConnectAttempts
∫∫D V
,
∫∫V W
int
ªª !
disconnectTimeoutMS
ªª #
=
ªª( )'
NetworkParameterConstants
ªª* C
.
ªªC D!
DisconnectTimeoutMS
ªªD W
,
ªªW X
int
ºº  
heartbeatTimeoutMS
ºº "
=
ºº( )'
NetworkParameterConstants
ºº* C
.
ººC D 
HeartbeatTimeoutMS
ººD V
,
ººV W
int
ΩΩ 
maxFrameTimeMS
ΩΩ 
=
ΩΩ( )
$num
ΩΩ* +
,
ΩΩ+ ,
int
ææ 
fixedFrameTimeMS
ææ  
=
ææ( )
$num
ææ* +
)
øø 	
{
¿¿ 	
var
¡¡ 
	parameter
¡¡ 
=
¡¡ 
new
¡¡ $
NetworkConfigParameter
¡¡  6
{
¬¬ 
connectTimeoutMS
√√  
=
√√! "
connectTimeoutMS
√√# 3
,
√√3 4 
maxConnectAttempts
ƒƒ "
=
ƒƒ# $ 
maxConnectAttempts
ƒƒ% 7
,
ƒƒ7 8!
disconnectTimeoutMS
≈≈ #
=
≈≈$ %!
disconnectTimeoutMS
≈≈& 9
,
≈≈9 : 
heartbeatTimeoutMS
∆∆ "
=
∆∆# $ 
heartbeatTimeoutMS
∆∆% 7
,
∆∆7 8
maxFrameTimeMS
«« 
=
««  
maxFrameTimeMS
««! /
,
««/ 0
fixedFrameTimeMS
»»  
=
»»! "
fixedFrameTimeMS
»»# 3
,
»»3 4
}
…… 
;
…… 
settings
ÀÀ 
.
ÀÀ #
AddRawParameterStruct
ÀÀ *
(
ÀÀ* +
ref
ÀÀ+ .
	parameter
ÀÀ/ 8
)
ÀÀ8 9
;
ÀÀ9 :
return
ÕÕ 
ref
ÕÕ 
settings
ÕÕ 
;
ÕÕ  
}
ŒŒ 	
public
‘‘ 
static
‘‘ $
NetworkConfigParameter
‘‘ ,(
GetNetworkConfigParameters
‘‘- G
(
‘‘G H
ref
‘‘H K
this
‘‘L P
NetworkSettings
‘‘Q `
settings
‘‘a i
)
‘‘i j
{
’’ 	
if
÷÷ 
(
÷÷ 
!
÷÷ 
settings
÷÷ 
.
÷÷ 
TryGet
÷÷  
<
÷÷  !$
NetworkConfigParameter
÷÷! 7
>
÷÷7 8
(
÷÷8 9
out
÷÷9 <
var
÷÷= @

parameters
÷÷A K
)
÷÷K L
)
÷÷L M
{
◊◊ 

parameters
ÿÿ 
.
ÿÿ 
connectTimeoutMS
ÿÿ +
=
ÿÿ0 1'
NetworkParameterConstants
ÿÿ2 K
.
ÿÿK L
ConnectTimeoutMS
ÿÿL \
;
ÿÿ\ ]

parameters
ŸŸ 
.
ŸŸ  
maxConnectAttempts
ŸŸ -
=
ŸŸ0 1'
NetworkParameterConstants
ŸŸ2 K
.
ŸŸK L 
MaxConnectAttempts
ŸŸL ^
;
ŸŸ^ _

parameters
⁄⁄ 
.
⁄⁄ !
disconnectTimeoutMS
⁄⁄ .
=
⁄⁄0 1'
NetworkParameterConstants
⁄⁄2 K
.
⁄⁄K L!
DisconnectTimeoutMS
⁄⁄L _
;
⁄⁄_ `

parameters
€€ 
.
€€  
heartbeatTimeoutMS
€€ -
=
€€0 1'
NetworkParameterConstants
€€2 K
.
€€K L 
HeartbeatTimeoutMS
€€L ^
;
€€^ _

parameters
‹‹ 
.
‹‹ 
maxFrameTimeMS
‹‹ )
=
‹‹0 1
$num
‹‹2 3
;
‹‹3 4

parameters
›› 
.
›› 
fixedFrameTimeMS
›› +
=
››0 1
$num
››2 3
;
››3 4
}
ﬁﬁ 
return
‡‡ 

parameters
‡‡ 
;
‡‡ 
}
·· 	
}
‚‚ 
}„„ øË
ZC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkPipeline.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
public 

unsafe 
struct 
InboundSendBuffer *
{ 
public 
byte 
* 
buffer 
; 
public 
byte 
* 
bufferWithHeaders &
;& '
public   
int   
bufferLength   
;    
public%% 
int%% #
bufferWithHeadersLength%% *
;%%* +
public** 
int** 
headerPadding**  
;**  !
public// 
void// *
SetBufferFrombufferWithHeaders// 2
(//2 3
)//3 4
{00 	
if22 
(22 #
bufferWithHeadersLength22 '
<22( )
headerPadding22* 7
)227 8
throw33 
new33 $
IndexOutOfRangeException33 2
(332 3
$str333 W
)33W X
;33X Y
buffer55 
=55 
bufferWithHeaders55 &
+55' (
headerPadding55) 6
;556 7
bufferLength66 
=66 #
bufferWithHeadersLength66 2
-663 4
headerPadding665 B
;66B C
}77 	
}88 
public<< 

unsafe<< 
struct<< 
InboundRecvBuffer<< *
{== 
publicAA 
byteAA 
*AA 
bufferAA 
;AA 
publicFF 
intFF 
bufferLengthFF 
;FF  
publicMM 
InboundRecvBufferMM  
SliceMM! &
(MM& '
intMM' *
offsetMM+ 1
)MM1 2
{NN 	
ifPP 
(PP 
bufferLengthPP 
<PP 
offsetPP %
)PP% &
throwQQ 
newQQ '
ArgumentOutOfRangeExceptionQQ 5
(QQ5 6
$strQQ6 [
)QQ[ \
;QQ\ ]
InboundRecvBufferSS 
sliceSS #
;SS# $
sliceTT 
.TT 
bufferTT 
=TT 
bufferTT !
+TT" #
offsetTT$ *
;TT* +
sliceUU 
.UU 
bufferLengthUU 
=UU  
bufferLengthUU! -
-UU. /
offsetUU0 6
;UU6 7
returnVV 
sliceVV 
;VV 
}WW 	
}XX 
public\\ 

unsafe\\ 
struct\\ "
NetworkPipelineContext\\ /
{]] 
publicaa 
byteaa 
*aa  
staticInstanceBufferaa )
;aa) *
publicff 
byteff 
*ff '
internalSharedProcessBufferff 0
;ff0 1
publickk 
bytekk 
*kk !
internalProcessBufferkk *
;kk* +
publicpp 
DataStreamWriterpp 
headerpp  &
;pp& '
publicuu 
longuu 
	timestampuu 
;uu 
publiczz 
intzz &
staticInstanceBufferLengthzz -
;zz- .
public 
int -
!internalSharedProcessBufferLength 4
;4 5
public
ÑÑ 
int
ÑÑ )
internalProcessBufferLength
ÑÑ .
;
ÑÑ. /
public
ââ 
int
ââ '
accumulatedHeaderCapacity
ââ ,
;
ââ, -
}
ää 
public
èè 

unsafe
èè 
	interface
èè #
INetworkPipelineStage
èè 1
{
êê "
NetworkPipelineStage
òò 
StaticInitialize
òò -
(
òò- .
byte
òò. 2
*
òò2 3"
staticInstanceBuffer
òò4 H
,
òòH I
int
òòJ M(
staticInstanceBufferLength
òòN h
,
òòh i
NetworkSettings
òòj y
settingsòòz Ç
)òòÇ É
;òòÉ Ñ
int
úú 

StaticSize
úú 
{
úú 
get
úú 
;
úú 
}
úú 
}
ùù 
public
¢¢ 

unsafe
¢¢ 
struct
¢¢ "
NetworkPipelineStage
¢¢ -
{
££ 
public
ØØ "
NetworkPipelineStage
ØØ #
(
ØØ# $&
TransportFunctionPointer
ØØ$ <
<
ØØ< =
ReceiveDelegate
ØØ= L
>
ØØL M
Receive
ØØN U
,
ØØU V&
TransportFunctionPointer
∞∞$ <
<
∞∞< =
SendDelegate
∞∞= I
>
∞∞I J
Send
∞∞K O
,
∞∞O P&
TransportFunctionPointer
±±$ <
<
±±< =*
InitializeConnectionDelegate
±±= Y
>
±±Y Z"
InitializeConnection
±±[ o
,
±±o p
int
≤≤$ '
ReceiveCapacity
≤≤( 7
,
≤≤7 8
int
≥≥$ '
SendCapacity
≥≥( 4
,
≥≥4 5
int
¥¥$ '
HeaderCapacity
¥¥( 6
,
¥¥6 7
int
µµ$ '!
SharedStateCapacity
µµ( ;
,
µµ; <
int
∂∂$ '
PayloadCapacity
∂∂( 7
=
∂∂8 9
$num
∂∂: ;
)
∂∂; <
{
∑∑ 	
this
∏∏ 
.
∏∏ 
Receive
∏∏ 
=
∏∏ 
Receive
∏∏ "
;
∏∏" #
this
ππ 
.
ππ 
Send
ππ 
=
ππ 
Send
ππ 
;
ππ 
this
∫∫ 
.
∫∫ "
InitializeConnection
∫∫ %
=
∫∫& '"
InitializeConnection
∫∫( <
;
∫∫< =
this
ªª 
.
ªª 
ReceiveCapacity
ªª  
=
ªª! "
ReceiveCapacity
ªª# 2
;
ªª2 3
this
ºº 
.
ºº 
SendCapacity
ºº 
=
ºº 
SendCapacity
ºº  ,
;
ºº, -
this
ΩΩ 
.
ΩΩ 
HeaderCapacity
ΩΩ 
=
ΩΩ  !
HeaderCapacity
ΩΩ" 0
;
ΩΩ0 1
this
ææ 
.
ææ !
SharedStateCapacity
ææ $
=
ææ% &!
SharedStateCapacity
ææ' :
;
ææ: ;
this
øø 
.
øø 
PayloadCapacity
øø  
=
øø! "
PayloadCapacity
øø# 2
;
øø2 3
StaticStateStart
¿¿ 
=
¿¿  
StaticStateCapcity
¿¿ 1
=
¿¿2 3
$num
¿¿4 5
;
¿¿5 6
}
¡¡ 	
[
∆∆ 	
Flags
∆∆	 
]
∆∆ 
public
«« 
enum
«« 
Requests
«« 
{
»» 	
None
ÃÃ 
=
ÃÃ 
$num
ÃÃ 
,
ÃÃ 
Resume
–– 
=
–– 
$num
–– 
,
–– 
Update
‘‘ 
=
‘‘ 
$num
‘‘ 
,
‘‘ 

SendUpdate
ÿÿ 
=
ÿÿ 
$num
ÿÿ 
,
ÿÿ 
Error
‹‹ 
=
‹‹ 
$num
‹‹ 
}
›› 	
[
‚‚ 	&
UnmanagedFunctionPointer
‚‚	 !
(
‚‚! "
CallingConvention
‚‚" 3
.
‚‚3 4
Cdecl
‚‚4 9
)
‚‚9 :
]
‚‚: ;
public
„„ 
delegate
„„ 
void
„„ 
ReceiveDelegate
„„ ,
(
„„, -
ref
„„- 0$
NetworkPipelineContext
„„1 G
ctx
„„H K
,
„„K L
ref
„„M P
InboundRecvBuffer
„„Q b
inboundBuffer
„„c p
,
„„p q
ref
„„r u
Requests
„„v ~
requests„„ á
,„„á à
int„„â å!
systemHeadersSize„„ç û
)„„û ü
;„„ü †
[
ËË 	&
UnmanagedFunctionPointer
ËË	 !
(
ËË! "
CallingConvention
ËË" 3
.
ËË3 4
Cdecl
ËË4 9
)
ËË9 :
]
ËË: ;
public
ÈÈ 
delegate
ÈÈ 
int
ÈÈ 
SendDelegate
ÈÈ (
(
ÈÈ( )
ref
ÈÈ) ,$
NetworkPipelineContext
ÈÈ- C
ctx
ÈÈD G
,
ÈÈG H
ref
ÈÈI L
InboundSendBuffer
ÈÈM ^
inboundBuffer
ÈÈ_ l
,
ÈÈl m
ref
ÈÈn q
Requests
ÈÈr z
requestsÈÈ{ É
,ÈÈÉ Ñ
intÈÈÖ à!
systemHeadersSizeÈÈâ ö
)ÈÈö õ
;ÈÈõ ú
[
ÓÓ 	&
UnmanagedFunctionPointer
ÓÓ	 !
(
ÓÓ! "
CallingConvention
ÓÓ" 3
.
ÓÓ3 4
Cdecl
ÓÓ4 9
)
ÓÓ9 :
]
ÓÓ: ;
public
ÔÔ 
delegate
ÔÔ 
void
ÔÔ *
InitializeConnectionDelegate
ÔÔ 9
(
ÔÔ9 :
byte
ÔÔ: >
*
ÔÔ> ?"
staticInstanceBuffer
ÔÔ@ T
,
ÔÔT U
int
ÔÔV Y(
staticInstanceBufferLength
ÔÔZ t
,
ÔÔt u
byte
 
*
 
sendProcessBuffer
 #
,
# $
int
% (%
sendProcessBufferLength
) @
,
@ A
byte
B F
*
F G
recvProcessBuffer
H Y
,
Y Z
int
[ ^%
recvProcessBufferLength
_ v
,
v w
byte
ÒÒ 
*
ÒÒ !
sharedProcessBuffer
ÒÒ %
,
ÒÒ% &
int
ÒÒ' *'
sharedProcessBufferLength
ÒÒ+ D
)
ÒÒD E
;
ÒÒE F
public
ˆˆ &
TransportFunctionPointer
ˆˆ '
<
ˆˆ' (
ReceiveDelegate
ˆˆ( 7
>
ˆˆ7 8
Receive
ˆˆ9 @
;
ˆˆ@ A
public
˚˚ &
TransportFunctionPointer
˚˚ '
<
˚˚' (
SendDelegate
˚˚( 4
>
˚˚4 5
Send
˚˚6 :
;
˚˚: ;
public
ÄÄ &
TransportFunctionPointer
ÄÄ '
<
ÄÄ' (*
InitializeConnectionDelegate
ÄÄ( D
>
ÄÄD E"
InitializeConnection
ÄÄF Z
;
ÄÄZ [
public
ÖÖ 
readonly
ÖÖ 
int
ÖÖ 
ReceiveCapacity
ÖÖ +
;
ÖÖ+ ,
public
ää 
readonly
ää 
int
ää 
SendCapacity
ää (
;
ää( )
public
èè 
readonly
èè 
int
èè 
HeaderCapacity
èè *
;
èè* +
public
îî 
readonly
îî 
int
îî !
SharedStateCapacity
îî /
;
îî/ 0
public
ôô 
readonly
ôô 
int
ôô 
PayloadCapacity
ôô +
;
ôô+ ,
internal
õõ 
int
õõ 
StaticStateStart
õõ %
;
õõ% &
internal
úú 
int
úú  
StaticStateCapcity
úú '
;
úú' (
}
ùù 
public
üü 

struct
üü $
NetworkPipelineStageId
üü (
{
†† 
internal
°° 
int
°° 
Index
°° 
;
°° 
internal
¢¢ 
int
¢¢ 
IsValid
¢¢ 
;
¢¢ 
}
££ 
public
®® 

static
®® 
class
®® ,
NetworkPipelineStageCollection
®® 6
{
©© 
static
≠≠ ,
NetworkPipelineStageCollection
≠≠ -
(
≠≠- .
)
≠≠. /
{
ÆÆ 	
m_stages
ØØ 
=
ØØ 
new
ØØ 
List
ØØ 
<
ØØ  #
INetworkPipelineStage
ØØ  5
>
ØØ5 6
(
ØØ6 7
)
ØØ7 8
;
ØØ8 9#
RegisterPipelineStage
∞∞ !
(
∞∞! "
new
∞∞" %
NullPipelineStage
∞∞& 7
(
∞∞7 8
)
∞∞8 9
)
∞∞9 :
;
∞∞: ;#
RegisterPipelineStage
±± !
(
±±! "
new
±±" %(
FragmentationPipelineStage
±±& @
(
±±@ A
)
±±A B
)
±±B C
;
±±C D#
RegisterPipelineStage
≤≤ !
(
≤≤! "
new
≤≤" %,
ReliableSequencedPipelineStage
≤≤& D
(
≤≤D E
)
≤≤E F
)
≤≤F G
;
≤≤G H#
RegisterPipelineStage
≥≥ !
(
≥≥! "
new
≥≥" %.
 UnreliableSequencedPipelineStage
≥≥& F
(
≥≥F G
)
≥≥G H
)
≥≥H I
;
≥≥I J#
RegisterPipelineStage
¥¥ !
(
¥¥! "
new
¥¥" %$
SimulatorPipelineStage
¥¥& <
(
¥¥< =
)
¥¥= >
)
¥¥> ?
;
¥¥? @#
RegisterPipelineStage
µµ !
(
µµ! "
new
µµ" %*
SimulatorPipelineStageInSend
µµ& B
(
µµB C
)
µµC D
)
µµD E
;
µµE F
}
∂∂ 	
public
ºº 
static
ºº 
void
ºº #
RegisterPipelineStage
ºº 0
(
ºº0 1#
INetworkPipelineStage
ºº1 F
stage
ººG L
)
ººL M
{
ΩΩ 	
for
ææ 
(
ææ 
int
ææ 
i
ææ 
=
ææ 
$num
ææ 
;
ææ 
i
ææ 
<
ææ 
m_stages
ææ  (
.
ææ( )
Count
ææ) .
;
ææ. /
++
ææ0 2
i
ææ2 3
)
ææ3 4
{
øø 
if
¿¿ 
(
¿¿ 
m_stages
¿¿ 
[
¿¿ 
i
¿¿ 
]
¿¿ 
.
¿¿  
GetType
¿¿  '
(
¿¿' (
)
¿¿( )
==
¿¿* ,
stage
¿¿- 2
.
¿¿2 3
GetType
¿¿3 :
(
¿¿: ;
)
¿¿; <
)
¿¿< =
{
¡¡ 
m_stages
√√ 
[
√√ 
i
√√ 
]
√√ 
=
√√  !
stage
√√" '
;
√√' (
return
ƒƒ 
;
ƒƒ 
}
≈≈ 
}
∆∆ 
m_stages
«« 
.
«« 
Add
«« 
(
«« 
stage
«« 
)
«« 
;
««  
}
»» 	
public
–– 
static
–– $
NetworkPipelineStageId
–– ,

GetStageId
––- 7
(
––7 8
Type
––8 <
	stageType
––= F
)
––F G
{
—— 	
for
““ 
(
““ 
int
““ 
i
““ 
=
““ 
$num
““ 
;
““ 
i
““ 
<
““ 
m_stages
““  (
.
““( )
Count
““) .
;
““. /
++
““0 2
i
““2 3
)
““3 4
{
”” 
if
‘‘ 
(
‘‘ 
	stageType
‘‘ 
==
‘‘  
m_stages
‘‘! )
[
‘‘) *
i
‘‘* +
]
‘‘+ ,
.
‘‘, -
GetType
‘‘- 4
(
‘‘4 5
)
‘‘5 6
)
‘‘6 7
return
’’ 
new
’’ $
NetworkPipelineStageId
’’ 5
{
’’6 7
Index
’’7 <
=
’’= >
i
’’? @
,
’’@ A
IsValid
’’B I
=
’’J K
$num
’’L M
}
’’M N
;
’’N O
}
÷÷ 
throw
ÿÿ 
new
ÿÿ '
InvalidOperationException
ÿÿ /
(
ÿÿ/ 0
$"
ÿÿ0 2
$str
ÿÿ2 A
{
ÿÿA B
	stageType
ÿÿB K
}
ÿÿK L
$str
ÿÿL ^
"
ÿÿ^ _
)
ÿÿ_ `
;
ÿÿ` a
}
›› 	
internal
ﬂﬂ 
static
ﬂﬂ 
List
ﬂﬂ 
<
ﬂﬂ #
INetworkPipelineStage
ﬂﬂ 2
>
ﬂﬂ2 3
m_stages
ﬂﬂ4 <
;
ﬂﬂ< =
}
‡‡ 
public
ÂÂ 

struct
ÂÂ 
NetworkPipeline
ÂÂ !
{
ÊÊ 
internal
ÁÁ 
int
ÁÁ 
Id
ÁÁ 
;
ÁÁ 
public
ÎÎ 
static
ÎÎ 
NetworkPipeline
ÎÎ %
Null
ÎÎ& *
=>
ÎÎ+ -
default
ÎÎ. 5
;
ÎÎ5 6
public
ÌÌ 
static
ÌÌ 
bool
ÌÌ 
operator
ÌÌ #
==
ÌÌ# %
(
ÌÌ% &
NetworkPipeline
ÌÌ& 5
lhs
ÌÌ6 9
,
ÌÌ9 :
NetworkPipeline
ÌÌ; J
rhs
ÌÌK N
)
ÌÌN O
{
ÓÓ 	
return
ÔÔ 
lhs
ÔÔ 
.
ÔÔ 
Id
ÔÔ 
==
ÔÔ 
rhs
ÔÔ  
.
ÔÔ  !
Id
ÔÔ! #
;
ÔÔ# $
}
 	
public
ÚÚ 
static
ÚÚ 
bool
ÚÚ 
operator
ÚÚ #
!=
ÚÚ# %
(
ÚÚ% &
NetworkPipeline
ÚÚ& 5
lhs
ÚÚ6 9
,
ÚÚ9 :
NetworkPipeline
ÚÚ; J
rhs
ÚÚK N
)
ÚÚN O
{
ÛÛ 	
return
ÙÙ 
lhs
ÙÙ 
.
ÙÙ 
Id
ÙÙ 
!=
ÙÙ 
rhs
ÙÙ  
.
ÙÙ  !
Id
ÙÙ! #
;
ÙÙ# $
}
ıı 	
public
˜˜ 
override
˜˜ 
bool
˜˜ 
Equals
˜˜ #
(
˜˜# $
object
˜˜$ *
compare
˜˜+ 2
)
˜˜2 3
{
¯¯ 	
return
˘˘ 
this
˘˘ 
==
˘˘ 
(
˘˘ 
NetworkPipeline
˘˘ +
)
˘˘+ ,
compare
˘˘, 3
;
˘˘3 4
}
˙˙ 	
public
¸¸ 
override
¸¸ 
int
¸¸ 
GetHashCode
¸¸ '
(
¸¸' (
)
¸¸( )
{
˝˝ 	
return
˛˛ 
Id
˛˛ 
;
˛˛ 
}
ˇˇ 	
public
ÅÅ 
bool
ÅÅ 
Equals
ÅÅ 
(
ÅÅ 
NetworkPipeline
ÅÅ *

connection
ÅÅ+ 5
)
ÅÅ5 6
{
ÇÇ 	
return
ÉÉ 

connection
ÉÉ 
.
ÉÉ 
Id
ÉÉ  
==
ÉÉ! #
Id
ÉÉ$ &
;
ÉÉ& '
}
ÑÑ 	
}
ÖÖ 
public
àà 

static
àà 
class
àà 1
#NetworkPipelineParametersExtensions
àà ;
{
ââ 
[
éé 	
Obsolete
éé	 
(
éé 
$str
éé ;
)
éé; <
]
éé< =
public
èè 
static
èè 
ref
èè 
NetworkSettings
èè )$
WithPipelineParameters
èè* @
(
èè@ A
ref
êê 
this
êê 
NetworkSettings
êê $
settings
êê% -
,
êê- .
int
ëë 
initialCapacity
ëë 
=
ëë  !#
NetworkPipelineParams
ëë" 7
.
ëë7 8&
k_DefaultInitialCapacity
ëë8 P
)
íí 	
{
ìì 	
var
îî 
	parameter
îî 
=
îî 
new
îî #
NetworkPipelineParams
îî  5
{
ïï 
initialCapacity
ññ 
=
ññ  !
initialCapacity
ññ" 1
,
ññ1 2
}
óó 
;
óó 
settings
ôô 
.
ôô #
AddRawParameterStruct
ôô *
(
ôô* +
ref
ôô+ .
	parameter
ôô/ 8
)
ôô8 9
;
ôô9 :
return
õõ 
ref
õõ 
settings
õõ 
;
õõ  
}
úú 	
public
¢¢ 
static
¢¢ #
NetworkPipelineParams
¢¢ +#
GetPipelineParameters
¢¢, A
(
¢¢A B
ref
¢¢B E
this
¢¢F J
NetworkSettings
¢¢K Z
settings
¢¢[ c
)
¢¢c d
{
££ 	
if
§§ 
(
§§ 
!
§§ 
settings
§§ 
.
§§ 
TryGet
§§  
<
§§  !#
NetworkPipelineParams
§§! 6
>
§§6 7
(
§§7 8
out
§§8 ;
var
§§< ?

parameters
§§@ J
)
§§J K
)
§§K L
{
•• 

parameters
¶¶ 
.
¶¶ 
initialCapacity
¶¶ *
=
¶¶+ ,#
NetworkPipelineParams
¶¶- B
.
¶¶B C&
k_DefaultInitialCapacity
¶¶C [
;
¶¶[ \
}
ßß 
return
©© 

parameters
©© 
;
©© 
}
™™ 	
}
´´ 
public
∞∞ 

struct
∞∞ #
NetworkPipelineParams
∞∞ '
:
∞∞( )
INetworkParameter
∞∞* ;
{
±± 
internal
≤≤ 
const
≤≤ 
int
≤≤ &
k_DefaultInitialCapacity
≤≤ 3
=
≤≤4 5
$num
≤≤6 7
;
≤≤7 8
public
∑∑ 
int
∑∑ 
initialCapacity
∑∑ "
;
∑∑" #
public
ππ 
bool
ππ 
Validate
ππ 
(
ππ 
)
ππ 
{
∫∫ 	
var
ªª 
valid
ªª 
=
ªª 
true
ªª 
;
ªª 
if
ΩΩ 
(
ΩΩ 
initialCapacity
ΩΩ 
<
ΩΩ  !
$num
ΩΩ" #
)
ΩΩ# $
{
ææ 
valid
øø 
=
øø 
false
øø 
;
øø 
UnityEngine
¿¿ 
.
¿¿ 
Debug
¿¿ !
.
¿¿! "
LogError
¿¿" *
(
¿¿* +
$"
¿¿+ -
{
¿¿- .
nameof
¿¿. 4
(
¿¿4 5
initialCapacity
¿¿5 D
)
¿¿D E
}
¿¿E F
$str
¿¿F N
{
¿¿N O
initialCapacity
¿¿O ^
}
¿¿^ _
$str
¿¿_ ~
"
¿¿~ 
)¿¿ Ä
;¿¿Ä Å
}
¡¡ 
return
√√ 
valid
√√ 
;
√√ 
}
ƒƒ 	
}
≈≈ 
internal
«« 
struct
«« &
NetworkPipelineProcessor
«« ,
:
««- .
IDisposable
««/ :
{
»» 
public
…… 
const
…… 
int
…… 
	Alignment
…… "
=
……# $
$num
……% &
;
……& '
public
   
const
   
int
   
AlignmentMinusOne
   *
=
  + ,
	Alignment
  - 6
-
  7 8
$num
  9 :
;
  : ;
public
ÃÃ 
int
ÃÃ 
PayloadCapacity
ÃÃ "
(
ÃÃ" #
NetworkPipeline
ÃÃ# 2
pipeline
ÃÃ3 ;
)
ÃÃ; <
{
ÕÕ 	
if
ŒŒ 
(
ŒŒ 
pipeline
ŒŒ 
.
ŒŒ 
Id
ŒŒ 
>
ŒŒ 
$num
ŒŒ 
)
ŒŒ  
{
œœ 
var
–– 
p
–– 
=
–– 
m_Pipelines
–– #
[
––# $
pipeline
––$ ,
.
––, -
Id
––- /
-
––0 1
$num
––2 3
]
––3 4
;
––4 5
return
—— 
p
—— 
.
—— 
payloadCapacity
—— (
;
——( )
}
““ 
return
”” 
$num
”” 
;
”” 
}
‘‘ 	
public
÷÷ 

Concurrent
÷÷ 
ToConcurrent
÷÷ &
(
÷÷& '
)
÷÷' (
{
◊◊ 	
var
ÿÿ 

concurrent
ÿÿ 
=
ÿÿ 
new
ÿÿ  

Concurrent
ÿÿ! +
{
ŸŸ 
m_StageCollection
⁄⁄ !
=
⁄⁄" #
m_StageCollection
⁄⁄$ 5
,
⁄⁄5 6$
m_StaticInstanceBuffer
€€ &
=
€€' ($
m_StaticInstanceBuffer
€€) ?
,
€€? @
m_Pipelines
‹‹ 
=
‹‹ 
m_Pipelines
‹‹ )
,
‹‹) *
m_StageList
›› 
=
›› 
m_StageList
›› )
,
››) *)
m_AccumulatedHeaderCapacity
ﬁﬁ +
=
ﬁﬁ, -)
m_AccumulatedHeaderCapacity
ﬁﬁ. I
,
ﬁﬁI J)
m_SendStageNeedsUpdateWrite
ﬂﬂ +
=
ﬂﬂ, -(
m_SendStageNeedsUpdateRead
ﬂﬂ. H
.
ﬂﬂH I
AsParallelWriter
ﬂﬂI Y
(
ﬂﬂY Z
)
ﬂﬂZ [
,
ﬂﬂ[ \
sizePerConnection
‡‡ !
=
‡‡" #
sizePerConnection
‡‡$ 5
,
‡‡5 6

sendBuffer
·· 
=
·· 
m_SendBuffer
·· )
,
··) *
sharedBuffer
‚‚ 
=
‚‚ 
m_SharedBuffer
‚‚ -
,
‚‚- .
m_timestamp
„„ 
=
„„ 
m_timestamp
„„ )
,
„„) *
}
‰‰ 
;
‰‰ 
return
ÂÂ 

concurrent
ÂÂ 
;
ÂÂ 
}
ÊÊ 	
public
ËË 
struct
ËË 

Concurrent
ËË  
{
ÈÈ 	
[
ÍÍ 
ReadOnly
ÍÍ 
]
ÍÍ 
internal
ÍÍ 
NativeArray
ÍÍ  +
<
ÍÍ+ ,"
NetworkPipelineStage
ÍÍ, @
>
ÍÍ@ A
m_StageCollection
ÍÍB S
;
ÍÍS T
[
ÎÎ 
ReadOnly
ÎÎ 
]
ÎÎ 
internal
ÎÎ 
NativeArray
ÎÎ  +
<
ÎÎ+ ,
byte
ÎÎ, 0
>
ÎÎ0 1$
m_StaticInstanceBuffer
ÎÎ2 H
;
ÎÎH I
[
ÏÏ 
ReadOnly
ÏÏ 
]
ÏÏ 
internal
ÏÏ 

NativeList
ÏÏ  *
<
ÏÏ* +
PipelineImpl
ÏÏ+ 7
>
ÏÏ7 8
m_Pipelines
ÏÏ9 D
;
ÏÏD E
[
ÌÌ 
ReadOnly
ÌÌ 
]
ÌÌ 
internal
ÌÌ 

NativeList
ÌÌ  *
<
ÌÌ* +
int
ÌÌ+ .
>
ÌÌ. /
m_StageList
ÌÌ0 ;
;
ÌÌ; <
[
ÓÓ 
ReadOnly
ÓÓ 
]
ÓÓ 
internal
ÓÓ 

NativeList
ÓÓ  *
<
ÓÓ* +
int
ÓÓ+ .
>
ÓÓ. /)
m_AccumulatedHeaderCapacity
ÓÓ0 K
;
ÓÓK L
internal
ÔÔ 
NativeQueue
ÔÔ  
<
ÔÔ  !
UpdatePipeline
ÔÔ! /
>
ÔÔ/ 0
.
ÔÔ0 1
ParallelWriter
ÔÔ1 ?)
m_SendStageNeedsUpdateWrite
ÔÔ@ [
;
ÔÔ[ \
[
 
ReadOnly
 
]
 
internal
 
NativeArray
  +
<
+ ,
int
, /
>
/ 0
sizePerConnection
1 B
;
B C
[
ÚÚ 
ReadOnly
ÚÚ 
]
ÚÚ 
internal
ÚÚ 

NativeList
ÚÚ  *
<
ÚÚ* +
byte
ÚÚ+ /
>
ÚÚ/ 0
sharedBuffer
ÚÚ1 =
;
ÚÚ= >
[
ÛÛ 
ReadOnly
ÛÛ 
]
ÛÛ 
internal
ÛÛ 

NativeList
ÛÛ  *
<
ÛÛ* +
byte
ÛÛ+ /
>
ÛÛ/ 0

sendBuffer
ÛÛ1 ;
;
ÛÛ; <
[
ÙÙ 
ReadOnly
ÙÙ 
]
ÙÙ 
internal
ÙÙ 
NativeArray
ÙÙ  +
<
ÙÙ+ ,
long
ÙÙ, 0
>
ÙÙ0 1
m_timestamp
ÙÙ2 =
;
ÙÙ= >
public
ˆˆ 
int
ˆˆ  
SendHeaderCapacity
ˆˆ )
(
ˆˆ) *
NetworkPipeline
ˆˆ* 9
pipeline
ˆˆ: B
)
ˆˆB C
{
˜˜ 
var
¯¯ 
p
¯¯ 
=
¯¯ 
m_Pipelines
¯¯ #
[
¯¯# $
pipeline
¯¯$ ,
.
¯¯, -
Id
¯¯- /
-
¯¯0 1
$num
¯¯2 3
]
¯¯3 4
;
¯¯4 5
return
˘˘ 
p
˘˘ 
.
˘˘ 
headerCapacity
˘˘ '
;
˘˘' (
}
˙˙ 
public
¸¸ 
int
¸¸ 
PayloadCapacity
¸¸ &
(
¸¸& '
NetworkPipeline
¸¸' 6
pipeline
¸¸7 ?
)
¸¸? @
{
˝˝ 
if
˛˛ 
(
˛˛ 
pipeline
˛˛ 
.
˛˛ 
Id
˛˛ 
>
˛˛  !
$num
˛˛" #
)
˛˛# $
{
ˇˇ 
var
ÄÄ 
p
ÄÄ 
=
ÄÄ 
m_Pipelines
ÄÄ '
[
ÄÄ' (
pipeline
ÄÄ( 0
.
ÄÄ0 1
Id
ÄÄ1 3
-
ÄÄ4 5
$num
ÄÄ6 7
]
ÄÄ7 8
;
ÄÄ8 9
return
ÅÅ 
p
ÅÅ 
.
ÅÅ 
payloadCapacity
ÅÅ ,
;
ÅÅ, -
}
ÇÇ 
return
ÉÉ 
$num
ÉÉ 
;
ÉÉ 
}
ÑÑ 
public
ÜÜ 
unsafe
ÜÜ 
int
ÜÜ 
Send
ÜÜ "
(
ÜÜ" #
NetworkDriver
ÜÜ# 0
.
ÜÜ0 1

Concurrent
ÜÜ1 ;
driver
ÜÜ< B
,
ÜÜB C
NetworkPipeline
ÜÜD S
pipeline
ÜÜT \
,
ÜÜ\ ]
NetworkConnection
ÜÜ^ o

connection
ÜÜp z
,
ÜÜz {)
NetworkInterfaceSendHandleÜÜ| ñ

sendHandleÜÜó °
,ÜÜ° ¢
intÜÜ£ ¶

headerSizeÜÜß ±
)ÜÜ± ≤
{
áá 
if
àà 
(
àà 

sendHandle
àà 
.
àà 
data
àà #
==
àà$ &
IntPtr
àà' -
.
àà- .
Zero
àà. 2
)
àà2 3
{
ââ 
return
ää 
(
ää 
int
ää 
)
ää  
Error
ää  %
.
ää% &

StatusCode
ää& 0
.
ää0 1&
NetworkSendHandleInvalid
ää1 I
;
ääI J
}
ãã 
var
çç 
connectionId
çç  
=
çç! "

connection
çç# -
.
çç- .
m_NetworkId
çç. 9
;
çç9 :
NativeArray
êê 
<
êê 
byte
êê  
>
êê  !
	tmpBuffer
êê" +
=
êê, -

sendBuffer
êê. 8
;
êê8 9
int
ëë 
*
ëë 
sendBufferLock
ëë #
=
ëë$ %
(
ëë& '
int
ëë' *
*
ëë* +
)
ëë+ ,
	tmpBuffer
ëë, 5
.
ëë5 6"
GetUnsafeReadOnlyPtr
ëë6 J
(
ëëJ K
)
ëëK L
;
ëëL M
sendBufferLock
íí 
+=
íí !
connectionId
íí" .
*
íí/ 0
sizePerConnection
íí1 B
[
ííB C
SendSizeOffset
ííC Q
]
ííQ R
/
ííS T
$num
ííU V
;
ííV W
if
îî 
(
îî 
Interlocked
îî 
.
îî  
CompareExchange
îî  /
(
îî/ 0
ref
îî0 3
*
îî4 5
sendBufferLock
îî5 C
,
îîC D
$num
îîE F
,
îîF G
$num
îîH I
)
îîI J
!=
îîK M
$num
îîN O
)
îîO P
{
ïï 
UnityEngine
óó 
.
óó  
Debug
óó  %
.
óó% &
LogError
óó& .
(
óó. /
$stróó/ ”
)óó” ‘
;óó‘ ’
return
òò 
(
òò 
int
òò 
)
òò  
Error
òò  %
.
òò% &

StatusCode
òò& 0
.
òò0 1)
NetworkDriverParallelForErr
òò1 L
;
òòL M
}
úú 

NativeList
ùù 
<
ùù 
UpdatePipeline
ùù )
>
ùù) *
currentUpdates
ùù+ 9
=
ùù: ;
new
ùù< ?

NativeList
ùù@ J
<
ùùJ K
UpdatePipeline
ùùK Y
>
ùùY Z
(
ùùZ [
$num
ùù[ ^
,
ùù^ _
	Allocator
ùù` i
.
ùùi j
Temp
ùùj n
)
ùùn o
;
ùùo p
int
üü 
retval
üü 
=
üü !
ProcessPipelineSend
üü 0
(
üü0 1
driver
üü1 7
,
üü7 8
$num
üü9 :
,
üü: ;
pipeline
üü< D
,
üüD E

connection
üüF P
,
üüP Q

sendHandle
üüR \
,
üü\ ]

headerSize
üü^ h
,
üüh i
currentUpdates
üüj x
)
üüx y
;
üüy z
Interlocked
°° 
.
°° 
Exchange
°° $
(
°°$ %
ref
°°% (
*
°°) *
sendBufferLock
°°* 8
,
°°8 9
$num
°°: ;
)
°°; <
;
°°< =
for
££ 
(
££ 
int
££ 
i
££ 
=
££ 
$num
££ 
;
££ 
i
££  !
<
££" #
currentUpdates
££$ 2
.
££2 3
Length
££3 9
;
££9 :
++
££; =
i
££= >
)
££> ?)
m_SendStageNeedsUpdateWrite
§§ /
.
§§/ 0
Enqueue
§§0 7
(
§§7 8
currentUpdates
§§8 F
[
§§F G
i
§§G H
]
§§H I
)
§§I J
;
§§J K
return
¶¶ 
retval
¶¶ 
;
¶¶ 
}
ßß 
internal
©© 
unsafe
©© 
int
©© !
ProcessPipelineSend
©©  3
(
©©3 4
NetworkDriver
©©4 A
.
©©A B

Concurrent
©©B L
driver
©©M S
,
©©S T
int
©©U X

startStage
©©Y c
,
©©c d
NetworkPipeline
©©e t
pipeline
©©u }
,
©©} ~ 
NetworkConnection©© ê

connection©©ë õ
,©©õ ú(
NetworkInterfaceSendHandle
™™ *

sendHandle
™™+ 5
,
™™5 6
int
™™7 :

headerSize
™™; E
,
™™E F

NativeList
™™G Q
<
™™Q R
UpdatePipeline
™™R `
>
™™` a
currentUpdates
™™b p
)
™™p q
{
´´ 
int
¨¨ 
initialHeaderSize
¨¨ %
=
¨¨& '

headerSize
¨¨( 2
;
¨¨2 3
int
≠≠ 
retval
≠≠ 
=
≠≠ 

sendHandle
≠≠ '
.
≠≠' (
size
≠≠( ,
;
≠≠, -$
NetworkPipelineContext
ÆÆ &
ctx
ÆÆ' *
=
ÆÆ+ ,
default
ÆÆ- 4
(
ÆÆ4 5$
NetworkPipelineContext
ÆÆ5 K
)
ÆÆK L
;
ÆÆL M
ctx
ØØ 
.
ØØ 
	timestamp
ØØ 
=
ØØ 
m_timestamp
ØØ  +
[
ØØ+ ,
$num
ØØ, -
]
ØØ- .
;
ØØ. /
var
∞∞ 
p
∞∞ 
=
∞∞ 
m_Pipelines
∞∞ #
[
∞∞# $
pipeline
∞∞$ ,
.
∞∞, -
Id
∞∞- /
-
∞∞0 1
$num
∞∞2 3
]
∞∞3 4
;
∞∞4 5
var
±± 
connectionId
±±  
=
±±! "

connection
±±# -
.
±±- .
m_NetworkId
±±. 9
;
±±9 :
var
≤≤ 
systemHeaderSize
≤≤ $
=
≤≤% &
driver
≤≤' -
.
≤≤- .#
MaxProtocolHeaderSize
≤≤. C
(
≤≤C D
)
≤≤D E
;
≤≤E F
bool
µµ 
inUpdateCall
µµ !
=
µµ" #

sendHandle
µµ$ .
.
µµ. /
data
µµ/ 3
==
µµ4 6
IntPtr
µµ7 =
.
µµ= >
Zero
µµ> B
;
µµB C
var
∑∑ 
resumeQ
∑∑ 
=
∑∑ 
new
∑∑ !

NativeList
∑∑" ,
<
∑∑, -
int
∑∑- 0
>
∑∑0 1
(
∑∑1 2
$num
∑∑2 4
,
∑∑4 5
	Allocator
∑∑6 ?
.
∑∑? @
Temp
∑∑@ D
)
∑∑D E
;
∑∑E F
int
∏∏ 
resumeQStart
∏∏  
=
∏∏! "
$num
∏∏# $
;
∏∏$ %
var
∫∫ 
inboundBuffer
∫∫ !
=
∫∫" #
default
∫∫$ +
(
∫∫+ ,
InboundSendBuffer
∫∫, =
)
∫∫= >
;
∫∫> ?
if
ªª 
(
ªª 
!
ªª 
inUpdateCall
ªª !
)
ªª! "
{
ºº 
inboundBuffer
ΩΩ !
.
ΩΩ! "
bufferWithHeaders
ΩΩ" 3
=
ΩΩ4 5
(
ΩΩ6 7
byte
ΩΩ7 ;
*
ΩΩ; <
)
ΩΩ< =

sendHandle
ΩΩ= G
.
ΩΩG H
data
ΩΩH L
+
ΩΩM N
initialHeaderSize
ΩΩO `
+
ΩΩa b
$num
ΩΩc d
;
ΩΩd e
inboundBuffer
ææ !
.
ææ! "%
bufferWithHeadersLength
ææ" 9
=
ææ: ;

sendHandle
ææ< F
.
ææF G
size
ææG K
-
ææL M
initialHeaderSize
ææN _
-
ææ` a
$num
ææb c
;
ææc d
inboundBuffer
øø !
.
øø! "
buffer
øø" (
=
øø) *
inboundBuffer
øø+ 8
.
øø8 9
bufferWithHeaders
øø9 J
+
øøK L
p
øøM N
.
øøN O
headerCapacity
øøO ]
;
øø] ^
inboundBuffer
¿¿ !
.
¿¿! "
bufferLength
¿¿" .
=
¿¿/ 0
inboundBuffer
¿¿1 >
.
¿¿> ?%
bufferWithHeadersLength
¿¿? V
-
¿¿W X
p
¿¿Y Z
.
¿¿Z [
headerCapacity
¿¿[ i
;
¿¿i j
}
¡¡ 
while
√√ 
(
√√ 
true
√√ 
)
√√ 
{
ƒƒ 

headerSize
≈≈ 
=
≈≈  
p
≈≈! "
.
≈≈" #
headerCapacity
≈≈# 1
;
≈≈1 2
int
«« "
internalBufferOffset
«« ,
=
««- .
p
««/ 0
.
««0 1
sendBufferOffset
««1 A
+
««B C
sizePerConnection
««D U
[
««U V
SendSizeOffset
««V d
]
««d e
*
««f g
connectionId
««h t
;
««t u
int
»» (
internalSharedBufferOffset
»» 2
=
»»3 4
p
»»5 6
.
»»6 7 
sharedBufferOffset
»»7 I
+
»»J K
sizePerConnection
»»L ]
[
»»] ^
SharedSizeOffset
»»^ n
]
»»n o
*
»»p q
connectionId
»»r ~
;
»»~ 
if
ÀÀ 
(
ÀÀ 

startStage
ÀÀ "
>
ÀÀ# $
$num
ÀÀ% &
)
ÀÀ& '
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
inboundBuffer
ÕÕ )
.
ÕÕ) *%
bufferWithHeadersLength
ÕÕ* A
>
ÕÕB C
$num
ÕÕD E
)
ÕÕE F
{
ŒŒ 
UnityEngine
œœ '
.
œœ' (
Debug
œœ( -
.
œœ- .
LogError
œœ. 6
(
œœ6 7
$str
œœ7 _
)
œœ_ `
;
œœ` a
return
–– "
(
––# $
int
––$ '
)
––' (
Error
––( -
.
––- .

StatusCode
––. 8
.
––8 9"
NetworkStateMismatch
––9 M
;
––M N
}
—— 
for
““ 
(
““ 
int
““  
i
““! "
=
““# $
$num
““% &
;
““& '
i
““( )
<
““* +

startStage
““, 6
;
““6 7
++
““8 :
i
““: ;
)
““; <
{
”” "
internalBufferOffset
‘‘ 0
+=
‘‘1 3
(
‘‘4 5
m_StageCollection
‘‘5 F
[
‘‘F G
m_StageList
‘‘G R
[
‘‘R S
p
‘‘S T
.
‘‘T U
FirstStageIndex
‘‘U d
+
‘‘e f
i
‘‘g h
]
‘‘h i
]
‘‘i j
.
‘‘j k
SendCapacity
‘‘k w
+
‘‘x y 
AlignmentMinusOne‘‘z ã
)‘‘ã å
&‘‘ç é
(‘‘è ê
~‘‘ê ë!
AlignmentMinusOne‘‘ë ¢
)‘‘¢ £
;‘‘£ §(
internalSharedBufferOffset
’’ 6
+=
’’7 9
(
’’: ;
m_StageCollection
’’; L
[
’’L M
m_StageList
’’M X
[
’’X Y
p
’’Y Z
.
’’Z [
FirstStageIndex
’’[ j
+
’’k l
i
’’m n
]
’’n o
]
’’o p
.
’’p q"
SharedStateCapacity’’q Ñ
+’’Ö Ü!
AlignmentMinusOne’’á ò
)’’ò ô
&’’ö õ
(’’ú ù
~’’ù û!
AlignmentMinusOne’’û Ø
)’’Ø ∞
;’’∞ ±

headerSize
÷÷ &
-=
÷÷' )
m_StageCollection
÷÷* ;
[
÷÷; <
m_StageList
÷÷< G
[
÷÷G H
p
÷÷H I
.
÷÷I J
FirstStageIndex
÷÷J Y
+
÷÷Z [
i
÷÷\ ]
]
÷÷] ^
]
÷÷^ _
.
÷÷_ `
HeaderCapacity
÷÷` n
;
÷÷n o
}
◊◊ 
}
ÿÿ 
for
⁄⁄ 
(
⁄⁄ 
int
⁄⁄ 
i
⁄⁄ 
=
⁄⁄  

startStage
⁄⁄! +
;
⁄⁄+ ,
i
⁄⁄- .
<
⁄⁄/ 0
p
⁄⁄1 2
.
⁄⁄2 3
	NumStages
⁄⁄3 <
;
⁄⁄< =
++
⁄⁄> @
i
⁄⁄@ A
)
⁄⁄A B
{
€€ 
int
‹‹ !
stageHeaderCapacity
‹‹ /
=
‹‹0 1
m_StageCollection
‹‹2 C
[
‹‹C D
m_StageList
‹‹D O
[
‹‹O P
p
‹‹P Q
.
‹‹Q R
FirstStageIndex
‹‹R a
+
‹‹b c
i
‹‹d e
]
‹‹e f
]
‹‹f g
.
‹‹g h
HeaderCapacity
‹‹h v
;
‹‹v w
if
ﬁﬁ 
(
ﬁﬁ !
stageHeaderCapacity
ﬁﬁ /
>
ﬁﬁ0 1

headerSize
ﬁﬁ2 <
)
ﬁﬁ< =
throw
ﬂﬂ !
new
ﬂﬂ" %'
InvalidOperationException
ﬂﬂ& ?
(
ﬂﬂ? @
$strﬂﬂ@ Ñ
)ﬂﬂÑ Ö
;ﬂﬂÖ Ü
inboundBuffer
·· %
.
··% &
headerPadding
··& 3
=
··4 5

headerSize
··6 @
;
··@ A

headerSize
‚‚ "
-=
‚‚# %!
stageHeaderCapacity
‚‚& 9
;
‚‚9 :
if
„„ 
(
„„ !
stageHeaderCapacity
„„ /
>
„„0 1
$num
„„2 3
&&
„„4 6
inboundBuffer
„„7 D
.
„„D E%
bufferWithHeadersLength
„„E \
>
„„] ^
$num
„„_ `
)
„„` a
{
‰‰ 
var
ÂÂ 
headerArray
ÂÂ  +
=
ÂÂ, -&
NativeArrayUnsafeUtility
ÂÂ. F
.
ÂÂF G.
 ConvertExistingDataToNativeArray
ÂÂG g
<
ÂÂg h
byte
ÂÂh l
>
ÂÂl m
(
ÂÂm n
inboundBuffer
ÂÂn {
.
ÂÂ{ | 
bufferWithHeadersÂÂ| ç
+ÂÂé è

headerSizeÂÂê ö
,ÂÂö õ#
stageHeaderCapacityÂÂú Ø
,ÂÂØ ∞
	AllocatorÂÂ± ∫
.ÂÂ∫ ª
InvalidÂÂª ¬
)ÂÂ¬ √
;ÂÂ√ ƒ&
NativeArrayUnsafeUtility
ÁÁ 4
.
ÁÁ4 5#
SetAtomicSafetyHandle
ÁÁ5 J
(
ÁÁJ K
ref
ÁÁK N
headerArray
ÁÁO Z
,
ÁÁZ [ 
AtomicSafetyHandle
ÁÁ\ n
.
ÁÁn o"
GetTempMemoryHandleÁÁo Ç
(ÁÁÇ É
)ÁÁÉ Ñ
)ÁÁÑ Ö
;ÁÁÖ Ü
ctx
ÈÈ 
.
ÈÈ  
header
ÈÈ  &
=
ÈÈ' (
new
ÈÈ) ,
DataStreamWriter
ÈÈ- =
(
ÈÈ= >
headerArray
ÈÈ> I
)
ÈÈI J
;
ÈÈJ K
}
ÍÍ 
else
ÎÎ 
ctx
ÏÏ 
.
ÏÏ  
header
ÏÏ  &
=
ÏÏ' (
new
ÏÏ) ,
DataStreamWriter
ÏÏ- =
(
ÏÏ= >!
stageHeaderCapacity
ÏÏ> Q
,
ÏÏQ R
	Allocator
ÏÏS \
.
ÏÏ\ ]
Temp
ÏÏ] a
)
ÏÏa b
;
ÏÏb c
var
ÌÌ 
prevInbound
ÌÌ '
=
ÌÌ( )
inboundBuffer
ÌÌ* 7
;
ÌÌ7 8"
NetworkPipelineStage
ÓÓ ,
.
ÓÓ, -
Requests
ÓÓ- 5
requests
ÓÓ6 >
=
ÓÓ? @"
NetworkPipelineStage
ÓÓA U
.
ÓÓU V
Requests
ÓÓV ^
.
ÓÓ^ _
None
ÓÓ_ c
;
ÓÓc d
var
 

sendResult
 &
=
' (
ProcessSendStage
) 9
(
9 :
i
: ;
,
; <"
internalBufferOffset
= Q
,
Q R(
internalSharedBufferOffset
S m
,
m n
p
o p
,
p q
ref
r u
resumeQ
v }
,
} ~
ref Ç
ctxÉ Ü
,Ü á
refà ã
inboundBufferå ô
,ô ö
refõ û
requestsü ß
,ß ® 
systemHeaderSize© π
)π ∫
;∫ ª
if
ÚÚ 
(
ÚÚ 
(
ÚÚ 
requests
ÚÚ %
&
ÚÚ& '"
NetworkPipelineStage
ÚÚ( <
.
ÚÚ< =
Requests
ÚÚ= E
.
ÚÚE F
Update
ÚÚF L
)
ÚÚL M
!=
ÚÚN P
$num
ÚÚQ R
)
ÚÚR S
AddSendUpdate
ÛÛ )
(
ÛÛ) *

connection
ÛÛ* 4
,
ÛÛ4 5
i
ÛÛ6 7
,
ÛÛ7 8
pipeline
ÛÛ9 A
,
ÛÛA B
currentUpdates
ÛÛC Q
)
ÛÛQ R
;
ÛÛR S
if
ıı 
(
ıı 
inboundBuffer
ıı )
.
ıı) *%
bufferWithHeadersLength
ıı* A
==
ııB D
$num
ııE F
)
ııF G
{
ˆˆ 
if
˜˜ 
(
˜˜  
(
˜˜  !
requests
˜˜! )
&
˜˜* +"
NetworkPipelineStage
˜˜, @
.
˜˜@ A
Requests
˜˜A I
.
˜˜I J
Error
˜˜J O
)
˜˜O P
!=
˜˜Q S
$num
˜˜T U
&&
˜˜V X
!
˜˜Y Z
inUpdateCall
˜˜Z f
)
˜˜f g
retval
¯¯  &
=
¯¯' (

sendResult
¯¯) 3
;
¯¯3 4
break
˘˘ !
;
˘˘! "
}
˙˙ 
if
˝˝ 
(
˝˝ 
inboundBuffer
˝˝ )
.
˝˝) *
headerPadding
˝˝* 7
!=
˝˝8 :
prevInbound
˝˝; F
.
˝˝F G
headerPadding
˝˝G T
)
˝˝T U
throw
˛˛ !
new
˛˛" %'
InvalidOperationException
˛˛& ?
(
˛˛? @
$str
˛˛@ |
)
˛˛| }
;
˛˛} ~
if
ÄÄ 
(
ÄÄ 
inboundBuffer
ÄÄ )
.
ÄÄ) *
buffer
ÄÄ* 0
!=
ÄÄ1 3
prevInbound
ÄÄ4 ?
.
ÄÄ? @
buffer
ÄÄ@ F
)
ÄÄF G
{
ÅÅ 
if
ÉÉ 
(
ÉÉ  
inboundBuffer
ÉÉ  -
.
ÉÉ- .
buffer
ÉÉ. 4
!=
ÉÉ5 7
inboundBuffer
ÉÉ8 E
.
ÉÉE F
bufferWithHeaders
ÉÉF W
+
ÉÉX Y
inboundBuffer
ÉÉZ g
.
ÉÉg h
headerPadding
ÉÉh u
||
ÉÉv x
inboundBuffer
ÑÑ  -
.
ÑÑ- .
bufferLength
ÑÑ. :
+
ÑÑ; <
inboundBuffer
ÑÑ= J
.
ÑÑJ K
headerPadding
ÑÑK X
>
ÑÑY Z
inboundBuffer
ÑÑ[ h
.
ÑÑh i&
bufferWithHeadersLengthÑÑi Ä
)ÑÑÄ Å
throw
ÖÖ  %
new
ÖÖ& )'
InvalidOperationException
ÖÖ* C
(
ÖÖC D
$strÖÖD ™
)ÖÖ™ ´
;ÖÖ´ ¨
UnsafeUtility
àà )
.
àà) *
MemCpy
àà* 0
(
àà0 1
inboundBuffer
àà1 >
.
àà> ?
bufferWithHeaders
àà? P
+
ààQ R

headerSize
ààS ]
,
àà] ^
ctx
àà_ b
.
ààb c
header
ààc i
.
àài j
AsNativeArray
ààj w
(
ààw x
)
ààx y
.
àày z#
GetUnsafeReadOnlyPtrààz é
(ààé è
)ààè ê
,ààê ë
ctxààí ï
.ààï ñ
headerààñ ú
.ààú ù
Lengthààù £
)àà£ §
;àà§ •
}
ââ 
else
ãã 
{
åå 
if
çç 
(
çç  
inboundBuffer
çç  -
.
çç- .
bufferWithHeaders
çç. ?
!=
çç@ B
prevInbound
ççC N
.
ççN O
bufferWithHeaders
ççO `
)
çç` a
throw
éé  %
new
éé& )'
InvalidOperationException
éé* C
(
ééC D
$strééD ò
)ééò ô
;ééô ö
}
èè 
if
ëë 
(
ëë 
ctx
ëë 
.
ëë  
header
ëë  &
.
ëë& '
Length
ëë' -
<
ëë. /!
stageHeaderCapacity
ëë0 C
)
ëëC D
{
íí 
int
ìì 
wastedSpace
ìì  +
=
ìì, -!
stageHeaderCapacity
ìì. A
-
ììB C
ctx
ììD G
.
ììG H
header
ììH N
.
ììN O
Length
ììO U
;
ììU V
UnsafeUtility
ïï )
.
ïï) *
MemMove
ïï* 1
(
ïï1 2
inboundBuffer
ïï2 ?
.
ïï? @
buffer
ïï@ F
-
ïïG H
wastedSpace
ïïI T
,
ïïT U
inboundBuffer
ïïV c
.
ïïc d
buffer
ïïd j
,
ïïj k
inboundBuffer
ïïl y
.
ïïy z
bufferLengthïïz Ü
)ïïÜ á
;ïïá à
}
ññ 
inboundBuffer
ôô %
.
ôô% &
buffer
ôô& ,
=
ôô- .
inboundBuffer
ôô/ <
.
ôô< =
bufferWithHeaders
ôô= N
+
ôôO P

headerSize
ôôQ [
;
ôô[ \
inboundBuffer
öö %
.
öö% &
bufferLength
öö& 2
=
öö3 4
ctx
öö5 8
.
öö8 9
header
öö9 ?
.
öö? @
Length
öö@ F
+
ööG H
inboundBuffer
ööI V
.
ööV W
bufferLength
ööW c
;
ööc d"
internalBufferOffset
ùù ,
+=
ùù- /
(
ùù0 1
ctx
ùù1 4
.
ùù4 5)
internalProcessBufferLength
ùù5 P
+
ùùQ R
AlignmentMinusOne
ùùS d
)
ùùd e
&
ùùf g
(
ùùh i
~
ùùi j
AlignmentMinusOne
ùùj {
)
ùù{ |
;
ùù| }(
internalSharedBufferOffset
ûû 2
+=
ûû3 5
(
ûû6 7
ctx
ûû7 :
.
ûû: ;/
!internalSharedProcessBufferLength
ûû; \
+
ûû] ^
AlignmentMinusOne
ûû_ p
)
ûûp q
&
ûûr s
(
ûût u
~
ûûu v 
AlignmentMinusOneûûv á
)ûûá à
;ûûà â
}
üü 
if
°° 
(
°° 
inboundBuffer
°° %
.
°°% &
bufferLength
°°& 2
!=
°°3 5
$num
°°6 7
)
°°7 8
{
¢¢ 
if
££ 
(
££ 

sendHandle
££ &
.
££& '
data
££' +
!=
££, .
IntPtr
££/ 5
.
££5 6
Zero
££6 :
&&
££; =
inboundBuffer
££> K
.
££K L
bufferWithHeaders
££L ]
==
££^ `
(
££a b
byte
££b f
*
££f g
)
££g h

sendHandle
££h r
.
££r s
data
££s w
+
££x y 
initialHeaderSize££z ã
+££å ç
$num££é è
)££è ê
{
§§ 
if
¶¶ 
(
¶¶  
inboundBuffer
¶¶  -
.
¶¶- .
buffer
¶¶. 4
!=
¶¶5 7
inboundBuffer
¶¶8 E
.
¶¶E F
bufferWithHeaders
¶¶F W
)
¶¶W X
{
ßß 
UnsafeUtility
®®  -
.
®®- .
MemMove
®®. 5
(
®®5 6
inboundBuffer
®®6 C
.
®®C D
bufferWithHeaders
®®D U
,
®®U V
inboundBuffer
®®W d
.
®®d e
buffer
®®e k
,
®®k l
inboundBuffer
®®m z
.
®®z {
bufferLength®®{ á
)®®á à
;®®à â
inboundBuffer
©©  -
.
©©- .
buffer
©©. 4
=
©©5 6
inboundBuffer
©©7 D
.
©©D E
bufferWithHeaders
©©E V
;
©©V W
}
™™ 
(
´´ 
(
´´ 
byte
´´ "
*
´´" #
)
´´# $

sendHandle
´´$ .
.
´´. /
data
´´/ 3
)
´´3 4
[
´´4 5
initialHeaderSize
´´5 F
]
´´F G
=
´´H I
(
´´J K
byte
´´K O
)
´´O P
pipeline
´´P X
.
´´X Y
Id
´´Y [
;
´´[ \
int
¨¨ 
sendSize
¨¨  (
=
¨¨) *
initialHeaderSize
¨¨+ <
+
¨¨= >
$num
¨¨? @
+
¨¨A B
inboundBuffer
¨¨C P
.
¨¨P Q
bufferLength
¨¨Q ]
;
¨¨] ^
if
ÆÆ 
(
ÆÆ  
sendSize
ÆÆ  (
>
ÆÆ) *

sendHandle
ÆÆ+ 5
.
ÆÆ5 6
size
ÆÆ6 :
)
ÆÆ: ;
throw
ØØ  %
new
ØØ& )'
InvalidOperationException
ØØ* C
(
ØØC D
$strØØD Ñ
)ØØÑ Ö
;ØØÖ Ü

sendHandle
±± &
.
±±& '
size
±±' +
=
±±, -
sendSize
±±. 6
;
±±6 7
if
≤≤ 
(
≤≤  
(
≤≤  !
retval
≤≤! '
=
≤≤( )
driver
≤≤* 0
.
≤≤0 1
CompleteSend
≤≤1 =
(
≤≤= >

connection
≤≤> H
,
≤≤H I

sendHandle
≤≤J T
,
≤≤T U
true
≤≤V Z
)
≤≤Z [
)
≤≤[ \
<
≤≤] ^
$num
≤≤_ `
)
≤≤` a
{
≥≥ 
UnityEngine
¥¥  +
.
¥¥+ ,
Debug
¥¥, 1
.
¥¥1 2

LogWarning
¥¥2 <
(
¥¥< =
FixedString
¥¥= H
.
¥¥H I
Format
¥¥I O
(
¥¥O P
$str¥¥P à
,¥¥à â
retval¥¥ä ê
)¥¥ê ë
)¥¥ë í
;¥¥í ì
}
µµ 

sendHandle
∂∂ &
=
∂∂' (
default
∂∂) 0
;
∂∂0 1
}
∑∑ 
else
∏∏ 
{
ππ 
if
ææ 
(
ææ  
driver
ææ  &
.
ææ& '
	BeginSend
ææ' 0
(
ææ0 1

connection
ææ1 ;
,
ææ; <
out
ææ= @
var
ææA D
writer
ææE K
)
ææK L
==
ææM O
$num
ææP Q
)
ææQ R
{
øø 
writer
¿¿  &
.
¿¿& '
	WriteByte
¿¿' 0
(
¿¿0 1
(
¿¿1 2
byte
¿¿2 6
)
¿¿6 7
pipeline
¿¿7 ?
.
¿¿? @
Id
¿¿@ B
)
¿¿B C
;
¿¿C D
writer
¡¡  &
.
¡¡& '

WriteBytes
¡¡' 1
(
¡¡1 2
inboundBuffer
¡¡2 ?
.
¡¡? @
buffer
¡¡@ F
,
¡¡F G
inboundBuffer
¡¡H U
.
¡¡U V
bufferLength
¡¡V b
)
¡¡b c
;
¡¡c d
if
¬¬  "
(
¬¬# $
(
¬¬$ %
retval
¬¬% +
=
¬¬, -
driver
¬¬. 4
.
¬¬4 5
EndSend
¬¬5 <
(
¬¬< =
writer
¬¬= C
)
¬¬C D
)
¬¬D E
<=
¬¬F H
$num
¬¬I J
)
¬¬J K
{
√√  !
UnityEngine
ƒƒ$ /
.
ƒƒ/ 0
Debug
ƒƒ0 5
.
ƒƒ5 6
Log
ƒƒ6 9
(
ƒƒ9 :
FixedString
ƒƒ: E
.
ƒƒE F
Format
ƒƒF L
(
ƒƒL M
$str
ƒƒM 
,ƒƒ Ä
retvalƒƒÅ á
)ƒƒá à
)ƒƒà â
;ƒƒâ ä
}
≈≈  !
}
∆∆ 
}
«« 
}
»» 
if
   
(
   
resumeQStart
   $
>=
  % '
resumeQ
  ( /
.
  / 0
Length
  0 6
)
  6 7
{
ÀÀ 
break
ÃÃ 
;
ÃÃ 
}
ÕÕ 

startStage
œœ 
=
œœ  
resumeQ
œœ! (
[
œœ( )
resumeQStart
œœ) 5
++
œœ5 7
]
œœ7 8
;
œœ8 9
inboundBuffer
—— !
=
——" #
default
——$ +
;
——+ ,
}
““ 
if
”” 
(
”” 

sendHandle
”” 
.
”” 
data
”” #
!=
””$ &
IntPtr
””' -
.
””- .
Zero
””. 2
)
””2 3
driver
‘‘ 
.
‘‘ 
	AbortSend
‘‘ $
(
‘‘$ %

sendHandle
‘‘% /
)
‘‘/ 0
;
‘‘0 1
return
’’ 
retval
’’ 
;
’’ 
}
÷÷ 
private
ÿÿ 
unsafe
ÿÿ 
int
ÿÿ 
ProcessSendStage
ÿÿ /
(
ÿÿ/ 0
int
ÿÿ0 3

startStage
ÿÿ4 >
,
ÿÿ> ?
int
ÿÿ@ C"
internalBufferOffset
ÿÿD X
,
ÿÿX Y
int
ÿÿZ ](
internalSharedBufferOffset
ÿÿ^ x
,
ÿÿx y
PipelineImpl
ŸŸ 
p
ŸŸ 
,
ŸŸ 
ref
ŸŸ  #

NativeList
ŸŸ$ .
<
ŸŸ. /
int
ŸŸ/ 2
>
ŸŸ2 3
resumeQ
ŸŸ4 ;
,
ŸŸ; <
ref
ŸŸ= @$
NetworkPipelineContext
ŸŸA W
ctx
ŸŸX [
,
ŸŸ[ \
ref
ŸŸ] `
InboundSendBuffer
ŸŸa r
inboundBufferŸŸs Ä
,ŸŸÄ Å
refŸŸÇ Ö$
NetworkPipelineStageŸŸÜ ö
.ŸŸö õ
RequestsŸŸõ £
requestsŸŸ§ ¨
,ŸŸ¨ ≠
intŸŸÆ ± 
systemHeaderSizeŸŸ≤ ¬
)ŸŸ¬ √
{
⁄⁄ 
var
€€ 

stageIndex
€€ 
=
€€  
p
€€! "
.
€€" #
FirstStageIndex
€€# 2
+
€€3 4

startStage
€€5 ?
;
€€? @
var
‹‹ 
pipelineStage
‹‹ !
=
‹‹" #
m_StageCollection
‹‹$ 5
[
‹‹5 6
m_StageList
‹‹6 A
[
‹‹A B

stageIndex
‹‹B L
]
‹‹L M
]
‹‹M N
;
‹‹N O
ctx
›› 
.
›› '
accumulatedHeaderCapacity
›› -
=
››. /)
m_AccumulatedHeaderCapacity
››0 K
[
››K L

stageIndex
››L V
]
››V W
;
››W X
ctx
ﬁﬁ 
.
ﬁﬁ "
staticInstanceBuffer
ﬁﬁ (
=
ﬁﬁ) *
(
ﬁﬁ+ ,
byte
ﬁﬁ, 0
*
ﬁﬁ0 1
)
ﬁﬁ1 2$
m_StaticInstanceBuffer
ﬁﬁ2 H
.
ﬁﬁH I"
GetUnsafeReadOnlyPtr
ﬁﬁI ]
(
ﬁﬁ] ^
)
ﬁﬁ^ _
+
ﬁﬁ` a
pipelineStage
ﬁﬁb o
.
ﬁﬁo p
StaticStateStartﬁﬁp Ä
;ﬁﬁÄ Å
ctx
ﬂﬂ 
.
ﬂﬂ (
staticInstanceBufferLength
ﬂﬂ .
=
ﬂﬂ/ 0
pipelineStage
ﬂﬂ1 >
.
ﬂﬂ> ? 
StaticStateCapcity
ﬂﬂ? Q
;
ﬂﬂQ R
ctx
‡‡ 
.
‡‡ #
internalProcessBuffer
‡‡ )
=
‡‡* +
(
‡‡, -
byte
‡‡- 1
*
‡‡1 2
)
‡‡2 3

sendBuffer
‡‡3 =
.
‡‡= >"
GetUnsafeReadOnlyPtr
‡‡> R
(
‡‡R S
)
‡‡S T
+
‡‡U V"
internalBufferOffset
‡‡W k
;
‡‡k l
ctx
·· 
.
·· )
internalProcessBufferLength
·· /
=
··0 1
pipelineStage
··2 ?
.
··? @
SendCapacity
··@ L
;
··L M
ctx
„„ 
.
„„ )
internalSharedProcessBuffer
„„ /
=
„„0 1
(
„„2 3
byte
„„3 7
*
„„7 8
)
„„8 9
sharedBuffer
„„9 E
.
„„E F"
GetUnsafeReadOnlyPtr
„„F Z
(
„„Z [
)
„„[ \
+
„„] ^(
internalSharedBufferOffset
„„_ y
;
„„y z
ctx
‰‰ 
.
‰‰ /
!internalSharedProcessBufferLength
‰‰ 5
=
‰‰6 7
pipelineStage
‰‰8 E
.
‰‰E F!
SharedStateCapacity
‰‰F Y
;
‰‰Y Z
requests
ÊÊ 
=
ÊÊ "
NetworkPipelineStage
ÊÊ /
.
ÊÊ/ 0
Requests
ÊÊ0 8
.
ÊÊ8 9
None
ÊÊ9 =
;
ÊÊ= >
var
ÁÁ 
retval
ÁÁ 
=
ÁÁ 
pipelineStage
ÁÁ *
.
ÁÁ* +
Send
ÁÁ+ /
.
ÁÁ/ 0
Ptr
ÁÁ0 3
.
ÁÁ3 4
Invoke
ÁÁ4 :
(
ÁÁ: ;
ref
ÁÁ; >
ctx
ÁÁ? B
,
ÁÁB C
ref
ÁÁD G
inboundBuffer
ÁÁH U
,
ÁÁU V
ref
ÁÁW Z
requests
ÁÁ[ c
,
ÁÁc d
systemHeaderSize
ÁÁe u
)
ÁÁu v
;
ÁÁv w
if
ËË 
(
ËË 
(
ËË 
requests
ËË 
&
ËË "
NetworkPipelineStage
ËË  4
.
ËË4 5
Requests
ËË5 =
.
ËË= >
Resume
ËË> D
)
ËËD E
!=
ËËF H
$num
ËËI J
)
ËËJ K
resumeQ
ÈÈ 
.
ÈÈ 
Add
ÈÈ 
(
ÈÈ  

startStage
ÈÈ  *
)
ÈÈ* +
;
ÈÈ+ ,
return
ÍÍ 
retval
ÍÍ 
;
ÍÍ 
}
ÎÎ 
}
ÏÏ 	
private
ÌÌ 
NativeArray
ÌÌ 
<
ÌÌ "
NetworkPipelineStage
ÌÌ 0
>
ÌÌ0 1
m_StageCollection
ÌÌ2 C
;
ÌÌC D
private
ÓÓ 
NativeArray
ÓÓ 
<
ÓÓ 
byte
ÓÓ  
>
ÓÓ  !$
m_StaticInstanceBuffer
ÓÓ" 8
;
ÓÓ8 9
private
ÔÔ 

NativeList
ÔÔ 
<
ÔÔ 
int
ÔÔ 
>
ÔÔ 
m_StageList
ÔÔ  +
;
ÔÔ+ ,
private
 

NativeList
 
<
 
int
 
>
 )
m_AccumulatedHeaderCapacity
  ;
;
; <
private
ÒÒ 

NativeList
ÒÒ 
<
ÒÒ 
PipelineImpl
ÒÒ '
>
ÒÒ' (
m_Pipelines
ÒÒ) 4
;
ÒÒ4 5
private
ÚÚ 

NativeList
ÚÚ 
<
ÚÚ 
byte
ÚÚ 
>
ÚÚ  
m_ReceiveBuffer
ÚÚ! 0
;
ÚÚ0 1
private
ÛÛ 

NativeList
ÛÛ 
<
ÛÛ 
byte
ÛÛ 
>
ÛÛ  
m_SendBuffer
ÛÛ! -
;
ÛÛ- .
private
ÙÙ 

NativeList
ÙÙ 
<
ÙÙ 
byte
ÙÙ 
>
ÙÙ  
m_SharedBuffer
ÙÙ! /
;
ÙÙ/ 0
private
ıı 

NativeList
ıı 
<
ıı 
UpdatePipeline
ıı )
>
ıı) *'
m_ReceiveStageNeedsUpdate
ıı+ D
;
ııD E
private
ˆˆ 

NativeList
ˆˆ 
<
ˆˆ 
UpdatePipeline
ˆˆ )
>
ˆˆ) *$
m_SendStageNeedsUpdate
ˆˆ+ A
;
ˆˆA B
private
˜˜ 
NativeQueue
˜˜ 
<
˜˜ 
UpdatePipeline
˜˜ *
>
˜˜* +(
m_SendStageNeedsUpdateRead
˜˜, F
;
˜˜F G
private
˘˘ 
NativeArray
˘˘ 
<
˘˘ 
int
˘˘ 
>
˘˘  
sizePerConnection
˘˘! 2
;
˘˘2 3
private
˚˚ 
NativeArray
˚˚ 
<
˚˚ 
long
˚˚  
>
˚˚  !
m_timestamp
˚˚" -
;
˚˚- .
private
˝˝ 
const
˝˝ 
int
˝˝ 
SendSizeOffset
˝˝ (
=
˝˝) *
$num
˝˝+ ,
;
˝˝, -
private
˛˛ 
const
˛˛ 
int
˛˛  
RecveiveSizeOffset
˛˛ ,
=
˛˛- .
$num
˛˛/ 0
;
˛˛0 1
private
ˇˇ 
const
ˇˇ 
int
ˇˇ 
SharedSizeOffset
ˇˇ *
=
ˇˇ+ ,
$num
ˇˇ- .
;
ˇˇ. /
internal
ÅÅ 
struct
ÅÅ 
PipelineImpl
ÅÅ $
{
ÇÇ 	
public
ÉÉ 
int
ÉÉ 
FirstStageIndex
ÉÉ &
;
ÉÉ& '
public
ÑÑ 
int
ÑÑ 
	NumStages
ÑÑ  
;
ÑÑ  !
public
ÜÜ 
int
ÜÜ !
receiveBufferOffset
ÜÜ *
;
ÜÜ* +
public
áá 
int
áá 
sendBufferOffset
áá '
;
áá' (
public
àà 
int
àà  
sharedBufferOffset
àà )
;
àà) *
public
ââ 
int
ââ 
headerCapacity
ââ %
;
ââ% &
public
ää 
int
ää 
payloadCapacity
ää &
;
ää& '
}
ãã 	
public
çç 
unsafe
çç &
NetworkPipelineProcessor
çç .
(
çç. /
NetworkSettings
çç/ >
settings
çç? G
)
ççG H
{
éé 	#
NetworkPipelineParams
èè !
config
èè" (
=
èè) *
settings
èè+ 3
.
èè3 4#
GetPipelineParameters
èè4 I
(
èèI J
)
èèJ K
;
èèK L
int
ëë 
staticBufferSize
ëë  
=
ëë! "
$num
ëë# $
;
ëë$ %
for
íí 
(
íí 
int
íí 
i
íí 
=
íí 
$num
íí 
;
íí 
i
íí 
<
íí ,
NetworkPipelineStageCollection
íí  >
.
íí> ?
m_stages
íí? G
.
ííG H
Count
ííH M
;
ííM N
++
ííO Q
i
ííQ R
)
ííR S
{
ìì 
staticBufferSize
îî  
+=
îî! #,
NetworkPipelineStageCollection
îî$ B
.
îîB C
m_stages
îîC K
[
îîK L
i
îîL M
]
îîM N
.
îîN O

StaticSize
îîO Y
;
îîY Z
staticBufferSize
ïï  
=
ïï! "
(
ïï# $
staticBufferSize
ïï$ 4
+
ïï5 6
$num
ïï7 9
)
ïï9 :
&
ïï; <
(
ïï= >
~
ïï> ?
$num
ïï? A
)
ïïA B
;
ïïB C
}
ññ $
m_StaticInstanceBuffer
óó "
=
óó# $
new
óó% (
NativeArray
óó) 4
<
óó4 5
byte
óó5 9
>
óó9 :
(
óó: ;
staticBufferSize
óó; K
,
óóK L
	Allocator
óóM V
.
óóV W

Persistent
óóW a
)
óóa b
;
óób c
m_StageCollection
òò 
=
òò 
new
òò  #
NativeArray
òò$ /
<
òò/ 0"
NetworkPipelineStage
òò0 D
>
òòD E
(
òòE F,
NetworkPipelineStageCollection
òòF d
.
òòd e
m_stages
òòe m
.
òòm n
Count
òòn s
,
òòs t
	Allocator
òòu ~
.
òò~ 

Persistentòò â
)òòâ ä
;òòä ã
staticBufferSize
ôô 
=
ôô 
$num
ôô  
;
ôô  !
for
öö 
(
öö 
int
öö 
i
öö 
=
öö 
$num
öö 
;
öö 
i
öö 
<
öö ,
NetworkPipelineStageCollection
öö  >
.
öö> ?
m_stages
öö? G
.
ööG H
Count
ööH M
;
ööM N
++
ööO Q
i
ööQ R
)
ööR S
{
õõ 
var
úú 
stageStruct
úú 
=
úú  !,
NetworkPipelineStageCollection
úú" @
.
úú@ A
m_stages
úúA I
[
úúI J
i
úúJ K
]
úúK L
.
úúL M
StaticInitialize
úúM ]
(
úú] ^
(
úú^ _
byte
úú_ c
*
úúc d
)
úúd e$
m_StaticInstanceBuffer
úúe {
.
úú{ |
GetUnsafePtrúú| à
(úúà â
)úúâ ä
+úúã å 
staticBufferSizeúúç ù
,úúù û.
NetworkPipelineStageCollectionúúü Ω
.úúΩ æ
m_stagesúúæ ∆
[úú∆ «
iúú« »
]úú» …
.úú…  

StaticSizeúú  ‘
,úú‘ ’
settingsúú÷ ﬁ
)úúﬁ ﬂ
;úúﬂ ‡
stageStruct
ùù 
.
ùù 
StaticStateStart
ùù ,
=
ùù- .
staticBufferSize
ùù/ ?
;
ùù? @
stageStruct
ûû 
.
ûû  
StaticStateCapcity
ûû .
=
ûû/ 0,
NetworkPipelineStageCollection
ûû1 O
.
ûûO P
m_stages
ûûP X
[
ûûX Y
i
ûûY Z
]
ûûZ [
.
ûû[ \

StaticSize
ûû\ f
;
ûûf g
m_StageCollection
üü !
[
üü! "
i
üü" #
]
üü# $
=
üü% &
stageStruct
üü' 2
;
üü2 3
staticBufferSize
††  
+=
††! #,
NetworkPipelineStageCollection
††$ B
.
††B C
m_stages
††C K
[
††K L
i
††L M
]
††M N
.
††N O

StaticSize
††O Y
;
††Y Z
staticBufferSize
°°  
=
°°! "
(
°°# $
staticBufferSize
°°$ 4
+
°°5 6
$num
°°7 9
)
°°9 :
&
°°; <
(
°°= >
~
°°> ?
$num
°°? A
)
°°A B
;
°°B C
}
¢¢ 
m_StageList
§§ 
=
§§ 
new
§§ 

NativeList
§§ (
<
§§( )
int
§§) ,
>
§§, -
(
§§- .
$num
§§. 0
,
§§0 1
	Allocator
§§2 ;
.
§§; <

Persistent
§§< F
)
§§F G
;
§§G H)
m_AccumulatedHeaderCapacity
•• '
=
••( )
new
••* -

NativeList
••. 8
<
••8 9
int
••9 <
>
••< =
(
••= >
$num
••> @
,
••@ A
	Allocator
••B K
.
••K L

Persistent
••L V
)
••V W
;
••W X
m_Pipelines
¶¶ 
=
¶¶ 
new
¶¶ 

NativeList
¶¶ (
<
¶¶( )
PipelineImpl
¶¶) 5
>
¶¶5 6
(
¶¶6 7
$num
¶¶7 9
,
¶¶9 :
	Allocator
¶¶; D
.
¶¶D E

Persistent
¶¶E O
)
¶¶O P
;
¶¶P Q
m_ReceiveBuffer
ßß 
=
ßß 
new
ßß !

NativeList
ßß" ,
<
ßß, -
byte
ßß- 1
>
ßß1 2
(
ßß2 3
config
ßß3 9
.
ßß9 :
initialCapacity
ßß: I
,
ßßI J
	Allocator
ßßK T
.
ßßT U

Persistent
ßßU _
)
ßß_ `
;
ßß` a
m_SendBuffer
®® 
=
®® 
new
®® 

NativeList
®® )
<
®®) *
byte
®®* .
>
®®. /
(
®®/ 0
config
®®0 6
.
®®6 7
initialCapacity
®®7 F
,
®®F G
	Allocator
®®H Q
.
®®Q R

Persistent
®®R \
)
®®\ ]
;
®®] ^
m_SharedBuffer
©© 
=
©© 
new
©©  

NativeList
©©! +
<
©©+ ,
byte
©©, 0
>
©©0 1
(
©©1 2
config
©©2 8
.
©©8 9
initialCapacity
©©9 H
,
©©H I
	Allocator
©©J S
.
©©S T

Persistent
©©T ^
)
©©^ _
;
©©_ `
sizePerConnection
™™ 
=
™™ 
new
™™  #
NativeArray
™™$ /
<
™™/ 0
int
™™0 3
>
™™3 4
(
™™4 5
$num
™™5 6
,
™™6 7
	Allocator
™™8 A
.
™™A B

Persistent
™™B L
)
™™L M
;
™™M N
sizePerConnection
¨¨ 
[
¨¨ 
SendSizeOffset
¨¨ ,
]
¨¨, -
=
¨¨. /
	Alignment
¨¨0 9
;
¨¨9 :'
m_ReceiveStageNeedsUpdate
≠≠ %
=
≠≠& '
new
≠≠( +

NativeList
≠≠, 6
<
≠≠6 7
UpdatePipeline
≠≠7 E
>
≠≠E F
(
≠≠F G
$num
≠≠G J
,
≠≠J K
	Allocator
≠≠L U
.
≠≠U V

Persistent
≠≠V `
)
≠≠` a
;
≠≠a b$
m_SendStageNeedsUpdate
ÆÆ "
=
ÆÆ# $
new
ÆÆ% (

NativeList
ÆÆ) 3
<
ÆÆ3 4
UpdatePipeline
ÆÆ4 B
>
ÆÆB C
(
ÆÆC D
$num
ÆÆD G
,
ÆÆG H
	Allocator
ÆÆI R
.
ÆÆR S

Persistent
ÆÆS ]
)
ÆÆ] ^
;
ÆÆ^ _(
m_SendStageNeedsUpdateRead
ØØ &
=
ØØ' (
new
ØØ) ,
NativeQueue
ØØ- 8
<
ØØ8 9
UpdatePipeline
ØØ9 G
>
ØØG H
(
ØØH I
	Allocator
ØØI R
.
ØØR S

Persistent
ØØS ]
)
ØØ] ^
;
ØØ^ _
m_timestamp
∞∞ 
=
∞∞ 
new
∞∞ 
NativeArray
∞∞ )
<
∞∞) *
long
∞∞* .
>
∞∞. /
(
∞∞/ 0
$num
∞∞0 1
,
∞∞1 2
	Allocator
∞∞3 <
.
∞∞< =

Persistent
∞∞= G
)
∞∞G H
;
∞∞H I
}
±± 	
public
≥≥ 
void
≥≥ 
Dispose
≥≥ 
(
≥≥ 
)
≥≥ 
{
¥¥ 	
m_StageList
µµ 
.
µµ 
Dispose
µµ 
(
µµ  
)
µµ  !
;
µµ! ")
m_AccumulatedHeaderCapacity
∂∂ '
.
∂∂' (
Dispose
∂∂( /
(
∂∂/ 0
)
∂∂0 1
;
∂∂1 2
m_ReceiveBuffer
∑∑ 
.
∑∑ 
Dispose
∑∑ #
(
∑∑# $
)
∑∑$ %
;
∑∑% &
m_SendBuffer
∏∏ 
.
∏∏ 
Dispose
∏∏  
(
∏∏  !
)
∏∏! "
;
∏∏" #
m_SharedBuffer
ππ 
.
ππ 
Dispose
ππ "
(
ππ" #
)
ππ# $
;
ππ$ %
m_Pipelines
∫∫ 
.
∫∫ 
Dispose
∫∫ 
(
∫∫  
)
∫∫  !
;
∫∫! "
sizePerConnection
ªª 
.
ªª 
Dispose
ªª %
(
ªª% &
)
ªª& '
;
ªª' ('
m_ReceiveStageNeedsUpdate
ºº %
.
ºº% &
Dispose
ºº& -
(
ºº- .
)
ºº. /
;
ºº/ 0$
m_SendStageNeedsUpdate
ΩΩ "
.
ΩΩ" #
Dispose
ΩΩ# *
(
ΩΩ* +
)
ΩΩ+ ,
;
ΩΩ, -(
m_SendStageNeedsUpdateRead
ææ &
.
ææ& '
Dispose
ææ' .
(
ææ. /
)
ææ/ 0
;
ææ0 1
m_timestamp
øø 
.
øø 
Dispose
øø 
(
øø  
)
øø  !
;
øø! "
m_StageCollection
¿¿ 
.
¿¿ 
Dispose
¿¿ %
(
¿¿% &
)
¿¿& '
;
¿¿' ($
m_StaticInstanceBuffer
¡¡ "
.
¡¡" #
Dispose
¡¡# *
(
¡¡* +
)
¡¡+ ,
;
¡¡, -
}
¬¬ 	
public
ƒƒ 
long
ƒƒ 
	Timestamp
ƒƒ 
{
≈≈ 	
get
∆∆ 
{
∆∆ 
return
∆∆ 
m_timestamp
∆∆ $
[
∆∆$ %
$num
∆∆% &
]
∆∆& '
;
∆∆' (
}
∆∆) *
internal
«« 
set
«« 
{
«« 
m_timestamp
«« &
[
««& '
$num
««' (
]
««( )
=
««* +
value
««, 1
;
««1 2
}
««3 4
}
»» 	
public
   
unsafe
   
void
   "
initializeConnection
   /
(
  / 0
NetworkConnection
  0 A
con
  B E
)
  E F
{
ÀÀ 	
var
ÃÃ !
requiredReceiveSize
ÃÃ #
=
ÃÃ$ %
(
ÃÃ& '
con
ÃÃ' *
.
ÃÃ* +
m_NetworkId
ÃÃ+ 6
+
ÃÃ7 8
$num
ÃÃ9 :
)
ÃÃ: ;
*
ÃÃ< =
sizePerConnection
ÃÃ> O
[
ÃÃO P 
RecveiveSizeOffset
ÃÃP b
]
ÃÃb c
;
ÃÃc d
var
ÕÕ 
requiredSendSize
ÕÕ  
=
ÕÕ! "
(
ÕÕ# $
con
ÕÕ$ '
.
ÕÕ' (
m_NetworkId
ÕÕ( 3
+
ÕÕ4 5
$num
ÕÕ6 7
)
ÕÕ7 8
*
ÕÕ9 :
sizePerConnection
ÕÕ; L
[
ÕÕL M
SendSizeOffset
ÕÕM [
]
ÕÕ[ \
;
ÕÕ\ ]
var
ŒŒ  
requiredSharedSize
ŒŒ "
=
ŒŒ# $
(
ŒŒ% &
con
ŒŒ& )
.
ŒŒ) *
m_NetworkId
ŒŒ* 5
+
ŒŒ6 7
$num
ŒŒ8 9
)
ŒŒ9 :
*
ŒŒ; <
sizePerConnection
ŒŒ= N
[
ŒŒN O
SharedSizeOffset
ŒŒO _
]
ŒŒ_ `
;
ŒŒ` a
if
œœ 
(
œœ 
m_ReceiveBuffer
œœ 
.
œœ  
Length
œœ  &
<
œœ' (!
requiredReceiveSize
œœ) <
)
œœ< =
m_ReceiveBuffer
–– 
.
––  !
ResizeUninitialized
––  3
(
––3 4!
requiredReceiveSize
––4 G
)
––G H
;
––H I
if
—— 
(
—— 
m_SendBuffer
—— 
.
—— 
Length
—— #
<
——$ %
requiredSendSize
——& 6
)
——6 7
m_SendBuffer
““ 
.
““ !
ResizeUninitialized
““ 0
(
““0 1
requiredSendSize
““1 A
)
““A B
;
““B C
if
”” 
(
”” 
m_SharedBuffer
”” 
.
”” 
Length
”” %
<
””& ' 
requiredSharedSize
””( :
)
””: ;
m_SharedBuffer
‘‘ 
.
‘‘ !
ResizeUninitialized
‘‘ 2
(
‘‘2 3 
requiredSharedSize
‘‘3 E
)
‘‘E F
;
‘‘F G
UnsafeUtility
÷÷ 
.
÷÷ 
MemClear
÷÷ "
(
÷÷" #
(
÷÷# $
byte
÷÷$ (
*
÷÷( )
)
÷÷) *
m_ReceiveBuffer
÷÷* 9
.
÷÷9 :
GetUnsafePtr
÷÷: F
(
÷÷F G
)
÷÷G H
+
÷÷I J
con
÷÷K N
.
÷÷N O
m_NetworkId
÷÷O Z
*
÷÷[ \
sizePerConnection
÷÷] n
[
÷÷n o!
RecveiveSizeOffset÷÷o Å
]÷÷Å Ç
,÷÷Ç É!
sizePerConnection÷÷Ñ ï
[÷÷ï ñ"
RecveiveSizeOffset÷÷ñ ®
]÷÷® ©
)÷÷© ™
;÷÷™ ´
UnsafeUtility
◊◊ 
.
◊◊ 
MemClear
◊◊ "
(
◊◊" #
(
◊◊# $
byte
◊◊$ (
*
◊◊( )
)
◊◊) *
m_SendBuffer
◊◊* 6
.
◊◊6 7
GetUnsafePtr
◊◊7 C
(
◊◊C D
)
◊◊D E
+
◊◊F G
con
◊◊H K
.
◊◊K L
m_NetworkId
◊◊L W
*
◊◊X Y
sizePerConnection
◊◊Z k
[
◊◊k l
SendSizeOffset
◊◊l z
]
◊◊z {
,
◊◊{ | 
sizePerConnection◊◊} é
[◊◊é è
SendSizeOffset◊◊è ù
]◊◊ù û
)◊◊û ü
;◊◊ü †
UnsafeUtility
ÿÿ 
.
ÿÿ 
MemClear
ÿÿ "
(
ÿÿ" #
(
ÿÿ# $
byte
ÿÿ$ (
*
ÿÿ( )
)
ÿÿ) *
m_SharedBuffer
ÿÿ* 8
.
ÿÿ8 9
GetUnsafePtr
ÿÿ9 E
(
ÿÿE F
)
ÿÿF G
+
ÿÿH I
con
ÿÿJ M
.
ÿÿM N
m_NetworkId
ÿÿN Y
*
ÿÿZ [
sizePerConnection
ÿÿ\ m
[
ÿÿm n
SharedSizeOffset
ÿÿn ~
]
ÿÿ~ 
,ÿÿ Ä!
sizePerConnectionÿÿÅ í
[ÿÿí ì 
SharedSizeOffsetÿÿì £
]ÿÿ£ §
)ÿÿ§ •
;ÿÿ• ¶
InitializeStages
⁄⁄ 
(
⁄⁄ 
con
⁄⁄  
.
⁄⁄  !
m_NetworkId
⁄⁄! ,
)
⁄⁄, -
;
⁄⁄- .
}
€€ 	
unsafe
›› 
void
›› 
InitializeStages
›› $
(
››$ %
int
››% (
	networkId
››) 2
)
››2 3
{
ﬁﬁ 	
var
ﬂﬂ 
connectionId
ﬂﬂ 
=
ﬂﬂ 
	networkId
ﬂﬂ (
;
ﬂﬂ( )
for
·· 
(
·· 
int
·· 
i
·· 
=
·· 
$num
·· 
;
·· 
i
·· 
<
·· 
m_Pipelines
··  +
.
··+ ,
Length
··, 2
;
··2 3
i
··4 5
++
··5 7
)
··7 8
{
‚‚ 
var
„„ 
pipeline
„„ 
=
„„ 
m_Pipelines
„„ *
[
„„* +
i
„„+ ,
]
„„, -
;
„„- .
int
ÂÂ 
recvBufferOffset
ÂÂ $
=
ÂÂ% &
pipeline
ÂÂ' /
.
ÂÂ/ 0!
receiveBufferOffset
ÂÂ0 C
+
ÂÂD E
sizePerConnection
ÂÂF W
[
ÂÂW X 
RecveiveSizeOffset
ÂÂX j
]
ÂÂj k
*
ÂÂl m
connectionId
ÂÂn z
;
ÂÂz {
int
ÊÊ 
sendBufferOffset
ÊÊ $
=
ÊÊ% &
pipeline
ÊÊ' /
.
ÊÊ/ 0
sendBufferOffset
ÊÊ0 @
+
ÊÊA B
sizePerConnection
ÊÊC T
[
ÊÊT U
SendSizeOffset
ÊÊU c
]
ÊÊc d
*
ÊÊe f
connectionId
ÊÊg s
;
ÊÊs t
int
ÁÁ  
sharedBufferOffset
ÁÁ &
=
ÁÁ' (
pipeline
ÁÁ) 1
.
ÁÁ1 2 
sharedBufferOffset
ÁÁ2 D
+
ÁÁE F
sizePerConnection
ÁÁG X
[
ÁÁX Y
SharedSizeOffset
ÁÁY i
]
ÁÁi j
*
ÁÁk l
connectionId
ÁÁm y
;
ÁÁy z
for
ÈÈ 
(
ÈÈ 
int
ÈÈ 
stage
ÈÈ 
=
ÈÈ  
pipeline
ÈÈ! )
.
ÈÈ) *
FirstStageIndex
ÈÈ* 9
;
ÈÈ9 :
stage
ÍÍ 
<
ÍÍ 
pipeline
ÍÍ %
.
ÍÍ% &
FirstStageIndex
ÍÍ& 5
+
ÍÍ6 7
pipeline
ÍÍ8 @
.
ÍÍ@ A
	NumStages
ÍÍA J
;
ÍÍJ K
stage
ÎÎ 
++
ÎÎ 
)
ÎÎ 
{
ÏÏ 
var
ÌÌ 
pipelineStage
ÌÌ %
=
ÌÌ& '
m_StageCollection
ÌÌ( 9
[
ÌÌ9 :
m_StageList
ÌÌ: E
[
ÌÌE F
stage
ÌÌF K
]
ÌÌK L
]
ÌÌL M
;
ÌÌM N
var
ÓÓ 
sendProcessBuffer
ÓÓ )
=
ÓÓ* +
(
ÓÓ, -
byte
ÓÓ- 1
*
ÓÓ1 2
)
ÓÓ2 3
m_SendBuffer
ÓÓ3 ?
.
ÓÓ? @
GetUnsafePtr
ÓÓ@ L
(
ÓÓL M
)
ÓÓM N
+
ÓÓO P
sendBufferOffset
ÓÓQ a
;
ÓÓa b
var
ÔÔ %
sendProcessBufferLength
ÔÔ /
=
ÔÔ0 1
pipelineStage
ÔÔ2 ?
.
ÔÔ? @
SendCapacity
ÔÔ@ L
;
ÔÔL M
var
 
recvProcessBuffer
 )
=
* +
(
, -
byte
- 1
*
1 2
)
2 3
m_ReceiveBuffer
3 B
.
B C
GetUnsafePtr
C O
(
O P
)
P Q
+
R S
recvBufferOffset
T d
;
d e
var
ÒÒ %
recvProcessBufferLength
ÒÒ /
=
ÒÒ0 1
pipelineStage
ÒÒ2 ?
.
ÒÒ? @
ReceiveCapacity
ÒÒ@ O
;
ÒÒO P
var
ÚÚ !
sharedProcessBuffer
ÚÚ +
=
ÚÚ, -
(
ÚÚ. /
byte
ÚÚ/ 3
*
ÚÚ3 4
)
ÚÚ4 5
m_SharedBuffer
ÚÚ5 C
.
ÚÚC D
GetUnsafePtr
ÚÚD P
(
ÚÚP Q
)
ÚÚQ R
+
ÚÚS T 
sharedBufferOffset
ÚÚU g
;
ÚÚg h
var
ÛÛ '
sharedProcessBufferLength
ÛÛ 1
=
ÛÛ2 3
pipelineStage
ÛÛ4 A
.
ÛÛA B!
SharedStateCapacity
ÛÛB U
;
ÛÛU V
var
ıı "
staticInstanceBuffer
ıı ,
=
ıı- .
(
ıı/ 0
byte
ıı0 4
*
ıı4 5
)
ıı5 6$
m_StaticInstanceBuffer
ıı6 L
.
ııL M
GetUnsafePtr
ııM Y
(
ııY Z
)
ııZ [
+
ıı\ ]
pipelineStage
ıı^ k
.
ıık l
StaticStateStart
ııl |
;
ıı| }
var
ˆˆ (
staticInstanceBufferLength
ˆˆ 2
=
ˆˆ3 4
pipelineStage
ˆˆ5 B
.
ˆˆB C 
StaticStateCapcity
ˆˆC U
;
ˆˆU V
pipelineStage
˜˜ !
.
˜˜! ""
InitializeConnection
˜˜" 6
.
˜˜6 7
Ptr
˜˜7 :
.
˜˜: ;
Invoke
˜˜; A
(
˜˜A B"
staticInstanceBuffer
˜˜B V
,
˜˜V W(
staticInstanceBufferLength
˜˜X r
,
˜˜r s
sendProcessBuffer
¯¯ )
,
¯¯) *%
sendProcessBufferLength
¯¯+ B
,
¯¯B C
recvProcessBuffer
¯¯D U
,
¯¯U V%
recvProcessBufferLength
¯¯W n
,
¯¯n o!
sharedProcessBuffer
˘˘ +
,
˘˘+ ,'
sharedProcessBufferLength
˘˘- F
)
˘˘F G
;
˘˘G H
sendBufferOffset
˚˚ $
+=
˚˚% '
(
˚˚( )%
sendProcessBufferLength
˚˚) @
+
˚˚A B
AlignmentMinusOne
˚˚C T
)
˚˚T U
&
˚˚V W
(
˚˚X Y
~
˚˚Y Z
AlignmentMinusOne
˚˚Z k
)
˚˚k l
;
˚˚l m
recvBufferOffset
¸¸ $
+=
¸¸% '
(
¸¸( )%
recvProcessBufferLength
¸¸) @
+
¸¸A B
AlignmentMinusOne
¸¸C T
)
¸¸T U
&
¸¸V W
(
¸¸X Y
~
¸¸Y Z
AlignmentMinusOne
¸¸Z k
)
¸¸k l
;
¸¸l m 
sharedBufferOffset
˝˝ &
+=
˝˝' )
(
˝˝* +'
sharedProcessBufferLength
˝˝+ D
+
˝˝E F
AlignmentMinusOne
˝˝G X
)
˝˝X Y
&
˝˝Z [
(
˝˝\ ]
~
˝˝] ^
AlignmentMinusOne
˝˝^ o
)
˝˝o p
;
˝˝p q
}
˛˛ 
}
ˇˇ 
}
ÄÄ 	
[
ÇÇ 	
Conditional
ÇÇ	 
(
ÇÇ 
$str
ÇÇ 6
)
ÇÇ6 7
]
ÇÇ7 8
private
ÉÉ 
void
ÉÉ 
ValidateStages
ÉÉ #
(
ÉÉ# $
params
ÉÉ$ *
Type
ÉÉ+ /
[
ÉÉ/ 0
]
ÉÉ0 1
stages
ÉÉ2 8
)
ÉÉ8 9
{
ÑÑ 	
var
ÖÖ 
reliableIndex
ÖÖ 
=
ÖÖ 
Array
ÖÖ  %
.
ÖÖ% &
IndexOf
ÖÖ& -
(
ÖÖ- .
stages
ÖÖ. 4
,
ÖÖ4 5
typeof
ÖÖ6 <
(
ÖÖ< =,
ReliableSequencedPipelineStage
ÖÖ= [
)
ÖÖ[ \
)
ÖÖ\ ]
;
ÖÖ] ^
var
ÜÜ 
fragmentedIndex
ÜÜ 
=
ÜÜ  !
Array
ÜÜ" '
.
ÜÜ' (
IndexOf
ÜÜ( /
(
ÜÜ/ 0
stages
ÜÜ0 6
,
ÜÜ6 7
typeof
ÜÜ8 >
(
ÜÜ> ?(
FragmentationPipelineStage
ÜÜ? Y
)
ÜÜY Z
)
ÜÜZ [
;
ÜÜ[ \
if
ää 
(
ää 
reliableIndex
ää 
>=
ää  
$num
ää! "
&&
ää# %
fragmentedIndex
ää& 5
>=
ää6 8
$num
ää9 :
&&
ää; =
fragmentedIndex
ää> M
>
ääN O
reliableIndex
ääP ]
)
ää] ^
throw
ãã 
new
ãã '
InvalidOperationException
ãã 3
(
ãã3 4
$strãã4 †
)ãã† °
;ãã° ¢
}
åå 	
public
ïï 
NetworkPipeline
ïï 
CreatePipeline
ïï -
(
ïï- .
params
ïï. 4
Type
ïï5 9
[
ïï9 :
]
ïï: ;
stages
ïï< B
)
ïïB C
{
ññ 	
if
òò 
(
òò 
m_Pipelines
òò 
.
òò 
Length
òò "
>
òò# $
$num
òò% (
)
òò( )
throw
ôô 
new
ôô '
InvalidOperationException
ôô 3
(
ôô3 4
$str
ôô4 n
)
ôôn o
;
ôôo p
ValidateStages
öö 
(
öö 
stages
öö !
)
öö! "
;
öö" #
var
úú 

receiveCap
úú 
=
úú 
$num
úú 
;
úú 
var
ùù 
	sharedCap
ùù 
=
ùù 
$num
ùù 
;
ùù 
var
ûû 
sendCap
ûû 
=
ûû 
$num
ûû 
;
ûû 
var
üü 
	headerCap
üü 
=
üü 
$num
üü 
;
üü 
var
†† 

payloadCap
†† 
=
†† 
$num
†† 
;
†† 
var
°° 
pipeline
°° 
=
°° 
new
°° 
PipelineImpl
°° +
(
°°+ ,
)
°°, -
;
°°- .
pipeline
¢¢ 
.
¢¢ 
FirstStageIndex
¢¢ $
=
¢¢% &
m_StageList
¢¢' 2
.
¢¢2 3
Length
¢¢3 9
;
¢¢9 :
pipeline
££ 
.
££ 
	NumStages
££ 
=
££  
stages
££! '
.
££' (
Length
££( .
;
££. /
for
§§ 
(
§§ 
int
§§ 
i
§§ 
=
§§ 
$num
§§ 
;
§§ 
i
§§ 
<
§§ 
stages
§§  &
.
§§& '
Length
§§' -
;
§§- .
i
§§/ 0
++
§§0 2
)
§§2 3
{
•• 
var
¶¶ 
stageId
¶¶ 
=
¶¶ ,
NetworkPipelineStageCollection
¶¶ <
.
¶¶< =

GetStageId
¶¶= G
(
¶¶G H
stages
¶¶H N
[
¶¶N O
i
¶¶O P
]
¶¶P Q
)
¶¶Q R
.
¶¶R S
Index
¶¶S X
;
¶¶X Y
if
®® 
(
®® 
stageId
®® 
<
®® 
$num
®® 
)
®®  
throw
©© 
new
©© '
InvalidOperationException
©© 7
(
©©7 8
$str
©©8 g
+
©©h i
stages
©©j p
[
©©p q
i
©©q r
]
©©r s
)
©©s t
;
©©t u
m_StageList
´´ 
.
´´ 
Add
´´ 
(
´´  
stageId
´´  '
)
´´' (
;
´´( ))
m_AccumulatedHeaderCapacity
¨¨ +
.
¨¨+ ,
Add
¨¨, /
(
¨¨/ 0
	headerCap
¨¨0 9
)
¨¨9 :
;
¨¨: ;

receiveCap
ÆÆ 
+=
ÆÆ 
(
ÆÆ 
m_StageCollection
ÆÆ 0
[
ÆÆ0 1
stageId
ÆÆ1 8
]
ÆÆ8 9
.
ÆÆ9 :
ReceiveCapacity
ÆÆ: I
+
ÆÆJ K
AlignmentMinusOne
ÆÆL ]
)
ÆÆ] ^
&
ÆÆ_ `
(
ÆÆa b
~
ÆÆb c
AlignmentMinusOne
ÆÆc t
)
ÆÆt u
;
ÆÆu v
sendCap
ØØ 
+=
ØØ 
(
ØØ 
m_StageCollection
ØØ -
[
ØØ- .
stageId
ØØ. 5
]
ØØ5 6
.
ØØ6 7
SendCapacity
ØØ7 C
+
ØØD E
AlignmentMinusOne
ØØF W
)
ØØW X
&
ØØY Z
(
ØØ[ \
~
ØØ\ ]
AlignmentMinusOne
ØØ] n
)
ØØn o
;
ØØo p
	headerCap
∞∞ 
+=
∞∞ 
m_StageCollection
∞∞ .
[
∞∞. /
stageId
∞∞/ 6
]
∞∞6 7
.
∞∞7 8
HeaderCapacity
∞∞8 F
;
∞∞F G
	sharedCap
±± 
+=
±± 
(
±± 
m_StageCollection
±± /
[
±±/ 0
stageId
±±0 7
]
±±7 8
.
±±8 9!
SharedStateCapacity
±±9 L
+
±±M N
AlignmentMinusOne
±±O `
)
±±` a
&
±±b c
(
±±d e
~
±±e f
AlignmentMinusOne
±±f w
)
±±w x
;
±±x y
if
≤≤ 
(
≤≤ 

payloadCap
≤≤ 
==
≤≤ !
$num
≤≤" #
)
≤≤# $
{
≥≥ 

payloadCap
¥¥ 
=
¥¥  
m_StageCollection
¥¥! 2
[
¥¥2 3
stageId
¥¥3 :
]
¥¥: ;
.
¥¥; <
PayloadCapacity
¥¥< K
;
¥¥K L
}
µµ 
}
∂∂ 
pipeline
∏∏ 
.
∏∏ !
receiveBufferOffset
∏∏ (
=
∏∏) *
sizePerConnection
∏∏+ <
[
∏∏< = 
RecveiveSizeOffset
∏∏= O
]
∏∏O P
;
∏∏P Q
sizePerConnection
ππ 
[
ππ  
RecveiveSizeOffset
ππ 0
]
ππ0 1
=
ππ2 3
sizePerConnection
ππ4 E
[
ππE F 
RecveiveSizeOffset
ππF X
]
ππX Y
+
ππZ [

receiveCap
ππ\ f
;
ππf g
pipeline
ªª 
.
ªª 
sendBufferOffset
ªª %
=
ªª& '
sizePerConnection
ªª( 9
[
ªª9 :
SendSizeOffset
ªª: H
]
ªªH I
;
ªªI J
sizePerConnection
ºº 
[
ºº 
SendSizeOffset
ºº ,
]
ºº, -
=
ºº. /
sizePerConnection
ºº0 A
[
ººA B
SendSizeOffset
ººB P
]
ººP Q
+
ººR S
sendCap
ººT [
;
ºº[ \
pipeline
ææ 
.
ææ  
sharedBufferOffset
ææ '
=
ææ( )
sizePerConnection
ææ* ;
[
ææ; <
SharedSizeOffset
ææ< L
]
ææL M
;
ææM N
sizePerConnection
øø 
[
øø 
SharedSizeOffset
øø .
]
øø. /
=
øø0 1
sizePerConnection
øø2 C
[
øøC D
SharedSizeOffset
øøD T
]
øøT U
+
øøV W
	sharedCap
øøX a
;
øøa b
pipeline
¡¡ 
.
¡¡ 
headerCapacity
¡¡ #
=
¡¡$ %
	headerCap
¡¡& /
;
¡¡/ 0
pipeline
¬¬ 
.
¬¬ 
payloadCapacity
¬¬ $
=
¬¬% &

payloadCap
¬¬' 1
;
¬¬1 2
m_Pipelines
ƒƒ 
.
ƒƒ 
Add
ƒƒ 
(
ƒƒ 
pipeline
ƒƒ $
)
ƒƒ$ %
;
ƒƒ% &
return
≈≈ 
new
≈≈ 
NetworkPipeline
≈≈ &
{
≈≈' (
Id
≈≈( *
=
≈≈+ ,
m_Pipelines
≈≈- 8
.
≈≈8 9
Length
≈≈9 ?
}
≈≈? @
;
≈≈@ A
}
∆∆ 	
public
»» 
void
»»  
GetPipelineBuffers
»» &
(
»»& '
NetworkPipeline
»»' 6

pipelineId
»»7 A
,
»»A B$
NetworkPipelineStageId
»»C Y
stageId
»»Z a
,
»»a b
NetworkConnection
»»c t

connection
»»u 
,»» Ä
out
…… 
NativeArray
…… 
<
…… 
byte
……  
>
……  !"
readProcessingBuffer
……" 6
,
……6 7
out
……8 ;
NativeArray
……< G
<
……G H
byte
……H L
>
……L M#
writeProcessingBuffer
……N c
,
……c d
out
   
NativeArray
   
<
   
byte
    
>
    !
sharedBuffer
  " .
)
  . /
{
ÀÀ 	
if
ÕÕ 
(
ÕÕ 

pipelineId
ÕÕ 
.
ÕÕ 
Id
ÕÕ 
<
ÕÕ 
$num
ÕÕ  !
)
ÕÕ! "
throw
ŒŒ 
new
ŒŒ '
InvalidOperationException
ŒŒ 3
(
ŒŒ3 4
$str
ŒŒ4 Y
)
ŒŒY Z
;
ŒŒZ [
if
œœ 
(
œœ 
stageId
œœ 
.
œœ 
IsValid
œœ 
==
œœ  "
$num
œœ# $
)
œœ$ %
throw
–– 
new
–– '
InvalidOperationException
–– 3
(
––3 4
$str
––4 _
)
––_ `
;
––` a
var
⁄⁄ 
pipeline
⁄⁄ 
=
⁄⁄ 
m_Pipelines
⁄⁄ &
[
⁄⁄& '

pipelineId
⁄⁄' 1
.
⁄⁄1 2
Id
⁄⁄2 4
-
⁄⁄5 6
$num
⁄⁄7 8
]
⁄⁄8 9
;
⁄⁄9 :
int
‹‹ 
recvBufferOffset
‹‹  
=
‹‹! "
pipeline
‹‹# +
.
‹‹+ ,!
receiveBufferOffset
‹‹, ?
+
‹‹@ A
sizePerConnection
‹‹B S
[
‹‹S T 
RecveiveSizeOffset
‹‹T f
]
‹‹f g
*
‹‹h i

connection
‹‹j t
.
‹‹t u

InternalId
‹‹u 
;‹‹ Ä
int
›› 
sendBufferOffset
››  
=
››! "
pipeline
››# +
.
››+ ,
sendBufferOffset
››, <
+
››= >
sizePerConnection
››? P
[
››P Q
SendSizeOffset
››Q _
]
››_ `
*
››a b

connection
››c m
.
››m n

InternalId
››n x
;
››x y
int
ﬁﬁ  
sharedBufferOffset
ﬁﬁ "
=
ﬁﬁ# $
pipeline
ﬁﬁ% -
.
ﬁﬁ- . 
sharedBufferOffset
ﬁﬁ. @
+
ﬁﬁA B
sizePerConnection
ﬁﬁC T
[
ﬁﬁT U
SharedSizeOffset
ﬁﬁU e
]
ﬁﬁe f
*
ﬁﬁg h

connection
ﬁﬁi s
.
ﬁﬁs t

InternalId
ﬁﬁt ~
;
ﬁﬁ~ 
int
‡‡ 
stageIndexInList
‡‡  
;
‡‡  !
bool
·· 
stageNotFound
·· 
=
··  
true
··! %
;
··% &
for
‚‚ 
(
‚‚ 
stageIndexInList
‚‚ !
=
‚‚" #
pipeline
‚‚$ ,
.
‚‚, -
FirstStageIndex
‚‚- <
;
‚‚< =
stageIndexInList
„„ !
<
„„" #
pipeline
„„$ ,
.
„„, -
FirstStageIndex
„„- <
+
„„= >
pipeline
„„? G
.
„„G H
	NumStages
„„H Q
;
„„Q R
stageIndexInList
‰‰ !
++
‰‰! #
)
‰‰# $
{
ÂÂ 
if
ÊÊ 
(
ÊÊ 
m_StageList
ÊÊ 
[
ÊÊ  
stageIndexInList
ÊÊ  0
]
ÊÊ0 1
==
ÊÊ2 4
stageId
ÊÊ5 <
.
ÊÊ< =
Index
ÊÊ= B
)
ÊÊB C
{
ÁÁ 
stageNotFound
ËË !
=
ËË" #
false
ËË$ )
;
ËË) *
break
ÈÈ 
;
ÈÈ 
}
ÍÍ 
sendBufferOffset
ÎÎ  
+=
ÎÎ! #
(
ÎÎ$ %
m_StageCollection
ÎÎ% 6
[
ÎÎ6 7
m_StageList
ÎÎ7 B
[
ÎÎB C
stageIndexInList
ÎÎC S
]
ÎÎS T
]
ÎÎT U
.
ÎÎU V
SendCapacity
ÎÎV b
+
ÎÎc d
AlignmentMinusOne
ÎÎe v
)
ÎÎv w
&
ÎÎx y
(
ÎÎz {
~
ÎÎ{ | 
AlignmentMinusOneÎÎ| ç
)ÎÎç é
;ÎÎé è
recvBufferOffset
ÏÏ  
+=
ÏÏ! #
(
ÏÏ$ %
m_StageCollection
ÏÏ% 6
[
ÏÏ6 7
m_StageList
ÏÏ7 B
[
ÏÏB C
stageIndexInList
ÏÏC S
]
ÏÏS T
]
ÏÏT U
.
ÏÏU V
ReceiveCapacity
ÏÏV e
+
ÏÏf g
AlignmentMinusOne
ÏÏh y
)
ÏÏy z
&
ÏÏ{ |
(
ÏÏ} ~
~
ÏÏ~  
AlignmentMinusOneÏÏ ê
)ÏÏê ë
;ÏÏë í 
sharedBufferOffset
ÌÌ "
+=
ÌÌ# %
(
ÌÌ& '
m_StageCollection
ÌÌ' 8
[
ÌÌ8 9
m_StageList
ÌÌ9 D
[
ÌÌD E
stageIndexInList
ÌÌE U
]
ÌÌU V
]
ÌÌV W
.
ÌÌW X!
SharedStateCapacity
ÌÌX k
+
ÌÌl m
AlignmentMinusOne
ÌÌn 
)ÌÌ Ä
&ÌÌÅ Ç
(ÌÌÉ Ñ
~ÌÌÑ Ö!
AlignmentMinusOneÌÌÖ ñ
)ÌÌñ ó
;ÌÌó ò
}
ÓÓ 
if
 
(
 
stageNotFound
 
)
 
{
ÒÒ 
throw
ÛÛ 
new
ÛÛ '
InvalidOperationException
ÛÛ 3
(
ÛÛ3 4
$"
ÛÛ4 6
$str
ÛÛ6 N
{
ÛÛN O
stageId
ÛÛO V
}
ÛÛV W
$strÛÛW £
"ÛÛ£ §
)ÛÛ§ •
;ÛÛ• ¶
}
˙˙ #
writeProcessingBuffer
¸¸ !
=
¸¸" #
(
¸¸$ %
(
¸¸% &
NativeArray
¸¸& 1
<
¸¸1 2
byte
¸¸2 6
>
¸¸6 7
)
¸¸7 8
m_SendBuffer
¸¸8 D
)
¸¸D E
.
¸¸E F
GetSubArray
¸¸F Q
(
¸¸Q R
sendBufferOffset
¸¸R b
,
¸¸b c
m_StageCollection
¸¸d u
[
¸¸u v
m_StageList¸¸v Å
[¸¸Å Ç 
stageIndexInList¸¸Ç í
]¸¸í ì
]¸¸ì î
.¸¸î ï
SendCapacity¸¸ï °
)¸¸° ¢
;¸¸¢ £"
readProcessingBuffer
˝˝  
=
˝˝! "
(
˝˝# $
(
˝˝$ %
NativeArray
˝˝% 0
<
˝˝0 1
byte
˝˝1 5
>
˝˝5 6
)
˝˝6 7
m_ReceiveBuffer
˝˝7 F
)
˝˝F G
.
˝˝G H
GetSubArray
˝˝H S
(
˝˝S T
recvBufferOffset
˝˝T d
,
˝˝d e
m_StageCollection
˝˝f w
[
˝˝w x
m_StageList˝˝x É
[˝˝É Ñ 
stageIndexInList˝˝Ñ î
]˝˝î ï
]˝˝ï ñ
.˝˝ñ ó
ReceiveCapacity˝˝ó ¶
)˝˝¶ ß
;˝˝ß ®
sharedBuffer
˛˛ 
=
˛˛ 
(
˛˛ 
(
˛˛ 
NativeArray
˛˛ (
<
˛˛( )
byte
˛˛) -
>
˛˛- .
)
˛˛. /
m_SharedBuffer
˛˛/ =
)
˛˛= >
.
˛˛> ?
GetSubArray
˛˛? J
(
˛˛J K 
sharedBufferOffset
˛˛K ]
,
˛˛] ^
m_StageCollection
˛˛_ p
[
˛˛p q
m_StageList
˛˛q |
[
˛˛| }
stageIndexInList˛˛} ç
]˛˛ç é
]˛˛é è
.˛˛è ê#
SharedStateCapacity˛˛ê £
)˛˛£ §
;˛˛§ •
}
ˇˇ 	
internal
ÅÅ 
struct
ÅÅ 
UpdatePipeline
ÅÅ &
{
ÇÇ 	
public
ÉÉ 
NetworkPipeline
ÉÉ "
pipeline
ÉÉ# +
;
ÉÉ+ ,
public
ÑÑ 
int
ÑÑ 
stage
ÑÑ 
;
ÑÑ 
public
ÖÖ 
NetworkConnection
ÖÖ $

connection
ÖÖ% /
;
ÖÖ/ 0
}
ÜÜ 	
internal
àà 
unsafe
àà 
void
àà 

UpdateSend
àà '
(
àà' (
NetworkDriver
àà( 5
.
àà5 6

Concurrent
àà6 @
driver
ààA G
,
ààG H
out
ààI L
int
ààM P
updateCount
ààQ \
)
àà\ ]
{
ââ 	
NativeArray
ãã 
<
ãã 
byte
ãã 
>
ãã 
	tmpBuffer
ãã '
=
ãã( )
m_SendBuffer
ãã* 6
;
ãã6 7
int
åå 
*
åå 
sendBufferLock
åå 
=
åå  !
(
åå" #
int
åå# &
*
åå& '
)
åå' (
	tmpBuffer
åå( 1
.
åå1 2
GetUnsafePtr
åå2 >
(
åå> ?
)
åå? @
;
åå@ A
for
çç 
(
çç 
int
çç 
connectionOffset
çç %
=
çç& '
$num
çç( )
;
çç) *
connectionOffset
çç+ ;
<
çç< =
m_SendBuffer
çç> J
.
ççJ K
Length
ççK Q
;
ççQ R
connectionOffset
ççS c
+=
ççd f
sizePerConnection
ççg x
[
ççx y
SendSizeOffsetççy á
]ççá à
)ççà â
sendBufferLock
éé 
[
éé 
connectionOffset
éé /
/
éé0 1
$num
éé2 3
]
éé3 4
=
éé5 6
$num
éé7 8
;
éé8 9
NativeArray
êê 
<
êê 
UpdatePipeline
êê &
>
êê& '
sendUpdates
êê( 3
=
êê4 5
new
êê6 9
NativeArray
êê: E
<
êêE F
UpdatePipeline
êêF T
>
êêT U
(
êêU V(
m_SendStageNeedsUpdateRead
êêV p
.
êêp q
Count
êêq v
+
êêw x%
m_SendStageNeedsUpdateêêy è
.êêè ê
Lengthêêê ñ
,êêñ ó
	Allocatorêêò °
.êê° ¢
Tempêê¢ ¶
)êê¶ ß
;êêß ®
UpdatePipeline
íí 

updateItem
íí %
;
íí% &
updateCount
ìì 
=
ìì 
$num
ìì 
;
ìì 
while
îî 
(
îî (
m_SendStageNeedsUpdateRead
îî -
.
îî- .

TryDequeue
îî. 8
(
îî8 9
out
îî9 <

updateItem
îî= G
)
îîG H
)
îîH I
{
ïï 
if
ññ 
(
ññ 
driver
ññ 
.
ññ  
GetConnectionState
ññ -
(
ññ- .

updateItem
ññ. 8
.
ññ8 9

connection
ññ9 C
)
ññC D
==
ññE G
NetworkConnection
ññH Y
.
ññY Z
State
ññZ _
.
ññ_ `
	Connected
ññ` i
)
ññi j
sendUpdates
óó 
[
óó  
updateCount
óó  +
++
óó+ -
]
óó- .
=
óó/ 0

updateItem
óó1 ;
;
óó; <
}
òò 
int
öö 
startLength
öö 
=
öö 
updateCount
öö )
;
öö) *
for
õõ 
(
õõ 
int
õõ 
i
õõ 
=
õõ 
$num
õõ 
;
õõ 
i
õõ 
<
õõ $
m_SendStageNeedsUpdate
õõ  6
.
õõ6 7
Length
õõ7 =
;
õõ= >
i
õõ? @
++
õõ@ B
)
õõB C
{
úú 
if
ùù 
(
ùù 
driver
ùù 
.
ùù  
GetConnectionState
ùù -
(
ùù- .$
m_SendStageNeedsUpdate
ùù. D
[
ùùD E
i
ùùE F
]
ùùF G
.
ùùG H

connection
ùùH R
)
ùùR S
==
ùùT V
NetworkConnection
ùùW h
.
ùùh i
State
ùùi n
.
ùùn o
	Connected
ùùo x
)
ùùx y
sendUpdates
ûû 
[
ûû  
updateCount
ûû  +
++
ûû+ -
]
ûû- .
=
ûû/ 0$
m_SendStageNeedsUpdate
ûû1 G
[
ûûG H
i
ûûH I
]
ûûI J
;
ûûJ K
}
üü 

NativeList
°° 
<
°° 
UpdatePipeline
°° %
>
°°% &
currentUpdates
°°' 5
=
°°6 7
new
°°8 ;

NativeList
°°< F
<
°°F G
UpdatePipeline
°°G U
>
°°U V
(
°°V W
$num
°°W Z
,
°°Z [
	Allocator
°°\ e
.
°°e f
Temp
°°f j
)
°°j k
;
°°k l
for
££ 
(
££ 
int
££ 
i
££ 
=
££ 
$num
££ 
;
££ 
i
££ 
<
££ 
updateCount
££  +
;
££+ ,
++
££- /
i
££/ 0
)
££0 1
{
§§ 

updateItem
•• 
=
•• 
sendUpdates
•• (
[
••( )
i
••) *
]
••* +
;
••+ ,
var
¶¶ 
result
¶¶ 
=
¶¶ 
ToConcurrent
¶¶ )
(
¶¶) *
)
¶¶* +
.
¶¶+ ,!
ProcessPipelineSend
¶¶, ?
(
¶¶? @
driver
¶¶@ F
,
¶¶F G

updateItem
¶¶H R
.
¶¶R S
stage
¶¶S X
,
¶¶X Y

updateItem
¶¶Z d
.
¶¶d e
pipeline
¶¶e m
,
¶¶m n

updateItem
¶¶o y
.
¶¶y z

connection¶¶z Ñ
,¶¶Ñ Ö
default¶¶Ü ç
,¶¶ç é
$num¶¶è ê
,¶¶ê ë
currentUpdates¶¶í †
)¶¶† °
;¶¶° ¢
if
ßß 
(
ßß 
result
ßß 
<
ßß 
$num
ßß 
)
ßß 
{
®® 
UnityEngine
©© 
.
©©  
Debug
©©  %
.
©©% &

LogWarning
©©& 0
(
©©0 1
FixedString
©©1 <
.
©©< =
Format
©©= C
(
©©C D
$str©©D É
,©©É Ñ
result©©Ö ã
)©©ã å
)©©å ç
;©©ç é
}
™™ 
}
´´ 
for
¨¨ 
(
¨¨ 
int
¨¨ 
i
¨¨ 
=
¨¨ 
$num
¨¨ 
;
¨¨ 
i
¨¨ 
<
¨¨ 
currentUpdates
¨¨  .
.
¨¨. /
Length
¨¨/ 5
;
¨¨5 6
++
¨¨7 9
i
¨¨9 :
)
¨¨: ;(
m_SendStageNeedsUpdateRead
≠≠ *
.
≠≠* +
Enqueue
≠≠+ 2
(
≠≠2 3
currentUpdates
≠≠3 A
[
≠≠A B
i
≠≠B C
]
≠≠C D
)
≠≠D E
;
≠≠E F
}
ÆÆ 	
private
∞∞ 
static
∞∞ 
void
∞∞ 
AddSendUpdate
∞∞ )
(
∞∞) *
NetworkConnection
∞∞* ;

connection
∞∞< F
,
∞∞F G
int
∞∞H K
stageId
∞∞L S
,
∞∞S T
NetworkPipeline
∞∞U d

pipelineId
∞∞e o
,
∞∞o p

NativeList
∞∞q {
<
∞∞{ |
UpdatePipeline∞∞| ä
>∞∞ä ã
currentUpdates∞∞å ö
)∞∞ö õ
{
±± 	
var
≤≤ 
	newUpdate
≤≤ 
=
≤≤ 
new
≤≤ 
UpdatePipeline
≤≤  .
{
≥≥ 

connection
≥≥ 
=
≥≥ 

connection
≥≥ $
,
≥≥$ %
stage
≥≥& +
=
≥≥, -
stageId
≥≥. 5
,
≥≥5 6
pipeline
≥≥7 ?
=
≥≥@ A

pipelineId
≥≥B L
}
≥≥L M
;
≥≥M N
bool
¥¥ 

uniqueItem
¥¥ 
=
¥¥ 
true
¥¥ "
;
¥¥" #
for
µµ 
(
µµ 
int
µµ 
j
µµ 
=
µµ 
$num
µµ 
;
µµ 
j
µµ 
<
µµ 
currentUpdates
µµ  .
.
µµ. /
Length
µµ/ 5
;
µµ5 6
++
µµ7 9
j
µµ9 :
)
µµ: ;
{
∂∂ 
if
∑∑ 
(
∑∑ 
currentUpdates
∑∑ "
[
∑∑" #
j
∑∑# $
]
∑∑$ %
.
∑∑% &
stage
∑∑& +
==
∑∑, .
	newUpdate
∑∑/ 8
.
∑∑8 9
stage
∑∑9 >
&&
∑∑? A
currentUpdates
∏∏ "
[
∏∏" #
j
∏∏# $
]
∏∏$ %
.
∏∏% &
pipeline
∏∏& .
.
∏∏. /
Id
∏∏/ 1
==
∏∏2 4
	newUpdate
∏∏5 >
.
∏∏> ?
pipeline
∏∏? G
.
∏∏G H
Id
∏∏H J
&&
∏∏K M
currentUpdates
ππ "
[
ππ" #
j
ππ# $
]
ππ$ %
.
ππ% &

connection
ππ& 0
==
ππ1 3
	newUpdate
ππ4 =
.
ππ= >

connection
ππ> H
)
ππH I

uniqueItem
∫∫ 
=
∫∫  
false
∫∫! &
;
∫∫& '
}
ªª 
if
ºº 
(
ºº 

uniqueItem
ºº 
)
ºº 
currentUpdates
ΩΩ 
.
ΩΩ 
Add
ΩΩ "
(
ΩΩ" #
	newUpdate
ΩΩ# ,
)
ΩΩ, -
;
ΩΩ- .
}
ææ 	
public
¿¿ 
void
¿¿ 
UpdateReceive
¿¿ !
(
¿¿! "
NetworkDriver
¿¿" /
driver
¿¿0 6
,
¿¿6 7
out
¿¿8 ;
int
¿¿< ?
updateCount
¿¿@ K
)
¿¿K L
{
¡¡ 	
NativeArray
¬¬ 
<
¬¬ 
UpdatePipeline
¬¬ &
>
¬¬& '
receiveUpdates
¬¬( 6
=
¬¬7 8
new
¬¬9 <
NativeArray
¬¬= H
<
¬¬H I
UpdatePipeline
¬¬I W
>
¬¬W X
(
¬¬X Y'
m_ReceiveStageNeedsUpdate
¬¬Y r
.
¬¬r s
Length
¬¬s y
,
¬¬y z
	Allocator¬¬{ Ñ
.¬¬Ñ Ö
Temp¬¬Ö â
)¬¬â ä
;¬¬ä ã
updateCount
≈≈ 
=
≈≈ 
$num
≈≈ 
;
≈≈ 
for
∆∆ 
(
∆∆ 
int
∆∆ 
i
∆∆ 
=
∆∆ 
$num
∆∆ 
;
∆∆ 
i
∆∆ 
<
∆∆ '
m_ReceiveStageNeedsUpdate
∆∆  9
.
∆∆9 :
Length
∆∆: @
;
∆∆@ A
++
∆∆B D
i
∆∆D E
)
∆∆E F
{
«« 
if
»» 
(
»» 
driver
»» 
.
»»  
GetConnectionState
»» -
(
»»- .'
m_ReceiveStageNeedsUpdate
»». G
[
»»G H
i
»»H I
]
»»I J
.
»»J K

connection
»»K U
)
»»U V
==
»»W Y
NetworkConnection
»»Z k
.
»»k l
State
»»l q
.
»»q r
	Connected
»»r {
)
»»{ |
receiveUpdates
…… "
[
……" #
updateCount
……# .
++
……. 0
]
……0 1
=
……2 3'
m_ReceiveStageNeedsUpdate
……4 M
[
……M N
i
……N O
]
……O P
;
……P Q
}
   '
m_ReceiveStageNeedsUpdate
ÀÀ %
.
ÀÀ% &
Clear
ÀÀ& +
(
ÀÀ+ ,
)
ÀÀ, -
;
ÀÀ- .
for
ŒŒ 
(
ŒŒ 
int
ŒŒ 
i
ŒŒ 
=
ŒŒ 
$num
ŒŒ 
;
ŒŒ 
i
ŒŒ 
<
ŒŒ 
updateCount
ŒŒ  +
;
ŒŒ+ ,
++
ŒŒ- /
i
ŒŒ/ 0
)
ŒŒ0 1
{
œœ 
UpdatePipeline
–– 

updateItem
–– )
=
––* +
receiveUpdates
––, :
[
––: ;
i
––; <
]
––< =
;
––= >&
ProcessReceiveStagesFrom
—— (
(
——( )
driver
——) /
,
——/ 0

updateItem
——1 ;
.
——; <
stage
——< A
,
——A B

updateItem
——C M
.
——M N
pipeline
——N V
,
——V W

updateItem
——X b
.
——b c

connection
——c m
,
——m n
default
——o v
)
——v w
;
——w x
}
““ 
}
”” 	
public
’’ 
unsafe
’’ 
void
’’ 
Receive
’’ "
(
’’" #
NetworkDriver
’’# 0
driver
’’1 7
,
’’7 8
NetworkConnection
’’9 J

connection
’’K U
,
’’U V
NativeArray
’’W b
<
’’b c
byte
’’c g
>
’’g h
buffer
’’i o
)
’’o p
{
÷÷ 	
byte
◊◊ 

pipelineId
◊◊ 
=
◊◊ 
buffer
◊◊ $
[
◊◊$ %
$num
◊◊% &
]
◊◊& '
;
◊◊' (
if
ÿÿ 
(
ÿÿ 

pipelineId
ÿÿ 
==
ÿÿ 
$num
ÿÿ 
||
ÿÿ  "

pipelineId
ÿÿ# -
>
ÿÿ. /
m_Pipelines
ÿÿ0 ;
.
ÿÿ; <
Length
ÿÿ< B
)
ÿÿB C
{
ŸŸ 
UnityEngine
⁄⁄ 
.
⁄⁄ 
Debug
⁄⁄ !
.
⁄⁄! "
LogError
⁄⁄" *
(
⁄⁄* +
$str
⁄⁄+ X
)
⁄⁄X Y
;
⁄⁄Y Z
return
€€ 
;
€€ 
}
‹‹ 
var
›› 
p
›› 
=
›› 
m_Pipelines
›› 
[
››  

pipelineId
››  *
-
››+ ,
$num
››- .
]
››. /
;
››/ 0
int
ﬁﬁ 

startStage
ﬁﬁ 
=
ﬁﬁ 
p
ﬁﬁ 
.
ﬁﬁ 
	NumStages
ﬁﬁ (
-
ﬁﬁ) *
$num
ﬁﬁ+ ,
;
ﬁﬁ, -
InboundRecvBuffer
‡‡ 
inBuffer
‡‡ &
;
‡‡& '
inBuffer
·· 
.
·· 
buffer
·· 
=
·· 
(
·· 
byte
·· #
*
··# $
)
··$ %
buffer
··% +
.
··+ ,
GetUnsafePtr
··, 8
(
··8 9
)
··9 :
+
··; <
$num
··= >
;
··> ?
inBuffer
‚‚ 
.
‚‚ 
bufferLength
‚‚ !
=
‚‚" #
buffer
‚‚$ *
.
‚‚* +
Length
‚‚+ 1
-
‚‚2 3
$num
‚‚4 5
;
‚‚5 6&
ProcessReceiveStagesFrom
„„ $
(
„„$ %
driver
„„% +
,
„„+ ,

startStage
„„- 7
,
„„7 8
new
„„9 <
NetworkPipeline
„„= L
{
„„M N
Id
„„N P
=
„„Q R

pipelineId
„„S ]
}
„„] ^
,
„„^ _

connection
„„` j
,
„„j k
inBuffer
„„l t
)
„„t u
;
„„u v
}
‰‰ 	
private
ÊÊ 
unsafe
ÊÊ 
void
ÊÊ &
ProcessReceiveStagesFrom
ÊÊ 4
(
ÊÊ4 5
NetworkDriver
ÊÊ5 B
driver
ÊÊC I
,
ÊÊI J
int
ÊÊK N

startStage
ÊÊO Y
,
ÊÊY Z
NetworkPipeline
ÊÊ[ j
pipeline
ÊÊk s
,
ÊÊs t
NetworkConnection
ÁÁ 

connection
ÁÁ (
,
ÁÁ( )
InboundRecvBuffer
ÁÁ* ;
buffer
ÁÁ< B
)
ÁÁB C
{
ËË 	
var
ÈÈ 
p
ÈÈ 
=
ÈÈ 
m_Pipelines
ÈÈ 
[
ÈÈ  
pipeline
ÈÈ  (
.
ÈÈ( )
Id
ÈÈ) +
-
ÈÈ, -
$num
ÈÈ. /
]
ÈÈ/ 0
;
ÈÈ0 1
var
ÍÍ 
connectionId
ÍÍ 
=
ÍÍ 

connection
ÍÍ )
.
ÍÍ) *
m_NetworkId
ÍÍ* 5
;
ÍÍ5 6
var
ÎÎ 
resumeQ
ÎÎ 
=
ÎÎ 
new
ÎÎ 

NativeList
ÎÎ (
<
ÎÎ( )
int
ÎÎ) ,
>
ÎÎ, -
(
ÎÎ- .
$num
ÎÎ. 0
,
ÎÎ0 1
	Allocator
ÎÎ2 ;
.
ÎÎ; <
Temp
ÎÎ< @
)
ÎÎ@ A
;
ÎÎA B
int
ÏÏ 
resumeQStart
ÏÏ 
=
ÏÏ 
$num
ÏÏ  
;
ÏÏ  !
var
ÓÓ 
systemHeaderSize
ÓÓ  
=
ÓÓ! "
driver
ÓÓ# )
.
ÓÓ) *#
MaxProtocolHeaderSize
ÓÓ* ?
(
ÓÓ? @
)
ÓÓ@ A
;
ÓÓA B
var
 
inboundBuffer
 
=
 
buffer
  &
;
& '
var
ÚÚ 
ctx
ÚÚ 
=
ÚÚ 
new
ÚÚ $
NetworkPipelineContext
ÚÚ 0
{
ÛÛ 
	timestamp
ÙÙ 
=
ÙÙ 
	Timestamp
ÙÙ %
,
ÙÙ% &
header
ıı 
=
ıı 
default
ıı  
}
ˆˆ 
;
ˆˆ 
while
¯¯ 
(
¯¯ 
true
¯¯ 
)
¯¯ 
{
˘˘ 
bool
˙˙ 
needsUpdate
˙˙  
=
˙˙! "
false
˙˙# (
;
˙˙( )
bool
˚˚ 
needsSendUpdate
˚˚ $
=
˚˚% &
false
˚˚' ,
;
˚˚, -
int
¸¸ "
internalBufferOffset
¸¸ (
=
¸¸) *
p
¸¸+ ,
.
¸¸, -!
receiveBufferOffset
¸¸- @
+
¸¸A B
sizePerConnection
¸¸C T
[
¸¸T U 
RecveiveSizeOffset
¸¸U g
]
¸¸g h
*
¸¸i j
connectionId
¸¸k w
;
¸¸w x
int
˝˝ (
internalSharedBufferOffset
˝˝ .
=
˝˝/ 0
p
˝˝1 2
.
˝˝2 3 
sharedBufferOffset
˝˝3 E
+
˝˝F G
sizePerConnection
˝˝H Y
[
˝˝Y Z
SharedSizeOffset
˝˝Z j
]
˝˝j k
*
˝˝l m
connectionId
˝˝n z
;
˝˝z {
for
Ä	Ä	 
(
Ä	Ä	 
int
Ä	Ä	 
st
Ä	Ä	 
=
Ä	Ä	 
$num
Ä	Ä	 
;
Ä	Ä	  
st
Ä	Ä	! #
<
Ä	Ä	$ %

startStage
Ä	Ä	& 0
;
Ä	Ä	0 1
++
Ä	Ä	2 4
st
Ä	Ä	4 6
)
Ä	Ä	6 7
{
Å	Å	 "
internalBufferOffset
Ç	Ç	 (
+=
Ç	Ç	) +
(
Ç	Ç	, -
m_StageCollection
Ç	Ç	- >
[
Ç	Ç	> ?
m_StageList
Ç	Ç	? J
[
Ç	Ç	J K
p
Ç	Ç	K L
.
Ç	Ç	L M
FirstStageIndex
Ç	Ç	M \
+
Ç	Ç	] ^
st
Ç	Ç	_ a
]
Ç	Ç	a b
]
Ç	Ç	b c
.
Ç	Ç	c d
ReceiveCapacity
Ç	Ç	d s
+
Ç	Ç	t u 
AlignmentMinusOneÇ	Ç	v á
)Ç	Ç	á à
&Ç	Ç	â ä
(Ç	Ç	ã å
~Ç	Ç	å ç!
AlignmentMinusOneÇ	Ç	ç û
)Ç	Ç	û ü
;Ç	Ç	ü †(
internalSharedBufferOffset
É	É	 .
+=
É	É	/ 1
(
É	É	2 3
m_StageCollection
É	É	3 D
[
É	É	D E
m_StageList
É	É	E P
[
É	É	P Q
p
É	É	Q R
.
É	É	R S
FirstStageIndex
É	É	S b
+
É	É	c d
st
É	É	e g
]
É	É	g h
]
É	É	h i
.
É	É	i j!
SharedStateCapacity
É	É	j }
+
É	É	~ !
AlignmentMinusOneÉ	É	Ä ë
)É	É	ë í
&É	É	ì î
(É	É	ï ñ
~É	É	ñ ó!
AlignmentMinusOneÉ	É	ó ®
)É	É	® ©
;É	É	© ™
}
Ñ	Ñ	 
for
Ü	Ü	 
(
Ü	Ü	 
int
Ü	Ü	 
i
Ü	Ü	 
=
Ü	Ü	 

startStage
Ü	Ü	 '
;
Ü	Ü	' (
i
Ü	Ü	) *
>=
Ü	Ü	+ -
$num
Ü	Ü	. /
;
Ü	Ü	/ 0
--
Ü	Ü	1 3
i
Ü	Ü	3 4
)
Ü	Ü	4 5
{
á	á	 !
ProcessReceiveStage
à	à	 '
(
à	à	' (
i
à	à	( )
,
à	à	) *
pipeline
à	à	+ 3
,
à	à	3 4"
internalBufferOffset
à	à	5 I
,
à	à	I J(
internalSharedBufferOffset
à	à	K e
,
à	à	e f
ref
à	à	g j
ctx
à	à	k n
,
à	à	n o
ref
à	à	p s
inboundBufferà	à	t Å
,à	à	Å Ç
refà	à	É Ü
resumeQà	à	á é
,à	à	é è
refà	à	ê ì
needsUpdateà	à	î ü
,à	à	ü †
refà	à	° §
needsSendUpdateà	à	• ¥
,à	à	¥ µ 
systemHeaderSizeà	à	∂ ∆
)à	à	∆ «
;à	à	« »
if
â	â	 
(
â	â	 
needsUpdate
â	â	 #
)
â	â	# $
{
ä	ä	 
var
ã	ã	 
	newUpdate
ã	ã	 %
=
ã	ã	& '
new
ã	ã	( +
UpdatePipeline
ã	ã	, :
{
å	å	 

connection
å	å	 #
=
å	å	$ %

connection
å	å	& 0
,
å	å	0 1
stage
å	å	2 7
=
å	å	8 9
i
å	å	: ;
,
å	å	; <
pipeline
å	å	= E
=
å	å	F G
pipeline
å	å	H P
}
å	å	P Q
;
å	å	Q R
bool
ç	ç	 

uniqueItem
ç	ç	 '
=
ç	ç	( )
true
ç	ç	* .
;
ç	ç	. /
for
é	é	 
(
é	é	 
int
é	é	  
j
é	é	! "
=
é	é	# $
$num
é	é	% &
;
é	é	& '
j
é	é	( )
<
é	é	* +'
m_ReceiveStageNeedsUpdate
é	é	, E
.
é	é	E F
Length
é	é	F L
;
é	é	L M
++
é	é	N P
j
é	é	P Q
)
é	é	Q R
{
è	è	 
if
ê	ê	 
(
ê	ê	  '
m_ReceiveStageNeedsUpdate
ê	ê	  9
[
ê	ê	9 :
j
ê	ê	: ;
]
ê	ê	; <
.
ê	ê	< =
stage
ê	ê	= B
==
ê	ê	C E
	newUpdate
ê	ê	F O
.
ê	ê	O P
stage
ê	ê	P U
&&
ê	ê	V X'
m_ReceiveStageNeedsUpdate
ë	ë	  9
[
ë	ë	9 :
j
ë	ë	: ;
]
ë	ë	; <
.
ë	ë	< =
pipeline
ë	ë	= E
.
ë	ë	E F
Id
ë	ë	F H
==
ë	ë	I K
	newUpdate
ë	ë	L U
.
ë	ë	U V
pipeline
ë	ë	V ^
.
ë	ë	^ _
Id
ë	ë	_ a
&&
ë	ë	b d'
m_ReceiveStageNeedsUpdate
í	í	  9
[
í	í	9 :
j
í	í	: ;
]
í	í	; <
.
í	í	< =

connection
í	í	= G
==
í	í	H J
	newUpdate
í	í	K T
.
í	í	T U

connection
í	í	U _
)
í	í	_ `

uniqueItem
ì	ì	  *
=
ì	ì	+ ,
false
ì	ì	- 2
;
ì	ì	2 3
}
î	î	 
if
ï	ï	 
(
ï	ï	 

uniqueItem
ï	ï	 &
)
ï	ï	& ''
m_ReceiveStageNeedsUpdate
ñ	ñ	 5
.
ñ	ñ	5 6
Add
ñ	ñ	6 9
(
ñ	ñ	9 :
	newUpdate
ñ	ñ	: C
)
ñ	ñ	C D
;
ñ	ñ	D E
}
ó	ó	 
if
ô	ô	 
(
ô	ô	 
needsSendUpdate
ô	ô	 '
)
ô	ô	' (
AddSendUpdate
ö	ö	 %
(
ö	ö	% &

connection
ö	ö	& 0
,
ö	ö	0 1
i
ö	ö	2 3
,
ö	ö	3 4
pipeline
ö	ö	5 =
,
ö	ö	= >$
m_SendStageNeedsUpdate
ö	ö	? U
)
ö	ö	U V
;
ö	ö	V W
if
ú	ú	 
(
ú	ú	 
inboundBuffer
ú	ú	 %
.
ú	ú	% &
bufferLength
ú	ú	& 2
==
ú	ú	3 5
$num
ú	ú	6 7
)
ú	ú	7 8
break
ù	ù	 
;
ù	ù	 
if
†	†	 
(
†	†	 
i
†	†	 
>
†	†	 
$num
†	†	 
)
†	†	 
{
°	°	 "
internalBufferOffset
¢	¢	 ,
-=
¢	¢	- /
(
£	£	 
m_StageCollection
£	£	 .
[
£	£	. /
m_StageList
£	£	/ :
[
£	£	: ;
p
£	£	; <
.
£	£	< =
FirstStageIndex
£	£	= L
+
£	£	M N
i
£	£	O P
-
£	£	Q R
$num
£	£	S T
]
£	£	T U
]
£	£	U V
.
£	£	V W
ReceiveCapacity
£	£	W f
+
£	£	g h
AlignmentMinusOne
£	£	i z
)
£	£	z {
&
£	£	| }
(
£	£	~ 
~£	£	 Ä!
AlignmentMinusOne£	£	Ä ë
)£	£	ë í
;£	£	í ì(
internalSharedBufferOffset
§	§	 2
-=
§	§	3 5
(
•	•	 
m_StageCollection
•	•	 .
[
•	•	. /
m_StageList
•	•	/ :
[
•	•	: ;
p
•	•	; <
.
•	•	< =
FirstStageIndex
•	•	= L
+
•	•	M N
i
•	•	O P
-
•	•	Q R
$num
•	•	S T
]
•	•	T U
]
•	•	U V
.
•	•	V W!
SharedStateCapacity
•	•	W j
+
•	•	k l
AlignmentMinusOne
•	•	m ~
)
•	•	~ 
&•	•	Ä Å
(•	•	Ç É
~•	•	É Ñ!
AlignmentMinusOne•	•	Ñ ï
)•	•	ï ñ
;•	•	ñ ó
}
¶	¶	 
needsUpdate
®	®	 
=
®	®	  !
false
®	®	" '
;
®	®	' (
}
©	©	 
if
´	´	 
(
´	´	 
inboundBuffer
´	´	 !
.
´	´	! "
bufferLength
´	´	" .
!=
´	´	/ 1
$num
´	´	2 3
)
´	´	3 4
driver
¨	¨	 
.
¨	¨	 
PushDataEvent
¨	¨	 (
(
¨	¨	( )

connection
¨	¨	) 3
,
¨	¨	3 4
pipeline
¨	¨	5 =
.
¨	¨	= >
Id
¨	¨	> @
,
¨	¨	@ A
inboundBuffer
¨	¨	B O
.
¨	¨	O P
buffer
¨	¨	P V
,
¨	¨	V W
inboundBuffer
¨	¨	X e
.
¨	¨	e f
bufferLength
¨	¨	f r
)
¨	¨	r s
;
¨	¨	s t
if
Æ	Æ	 
(
Æ	Æ	 
resumeQStart
Æ	Æ	  
>=
Æ	Æ	! #
resumeQ
Æ	Æ	$ +
.
Æ	Æ	+ ,
Length
Æ	Æ	, 2
)
Æ	Æ	2 3
{
Ø	Ø	 
return
∞	∞	 
;
∞	∞	 
}
±	±	 

startStage
≥	≥	 
=
≥	≥	 
resumeQ
≥	≥	 $
[
≥	≥	$ %
resumeQStart
≥	≥	% 1
++
≥	≥	1 3
]
≥	≥	3 4
;
≥	≥	4 5
inboundBuffer
¥	¥	 
=
¥	¥	 
default
¥	¥	  '
;
¥	¥	' (
}
µ	µ	 
}
∂	∂	 	
private
∏	∏	 
unsafe
∏	∏	 
void
∏	∏	 !
ProcessReceiveStage
∏	∏	 /
(
∏	∏	/ 0
int
∏	∏	0 3
stage
∏	∏	4 9
,
∏	∏	9 :
NetworkPipeline
∏	∏	; J
pipeline
∏	∏	K S
,
∏	∏	S T
int
∏	∏	U X"
internalBufferOffset
∏	∏	Y m
,
∏	∏	m n
int
π	π	 (
internalSharedBufferOffset
π	π	 *
,
π	π	* +
ref
π	π	, /$
NetworkPipelineContext
π	π	0 F
ctx
π	π	G J
,
π	π	J K
ref
π	π	L O
InboundRecvBuffer
π	π	P a
inboundBuffer
π	π	b o
,
π	π	o p
ref
∫	∫	 

NativeList
∫	∫	 
<
∫	∫	 
int
∫	∫	 
>
∫	∫	 
resumeQ
∫	∫	  '
,
∫	∫	' (
ref
∫	∫	) ,
bool
∫	∫	- 1
needsUpdate
∫	∫	2 =
,
∫	∫	= >
ref
∫	∫	? B
bool
∫	∫	C G
needsSendUpdate
∫	∫	H W
,
∫	∫	W X
int
∫	∫	Y \
systemHeadersSize
∫	∫	] n
)
∫	∫	n o
{
ª	ª	 	
var
º	º	 
p
º	º	 
=
º	º	 
m_Pipelines
º	º	 
[
º	º	  
pipeline
º	º	  (
.
º	º	( )
Id
º	º	) +
-
º	º	, -
$num
º	º	. /
]
º	º	/ 0
;
º	º	0 1
var
æ	æ	 
stageId
æ	æ	 
=
æ	æ	 
m_StageList
æ	æ	 %
[
æ	æ	% &
p
æ	æ	& '
.
æ	æ	' (
FirstStageIndex
æ	æ	( 7
+
æ	æ	8 9
stage
æ	æ	: ?
]
æ	æ	? @
;
æ	æ	@ A
var
ø	ø	 
pipelineStage
ø	ø	 
=
ø	ø	 
m_StageCollection
ø	ø	  1
[
ø	ø	1 2
stageId
ø	ø	2 9
]
ø	ø	9 :
;
ø	ø	: ;
ctx
¿	¿	 
.
¿	¿	 "
staticInstanceBuffer
¿	¿	 $
=
¿	¿	% &
(
¿	¿	' (
byte
¿	¿	( ,
*
¿	¿	, -
)
¿	¿	- .$
m_StaticInstanceBuffer
¿	¿	. D
.
¿	¿	D E
GetUnsafePtr
¿	¿	E Q
(
¿	¿	Q R
)
¿	¿	R S
+
¿	¿	T U
pipelineStage
¿	¿	V c
.
¿	¿	c d
StaticStateStart
¿	¿	d t
;
¿	¿	t u
ctx
¡	¡	 
.
¡	¡	 (
staticInstanceBufferLength
¡	¡	 *
=
¡	¡	+ ,
pipelineStage
¡	¡	- :
.
¡	¡	: ; 
StaticStateCapcity
¡	¡	; M
;
¡	¡	M N
ctx
¬	¬	 
.
¬	¬	 #
internalProcessBuffer
¬	¬	 %
=
¬	¬	& '
(
¬	¬	( )
byte
¬	¬	) -
*
¬	¬	- .
)
¬	¬	. /
m_ReceiveBuffer
¬	¬	/ >
.
¬	¬	> ?
GetUnsafePtr
¬	¬	? K
(
¬	¬	K L
)
¬	¬	L M
+
¬	¬	N O"
internalBufferOffset
¬	¬	P d
;
¬	¬	d e
ctx
√	√	 
.
√	√	 )
internalProcessBufferLength
√	√	 +
=
√	√	, -
pipelineStage
√	√	. ;
.
√	√	; <
ReceiveCapacity
√	√	< K
;
√	√	K L
ctx
ƒ	ƒ	 
.
ƒ	ƒ	 )
internalSharedProcessBuffer
ƒ	ƒ	 +
=
ƒ	ƒ	, -
(
ƒ	ƒ	. /
byte
ƒ	ƒ	/ 3
*
ƒ	ƒ	3 4
)
ƒ	ƒ	4 5
m_SharedBuffer
ƒ	ƒ	5 C
.
ƒ	ƒ	C D
GetUnsafePtr
ƒ	ƒ	D P
(
ƒ	ƒ	P Q
)
ƒ	ƒ	Q R
+
ƒ	ƒ	S T(
internalSharedBufferOffset
ƒ	ƒ	U o
;
ƒ	ƒ	o p
ctx
≈	≈	 
.
≈	≈	 /
!internalSharedProcessBufferLength
≈	≈	 1
=
≈	≈	2 3
pipelineStage
≈	≈	4 A
.
≈	≈	A B!
SharedStateCapacity
≈	≈	B U
;
≈	≈	U V"
NetworkPipelineStage
∆	∆	  
.
∆	∆	  !
Requests
∆	∆	! )
requests
∆	∆	* 2
=
∆	∆	3 4"
NetworkPipelineStage
∆	∆	5 I
.
∆	∆	I J
Requests
∆	∆	J R
.
∆	∆	R S
None
∆	∆	S W
;
∆	∆	W X
pipelineStage
»	»	 
.
»	»	 
Receive
»	»	 !
.
»	»	! "
Ptr
»	»	" %
.
»	»	% &
Invoke
»	»	& ,
(
»	»	, -
ref
»	»	- 0
ctx
»	»	1 4
,
»	»	4 5
ref
»	»	6 9
inboundBuffer
»	»	: G
,
»	»	G H
ref
»	»	I L
requests
»	»	M U
,
»	»	U V
systemHeadersSize
»	»	W h
)
»	»	h i
;
»	»	i j
if
 	 	 
(
 	 	 
(
 	 	 
requests
 	 	 
&
 	 	 "
NetworkPipelineStage
 	 	 0
.
 	 	0 1
Requests
 	 	1 9
.
 	 	9 :
Resume
 	 	: @
)
 	 	@ A
!=
 	 	B D
$num
 	 	E F
)
 	 	F G
resumeQ
À	À	 
.
À	À	 
Add
À	À	 
(
À	À	 
stage
À	À	 !
)
À	À	! "
;
À	À	" #
needsUpdate
Ã	Ã	 
=
Ã	Ã	 
(
Ã	Ã	 
requests
Ã	Ã	 #
&
Ã	Ã	$ %"
NetworkPipelineStage
Ã	Ã	& :
.
Ã	Ã	: ;
Requests
Ã	Ã	; C
.
Ã	Ã	C D
Update
Ã	Ã	D J
)
Ã	Ã	J K
!=
Ã	Ã	L N
$num
Ã	Ã	O P
;
Ã	Ã	P Q
needsSendUpdate
Õ	Õ	 
=
Õ	Õ	 
(
Õ	Õ	 
requests
Õ	Õ	 '
&
Õ	Õ	( )"
NetworkPipelineStage
Õ	Õ	* >
.
Õ	Õ	> ?
Requests
Õ	Õ	? G
.
Õ	Õ	G H

SendUpdate
Õ	Õ	H R
)
Õ	Õ	R S
!=
Õ	Õ	T V
$num
Õ	Õ	W X
;
Õ	Õ	X Y
}
Œ	Œ	 	
[
–	–	 	
Conditional
–	–		 
(
–	–	 
$str
–	–	 6
)
–	–	6 7
]
–	–	7 8
public
—	—	 
static
—	—	 
void
—	—	  
ValidateSendHandle
—	—	 -
(
—	—	- .(
NetworkInterfaceSendHandle
—	—	. H
handle
—	—	I O
)
—	—	O P
{
“	“	 	
if
”	”	 
(
”	”	 
handle
”	”	 
.
”	”	 
data
”	”	 
==
”	”	 
IntPtr
”	”	 %
.
”	”	% &
Zero
”	”	& *
)
”	”	* +
throw
‘	‘	 
new
‘	‘	 
ArgumentException
‘	‘	 +
(
‘	‘	+ ,
$"
‘	‘	, .
$str
‘	‘	. q
"
‘	‘	q r
)
‘	‘	r s
;
‘	‘	s t
}
’	’	 	
}
÷	÷	 
}◊	◊	 ˛
[C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkProtocols.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
	Protocols% .
{ 
internal 
enum 
UdpCProtocol 
{ 
ConnectionRequest 
, 
ConnectionReject		 
,		 
ConnectionAccept

 
,

 

Disconnect 
, 
Data 
, 
Ping 
, 
Pong 
, 
} 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
internal 
unsafe 
struct 

UdpCHeader %
{ 
[ 	
Flags	 
] 
public 
enum 
HeaderFlags 
:  !
byte" &
{ 	
HasConnectToken 
= 
$num !
,! "
HasPipeline 
= 
$num 
} 	
public 
const 
int 
Length 
=  !
$num" #
+$ %
SessionIdToken& 4
.4 5
k_Length5 =
;= >
public 
byte 
Type 
; 
public 
HeaderFlags 
Flags  
;  !
public 
SessionIdToken 
SessionToken *
;* +
} 
}   Õ"
YC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\SessionIdToken.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
[ 
StructLayout 
( 

LayoutKind 
. 
Explicit %
)% &
]& '
internal 
unsafe 
struct 
SessionIdToken )
:* +

IEquatable, 6
<6 7
SessionIdToken7 E
>E F
,F G
IComparableH S
<S T
SessionIdTokenT b
>b c
{		 
public

 
const

 
int

 
k_Length

 !
=

" #
$num

$ %
;

% &
[ 	
FieldOffset	 
( 
$num 
) 
] 
public 
fixed  %
byte& *
Value+ 0
[0 1
k_Length1 9
]9 :
;: ;
public 
static 
bool 
operator #
==# %
(% &
SessionIdToken& 4
lhs5 8
,8 9
SessionIdToken: H
rhsI L
)L M
{ 	
return 
lhs 
. 
Compare 
( 
rhs "
)" #
==$ &
$num' (
;( )
} 	
public 
static 
bool 
operator #
!=# %
(% &
SessionIdToken& 4
lhs5 8
,8 9
SessionIdToken: H
rhsI L
)L M
{ 	
return 
lhs 
. 
Compare 
( 
rhs "
)" #
!=$ &
$num' (
;( )
} 	
public 
bool 
Equals 
( 
SessionIdToken )
other* /
)/ 0
{ 	
return 
Compare 
( 
other  
)  !
==" $
$num% &
;& '
} 	
public 
int 
	CompareTo 
( 
SessionIdToken +
other, 1
)1 2
{ 	
return 
Compare 
( 
other  
)  !
;! "
} 	
public!! 
override!! 
bool!! 
Equals!! #
(!!# $
object!!$ *
other!!+ 0
)!!0 1
{"" 	
return## 
other## 
!=## 
null##  
&&##! #
this##$ (
==##) +
(##, -
SessionIdToken##- ;
)##; <
other##< A
;##A B
}$$ 	
public&& 
override&& 
int&& 
GetHashCode&& '
(&&' (
)&&( )
{'' 	
fixed(( 
((( 
byte(( 
*(( 
p(( 
=(( 
Value(( !
)((! "
	unchecked)) 
{** 
var++ 
result++ 
=++ 
$num++ 
;++ 
for-- 
(-- 
int-- 
i-- 
=-- 
$num-- 
;-- 
i--  !
<--" #
k_Length--$ ,
;--, -
i--. /
++--/ 1
)--1 2
{.. 
result// 
=// 
(// 
result// $
*//% &
$num//' )
)//) *
^//+ ,
(//- .
int//. 1
)//1 2
p//2 3
[//3 4
i//4 5
]//5 6
;//6 7
}00 
return22 
result22 
;22 
}33 
}44 	
int66 
Compare66 
(66 
SessionIdToken66 "
other66# (
)66( )
{77 	
fixed88 
(88 
void88 
*88 
p88 
=88 
Value88 !
)88! "
{99 
return:: 
UnsafeUtility:: $
.::$ %
MemCmp::% +
(::+ ,
p::, -
,::- .
other::/ 4
.::4 5
Value::5 :
,::: ;
k_Length::< D
)::D E
;::E F
};; 
}<< 	
}== 
}>> èK
uC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Pipelines\UnreliableSequencedPipelineStage.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
[ 
BurstCompile 
] 
public 

unsafe 
struct ,
 UnreliableSequencedPipelineStage 9
:: ;!
INetworkPipelineStage< Q
{ 
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =
ReceiveDelegate= L
>L M"
ReceiveFunctionPointerN d
=e f
newg j%
TransportFunctionPointer	k É
<
É Ñ"
NetworkPipelineStage
Ñ ò
.
ò ô
ReceiveDelegate
ô ®
>
® ©
(
© ™
Receive
™ ±
)
± ≤
;
≤ ≥
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =
SendDelegate= I
>I J
SendFunctionPointerK ^
=_ `
newa d$
TransportFunctionPointere }
<} ~!
NetworkPipelineStage	~ í
.
í ì
SendDelegate
ì ü
>
ü †
(
† °
Send
° •
)
• ¶
;
¶ ß
static $
TransportFunctionPointer '
<' ( 
NetworkPipelineStage( <
.< =(
InitializeConnectionDelegate= Y
>Y Z/
#InitializeConnectionFunctionPointer[ ~
=	 Ä
new
Å Ñ&
TransportFunctionPointer
Ö ù
<
ù û"
NetworkPipelineStage
û ≤
.
≤ ≥*
InitializeConnectionDelegate
≥ œ
>
œ –
(
– —"
InitializeConnection
— Â
)
Â Ê
;
Ê Á
public  
NetworkPipelineStage #
StaticInitialize$ 4
(4 5
byte5 9
*9 : 
staticInstanceBuffer; O
,O P
intQ T&
staticInstanceBufferLengthU o
,o p
NetworkSettings	q Ä
settings
Å â
)
â ä
{ 	
return 
new  
NetworkPipelineStage +
(+ ,
Receive 
: "
ReceiveFunctionPointer /
,/ 0
Send 
: 
SendFunctionPointer )
,) * 
InitializeConnection $
:$ %/
#InitializeConnectionFunctionPointer& I
,I J
ReceiveCapacity 
:  
UnsafeUtility! .
.. /
SizeOf/ 5
<5 6
int6 9
>9 :
(: ;
); <
,< =
SendCapacity   
:   
UnsafeUtility   +
.  + ,
SizeOf  , 2
<  2 3
int  3 6
>  6 7
(  7 8
)  8 9
,  9 :
HeaderCapacity!! 
:!! 
UnsafeUtility!!  -
.!!- .
SizeOf!!. 4
<!!4 5
ushort!!5 ;
>!!; <
(!!< =
)!!= >
,!!> ?
SharedStateCapacity"" #
:""# $
$num""% &
)## 
;## 
}$$ 	
public)) 
int)) 

StaticSize)) 
=>))  
$num))! "
;))" #
[++ 	
BurstCompile++	 
(++ 
DisableDirectCall++ '
=++( )
true++* .
)++. /
]++/ 0
[,, 	
MonoPInvokeCallback,,	 
(,, 
typeof,, #
(,,# $ 
NetworkPipelineStage,,$ 8
.,,8 9
ReceiveDelegate,,9 H
),,H I
),,I J
],,J K
private-- 
static-- 
void-- 
Receive-- #
(--# $
ref--$ '"
NetworkPipelineContext--( >
ctx--? B
,--B C
ref--D G
InboundRecvBuffer--H Y
inboundBuffer--Z g
,--g h
ref--i l!
NetworkPipelineStage	--m Å
.
--Å Ç
Requests
--Ç ä
requests
--ã ì
,
--ì î
int
--ï ò
systemHeaderSize
--ô ©
)
--© ™
{.. 	
var// 
inboundArray// 
=// $
NativeArrayUnsafeUtility// 7
.//7 8,
 ConvertExistingDataToNativeArray//8 X
<//X Y
byte//Y ]
>//] ^
(//^ _
inboundBuffer//_ l
.//l m
buffer//m s
,//s t
inboundBuffer	//u Ç
.
//Ç É
bufferLength
//É è
,
//è ê
	Allocator
//ë ö
.
//ö õ
Invalid
//õ ¢
)
//¢ £
;
//£ §
var11 
safetyHandle11 
=11 
AtomicSafetyHandle11 1
.111 2
GetTempMemoryHandle112 E
(11E F
)11F G
;11G H$
NativeArrayUnsafeUtility22 $
.22$ %!
SetAtomicSafetyHandle22% :
(22: ;
ref22; >
inboundArray22? K
,22K L
safetyHandle22M Y
)22Y Z
;22Z [
var44 
reader44 
=44 
new44 
DataStreamReader44 -
(44- .
inboundArray44. :
)44: ;
;44; <
var55 
oldSequenceId55 
=55 
(55  !
int55! $
*55$ %
)55% &
ctx55& )
.55) *!
internalProcessBuffer55* ?
;55? @
ushort66 

sequenceId66 
=66 
reader66  &
.66& '

ReadUShort66' 1
(661 2
)662 3
;663 4
if88 
(88 
SequenceHelpers88 
.88  
GreaterThan1688  -
(88- .

sequenceId88. 8
,888 9
(88: ;
ushort88; A
)88A B
*88B C
oldSequenceId88C P
)88P Q
)88Q R
{99 
*:: 
oldSequenceId:: 
=::  

sequenceId::! +
;::+ ,
inboundBuffer<< 
=<< 
inboundBuffer<<  -
.<<- .
Slice<<. 3
(<<3 4
sizeof<<4 :
(<<: ;
ushort<<; A
)<<A B
)<<B C
;<<C D
return== 
;== 
}>> 
inboundBuffer?? 
=?? 
default?? #
;??# $
}@@ 	
[BB 	
BurstCompileBB	 
(BB 
DisableDirectCallBB '
=BB( )
trueBB* .
)BB. /
]BB/ 0
[CC 	
MonoPInvokeCallbackCC	 
(CC 
typeofCC #
(CC# $ 
NetworkPipelineStageCC$ 8
.CC8 9
SendDelegateCC9 E
)CCE F
)CCF G
]CCG H
privateDD 
staticDD 
intDD 
SendDD 
(DD  
refDD  #"
NetworkPipelineContextDD$ :
ctxDD; >
,DD> ?
refDD@ C
InboundSendBufferDDD U
inboundBufferDDV c
,DDc d
refDDe h 
NetworkPipelineStageDDi }
.DD} ~
Requests	DD~ Ü
requests
DDá è
,
DDè ê
int
DDë î
systemHeaderSize
DDï •
)
DD• ¶
{EE 	
varFF 

sequenceIdFF 
=FF 
(FF 
intFF !
*FF! "
)FF" #
ctxFF# &
.FF& '!
internalProcessBufferFF' <
;FF< =
ctxGG 
.GG 
headerGG 
.GG 
WriteUShortGG "
(GG" #
(GG# $
ushortGG$ *
)GG* +
*GG+ ,

sequenceIdGG, 6
)GG6 7
;GG7 8
*HH 

sequenceIdHH 
=HH 
(HH 
ushortHH !
)HH! "
(HH" #
*HH# $

sequenceIdHH$ .
+HH/ 0
$numHH1 2
)HH2 3
;HH3 4
returnII 
(II 
intII 
)II 
ErrorII 
.II 

StatusCodeII (
.II( )
SuccessII) 0
;II0 1
}JJ 	
[LL 	
BurstCompileLL	 
(LL 
DisableDirectCallLL '
=LL( )
trueLL* .
)LL. /
]LL/ 0
[MM 	
MonoPInvokeCallbackMM	 
(MM 
typeofMM #
(MM# $ 
NetworkPipelineStageMM$ 8
.MM8 9(
InitializeConnectionDelegateMM9 U
)MMU V
)MMV W
]MMW X
privateNN 
staticNN 
voidNN  
InitializeConnectionNN 0
(NN0 1
byteNN1 5
*NN5 6 
staticInstanceBufferNN7 K
,NNK L
intNNM P&
staticInstanceBufferLengthNNQ k
,NNk l
byteOO 
*OO 
sendProcessBufferOO #
,OO# $
intOO% (#
sendProcessBufferLengthOO) @
,OO@ A
byteOOB F
*OOF G
recvProcessBufferOOH Y
,OOY Z
intOO[ ^#
recvProcessBufferLengthOO_ v
,OOv w
bytePP 
*PP 
sharedProcessBufferPP %
,PP% &
intPP' *%
sharedProcessBufferLengthPP+ D
)PPD E
{QQ 	
ifRR 
(RR #
recvProcessBufferLengthRR '
>RR( )
$numRR* +
)RR+ ,
{SS 
*UU 
(UU 
intUU 
*UU 
)UU 
recvProcessBufferUU (
=UU) *
-UU+ ,
$numUU, -
;UU- .
}VV 
}WW 	
}XX 
}YY Àê
bC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\BaselibNetworkInterface.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
public 

static 
class -
!BaselibNetworkParameterExtensions 9
{ 
internal 
const 
int  
k_defaultRxQueueSize /
=0 1
$num2 4
;4 5
internal 
const 
int  
k_defaultTxQueueSize /
=0 1
$num2 4
;4 5
internal 
const 
uint '
k_defaultMaximumPayloadSize 7
=8 9
$num: >
;> ?
public"" 
static"" 
ref"" 
NetworkSettings"" )1
%WithBaselibNetworkInterfaceParameters""* O
(""O P
ref## 
this## 
NetworkSettings## $
settings##% -
,##- .
int$$  
receiveQueueCapacity$$ $
=$$( ) 
k_defaultRxQueueSize$$* >
,$$> ?
int%% 
sendQueueCapacity%% !
=%%( ) 
k_defaultTxQueueSize%%* >
,%%> ?
uint&& 
maximumPayloadSize&& #
=&&( )'
k_defaultMaximumPayloadSize&&* E
)'' 	
{(( 	
var)) 
	parameter)) 
=)) 
new)) #
BaselibNetworkParameter))  7
{**  
receiveQueueCapacity++ $
=++% & 
receiveQueueCapacity++' ;
,++; <
sendQueueCapacity,, !
=,," #
sendQueueCapacity,,$ 5
,,,5 6
maximumPayloadSize-- "
=--# $
maximumPayloadSize--% 7
,--7 8
}.. 
;.. 
settings00 
.00 !
AddRawParameterStruct00 *
(00* +
ref00+ .
	parameter00/ 8
)008 9
;009 :
return22 
ref22 
settings22 
;22  
}33 	
public99 
static99 #
BaselibNetworkParameter99 -0
$GetBaselibNetworkInterfaceParameters99. R
(99R S
ref99S V
this99W [
NetworkSettings99\ k
settings99l t
)99t u
{:: 	
if;; 
(;; 
!;; 
settings;; 
.;; 
TryGet;;  
<;;  !#
BaselibNetworkParameter;;! 8
>;;8 9
(;;9 :
out;;: =
var;;> A
baselibParameters;;B S
);;S T
);;T U
{<< 
baselibParameters== !
.==! " 
receiveQueueCapacity==" 6
===8 9 
k_defaultRxQueueSize==: N
;==N O
baselibParameters>> !
.>>! "
sendQueueCapacity>>" 3
=>>8 9 
k_defaultTxQueueSize>>: N
;>>N O
baselibParameters?? !
.??! "
maximumPayloadSize??" 4
=??8 9'
k_defaultMaximumPayloadSize??: U
;??U V
}@@ 
returnBB 
baselibParametersBB $
;BB$ %
}CC 	
}DD 
publicII 

structII #
BaselibNetworkParameterII )
:II* +
INetworkParameterII, =
{JJ 
publicNN 
intNN  
receiveQueueCapacityNN '
;NN' (
publicRR 
intRR 
sendQueueCapacityRR $
;RR$ %
publicVV 
uintVV 
maximumPayloadSizeVV &
;VV& '
publicXX 
boolXX 
ValidateXX 
(XX 
)XX 
{YY 	
varZZ 
validZZ 
=ZZ 
trueZZ 
;ZZ 
if\\ 
(\\  
receiveQueueCapacity\\ $
<=\\% '
$num\\( )
)\\) *
{]] 
valid^^ 
=^^ 
false^^ 
;^^ 
UnityEngine__ 
.__ 
Debug__ !
.__! "
LogError__" *
(__* +
$"__+ -
{__- .
nameof__. 4
(__4 5 
receiveQueueCapacity__5 I
)__I J
}__J K
$str__K S
{__S T 
receiveQueueCapacity__T h
}__h i
$str	__i Å
"
__Å Ç
)
__Ç É
;
__É Ñ
}`` 
ifaa 
(aa 
sendQueueCapacityaa !
<=aa" $
$numaa% &
)aa& '
{bb 
validcc 
=cc 
falsecc 
;cc 
UnityEnginedd 
.dd 
Debugdd !
.dd! "
LogErrordd" *
(dd* +
$"dd+ -
{dd- .
nameofdd. 4
(dd4 5
sendQueueCapacitydd5 F
)ddF G
}ddG H
$strddH P
{ddP Q
sendQueueCapacityddQ b
}ddb c
$strddc {
"dd{ |
)dd| }
;dd} ~
}ee 
ifff 
(ff 
maximumPayloadSizeff "
<=ff# %
$numff& '
)ff' (
{gg 
validhh 
=hh 
falsehh 
;hh 
UnityEngineii 
.ii 
Debugii !
.ii! "
LogErrorii" *
(ii* +
$"ii+ -
{ii- .
nameofii. 4
(ii4 5
maximumPayloadSizeii5 G
)iiG H
}iiH I
$striiI Q
{iiQ R
maximumPayloadSizeiiR d
}iid e
$striie }
"ii} ~
)ii~ 
;	ii Ä
}jj 
returnll 
validll 
;ll 
}mm 	
}nn 
[tt 
BurstCompilett 
]tt 
publicuu 

structuu #
BaselibNetworkInterfaceuu )
:uu* +
INetworkInterfaceuu, =
{vv 
publiczz 
staticzz #
BaselibNetworkParameterzz -
DefaultParameterszz. ?
=zz@ A
newzzB E#
BaselibNetworkParameterzzF ]
{{{ 	 
receiveQueueCapacity||  
=||! " 
k_defaultRxQueueSize||# 7
,||7 8
sendQueueCapacity}} 
=}}  
k_defaultTxQueueSize}}  4
,}}4 5
maximumPayloadSize~~ 
=~~  '
k_defaultMaximumPayloadSize~~! <
} 	
;	 

private
ÇÇ 
class
ÇÇ 

SocketList
ÇÇ  
{
ÉÉ 	
public
ÑÑ 
struct
ÑÑ 
SocketId
ÑÑ "
{
ÖÖ 
public
ÜÜ 
NetworkSocket
ÜÜ $
socket
ÜÜ% +
;
ÜÜ+ ,
}
áá 
public
àà 
List
àà 
<
àà 
SocketId
àà  
>
àà  !
OpenSockets
àà" -
=
àà. /
new
àà0 3
List
àà4 8
<
àà8 9
SocketId
àà9 A
>
ààA B
(
ààB C
)
ààC D
;
ààD E
~
ää 

SocketList
ää 
(
ää 
)
ää 
{
ãã 
foreach
åå 
(
åå 
var
åå 
socket
åå #
in
åå$ &
OpenSockets
åå' 2
)
åå2 3
{
çç 
Binding
éé 
.
éé 8
*Baselib_RegisteredNetwork_Socket_UDP_Close
éé F
(
ééF G
socket
ééG M
.
ééM N
socket
ééN T
)
ééT U
;
ééU V
}
èè 
}
êê 
}
ëë 	
private
íí 
static
íí 

SocketList
íí !

AllSockets
íí" ,
=
íí- .
new
íí/ 2

SocketList
íí3 =
(
íí= >
)
íí> ?
;
íí? @
internal
îî 
struct
îî 
Payloads
îî  
:
îî! "
IDisposable
îî# .
{
ïï 	
public
ññ "
UnsafeAtomicFreeList
ññ '
	m_Handles
ññ( 1
;
ññ1 2
public
óó '
UnsafeBaselibNetworkArray
óó ,
m_PayloadArray
óó- ;
;
óó; <
public
òò '
UnsafeBaselibNetworkArray
òò ,
m_EndpointArray
òò- <
;
òò< =
private
ôô 
uint
ôô 
m_PayloadSize
ôô &
;
ôô& '
public
õõ 
int
õõ 
InUse
õõ 
=>
õõ 
	m_Handles
õõ  )
.
õõ) *
InUse
õõ* /
;
õõ/ 0
public
úú 
int
úú 
Capacity
úú 
=>
úú  "
	m_Handles
úú# ,
.
úú, -
Capacity
úú- 5
;
úú5 6
public
ûû 
Payloads
ûû 
(
ûû 
int
ûû 
capacity
ûû  (
,
ûû( )
uint
ûû* .
maxPayloadSize
ûû/ =
)
ûû= >
{
üü 
m_PayloadSize
†† 
=
†† 
maxPayloadSize
††  .
;
††. /
	m_Handles
°° 
=
°° 
new
°° "
UnsafeAtomicFreeList
°°  4
(
°°4 5
capacity
°°5 =
,
°°= >
	Allocator
°°? H
.
°°H I

Persistent
°°I S
)
°°S T
;
°°T U
m_PayloadArray
¢¢ 
=
¢¢  
new
¢¢! $'
UnsafeBaselibNetworkArray
¢¢% >
(
¢¢> ?
capacity
¢¢? G
,
¢¢G H
(
¢¢I J
int
¢¢J M
)
¢¢M N
maxPayloadSize
¢¢N \
)
¢¢\ ]
;
¢¢] ^
m_EndpointArray
££ 
=
££  !
new
££" %'
UnsafeBaselibNetworkArray
££& ?
(
££? @
capacity
££@ H
,
££H I
(
££J K
int
££K N
)
££N O
Binding
££O V
.
££V W9
*Baselib_RegisteredNetwork_Endpoint_MaxSize££W Å
)££Å Ç
;££Ç É
}
§§ 
public
¶¶ 
bool
¶¶ 
	IsCreated
¶¶ !
=>
¶¶" $
	m_Handles
¶¶% .
.
¶¶. /
	IsCreated
¶¶/ 8
;
¶¶8 9
public
ßß 
void
ßß 
Dispose
ßß 
(
ßß  
)
ßß  !
{
®® 
	m_Handles
©© 
.
©© 
Dispose
©© !
(
©©! "
)
©©" #
;
©©# $
m_PayloadArray
™™ 
.
™™ 
Dispose
™™ &
(
™™& '
)
™™' (
;
™™( )
m_EndpointArray
´´ 
.
´´  
Dispose
´´  '
(
´´' (
)
´´( )
;
´´) *
}
¨¨ 
public
ÆÆ 
NetworkRequest
ÆÆ !"
GetRequestFromHandle
ÆÆ" 6
(
ÆÆ6 7
int
ÆÆ7 :
handle
ÆÆ; A
)
ÆÆA B
{
ØØ 
return
∞∞ 
new
∞∞ 
NetworkRequest
∞∞ )
{
±± 
payload
≤≤ 
=
≤≤ 
m_PayloadArray
≤≤ ,
.
≤≤, -
AtIndexAsSlice
≤≤- ;
(
≤≤; <
handle
≤≤< B
,
≤≤B C
m_PayloadSize
≤≤D Q
)
≤≤Q R
,
≤≤R S
remoteEndpoint
≥≥ "
=
≥≥# $
new
≥≥% (
NetworkEndpoint
≥≥) 8
{
¥¥ 
slice
µµ 
=
µµ 
m_EndpointArray
µµ  /
.
µµ/ 0
AtIndexAsSlice
µµ0 >
(
µµ> ?
handle
µµ? E
,
µµE F
(
µµG H
uint
µµH L
)
µµL M
Binding
µµM T
.
µµT U8
*Baselib_RegisteredNetwork_Endpoint_MaxSize
µµU 
)µµ Ä
}
∂∂ 
}
∑∑ 
;
∑∑ 
}
∏∏ 
public
∫∫ 
int
∫∫ 
AcquireHandle
∫∫ $
(
∫∫$ %
)
∫∫% &
{
ªª 
return
ºº 
	m_Handles
ºº  
.
ºº  !
Pop
ºº! $
(
ºº$ %
)
ºº% &
;
ºº& '
}
ΩΩ 
public
øø 
void
øø 
ReleaseHandle
øø %
(
øø% &
int
øø& )
handle
øø* 0
)
øø0 1
{
¿¿ 
	m_Handles
¡¡ 
.
¡¡ 
Push
¡¡ 
(
¡¡ 
handle
¡¡ %
)
¡¡% &
;
¡¡& '
}
¬¬ 
}
√√ 	
private
≈≈ %
BaselibNetworkParameter
≈≈ '
configuration
≈≈( 5
;
≈≈5 6
private
«« 
const
«« 
int
«« "
k_defaultRxQueueSize
«« .
=
««/ 0
$num
««1 3
;
««3 4
private
»» 
const
»» 
int
»» "
k_defaultTxQueueSize
»» .
=
»»/ 0
$num
»»1 3
;
»»3 4
private
…… 
const
…… 
int
…… )
k_defaultMaximumPayloadSize
…… 5
=
……6 7
$num
……8 <
;
……< =
internal
ÀÀ 
unsafe
ÀÀ 
struct
ÀÀ 
BaselibData
ÀÀ *
{
ÃÃ 	
public
ÕÕ 
NetworkSocket
ÕÕ  
m_Socket
ÕÕ! )
;
ÕÕ) *
public
ŒŒ 
Payloads
ŒŒ 
m_PayloadsTx
ŒŒ (
;
ŒŒ( )
public
œœ &
NetworkInterfaceEndPoint
œœ +
m_LocalEndpoint
œœ, ;
;
œœ; <
public
–– 
long
–– 
m_LastUpdateTime
–– (
;
––( )
}
—— 	
[
”” 	
ReadOnly
””	 
]
”” 
internal
‘‘ 
NativeArray
‘‘ 
<
‘‘ 
BaselibData
‘‘ (
>
‘‘( )
	m_Baselib
‘‘* 3
;
‘‘3 4
[
÷÷ 	5
'NativeDisableContainerSafetyRestriction
÷÷	 0
]
÷÷0 1
private
◊◊ 
Payloads
◊◊ 
m_PayloadsRx
◊◊ %
;
◊◊% &
[
ÿÿ 	5
'NativeDisableContainerSafetyRestriction
ÿÿ	 0
]
ÿÿ0 1
private
ŸŸ 
Payloads
ŸŸ 
m_PayloadsTx
ŸŸ %
;
ŸŸ% &
private
€€ '
UnsafeBaselibNetworkArray
€€ )$
m_LocalAndTempEndpoint
€€* @
;
€€@ A
public
·· 
unsafe
·· &
NetworkInterfaceEndPoint
·· .
LocalEndPoint
··/ <
=>
··= ?
	m_Baselib
··@ I
[
··I J
$num
··J K
]
··K L
.
··L M
m_LocalEndpoint
··M \
;
··\ ]
public
ÊÊ 
bool
ÊÊ 
	IsCreated
ÊÊ 
=>
ÊÊ  
	m_Baselib
ÊÊ! *
.
ÊÊ* +
	IsCreated
ÊÊ+ 4
;
ÊÊ4 5
public
ÌÌ 
unsafe
ÌÌ 
int
ÌÌ %
CreateInterfaceEndPoint
ÌÌ 1
(
ÌÌ1 2
NetworkEndPoint
ÌÌ2 A
address
ÌÌB I
,
ÌÌI J
out
ÌÌK N&
NetworkInterfaceEndPoint
ÌÌO g
endpoint
ÌÌh p
)
ÌÌp q
{
ÓÓ 	
return
ÔÔ %
CreateInterfaceEndPoint
ÔÔ *
(
ÔÔ* +
address
ÔÔ+ 2
.
ÔÔ2 3
rawNetworkAddress
ÔÔ3 D
,
ÔÔD E
out
ÔÔF I
endpoint
ÔÔJ R
)
ÔÔR S
;
ÔÔS T
}
 	
private
ÚÚ 
unsafe
ÚÚ 
int
ÚÚ %
CreateInterfaceEndPoint
ÚÚ 2
(
ÚÚ2 3
Binding
ÚÚ3 :
.
ÚÚ: ;$
Baselib_NetworkAddress
ÚÚ; Q
address
ÚÚR Y
,
ÚÚY Z
out
ÚÚ[ ^&
NetworkInterfaceEndPoint
ÚÚ_ w
endpointÚÚx Ä
)ÚÚÄ Å
{
ÛÛ 	
var
ÙÙ 
slice
ÙÙ 
=
ÙÙ $
m_LocalAndTempEndpoint
ÙÙ .
.
ÙÙ. /
AtIndexAsSlice
ÙÙ/ =
(
ÙÙ= >
$num
ÙÙ> ?
,
ÙÙ? @
(
ÙÙA B
uint
ÙÙB F
)
ÙÙF G
Binding
ÙÙG N
.
ÙÙN O8
*Baselib_RegisteredNetwork_Endpoint_MaxSize
ÙÙO y
)
ÙÙy z
;
ÙÙz {
NetworkEndpoint
ıı 
local
ıı !
;
ıı! "
var
ˆˆ 
error
ˆˆ 
=
ˆˆ 
default
ˆˆ 
(
ˆˆ  

ErrorState
ˆˆ  *
)
ˆˆ* +
;
ˆˆ+ ,
endpoint
˜˜ 
=
˜˜ 
default
˜˜ 
;
˜˜ 
local
˘˘ 
=
˘˘ 
Binding
˘˘ 
.
˘˘ 7
)Baselib_RegisteredNetwork_Endpoint_Create
˘˘ E
(
˘˘E F
&
˙˙ 
address
˙˙ 
,
˙˙ 
slice
˚˚ 
,
˚˚ 
&
¸¸ 
error
¸¸ 
)
¸¸ 
;
¸¸ 
if
˝˝ 
(
˝˝ 
error
˝˝ 
.
˝˝ 
code
˝˝ 
!=
˝˝ 
	ErrorCode
˝˝ '
.
˝˝' (
Success
˝˝( /
)
˝˝/ 0
return
˛˛ 
(
˛˛ 
int
˛˛ 
)
˛˛ 
error
˛˛ !
.
˛˛! "
code
˛˛" &
;
˛˛& '
endpoint
ÄÄ 
.
ÄÄ 

dataLength
ÄÄ 
=
ÄÄ  !
(
ÄÄ" #
int
ÄÄ# &
)
ÄÄ& '
local
ÄÄ' ,
.
ÄÄ, -
slice
ÄÄ- 2
.
ÄÄ2 3
size
ÄÄ3 7
;
ÄÄ7 8
fixed
ÅÅ 
(
ÅÅ 
void
ÅÅ 
*
ÅÅ 
ptr
ÅÅ 
=
ÅÅ 
endpoint
ÅÅ &
.
ÅÅ& '
data
ÅÅ' +
)
ÅÅ+ ,
{
ÇÇ 
UnsafeUtility
ÉÉ 
.
ÉÉ 
MemCpy
ÉÉ $
(
ÉÉ$ %
ptr
ÉÉ% (
,
ÉÉ( )
(
ÉÉ* +
void
ÉÉ+ /
*
ÉÉ/ 0
)
ÉÉ0 1
local
ÉÉ1 6
.
ÉÉ6 7
slice
ÉÉ7 <
.
ÉÉ< =
data
ÉÉ= A
,
ÉÉA B
endpoint
ÉÉC K
.
ÉÉK L

dataLength
ÉÉL V
)
ÉÉV W
;
ÉÉW X
}
ÑÑ 
return
ÖÖ 
(
ÖÖ 
int
ÖÖ 
)
ÖÖ 
Error
ÖÖ 
.
ÖÖ 

StatusCode
ÖÖ (
.
ÖÖ( )
Success
ÖÖ) 0
;
ÖÖ0 1
}
ÜÜ 	
private
àà 
unsafe
àà &
NetworkInterfaceEndPoint
àà /
GetLocalEndPoint
àà0 @
(
àà@ A
NetworkSocket
ààA N
socket
ààO U
)
ààU V
{
ââ 	
var
ää 
error
ää 
=
ää 
default
ää 
(
ää  

ErrorState
ää  *
)
ää* +
;
ää+ ,
Binding
ãã 
.
ãã $
Baselib_NetworkAddress
ãã *
local
ãã+ 0
;
ãã0 1
Binding
åå 
.
åå D
6Baselib_RegisteredNetwork_Socket_UDP_GetNetworkAddress
åå J
(
ååJ K
socket
ååK Q
,
ååQ R
&
ååS T
local
ååT Y
,
ååY Z
&
åå[ \
error
åå\ a
)
ååa b
;
ååb c
var
çç 
ep
çç 
=
çç 
default
çç 
(
çç &
NetworkInterfaceEndPoint
çç 5
)
çç5 6
;
çç6 7
if
éé 
(
éé 
error
éé 
.
éé 
code
éé 
!=
éé 
	ErrorCode
éé '
.
éé' (
Success
éé( /
)
éé/ 0
return
èè 
ep
èè 
;
èè %
CreateInterfaceEndPoint
ëë #
(
ëë# $
local
ëë$ )
,
ëë) *
out
ëë+ .
ep
ëë/ 1
)
ëë1 2
;
ëë2 3
return
ìì 
ep
ìì 
;
ìì 
}
îî 	
public
õõ 
unsafe
õõ 
NetworkEndPoint
õõ % 
GetGenericEndPoint
õõ& 8
(
õõ8 9&
NetworkInterfaceEndPoint
õõ9 Q
endpoint
õõR Z
)
õõZ [
{
úú 	
var
ùù 
address
ùù 
=
ùù 
default
ùù !
(
ùù! "
NetworkEndPoint
ùù" 1
)
ùù1 2
;
ùù2 3
var
ûû 
error
ûû 
=
ûû 
default
ûû 
(
ûû  

ErrorState
ûû  *
)
ûû* +
;
ûû+ ,
var
üü 
slice
üü 
=
üü $
m_LocalAndTempEndpoint
üü .
.
üü. /
AtIndexAsSlice
üü/ =
(
üü= >
$num
üü> ?
,
üü? @
(
üüA B
uint
üüB F
)
üüF G
Binding
üüG N
.
üüN O8
*Baselib_RegisteredNetwork_Endpoint_MaxSize
üüO y
)
üüy z
;
üüz {
NetworkEndpoint
†† 
local
†† !
;
††! "
local
°° 
.
°° 
slice
°° 
=
°° 
slice
°° 
;
°°  
local
¢¢ 
.
¢¢ 
slice
¢¢ 
.
¢¢ 
size
¢¢ 
=
¢¢ 
(
¢¢  
uint
¢¢  $
)
¢¢$ %
endpoint
¢¢% -
.
¢¢- .

dataLength
¢¢. 8
;
¢¢8 9
UnsafeUtility
££ 
.
££ 
MemCpy
££  
(
££  !
(
££! "
void
££" &
*
££& '
)
££' (
local
££( -
.
££- .
slice
££. 3
.
££3 4
data
££4 8
,
££8 9
endpoint
££: B
.
££B C
data
££C G
,
££G H
endpoint
££I Q
.
££Q R

dataLength
££R \
)
££\ ]
;
££] ^
Binding
§§ 
.
§§ B
4Baselib_RegisteredNetwork_Endpoint_GetNetworkAddress
§§ H
(
§§H I
local
§§I N
,
§§N O
&
§§P Q
address
§§Q X
.
§§X Y
rawNetworkAddress
§§Y j
,
§§j k
&
§§l m
error
§§m r
)
§§r s
;
§§s t
if
•• 
(
•• 
error
•• 
.
•• 
code
•• 
!=
•• 
	ErrorCode
•• '
.
••' (
Success
••( /
)
••/ 0
return
¶¶ 
default
¶¶ 
;
¶¶ 
return
ßß 
address
ßß 
;
ßß 
}
®® 	
public
ØØ 
unsafe
ØØ 
int
ØØ 

Initialize
ØØ $
(
ØØ$ %
NetworkSettings
ØØ% 4
settings
ØØ5 =
)
ØØ= >
{
∞∞ 	
configuration
±± 
=
±± 
settings
±± $
.
±±$ %2
$GetBaselibNetworkInterfaceParameters
±±% I
(
±±I J
)
±±J K
;
±±K L
	m_Baselib
≥≥ 
=
≥≥ 
new
≥≥ 
NativeArray
≥≥ '
<
≥≥' (
BaselibData
≥≥( 3
>
≥≥3 4
(
≥≥4 5
$num
≥≥5 6
,
≥≥6 7
	Allocator
≥≥8 A
.
≥≥A B

Persistent
≥≥B L
)
≥≥L M
;
≥≥M N
var
¥¥ 
baselib
¥¥ 
=
¥¥ 
default
¥¥ !
(
¥¥! "
BaselibData
¥¥" -
)
¥¥- .
;
¥¥. /
m_PayloadsTx
∂∂ 
=
∂∂ 
new
∂∂ 
Payloads
∂∂ '
(
∂∂' (
configuration
∂∂( 5
.
∂∂5 6
sendQueueCapacity
∂∂6 G
,
∂∂G H
configuration
∂∂I V
.
∂∂V W 
maximumPayloadSize
∂∂W i
)
∂∂i j
;
∂∂j k
m_PayloadsRx
∑∑ 
=
∑∑ 
new
∑∑ 
Payloads
∑∑ '
(
∑∑' (
configuration
∑∑( 5
.
∑∑5 6"
receiveQueueCapacity
∑∑6 J
,
∑∑J K
configuration
∑∑L Y
.
∑∑Y Z 
maximumPayloadSize
∑∑Z l
)
∑∑l m
;
∑∑m n$
m_LocalAndTempEndpoint
∏∏ "
=
∏∏# $
new
∏∏% ('
UnsafeBaselibNetworkArray
∏∏) B
(
∏∏B C
$num
∏∏C D
,
∏∏D E
(
∏∏G H
int
∏∏H K
)
∏∏K L
Binding
∏∏L S
.
∏∏S T8
*Baselib_RegisteredNetwork_Endpoint_MaxSize
∏∏T ~
)
∏∏~ 
;∏∏ Ä
baselib
∫∫ 
.
∫∫ 
m_PayloadsTx
∫∫  
=
∫∫! "
m_PayloadsTx
∫∫# /
;
∫∫/ 0
	m_Baselib
ºº 
[
ºº 
$num
ºº 
]
ºº 
=
ºº 
baselib
ºº "
;
ºº" #
return
ææ 
$num
ææ 
;
ææ 
}
øø 	
public
ƒƒ 
void
ƒƒ 
Dispose
ƒƒ 
(
ƒƒ 
)
ƒƒ 
{
≈≈ 	
if
∆∆ 
(
∆∆ 
	m_Baselib
∆∆ 
[
∆∆ 
$num
∆∆ 
]
∆∆ 
.
∆∆ 
m_Socket
∆∆ %
.
∆∆% &
handle
∆∆& ,
!=
∆∆- /
IntPtr
∆∆0 6
.
∆∆6 7
Zero
∆∆7 ;
)
∆∆; <
{
«« 

AllSockets
…… 
.
…… 
OpenSockets
…… &
.
……& '
Remove
……' -
(
……- .
new
……. 1

SocketList
……2 <
.
……< =
SocketId
……= E
{
   
socket
   
=
   
	m_Baselib
   '
[
  ' (
$num
  ( )
]
  ) *
.
  * +
m_Socket
  + 3
}
  3 4
)
  4 5
;
  5 6
Binding
ÃÃ 
.
ÃÃ 8
*Baselib_RegisteredNetwork_Socket_UDP_Close
ÃÃ B
(
ÃÃB C
	m_Baselib
ÃÃC L
[
ÃÃL M
$num
ÃÃM N
]
ÃÃN O
.
ÃÃO P
m_Socket
ÃÃP X
)
ÃÃX Y
;
ÃÃY Z
}
ÕÕ $
m_LocalAndTempEndpoint
œœ "
.
œœ" #
Dispose
œœ# *
(
œœ* +
)
œœ+ ,
;
œœ, -
if
–– 
(
–– 
m_PayloadsTx
–– 
.
–– 
	IsCreated
–– &
)
––& '
m_PayloadsTx
—— 
.
—— 
Dispose
—— $
(
——$ %
)
——% &
;
——& '
if
““ 
(
““ 
m_PayloadsRx
““ 
.
““ 
	IsCreated
““ &
)
““& '
m_PayloadsRx
”” 
.
”” 
Dispose
”” $
(
””$ %
)
””% &
;
””& '
	m_Baselib
‘‘ 
.
‘‘ 
Dispose
‘‘ 
(
‘‘ 
)
‘‘ 
;
‘‘  
}
’’ 	
[
ŸŸ 	
BurstCompile
ŸŸ	 
]
ŸŸ 
struct
⁄⁄ 
FlushSendJob
⁄⁄ 
:
⁄⁄ 
IJob
⁄⁄ "
{
€€ 	
public
‹‹ 
Payloads
‹‹ 
Tx
‹‹ 
;
‹‹ 
[
›› 5
'NativeDisableContainerSafetyRestriction
›› 4
]
››4 5
public
ﬁﬁ 
NativeArray
ﬁﬁ 
<
ﬁﬁ 
BaselibData
ﬁﬁ *
>
ﬁﬁ* +
Baselib
ﬁﬁ, 3
;
ﬁﬁ3 4
public
ﬂﬂ 
unsafe
ﬂﬂ 
void
ﬂﬂ 
Execute
ﬂﬂ &
(
ﬂﬂ& '
)
ﬂﬂ' (
{
‡‡ 
const
„„ 
uint
„„ !
k_ResultsBufferSize
„„ .
=
„„/ 0
$num
„„1 3
;
„„3 4
const
‰‰ 
int
‰‰ 
k_MaxIterations
‰‰ *
=
‰‰+ ,
$num
‰‰- 0
;
‰‰0 1
var
ÂÂ 
results
ÂÂ 
=
ÂÂ 

stackalloc
ÂÂ (
Binding
ÂÂ) 0
.
ÂÂ0 18
*Baselib_RegisteredNetwork_CompletionResult
ÂÂ1 [
[
ÂÂ[ \
(
ÂÂ\ ]
int
ÂÂ] `
)
ÂÂ` a!
k_ResultsBufferSize
ÂÂa t
]
ÂÂt u
;
ÂÂu v
var
ÁÁ 
error
ÁÁ 
=
ÁÁ 
default
ÁÁ #
(
ÁÁ# $

ErrorState
ÁÁ$ .
)
ÁÁ. /
;
ÁÁ/ 0
var
ËË 
	pollCount
ËË 
=
ËË 
$num
ËË  !
;
ËË! "
var
ÈÈ 
pendingSend
ÈÈ 
=
ÈÈ  !
Tx
ÈÈ" $
.
ÈÈ$ %
InUse
ÈÈ% *
>
ÈÈ+ ,
$num
ÈÈ- .
;
ÈÈ. /
var
ÍÍ 
maxIterations
ÍÍ !
=
ÍÍ" #
k_MaxIterations
ÍÍ$ 3
;
ÍÍ3 4
while
ÏÏ 
(
ÏÏ 
pendingSend
ÏÏ "
)
ÏÏ" #
{
ÌÌ 
while
ÔÔ 
(
ÔÔ 
	pollCount
ÔÔ $
++
ÔÔ$ &
<
ÔÔ' (
Tx
ÔÔ) +
.
ÔÔ+ ,
Capacity
ÔÔ, 4
)
ÔÔ4 5
{
 
if
ÒÒ 
(
ÒÒ 
Binding
ÒÒ #
.
ÒÒ# $>
0Baselib_RegisteredNetwork_Socket_UDP_ProcessSend
ÒÒ$ T
(
ÒÒT U
Baselib
ÒÒU \
[
ÒÒ\ ]
$num
ÒÒ] ^
]
ÒÒ^ _
.
ÒÒ_ `
m_Socket
ÒÒ` h
,
ÒÒh i
&
ÒÒj k
error
ÒÒk p
)
ÒÒp q
!=
ÒÒr t
Binding
ÒÒu |
.
ÒÒ| }6
'Baselib_RegisteredNetwork_ProcessStatusÒÒ} §
.ÒÒ§ •
PendingÒÒ• ¨
)ÒÒ¨ ≠
break
ÚÚ !
;
ÚÚ! "
}
ÛÛ 
Binding
¯¯ 
.
¯¯ +
Baselib_Thread_YieldExecution
¯¯ 9
(
¯¯9 :
)
¯¯: ;
;
¯¯; <
Binding
˚˚ 
.
˚˚ G
9Baselib_RegisteredNetwork_Socket_UDP_WaitForCompletedSend
˚˚ U
(
˚˚U V
Baselib
˚˚V ]
[
˚˚] ^
$num
˚˚^ _
]
˚˚_ `
.
˚˚` a
m_Socket
˚˚a i
,
˚˚i j
$num
˚˚k m
,
˚˚m n
&
˚˚o p
error
˚˚p u
)
˚˚u v
;
˚˚v w
var
˝˝ 
count
˝˝ 
=
˝˝ 
$num
˝˝  !
;
˝˝! "
var
˛˛  
resultBatchesCount
˛˛ *
=
˛˛+ ,
Tx
˛˛- /
.
˛˛/ 0
Capacity
˛˛0 8
/
˛˛9 :!
k_ResultsBufferSize
˛˛; N
+
˛˛O P
$num
˛˛Q R
;
˛˛R S
while
ˇˇ 
(
ˇˇ 
(
ˇˇ 
count
ˇˇ !
=
ˇˇ" #
(
ˇˇ$ %
int
ˇˇ% (
)
ˇˇ( )
Binding
ˇˇ) 0
.
ˇˇ0 1>
0Baselib_RegisteredNetwork_Socket_UDP_DequeueSend
ˇˇ1 a
(
ˇˇa b
Baselib
ˇˇb i
[
ˇˇi j
$num
ˇˇj k
]
ˇˇk l
.
ˇˇl m
m_Socket
ˇˇm u
,
ˇˇu v
results
ˇˇw ~
,
ˇˇ~ #
k_ResultsBufferSizeˇˇÄ ì
,ˇˇì î
&ˇˇï ñ
errorˇˇñ õ
)ˇˇõ ú
)ˇˇú ù
>ˇˇû ü
$numˇˇ† °
)ˇˇ° ¢
{
ÄÄ 
if
ÅÅ 
(
ÅÅ 
error
ÅÅ !
.
ÅÅ! "
code
ÅÅ" &
!=
ÅÅ' )
	ErrorCode
ÅÅ* 3
.
ÅÅ3 4
Success
ÅÅ4 ;
)
ÅÅ; <
{
ÇÇ 
return
ÑÑ "
;
ÑÑ" #
}
ÖÖ 
for
ÜÜ 
(
ÜÜ 
int
ÜÜ  
i
ÜÜ! "
=
ÜÜ# $
$num
ÜÜ% &
;
ÜÜ& '
i
ÜÜ( )
<
ÜÜ* +
count
ÜÜ, 1
;
ÜÜ1 2
++
ÜÜ3 5
i
ÜÜ5 6
)
ÜÜ6 7
{
áá 
Tx
ää 
.
ää 
ReleaseHandle
ää ,
(
ää, -
(
ää- .
int
ää. 1
)
ää1 2
results
ää2 9
[
ää9 :
i
ää: ;
]
ää; <
.
ää< =
requestUserdata
ää= L
-
ääM N
$num
ääO P
)
ääP Q
;
ääQ R
}
ãã 
if
çç 
(
çç  
resultBatchesCount
çç .
--
çç. 0
<
çç1 2
$num
çç3 4
)
çç4 5
break
éé !
;
éé! "
}
èè 
	pollCount
ìì 
=
ìì 
$num
ìì  !
;
ìì! "
pendingSend
óó 
=
óó  !
Tx
óó" $
.
óó$ %
InUse
óó% *
>
óó+ ,
$num
óó- .
&&
óó/ 1
maxIterations
óó2 ?
--
óó? A
>
óóB C
$num
óóD E
;
óóE F
}
òò 
}
ôô 
}
öö 	
[
õõ 	
BurstCompile
õõ	 
]
õõ 
struct
úú 

ReceiveJob
úú 
:
úú 
IJob
úú  
{
ùù 	
public
ûû #
NetworkPacketReceiver
ûû (
Receiver
ûû) 1
;
ûû1 2
public
üü 
Payloads
üü 
Rx
üü 
;
üü 
[
†† 5
'NativeDisableContainerSafetyRestriction
†† 4
]
††4 5
public
°° 
NativeArray
°° 
<
°° 
BaselibData
°° *
>
°°* +
Baselib
°°, 3
;
°°3 4
public
££ 
unsafe
££ 
void
££ 
Execute
££ &
(
££& '
)
££' (
{
§§ 
var
•• 
count
•• 
=
•• 
$num
•• 
;
•• 
var
¶¶ 
outstanding
¶¶ 
=
¶¶  !
Rx
¶¶" $
.
¶¶$ %
InUse
¶¶% *
;
¶¶* +
var
ßß 
error
ßß 
=
ßß 
default
ßß #
(
ßß# $

ErrorState
ßß$ .
)
ßß. /
;
ßß/ 0
var
®® 
requests
®® 
=
®® 

stackalloc
®® )
Binding
®®* 1
.
®®1 2/
!Baselib_RegisteredNetwork_Request
®®2 S
[
®®S T
Rx
®®T V
.
®®V W
Capacity
®®W _
]
®®_ `
;
®®` a
if
™™ 
(
™™ 
outstanding
™™ 
>
™™  !
$num
™™" #
)
™™# $
{
´´ 
var
¨¨ 
	pollCount
¨¨ !
=
¨¨" #
$num
¨¨$ %
;
¨¨% &
var
≠≠ 
status
≠≠ 
=
≠≠  
default
≠≠! (
(
≠≠( )
Binding
≠≠) 0
.
≠≠0 15
'Baselib_RegisteredNetwork_ProcessStatus
≠≠1 X
)
≠≠X Y
;
≠≠Y Z
while
ÆÆ 
(
ÆÆ 
(
ÆÆ 
status
ÆÆ "
=
ÆÆ# $
Binding
ÆÆ% ,
.
ÆÆ, ->
0Baselib_RegisteredNetwork_Socket_UDP_ProcessRecv
ÆÆ- ]
(
ÆÆ] ^
Baselib
ÆÆ^ e
[
ÆÆe f
$num
ÆÆf g
]
ÆÆg h
.
ÆÆh i
m_Socket
ÆÆi q
,
ÆÆq r
&
ÆÆs t
error
ÆÆt y
)
ÆÆy z
)
ÆÆz {
==
ÆÆ| ~
BindingÆÆ Ü
.ÆÆÜ á7
'Baselib_RegisteredNetwork_ProcessStatusÆÆá Æ
.ÆÆÆ Ø
PendingÆÆØ ∂
&&
ØØ 
	pollCount
ØØ '
++
ØØ' )
<
ØØ* +
Rx
ØØ, .
.
ØØ. /
Capacity
ØØ/ 7
)
ØØ7 8
{
ØØ9 :
}
ØØ: ;
if
≤≤ 
(
≤≤ 
status
≤≤ 
==
≤≤ !
Binding
≤≤" )
.
≤≤) *5
'Baselib_RegisteredNetwork_ProcessStatus
≤≤* Q
.
≤≤Q R
Pending
≤≤R Y
)
≤≤Y Z
{
≥≥ 
UnityEngine
¥¥ #
.
¥¥# $
Debug
¥¥$ )
.
¥¥) *

LogWarning
¥¥* 4
(
¥¥4 5
$str
¥¥5 z
)
¥¥z {
;
¥¥{ |
}
µµ 
var
∏∏ 
results
∏∏ 
=
∏∏  !

stackalloc
∏∏" ,
Binding
∏∏- 4
.
∏∏4 58
*Baselib_RegisteredNetwork_CompletionResult
∏∏5 _
[
∏∏_ `
outstanding
∏∏` k
]
∏∏k l
;
∏∏l m
count
ªª 
=
ªª 
(
ªª 
int
ªª  
)
ªª  !
Binding
ªª! (
.
ªª( )>
0Baselib_RegisteredNetwork_Socket_UDP_DequeueRecv
ªª) Y
(
ªªY Z
Baselib
ªªZ a
[
ªªa b
$num
ªªb c
]
ªªc d
.
ªªd e
m_Socket
ªªe m
,
ªªm n
results
ªªo v
,
ªªv w
(
ªªx y
uint
ªªy }
)
ªª} ~
outstandingªª~ â
,ªªâ ä
&ªªã å
errorªªå ë
)ªªë í
;ªªí ì
if
ºº 
(
ºº 
error
ºº 
.
ºº 
code
ºº "
!=
ºº# %
	ErrorCode
ºº& /
.
ºº/ 0
Success
ºº0 7
)
ºº7 8
{
ΩΩ 
Receiver
ææ  
.
ææ  !
ReceiveErrorCode
ææ! 1
=
ææ2 3
(
ææ4 5
int
ææ5 8
)
ææ8 9
error
ææ9 >
.
ææ> ?
code
ææ? C
;
ææC D
return
øø 
;
øø 
}
¿¿ 
var
ƒƒ 
address
ƒƒ 
=
ƒƒ  !
default
ƒƒ" )
(
ƒƒ) *&
NetworkInterfaceEndPoint
ƒƒ* B
)
ƒƒB C
;
ƒƒC D
var
∆∆ 
indices
∆∆ 
=
∆∆  !

stackalloc
∆∆" ,
int
∆∆- 0
[
∆∆0 1
count
∆∆1 6
]
∆∆6 7
;
∆∆7 8
for
«« 
(
«« 
int
«« 
i
«« 
=
««  
$num
««! "
;
««" #
i
««$ %
<
««& '
count
««( -
;
««- .
i
««/ 0
++
««0 2
)
««2 3
{
»» 
var
…… 
index
…… !
=
……" #
(
……$ %
int
……% (
)
……( )
results
……) 0
[
……0 1
i
……1 2
]
……2 3
.
……3 4
requestUserdata
……4 C
-
……D E
$num
……F G
;
……G H
indices
   
[
    
i
    !
]
  ! "
=
  # $
index
  % *
;
  * +
if
ÃÃ 
(
ÃÃ 
results
ÃÃ #
[
ÃÃ# $
i
ÃÃ$ %
]
ÃÃ% &
.
ÃÃ& '
status
ÃÃ' -
==
ÃÃ. 0
Binding
ÃÃ1 8
.
ÃÃ8 98
*Baselib_RegisteredNetwork_CompletionStatus
ÃÃ9 c
.
ÃÃc d
Failed
ÃÃd j
)
ÃÃj k
continue
ÕÕ $
;
ÕÕ$ %
var
œœ 
receivedBytes
œœ )
=
œœ* +
(
œœ, -
int
œœ- 0
)
œœ0 1
results
œœ1 8
[
œœ8 9
i
œœ9 :
]
œœ: ;
.
œœ; <
bytesTransferred
œœ< L
;
œœL M
if
–– 
(
–– 
receivedBytes
–– )
<=
––* ,
$num
––- .
)
––. /
continue
—— $
;
——$ %
var
”” 
packet
”” "
=
””# $
Rx
””% '
.
””' ("
GetRequestFromHandle
””( <
(
””< =
index
””= B
)
””B C
;
””C D
var
’’ 
remote
’’ "
=
’’# $
packet
’’% +
.
’’+ ,
remoteEndpoint
’’, :
.
’’: ;
slice
’’; @
;
’’@ A
address
÷÷ 
.
÷÷  

dataLength
÷÷  *
=
÷÷+ ,
(
÷÷- .
int
÷÷. 1
)
÷÷1 2
remote
÷÷2 8
.
÷÷8 9
size
÷÷9 =
;
÷÷= >
UnsafeUtility
◊◊ %
.
◊◊% &
MemCpy
◊◊& ,
(
◊◊, -
address
◊◊- 4
.
◊◊4 5
data
◊◊5 9
,
◊◊9 :
(
◊◊; <
void
◊◊< @
*
◊◊@ A
)
◊◊A B
remote
◊◊B H
.
◊◊H I
data
◊◊I M
,
◊◊M N
(
◊◊O P
int
◊◊P S
)
◊◊S T
remote
◊◊T Z
.
◊◊Z [
size
◊◊[ _
)
◊◊_ `
;
◊◊` a
Receiver
ŸŸ  
.
ŸŸ  !
AppendPacket
ŸŸ! -
(
ŸŸ- .
packet
ŸŸ. 4
.
ŸŸ4 5
payload
ŸŸ5 <
.
ŸŸ< =
data
ŸŸ= A
,
ŸŸA B
ref
ŸŸC F
address
ŸŸG N
,
ŸŸN O
receivedBytes
ŸŸP ]
)
ŸŸ] ^
;
ŸŸ^ _
}
⁄⁄ 
for
›› 
(
›› 
int
›› 
i
›› 
=
››  
$num
››! "
;
››" #
i
››$ %
<
››& '
count
››( -
;
››- .
i
››/ 0
++
››0 2
)
››2 3
{
ﬁﬁ 
requests
ﬂﬂ  
[
ﬂﬂ  !
i
ﬂﬂ! "
]
ﬂﬂ" #
=
ﬂﬂ$ %
Rx
ﬂﬂ& (
.
ﬂﬂ( )"
GetRequestFromHandle
ﬂﬂ) =
(
ﬂﬂ= >
indices
ﬂﬂ> E
[
ﬂﬂE F
i
ﬂﬂF G
]
ﬂﬂG H
)
ﬂﬂH I
;
ﬂﬂI J
requests
‡‡  
[
‡‡  !
i
‡‡! "
]
‡‡" #
.
‡‡# $
requestUserdata
‡‡$ 3
=
‡‡4 5
(
‡‡6 7
IntPtr
‡‡7 =
)
‡‡= >
indices
‡‡> E
[
‡‡E F
i
‡‡F G
]
‡‡G H
+
‡‡I J
$num
‡‡K L
;
‡‡L M
}
·· 
}
‚‚ 
while
‰‰ 
(
‰‰ 
Rx
‰‰ 
.
‰‰ 
InUse
‰‰ 
<
‰‰  !
Rx
‰‰" $
.
‰‰$ %
Capacity
‰‰% -
)
‰‰- .
{
ÂÂ 
int
ÊÊ 
handle
ÊÊ 
=
ÊÊ  
Rx
ÊÊ! #
.
ÊÊ# $
AcquireHandle
ÊÊ$ 1
(
ÊÊ1 2
)
ÊÊ2 3
;
ÊÊ3 4
requests
ÁÁ 
[
ÁÁ 
count
ÁÁ "
]
ÁÁ" #
=
ÁÁ$ %
Rx
ÁÁ& (
.
ÁÁ( )"
GetRequestFromHandle
ÁÁ) =
(
ÁÁ= >
handle
ÁÁ> D
)
ÁÁD E
;
ÁÁE F
requests
ËË 
[
ËË 
count
ËË "
]
ËË" #
.
ËË# $
requestUserdata
ËË$ 3
=
ËË4 5
(
ËË6 7
IntPtr
ËË7 =
)
ËË= >
handle
ËË> D
+
ËËE F
$num
ËËG H
;
ËËH I
++
ÈÈ 
count
ÈÈ 
;
ÈÈ 
}
ÍÍ 
if
ÎÎ 
(
ÎÎ 
count
ÎÎ 
>
ÎÎ 
$num
ÎÎ 
)
ÎÎ 
{
ÏÏ 
Binding
ÌÌ 
.
ÌÌ ?
1Baselib_RegisteredNetwork_Socket_UDP_ScheduleRecv
ÌÌ M
(
ÌÌM N
Baselib
ÌÌN U
[
ÌÌU V
$num
ÌÌV W
]
ÌÌW X
.
ÌÌX Y
m_Socket
ÌÌY a
,
ÌÌa b
requests
ÌÌc k
,
ÌÌk l
(
ÌÌm n
uint
ÌÌn r
)
ÌÌr s
count
ÌÌs x
,
ÌÌx y
&
ÌÌz {
errorÌÌ{ Ä
)ÌÌÄ Å
;ÌÌÅ Ç
if
ÓÓ 
(
ÓÓ 
error
ÓÓ 
.
ÓÓ 
code
ÓÓ "
!=
ÓÓ# %
	ErrorCode
ÓÓ& /
.
ÓÓ/ 0
Success
ÓÓ0 7
)
ÓÓ7 8
Receiver
ÔÔ  
.
ÔÔ  !
ReceiveErrorCode
ÔÔ! 1
=
ÔÔ2 3
(
ÔÔ4 5
int
ÔÔ5 8
)
ÔÔ8 9
error
ÔÔ9 >
.
ÔÔ> ?
code
ÔÔ? C
;
ÔÔC D
}
 
}
ÒÒ 
}
ÚÚ 	
[
ıı 	
Conditional
ıı	 
(
ıı 
$str
ıı  
)
ıı  !
]
ıı! "
private
ˆˆ 
void
ˆˆ -
RecreateSocketIfAppWasSuspended
ˆˆ 4
(
ˆˆ4 5
long
ˆˆ5 9
currentUpdateTime
ˆˆ: K
)
ˆˆK L
{
˜˜ 	
var
¯¯ 
baselib
¯¯ 
=
¯¯ 
	m_Baselib
¯¯ #
[
¯¯# $
$num
¯¯$ %
]
¯¯% &
;
¯¯& '
var
˙˙ 
foregroundTime
˙˙ 
=
˙˙  "
AppForegroundTracker
˙˙! 5
.
˙˙5 6%
LastForegroundTimestamp
˙˙6 M
;
˙˙M N
if
˚˚ 
(
˚˚ 
foregroundTime
˚˚ 
>
˚˚  
$num
˚˚! "
&&
˚˚# %
baselib
˚˚& -
.
˚˚- .
m_LastUpdateTime
˚˚. >
>
˚˚? @
$num
˚˚A B
&&
˚˚C E
foregroundTime
˚˚F T
>
˚˚U V
baselib
˚˚W ^
.
˚˚^ _
m_LastUpdateTime
˚˚_ o
)
˚˚o p
{
¸¸ 
Bind
˝˝ 
(
˝˝ 
baselib
˝˝ 
.
˝˝ 
m_LocalEndpoint
˝˝ ,
)
˝˝, -
;
˝˝- .
}
˛˛ 
baselib
ÄÄ 
=
ÄÄ 
	m_Baselib
ÄÄ 
[
ÄÄ  
$num
ÄÄ  !
]
ÄÄ! "
;
ÄÄ" #
baselib
ÅÅ 
.
ÅÅ 
m_LastUpdateTime
ÅÅ $
=
ÅÅ% &
currentUpdateTime
ÅÅ' 8
;
ÅÅ8 9
	m_Baselib
ÇÇ 
[
ÇÇ 
$num
ÇÇ 
]
ÇÇ 
=
ÇÇ 
baselib
ÇÇ "
;
ÇÇ" #
}
ÉÉ 	
public
åå 
	JobHandle
åå 
ScheduleReceive
åå (
(
åå( )#
NetworkPacketReceiver
åå) >
receiver
åå? G
,
ååG H
	JobHandle
ååI R
dep
ååS V
)
ååV W
{
çç 	-
RecreateSocketIfAppWasSuspended
éé +
(
éé+ ,
receiver
éé, 4
.
éé4 5
LastUpdateTime
éé5 C
)
ééC D
;
ééD E
var
êê 
job
êê 
=
êê 
new
êê 

ReceiveJob
êê $
{
ëë 
Baselib
íí 
=
íí 
	m_Baselib
íí #
,
íí# $
Rx
ìì 
=
ìì 
m_PayloadsRx
ìì !
,
ìì! "
Receiver
îî 
=
îî 
receiver
îî #
}
ïï 
;
ïï 
return
ññ 
job
ññ 
.
ññ 
Schedule
ññ 
(
ññ  
dep
ññ  #
)
ññ# $
;
ññ$ %
}
óó 	
public
üü 
	JobHandle
üü 
ScheduleSend
üü %
(
üü% &
NativeQueue
üü& 1
<
üü1 2
QueuedSendMessage
üü2 C
>
üüC D
	sendQueue
üüE N
,
üüN O
	JobHandle
üüP Y
dep
üüZ ]
)
üü] ^
{
†† 	
var
°° 
job
°° 
=
°° 
new
°° 
FlushSendJob
°° &
{
¢¢ 
Baselib
££ 
=
££ 
	m_Baselib
££ #
,
££# $
Tx
§§ 
=
§§ 
m_PayloadsTx
§§ !
}
•• 
;
•• 
return
¶¶ 
job
¶¶ 
.
¶¶ 
Schedule
¶¶ 
(
¶¶  
dep
¶¶  #
)
¶¶# $
;
¶¶$ %
}
ßß 	
public
∞∞ 
unsafe
∞∞ 
int
∞∞ 
Bind
∞∞ 
(
∞∞ &
NetworkInterfaceEndPoint
∞∞ 7
endpoint
∞∞8 @
)
∞∞@ A
{
±± 	
var
≤≤ 
baselib
≤≤ 
=
≤≤ 
	m_Baselib
≤≤ #
[
≤≤# $
$num
≤≤$ %
]
≤≤% &
;
≤≤& '
var
¥¥ 
slice
¥¥ 
=
¥¥ $
m_LocalAndTempEndpoint
¥¥ .
.
¥¥. /
AtIndexAsSlice
¥¥/ =
(
¥¥= >
$num
¥¥> ?
,
¥¥? @
(
¥¥A B
uint
¥¥B F
)
¥¥F G
Binding
¥¥G N
.
¥¥N O8
*Baselib_RegisteredNetwork_Endpoint_MaxSize
¥¥O y
)
¥¥y z
;
¥¥z {
UnsafeUtility
µµ 
.
µµ 
MemCpy
µµ  
(
µµ  !
(
µµ! "
void
µµ" &
*
µµ& '
)
µµ' (
slice
µµ( -
.
µµ- .
data
µµ. 2
,
µµ2 3
endpoint
µµ4 <
.
µµ< =
data
µµ= A
,
µµA B
endpoint
µµC K
.
µµK L

dataLength
µµL V
)
µµV W
;
µµW X
var
∑∑ 
error
∑∑ 
=
∑∑ 
default
∑∑ 
(
∑∑  

ErrorState
∑∑  *
)
∑∑* +
;
∑∑+ ,
NetworkEndpoint
ππ 
local
ππ !
;
ππ! "
local
∫∫ 
.
∫∫ 
slice
∫∫ 
=
∫∫ 
slice
∫∫ 
;
∫∫  
Binding
ºº 
.
ºº $
Baselib_NetworkAddress
ºº *
localAddress
ºº+ 7
;
ºº7 8
Binding
ΩΩ 
.
ΩΩ B
4Baselib_RegisteredNetwork_Endpoint_GetNetworkAddress
ΩΩ H
(
ΩΩH I
local
ΩΩI N
,
ΩΩN O
&
ΩΩP Q
localAddress
ΩΩQ ]
,
ΩΩ] ^
&
ΩΩ_ `
error
ΩΩ` e
)
ΩΩe f
;
ΩΩf g
var
øø 
socket
øø 
=
øø 
Binding
øø  
.
øø  !9
+Baselib_RegisteredNetwork_Socket_UDP_Create
øø! L
(
øøL M
&
¿¿ 
localAddress
¿¿ 
,
¿¿ 
Binding
¡¡ 
.
¡¡ 1
#Baselib_NetworkAddress_AddressReuse
¡¡ ;
.
¡¡; <
Allow
¡¡< A
,
¡¡A B
checked
¬¬ 
(
¬¬ 
(
¬¬ 
uint
¬¬ 
)
¬¬ 
configuration
¬¬ +
.
¬¬+ ,
sendQueueCapacity
¬¬, =
)
¬¬= >
,
¬¬> ?
checked
√√ 
(
√√ 
(
√√ 
uint
√√ 
)
√√ 
configuration
√√ +
.
√√+ ,"
receiveQueueCapacity
√√, @
)
√√@ A
,
√√A B
&
ƒƒ 
error
ƒƒ 
)
ƒƒ 
;
ƒƒ 
if
≈≈ 
(
≈≈ 
error
≈≈ 
.
≈≈ 
code
≈≈ 
!=
≈≈ 
	ErrorCode
≈≈ '
.
≈≈' (
Success
≈≈( /
)
≈≈/ 0
return
∆∆ 
(
∆∆ 
int
∆∆ 
)
∆∆ 
error
∆∆ !
.
∆∆! "
code
∆∆" &
==
∆∆' )
-
∆∆* +
$num
∆∆+ ,
?
∆∆- .
-
∆∆/ 0
$num
∆∆0 1
:
∆∆2 3
-
∆∆4 5
(
∆∆5 6
int
∆∆6 9
)
∆∆9 :
error
∆∆: ?
.
∆∆? @
code
∆∆@ D
;
∆∆D E
if
…… 
(
…… 
	m_Baselib
…… 
[
…… 
$num
…… 
]
…… 
.
…… 
m_Socket
…… %
.
……% &
handle
……& ,
!=
……- /
IntPtr
……0 6
.
……6 7
Zero
……7 ;
)
……; <
{
   

AllSockets
ÃÃ 
.
ÃÃ 
OpenSockets
ÃÃ &
.
ÃÃ& '
Remove
ÃÃ' -
(
ÃÃ- .
new
ÃÃ. 1

SocketList
ÃÃ2 <
.
ÃÃ< =
SocketId
ÃÃ= E
{
ÕÕ 
socket
ÕÕ 
=
ÕÕ 
	m_Baselib
ÕÕ '
[
ÕÕ' (
$num
ÕÕ( )
]
ÕÕ) *
.
ÕÕ* +
m_Socket
ÕÕ+ 3
}
ÕÕ3 4
)
ÕÕ4 5
;
ÕÕ5 6
Binding
œœ 
.
œœ 8
*Baselib_RegisteredNetwork_Socket_UDP_Close
œœ B
(
œœB C
	m_Baselib
œœC L
[
œœL M
$num
œœM N
]
œœN O
.
œœO P
m_Socket
œœP X
)
œœX Y
;
œœY Z
m_PayloadsRx
““ 
.
““ 
Dispose
““ $
(
““$ %
)
““% &
;
““& '
m_PayloadsRx
”” 
=
”” 
new
”” "
Payloads
””# +
(
””+ ,
configuration
””, 9
.
””9 :"
receiveQueueCapacity
””: N
,
””N O
configuration
””P ]
.
””] ^ 
maximumPayloadSize
””^ p
)
””p q
;
””q r
}
‘‘ 
int
◊◊ 
count
◊◊ 
=
◊◊ 
$num
◊◊ 
;
◊◊ 
var
ÿÿ 
requests
ÿÿ 
=
ÿÿ 

stackalloc
ÿÿ %
Binding
ÿÿ& -
.
ÿÿ- ./
!Baselib_RegisteredNetwork_Request
ÿÿ. O
[
ÿÿO P
m_PayloadsRx
ÿÿP \
.
ÿÿ\ ]
Capacity
ÿÿ] e
]
ÿÿe f
;
ÿÿf g
while
ŸŸ 
(
ŸŸ 
m_PayloadsRx
ŸŸ 
.
ŸŸ  
InUse
ŸŸ  %
<
ŸŸ& '
m_PayloadsRx
ŸŸ( 4
.
ŸŸ4 5
Capacity
ŸŸ5 =
)
ŸŸ= >
{
⁄⁄ 
int
€€ 
handle
€€ 
=
€€ 
m_PayloadsRx
€€ )
.
€€) *
AcquireHandle
€€* 7
(
€€7 8
)
€€8 9
;
€€9 :
requests
‹‹ 
[
‹‹ 
count
‹‹ 
]
‹‹ 
=
‹‹  !
m_PayloadsRx
‹‹" .
.
‹‹. /"
GetRequestFromHandle
‹‹/ C
(
‹‹C D
handle
‹‹D J
)
‹‹J K
;
‹‹K L
requests
›› 
[
›› 
count
›› 
]
›› 
.
››  
requestUserdata
››  /
=
››0 1
(
››2 3
IntPtr
››3 9
)
››9 :
handle
››: @
+
››A B
$num
››C D
;
››D E
++
ﬁﬁ 
count
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
if
‡‡ 
(
‡‡ 
count
‡‡ 
>
‡‡ 
$num
‡‡ 
)
‡‡ 
{
·· 
Binding
‚‚ 
.
‚‚ ?
1Baselib_RegisteredNetwork_Socket_UDP_ScheduleRecv
‚‚ I
(
‚‚I J
socket
„„ 
,
„„ 
requests
‰‰ 
,
‰‰ 
(
ÂÂ 
uint
ÂÂ 
)
ÂÂ 
count
ÂÂ 
,
ÂÂ  
&
ÊÊ 
error
ÊÊ 
)
ÊÊ 
;
ÊÊ 
if
ËË 
(
ËË 
error
ËË 
.
ËË 
code
ËË 
!=
ËË !
	ErrorCode
ËË" +
.
ËË+ ,
Success
ËË, 3
)
ËË3 4
return
ÈÈ 
(
ÈÈ 
int
ÈÈ 
)
ÈÈ  
error
ÈÈ  %
.
ÈÈ% &
code
ÈÈ& *
==
ÈÈ+ -
-
ÈÈ. /
$num
ÈÈ/ 0
?
ÈÈ1 2
-
ÈÈ3 4
$num
ÈÈ4 5
:
ÈÈ6 7
-
ÈÈ8 9
(
ÈÈ9 :
int
ÈÈ: =
)
ÈÈ= >
error
ÈÈ> C
.
ÈÈC D
code
ÈÈD H
;
ÈÈH I
}
ÍÍ 

AllSockets
ÏÏ 
.
ÏÏ 
OpenSockets
ÏÏ "
.
ÏÏ" #
Add
ÏÏ# &
(
ÏÏ& '
new
ÏÏ' *

SocketList
ÏÏ+ 5
.
ÏÏ5 6
SocketId
ÏÏ6 >
{
ÏÏ? @
socket
ÏÏ@ F
=
ÏÏG H
socket
ÏÏI O
}
ÏÏO P
)
ÏÏP Q
;
ÏÏQ R
baselib
ÔÔ 
.
ÔÔ 
m_Socket
ÔÔ 
=
ÔÔ 
socket
ÔÔ %
;
ÔÔ% &
baselib
 
.
 
m_LocalEndpoint
 #
=
$ %
GetLocalEndPoint
& 6
(
6 7
socket
7 =
)
= >
;
> ?
	m_Baselib
ÚÚ 
[
ÚÚ 
$num
ÚÚ 
]
ÚÚ 
=
ÚÚ 
baselib
ÚÚ "
;
ÚÚ" #
return
ÛÛ 
$num
ÛÛ 
;
ÛÛ 
}
ÙÙ 	
public
˙˙ 
int
˙˙ 
Listen
˙˙ 
(
˙˙ 
)
˙˙ 
{
˚˚ 	
return
¸¸ 
$num
¸¸ 
;
¸¸ 
}
˝˝ 	
static
ˇˇ &
TransportFunctionPointer
ˇˇ '
<
ˇˇ' ("
NetworkSendInterface
ˇˇ( <
.
ˇˇ< =&
BeginSendMessageDelegate
ˇˇ= U
>
ˇˇU V-
BeginSendMessageFunctionPointer
ˇˇW v
=
ˇˇw x
new
ˇˇy |'
TransportFunctionPointerˇˇ} ï
<ˇˇï ñ$
NetworkSendInterfaceˇˇñ ™
.ˇˇ™ ´(
BeginSendMessageDelegateˇˇ´ √
>ˇˇ√ ƒ
(ˇˇƒ ≈ 
BeginSendMessageˇˇ≈ ’
)ˇˇ’ ÷
;ˇˇ÷ ◊
static
ÄÄ &
TransportFunctionPointer
ÄÄ '
<
ÄÄ' ("
NetworkSendInterface
ÄÄ( <
.
ÄÄ< =$
EndSendMessageDelegate
ÄÄ= S
>
ÄÄS T+
EndSendMessageFunctionPointer
ÄÄU r
=
ÄÄs t
new
ÄÄu x'
TransportFunctionPointerÄÄy ë
<ÄÄë í$
NetworkSendInterfaceÄÄí ¶
.ÄÄ¶ ß&
EndSendMessageDelegateÄÄß Ω
>ÄÄΩ æ
(ÄÄæ ø
EndSendMessageÄÄø Õ
)ÄÄÕ Œ
;ÄÄŒ œ
static
ÅÅ &
TransportFunctionPointer
ÅÅ '
<
ÅÅ' ("
NetworkSendInterface
ÅÅ( <
.
ÅÅ< =&
AbortSendMessageDelegate
ÅÅ= U
>
ÅÅU V-
AbortSendMessageFunctionPointer
ÅÅW v
=
ÅÅw x
new
ÅÅy |'
TransportFunctionPointerÅÅ} ï
<ÅÅï ñ$
NetworkSendInterfaceÅÅñ ™
.ÅÅ™ ´(
AbortSendMessageDelegateÅÅ´ √
>ÅÅ√ ƒ
(ÅÅƒ ≈ 
AbortSendMessageÅÅ≈ ’
)ÅÅ’ ÷
;ÅÅ÷ ◊
public
áá 
unsafe
áá "
NetworkSendInterface
áá *!
CreateSendInterface
áá+ >
(
áá> ?
)
áá? @
{
àà 	
return
ââ 
new
ââ "
NetworkSendInterface
ââ +
{
ää 
BeginSendMessage
ãã  
=
ãã! "-
BeginSendMessageFunctionPointer
ãã# B
,
ããB C
EndSendMessage
åå 
=
åå  +
EndSendMessageFunctionPointer
åå! >
,
åå> ?
AbortSendMessage
çç  
=
çç! "-
AbortSendMessageFunctionPointer
çç# B
,
ççB C
UserData
éé 
=
éé 
(
éé 
IntPtr
éé "
)
éé" #
	m_Baselib
éé# ,
.
éé, -
GetUnsafePtr
éé- 9
(
éé9 :
)
éé: ;
}
èè 
;
èè 
}
êê 	
[
íí 	
BurstCompile
íí	 
(
íí 
DisableDirectCall
íí '
=
íí( )
true
íí* .
)
íí. /
]
íí/ 0
[
ìì 	
AOT
ìì	 
.
ìì !
MonoPInvokeCallback
ìì  
(
ìì  !
typeof
ìì! '
(
ìì' ("
NetworkSendInterface
ìì( <
.
ìì< =&
BeginSendMessageDelegate
ìì= U
)
ììU V
)
ììV W
]
ììW X
private
îî 
static
îî 
unsafe
îî 
int
îî !
BeginSendMessage
îî" 2
(
îî2 3
out
îî3 6(
NetworkInterfaceSendHandle
îî7 Q
handle
îîR X
,
îîX Y
IntPtr
îîZ `
userData
îîa i
,
îîi j
int
îîk n"
requiredPayloadSizeîîo Ç
)îîÇ É
{
ïï 	
var
ññ 
baselib
ññ 
=
ññ 
(
ññ 
BaselibData
ññ &
*
ññ& '
)
ññ' (
userData
ññ( 0
;
ññ0 1
handle
óó 
=
óó 
default
óó 
;
óó 
int
òò 
index
òò 
=
òò 
baselib
òò 
->
òò !
m_PayloadsTx
òò! -
.
òò- .
AcquireHandle
òò. ;
(
òò; <
)
òò< =
;
òò= >
if
ôô 
(
ôô 
index
ôô 
<
ôô 
$num
ôô 
)
ôô 
return
öö 
(
öö 
int
öö 
)
öö 
Error
öö !
.
öö! "

StatusCode
öö" ,
.
öö, -"
NetworkSendQueueFull
öö- A
;
ööA B
var
úú 
message
úú 
=
úú 
baselib
úú !
->
úú! #
m_PayloadsTx
úú# /
.
úú/ 0"
GetRequestFromHandle
úú0 D
(
úúD E
index
úúE J
)
úúJ K
;
úúK L
if
ùù 
(
ùù 
(
ùù 
int
ùù 
)
ùù 
message
ùù 
.
ùù 
payload
ùù $
.
ùù$ %
size
ùù% )
<
ùù* +!
requiredPayloadSize
ùù, ?
)
ùù? @
{
ûû 
baselib
üü 
->
üü 
m_PayloadsTx
üü %
.
üü% &
ReleaseHandle
üü& 3
(
üü3 4
index
üü4 9
)
üü9 :
;
üü: ;
return
†† 
(
†† 
int
†† 
)
†† 
Error
†† !
.
††! "

StatusCode
††" ,
.
††, -#
NetworkPacketOverflow
††- B
;
††B C
}
°° 
handle
££ 
.
££ 
id
££ 
=
££ 
index
££ 
;
££ 
handle
§§ 
.
§§ 
size
§§ 
=
§§ 
$num
§§ 
;
§§ 
handle
•• 
.
•• 
data
•• 
=
•• 
(
•• 
IntPtr
•• !
)
••! "
message
••" )
.
••) *
payload
••* 1
.
••1 2
data
••2 6
;
••6 7
handle
¶¶ 
.
¶¶ 
capacity
¶¶ 
=
¶¶ 
(
¶¶ 
int
¶¶ "
)
¶¶" #
message
¶¶# *
.
¶¶* +
payload
¶¶+ 2
.
¶¶2 3
size
¶¶3 7
;
¶¶7 8
return
ßß 
(
ßß 
int
ßß 
)
ßß 
Error
ßß 
.
ßß 

StatusCode
ßß (
.
ßß( )
Success
ßß) 0
;
ßß0 1
}
®® 	
[
™™ 	
BurstCompile
™™	 
(
™™ 
DisableDirectCall
™™ '
=
™™( )
true
™™* .
)
™™. /
]
™™/ 0
[
´´ 	
AOT
´´	 
.
´´ !
MonoPInvokeCallback
´´  
(
´´  !
typeof
´´! '
(
´´' ("
NetworkSendInterface
´´( <
.
´´< =$
EndSendMessageDelegate
´´= S
)
´´S T
)
´´T U
]
´´U V
private
¨¨ 
static
¨¨ 
unsafe
¨¨ 
int
¨¨ !
EndSendMessage
¨¨" 0
(
¨¨0 1
ref
¨¨1 4(
NetworkInterfaceSendHandle
¨¨5 O
handle
¨¨P V
,
¨¨V W
ref
¨¨X [&
NetworkInterfaceEndPoint
¨¨\ t
address
¨¨u |
,
¨¨| }
IntPtr¨¨~ Ñ
userData¨¨Ö ç
,¨¨ç é
ref¨¨è í&
NetworkSendQueueHandle¨¨ì ©
sendQueueHandle¨¨™ π
)¨¨π ∫
{
≠≠ 	
var
ÆÆ 
baselib
ÆÆ 
=
ÆÆ 
(
ÆÆ 
BaselibData
ÆÆ &
*
ÆÆ& '
)
ÆÆ' (
userData
ÆÆ( 0
;
ÆÆ0 1
int
ØØ 
index
ØØ 
=
ØØ 
handle
ØØ 
.
ØØ 
id
ØØ !
;
ØØ! "
var
∞∞ 
message
∞∞ 
=
∞∞ 
baselib
∞∞ !
->
∞∞! #
m_PayloadsTx
∞∞# /
.
∞∞/ 0"
GetRequestFromHandle
∞∞0 D
(
∞∞D E
index
∞∞E J
)
∞∞J K
;
∞∞K L
message
±± 
.
±± 
requestUserdata
±± #
=
±±$ %
(
±±& '
IntPtr
±±' -
)
±±- .
(
±±. /
index
±±/ 4
+
±±5 6
$num
±±7 8
)
±±8 9
;
±±9 :
message
≤≤ 
.
≤≤ 
payload
≤≤ 
.
≤≤ 
size
≤≤  
=
≤≤! "
(
≤≤# $
uint
≤≤$ (
)
≤≤( )
handle
≤≤) /
.
≤≤/ 0
size
≤≤0 4
;
≤≤4 5
var
¥¥ 
addr
¥¥ 
=
¥¥ 
address
¥¥ 
;
¥¥ 
UnsafeUtility
µµ 
.
µµ 
MemCpy
µµ  
(
µµ  !
(
µµ! "
void
µµ" &
*
µµ& '
)
µµ' (
message
µµ( /
.
µµ/ 0
remoteEndpoint
µµ0 >
.
µµ> ?
slice
µµ? D
.
µµD E
data
µµE I
,
µµI J
addr
µµK O
.
µµO P
data
µµP T
,
µµT U
address
µµV ]
.
µµ] ^

dataLength
µµ^ h
)
µµh i
;
µµi j
NetworkRequest
∑∑ 
*
∑∑ 

messagePtr
∑∑ &
=
∑∑' (
&
∑∑) *
message
∑∑* 1
;
∑∑1 2
var
ππ 
error
ππ 
=
ππ 
default
ππ 
(
ππ  

ErrorState
ππ  *
)
ππ* +
;
ππ+ ,
var
∫∫ 
count
∫∫ 
=
∫∫ 
(
∫∫ 
int
∫∫ 
)
∫∫ 
Binding
∫∫ $
.
∫∫$ %?
1Baselib_RegisteredNetwork_Socket_UDP_ScheduleSend
∫∫% V
(
∫∫V W
baselib
ªª 
->
ªª 
m_Socket
ªª !
,
ªª! "

messagePtr
ºº 
,
ºº 
$num
ΩΩ 
,
ΩΩ 
&
ææ 
error
ææ 
)
ææ 
;
ææ 
if
øø 
(
øø 
error
øø 
.
øø 
code
øø 
!=
øø 
	ErrorCode
øø '
.
øø' (
Success
øø( /
)
øø/ 0
{
¿¿ 
baselib
¡¡ 
->
¡¡ 
m_PayloadsTx
¡¡ %
.
¡¡% &
ReleaseHandle
¡¡& 3
(
¡¡3 4
index
¡¡4 9
)
¡¡9 :
;
¡¡: ;
return
¬¬ 
(
¬¬ 
int
¬¬ 
)
¬¬ 
error
¬¬ !
.
¬¬! "
code
¬¬" &
==
¬¬' )
-
¬¬* +
$num
¬¬+ ,
?
¬¬- .
-
¬¬/ 0
$num
¬¬0 1
:
¬¬2 3
-
¬¬4 5
(
¬¬5 6
int
¬¬6 9
)
¬¬9 :
error
¬¬: ?
.
¬¬? @
code
¬¬@ D
;
¬¬D E
}
√√ 
return
ƒƒ 
handle
ƒƒ 
.
ƒƒ 
size
ƒƒ 
;
ƒƒ 
}
≈≈ 	
[
«« 	
BurstCompile
««	 
(
«« 
DisableDirectCall
«« '
=
««( )
true
««* .
)
««. /
]
««/ 0
[
»» 	
AOT
»»	 
.
»» !
MonoPInvokeCallback
»»  
(
»»  !
typeof
»»! '
(
»»' ("
NetworkSendInterface
»»( <
.
»»< =&
AbortSendMessageDelegate
»»= U
)
»»U V
)
»»V W
]
»»W X
private
…… 
static
…… 
unsafe
…… 
void
…… "
AbortSendMessage
……# 3
(
……3 4
ref
……4 7(
NetworkInterfaceSendHandle
……8 R
handle
……S Y
,
……Y Z
IntPtr
……[ a
userData
……b j
)
……j k
{
   	
var
ÀÀ 
baselib
ÀÀ 
=
ÀÀ 
(
ÀÀ 
BaselibData
ÀÀ &
*
ÀÀ& '
)
ÀÀ' (
userData
ÀÀ( 0
;
ÀÀ0 1
var
ÃÃ 
id
ÃÃ 
=
ÃÃ 
handle
ÃÃ 
.
ÃÃ 
id
ÃÃ 
;
ÃÃ 
baselib
ÕÕ 
->
ÕÕ 
m_PayloadsTx
ÕÕ !
.
ÕÕ! "
ReleaseHandle
ÕÕ" /
(
ÕÕ/ 0
id
ÕÕ0 2
)
ÕÕ2 3
;
ÕÕ3 4
}
ŒŒ 	
bool
––  
ValidateParameters
–– 
(
––  %
BaselibNetworkParameter
––  7
param
––8 =
)
––= >
{
—— 	
if
““ 
(
““ 
param
““ 
.
““ "
receiveQueueCapacity
““ *
<=
““+ -
$num
““. /
)
““/ 0
{
”” 
UnityEngine
’’ 
.
’’ 
Debug
’’ !
.
’’! "

LogWarning
’’" ,
(
’’, -
$str
’’- g
)
’’g h
;
’’h i
return
◊◊ 
false
◊◊ 
;
◊◊ 
}
ÿÿ 
if
ŸŸ 
(
ŸŸ 
param
ŸŸ 
.
ŸŸ 
sendQueueCapacity
ŸŸ '
<=
ŸŸ( *
$num
ŸŸ+ ,
)
ŸŸ, -
{
⁄⁄ 
UnityEngine
‹‹ 
.
‹‹ 
Debug
‹‹ !
.
‹‹! "

LogWarning
‹‹" ,
(
‹‹, -
$str
‹‹- d
)
‹‹d e
;
‹‹e f
return
ﬁﬁ 
false
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
return
‡‡ 
true
‡‡ 
;
‡‡ 
}
·· 	
bool
„„ "
TryExtractParameters
„„ !
(
„„! "
out
„„" %%
BaselibNetworkParameter
„„& =
config
„„> D
,
„„D E
params
„„F L
INetworkParameter
„„M ^
[
„„^ _
]
„„_ `
param
„„a f
)
„„f g
{
‰‰ 	
for
ÂÂ 
(
ÂÂ 
int
ÂÂ 
i
ÂÂ 
=
ÂÂ 
$num
ÂÂ 
;
ÂÂ 
i
ÂÂ 
<
ÂÂ 
param
ÂÂ  %
.
ÂÂ% &
Length
ÂÂ& ,
;
ÂÂ, -
++
ÂÂ. 0
i
ÂÂ0 1
)
ÂÂ1 2
{
ÊÊ 
if
ÁÁ 
(
ÁÁ 
param
ÁÁ 
[
ÁÁ 
i
ÁÁ 
]
ÁÁ 
is
ÁÁ %
BaselibNetworkParameter
ÁÁ  7
&&
ÁÁ8 : 
ValidateParameters
ÁÁ; M
(
ÁÁM N
(
ÁÁN O%
BaselibNetworkParameter
ÁÁO f
)
ÁÁf g
param
ÁÁg l
[
ÁÁl m
i
ÁÁm n
]
ÁÁn o
)
ÁÁo p
)
ÁÁp q
{
ËË 
config
ÈÈ 
=
ÈÈ 
(
ÈÈ %
BaselibNetworkParameter
ÈÈ 5
)
ÈÈ5 6
param
ÈÈ6 ;
[
ÈÈ; <
i
ÈÈ< =
]
ÈÈ= >
;
ÈÈ> ?
return
ÍÍ 
true
ÍÍ 
;
ÍÍ  
}
ÎÎ 
}
ÏÏ 
config
ÌÌ 
=
ÌÌ 
default
ÌÌ 
;
ÌÌ 
return
ÓÓ 
false
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
}
 
}ÒÒ óµ
oC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Pipelines\FragmentationPipelineStage.cs
	namespace		 	
Unity		
 
.		 

Networking		 
.		 
	Transport		 $
{

 
[ 
BurstCompile 
] 
public 

unsafe 
struct &
FragmentationPipelineStage 3
:4 5!
INetworkPipelineStage6 K
{ 
public 
struct 
FragContext !
{ 	
public 
int 

startIndex !
;! "
public 
int 
endIndex 
;  
public 
int 
sequence 
;  
public!! 
bool!! 
packetError!! #
;!!# $
}"" 	
[$$ 	
Flags$$	 
]$$ 
enum%% 
	FragFlags%% 
{&& 	
First'' 
='' 
$num'' 
<<'' 
$num'' 
,'' 
Last(( 
=(( 
$num(( 
<<(( 
$num(( 
,(( 
SeqMask)) 
=)) 
Last)) 
-)) 
$num)) 
}** 	
const// 
int// 
FragHeaderCapacity// $
=//% &
$num//' (
;//( )
[22 	
BurstCompile22	 
(22 
DisableDirectCall22 '
=22( )
true22* .
)22. /
]22/ 0
[33 	
MonoPInvokeCallback33	 
(33 
typeof33 #
(33# $ 
NetworkPipelineStage33$ 8
.338 9
SendDelegate339 E
)33E F
)33F G
]33G H
private44 
static44 
int44 
Send44 
(44  
ref44  #"
NetworkPipelineContext44$ :
ctx44; >
,44> ?
ref44@ C
InboundSendBuffer44D U
inboundBuffer44V c
,44c d
ref44e h 
NetworkPipelineStage44i }
.44} ~
Requests	44~ Ü
requests
44á è
,
44è ê
int
44ë î
systemHeaderSize
44ï •
)
44• ¶
{55 	
var66 
fragContext66 
=66 
(66 
FragContext66 *
*66* +
)66+ ,
ctx66, /
.66/ 0!
internalProcessBuffer660 E
;66E F
var77 

dataBuffer77 
=77 
ctx77  
.77  !!
internalProcessBuffer77! 6
+777 8
sizeof779 ?
(77? @
FragContext77@ K
)77K L
;77L M
var88 
param88 
=88 
(88  
FragmentationUtility88 -
.88- .

Parameters88. 8
*888 9
)889 :
ctx88: =
.88= > 
staticInstanceBuffer88> R
;88R S
	FragFlags:: 
flags:: 
=:: 
	FragFlags:: '
.::' (
First::( -
;::- .
int;; 
headerCapacity;; 
=;;  
ctx;;! $
.;;$ %
header;;% +
.;;+ ,
Capacity;;, 4
;;;4 5
var==  
systemHeaderCapacity== $
===% &
systemHeaderSize==' 7
+==8 9
$num==: ;
+==< =
SessionIdToken==> L
.==L M
k_Length==M U
;==U V
var>> 
maxBlockLength>> 
=>>  %
NetworkParameterConstants>>! :
.>>: ;
MTU>>; >
->>? @ 
systemHeaderCapacity>>A U
->>V W
inboundBuffer>>X e
.>>e f
headerPadding>>f s
;>>s t
var?? %
maxBlockLengthFirstPacket?? )
=??* +
maxBlockLength??, :
-??; <
ctx??= @
.??@ A%
accumulatedHeaderCapacity??A Z
;??Z [
ifAA 
(AA 
fragContextAA 
->AA 
endIndexAA %
>AA& '
fragContextAA( 3
->AA3 5

startIndexAA5 ?
)AA? @
{BB 
varCC 
isResumeCC 
=CC 
$numCC  
==CC! #
inboundBufferCC$ 1
.CC1 2
bufferLengthCC2 >
;CC> ?
ifDD 
(DD 
!DD 
isResumeDD 
)DD 
{EE 
throwGG 
newGG %
InvalidOperationExceptionGG 7
(GG7 8
$str	GG8 ô
)
GGô ö
;
GGö õ
}KK 
flagsNN 
&=NN 
~NN 
	FragFlagsNN #
.NN# $
FirstNN$ )
;NN) *
varOO 
blockLengthOO 
=OO  !
fragContextOO" -
->OO- /
endIndexOO/ 7
-OO8 9
fragContextOO: E
->OOE G

startIndexOOG Q
;OOQ R
ifPP 
(PP 
blockLengthPP 
>PP  !
maxBlockLengthPP" 0
)PP0 1
{QQ 
blockLengthRR 
=RR  !
maxBlockLengthRR" 0
;RR0 1
}SS 
varTT 

blockStartTT 
=TT  

dataBufferTT! +
+TT, -
fragContextTT. 9
->TT9 ;

startIndexTT; E
;TTE F
inboundBufferUU 
.UU 
bufferUU $
=UU% &

blockStartUU' 1
;UU1 2
inboundBufferVV 
.VV 
bufferWithHeadersVV /
=VV0 1

blockStartVV2 <
-VV= >
inboundBufferVV? L
.VVL M
headerPaddingVVM Z
;VVZ [
inboundBufferWW 
.WW 
bufferLengthWW *
=WW+ ,
blockLengthWW- 8
;WW8 9
inboundBufferXX 
.XX #
bufferWithHeadersLengthXX 5
=XX6 7
blockLengthXX8 C
+XXD E
inboundBufferXXF S
.XXS T
headerPaddingXXT a
;XXa b
fragContextYY 
->YY 

startIndexYY '
+=YY( *
blockLengthYY+ 6
;YY6 7
}ZZ 
else[[ 
if[[ 
([[ 
inboundBuffer[[ "
.[[" #
bufferLength[[# /
>[[0 1%
maxBlockLengthFirstPacket[[2 K
)[[K L
{\\ 
var]] 
payloadCapacity]] #
=]]$ %
param]]& +
->]]+ -
PayloadCapacity]]- <
;]]< =
var^^ 
excessLength^^  
=^^! "
inboundBuffer^^# 0
.^^0 1
bufferLength^^1 =
-^^> ?%
maxBlockLengthFirstPacket^^@ Y
;^^Y Z
var__ 
excessStart__ 
=__  !
inboundBuffer__" /
.__/ 0
buffer__0 6
+__7 8%
maxBlockLengthFirstPacket__9 R
;__R S
if`` 
(`` 
excessLength``  
+``! "
inboundBuffer``# 0
.``0 1
headerPadding``1 >
>``? @
payloadCapacity``A P
)``P Q
{aa 
throwcc 
newcc %
InvalidOperationExceptioncc 7
(cc7 8
$"cc8 :
$strcc: d
{ccd e
payloadCapacitycce t
}cct u
$strccu ~
{cc~ 
excessLength	cc ã
+
ccå ç
inboundBuffer
ccé õ
.
ccõ ú
headerPadding
ccú ©
}
cc© ™
"
cc™ ´
)
cc´ ¨
;
cc¨ ≠
}gg 
UnsafeUtilityhh 
.hh 
MemCpyhh $
(hh$ %

dataBufferhh% /
+hh0 1
inboundBufferhh2 ?
.hh? @
headerPaddinghh@ M
,hhM N
excessStarthhO Z
,hhZ [
excessLengthhh\ h
)hhh i
;hhi j
fragContextii 
->ii 

startIndexii '
=ii( )
inboundBufferii* 7
.ii7 8
headerPaddingii8 E
;iiE F
fragContextjj 
->jj 
endIndexjj %
=jj& '
excessLengthjj( 4
+jj5 6
inboundBufferjj7 D
.jjD E
headerPaddingjjE R
;jjR S
inboundBufferkk 
.kk #
bufferWithHeadersLengthkk 5
-=kk6 8
excessLengthkk9 E
;kkE F
inboundBufferll 
.ll 
bufferLengthll *
-=ll+ -
excessLengthll. :
;ll: ;
}mm 
ifoo 
(oo 
fragContextoo 
->oo 
endIndexoo %
>oo& '
fragContextoo( 3
->oo3 5

startIndexoo5 ?
)oo? @
{pp 
requestsqq 
|=qq  
NetworkPipelineStageqq 0
.qq0 1
Requestsqq1 9
.qq9 :
Resumeqq: @
;qq@ A
}rr 
elsess 
{tt 
flagsuu 
|=uu 
	FragFlagsuu "
.uu" #
Lastuu# '
;uu' (
}vv 
varxx 
sequencexx 
=xx 
fragContextxx &
->xx& (
sequencexx( 0
++xx0 2
;xx2 3
varzz 
combinedzz 
=zz 
(zz 
sequencezz $
&zz% &
(zz' (
intzz( +
)zz+ ,
	FragFlagszz, 5
.zz5 6
SeqMaskzz6 =
)zz= >
|zz? @
(zzA B
intzzB E
)zzE F
flagszzF K
;zzK L
ctx{{ 
.{{ 
header{{ 
.{{ 

WriteShort{{ !
({{! "
({{" #
short{{# (
){{( )
combined{{) 1
){{1 2
;{{2 3
return
ÑÑ 
(
ÑÑ 
int
ÑÑ 
)
ÑÑ 
Error
ÑÑ 
.
ÑÑ 

StatusCode
ÑÑ (
.
ÑÑ( )
Success
ÑÑ) 0
;
ÑÑ0 1
}
ÖÖ 	
[
áá 	
BurstCompile
áá	 
(
áá 
DisableDirectCall
áá '
=
áá( )
true
áá* .
)
áá. /
]
áá/ 0
[
àà 	!
MonoPInvokeCallback
àà	 
(
àà 
typeof
àà #
(
àà# $"
NetworkPipelineStage
àà$ 8
.
àà8 9
ReceiveDelegate
àà9 H
)
ààH I
)
ààI J
]
ààJ K
private
ââ 
static
ââ 
void
ââ 
Receive
ââ #
(
ââ# $
ref
ââ$ '$
NetworkPipelineContext
ââ( >
ctx
ââ? B
,
ââB C
ref
ââD G
InboundRecvBuffer
ââH Y
inboundBuffer
ââZ g
,
ââg h
ref
ââi l#
NetworkPipelineStageââm Å
.ââÅ Ç
RequestsââÇ ä
requestsââã ì
,ââì î
intââï ò 
systemHeaderSizeââô ©
)ââ© ™
{
ää 	
var
ãã 
fragContext
ãã 
=
ãã 
(
ãã 
FragContext
ãã *
*
ãã* +
)
ãã+ ,
ctx
ãã, /
.
ãã/ 0#
internalProcessBuffer
ãã0 E
;
ããE F
var
åå 

dataBuffer
åå 
=
åå 
ctx
åå  
.
åå  !#
internalProcessBuffer
åå! 6
+
åå7 8
sizeof
åå9 ?
(
åå? @
FragContext
åå@ K
)
ååK L
;
ååL M
var
çç 
param
çç 
=
çç 
(
çç "
FragmentationUtility
çç -
.
çç- .

Parameters
çç. 8
*
çç8 9
)
çç9 :
ctx
çç: =
.
çç= >"
staticInstanceBuffer
çç> R
;
ççR S
var
èè 
inboundArray
èè 
=
èè &
NativeArrayUnsafeUtility
èè 7
.
èè7 8.
 ConvertExistingDataToNativeArray
èè8 X
<
èèX Y
byte
èèY ]
>
èè] ^
(
èè^ _
inboundBuffer
èè_ l
.
èèl m
buffer
èèm s
,
èès t
inboundBufferèèu Ç
.èèÇ É
bufferLengthèèÉ è
,èèè ê
	Allocatorèèë ö
.èèö õ
Invalidèèõ ¢
)èè¢ £
;èè£ §
var
ëë 
safetyHandle
ëë 
=
ëë  
AtomicSafetyHandle
ëë 1
.
ëë1 2!
GetTempMemoryHandle
ëë2 E
(
ëëE F
)
ëëF G
;
ëëG H&
NativeArrayUnsafeUtility
íí $
.
íí$ %#
SetAtomicSafetyHandle
íí% :
(
íí: ;
ref
íí; >
inboundArray
íí? K
,
ííK L
safetyHandle
ííM Y
)
ííY Z
;
ííZ [
var
îî 
reader
îî 
=
îî 
new
îî 
DataStreamReader
îî -
(
îî- .
inboundArray
îî. :
)
îî: ;
;
îî; <
var
ññ 
combined
ññ 
=
ññ 
reader
ññ !
.
ññ! "
	ReadShort
ññ" +
(
ññ+ ,
)
ññ, -
;
ññ- .
var
óó 
foundSequence
óó 
=
óó 
combined
óó  (
&
óó) *
(
óó+ ,
int
óó, /
)
óó/ 0
	FragFlags
óó0 9
.
óó9 :
SeqMask
óó: A
;
óóA B
var
òò 
flags
òò 
=
òò 
(
òò 
	FragFlags
òò "
)
òò" #
combined
òò# +
&
òò, -
~
òò. /
	FragFlags
òò/ 8
.
òò8 9
SeqMask
òò9 @
;
òò@ A
inboundBuffer
ôô 
=
ôô 
inboundBuffer
ôô )
.
ôô) *
Slice
ôô* /
(
ôô/ 0 
FragHeaderCapacity
ôô0 B
)
ôôB C
;
ôôC D
var
õõ 
expectedSequence
õõ  
=
õõ! "
fragContext
õõ# .
->
õõ. 0
sequence
õõ0 8
;
õõ8 9
var
úú 
isFirst
úú 
=
úú 
$num
úú 
!=
úú 
(
úú  
flags
úú  %
&
úú& '
	FragFlags
úú( 1
.
úú1 2
First
úú2 7
)
úú7 8
;
úú8 9
var
ùù 
isLast
ùù 
=
ùù 
$num
ùù 
!=
ùù 
(
ùù 
flags
ùù $
&
ùù% &
	FragFlags
ùù' 0
.
ùù0 1
Last
ùù1 5
)
ùù5 6
;
ùù6 7
if
üü 
(
üü 
isFirst
üü 
)
üü 
{
†† 
expectedSequence
°°  
=
°°! "
foundSequence
°°# 0
;
°°0 1
fragContext
¢¢ 
->
¢¢ 
packetError
¢¢ (
=
¢¢) *
false
¢¢+ 0
;
¢¢0 1
fragContext
££ 
->
££ 
endIndex
££ %
=
££& '
$num
££( )
;
££) *
}
§§ 
if
¶¶ 
(
¶¶ 
foundSequence
¶¶ 
!=
¶¶  
expectedSequence
¶¶! 1
)
¶¶1 2
{
ßß 
fragContext
©© 
->
©© 
packetError
©© (
=
©©) *
true
©©+ /
;
©©/ 0
fragContext
™™ 
->
™™ 
endIndex
™™ %
=
™™& '
$num
™™( )
;
™™) *
}
´´ 
if
≠≠ 
(
≠≠ 
!
≠≠ 
fragContext
≠≠ 
->
≠≠ 
packetError
≠≠ )
)
≠≠) *
{
ÆÆ 
if
ØØ 
(
ØØ 
!
ØØ 
isLast
ØØ 
||
ØØ 
fragContext
ØØ *
->
ØØ* ,
endIndex
ØØ, 4
>
ØØ5 6
$num
ØØ7 8
)
ØØ8 9
{
∞∞ 
if
±± 
(
±± 
fragContext
±± #
->
±±# %
endIndex
±±% -
+
±±. /
inboundBuffer
±±0 =
.
±±= >
bufferLength
±±> J
>
±±K L
param
±±M R
->
±±R T
PayloadCapacity
±±T c
)
±±c d
{
≤≤ 
throw
¥¥ 
new
¥¥ !'
InvalidOperationException
¥¥" ;
(
¥¥; <
$"
¥¥< >
$str
¥¥> ]
"
¥¥] ^
)
¥¥^ _
;
¥¥_ `
}
ππ 
UnsafeUtility
ªª !
.
ªª! "
MemCpy
ªª" (
(
ªª( )

dataBuffer
ªª) 3
+
ªª4 5
fragContext
ªª6 A
->
ªªA C
endIndex
ªªC K
,
ªªK L
inboundBuffer
ªªM Z
.
ªªZ [
buffer
ªª[ a
,
ªªa b
inboundBuffer
ªªc p
.
ªªp q
bufferLength
ªªq }
)
ªª} ~
;
ªª~ 
fragContext
ºº 
->
ºº !
endIndex
ºº! )
+=
ºº* ,
inboundBuffer
ºº- :
.
ºº: ;
bufferLength
ºº; G
;
ººG H
}
ΩΩ 
if
øø 
(
øø 
isLast
øø 
&&
øø 
fragContext
øø )
->
øø) +
endIndex
øø+ 3
>
øø4 5
$num
øø6 7
)
øø7 8
{
¿¿ 
inboundBuffer
¬¬ !
=
¬¬" #
new
¬¬$ '
InboundRecvBuffer
¬¬( 9
{
√√ 
buffer
ƒƒ 
=
ƒƒ  

dataBuffer
ƒƒ! +
,
ƒƒ+ ,
bufferLength
≈≈ $
=
≈≈% &
fragContext
≈≈' 2
->
≈≈2 4
endIndex
≈≈4 <
}
∆∆ 
;
∆∆ 
}
«« 
}
»» 
if
   
(
   
!
   
isLast
   
||
   
fragContext
   &
->
  & (
packetError
  ( 3
)
  3 4
{
ÀÀ 
inboundBuffer
ÕÕ 
=
ÕÕ 
default
ÕÕ  '
;
ÕÕ' (
}
ŒŒ 
fragContext
–– 
->
–– 
sequence
–– !
=
––" #
(
––$ %
foundSequence
––% 2
+
––3 4
$num
––5 6
)
––6 7
&
––8 9
(
––: ;
int
––; >
)
––> ?
	FragFlags
––? H
.
––H I
SeqMask
––I P
;
––P Q
}
—— 	
[
”” 	
BurstCompile
””	 
(
”” 
DisableDirectCall
”” '
=
””( )
true
””* .
)
””. /
]
””/ 0
[
‘‘ 	!
MonoPInvokeCallback
‘‘	 
(
‘‘ 
typeof
‘‘ #
(
‘‘# $"
NetworkPipelineStage
‘‘$ 8
.
‘‘8 9*
InitializeConnectionDelegate
‘‘9 U
)
‘‘U V
)
‘‘V W
]
‘‘W X
private
’’ 
static
’’ 
void
’’ "
InitializeConnection
’’ 0
(
’’0 1
byte
’’1 5
*
’’5 6"
staticInstanceBuffer
’’7 K
,
’’K L
int
’’M P(
staticInstanceBufferLength
’’Q k
,
’’k l
byte
÷÷ 
*
÷÷ 
sendProcessBuffer
÷÷ #
,
÷÷# $
int
÷÷% (%
sendProcessBufferLength
÷÷) @
,
÷÷@ A
byte
÷÷B F
*
÷÷F G
recvProcessBuffer
÷÷H Y
,
÷÷Y Z
int
÷÷[ ^%
recvProcessBufferLength
÷÷_ v
,
÷÷v w
byte
◊◊ 
*
◊◊ !
sharedProcessBuffer
◊◊ %
,
◊◊% &
int
◊◊' *'
sharedProcessBufferLength
◊◊+ D
)
◊◊D E
{
ÿÿ 	
}
ŸŸ 	
static
€€ &
TransportFunctionPointer
€€ '
<
€€' ("
NetworkPipelineStage
€€( <
.
€€< =
ReceiveDelegate
€€= L
>
€€L M$
ReceiveFunctionPointer
€€N d
=
€€e f
new
€€g j'
TransportFunctionPointer€€k É
<€€É Ñ$
NetworkPipelineStage€€Ñ ò
.€€ò ô
ReceiveDelegate€€ô ®
>€€® ©
(€€© ™
Receive€€™ ±
)€€± ≤
;€€≤ ≥
static
‹‹ &
TransportFunctionPointer
‹‹ '
<
‹‹' ("
NetworkPipelineStage
‹‹( <
.
‹‹< =
SendDelegate
‹‹= I
>
‹‹I J!
SendFunctionPointer
‹‹K ^
=
‹‹_ `
new
‹‹a d&
TransportFunctionPointer
‹‹e }
<
‹‹} ~#
NetworkPipelineStage‹‹~ í
.‹‹í ì
SendDelegate‹‹ì ü
>‹‹ü †
(‹‹† °
Send‹‹° •
)‹‹• ¶
;‹‹¶ ß
static
›› &
TransportFunctionPointer
›› '
<
››' ("
NetworkPipelineStage
››( <
.
››< =*
InitializeConnectionDelegate
››= Y
>
››Y Z1
#InitializeConnectionFunctionPointer
››[ ~
=›› Ä
new››Å Ñ(
TransportFunctionPointer››Ö ù
<››ù û$
NetworkPipelineStage››û ≤
.››≤ ≥,
InitializeConnectionDelegate››≥ œ
>››œ –
(››– —$
InitializeConnection››— Â
)››Â Ê
;››Ê Á
public
ÊÊ "
NetworkPipelineStage
ÊÊ #
StaticInitialize
ÊÊ$ 4
(
ÊÊ4 5
byte
ÊÊ5 9
*
ÊÊ9 :"
staticInstanceBuffer
ÊÊ; O
,
ÊÊO P
int
ÊÊQ T(
staticInstanceBufferLength
ÊÊU o
,
ÊÊo p
NetworkSettingsÊÊq Ä
settingsÊÊÅ â
)ÊÊâ ä
{
ÁÁ 	"
FragmentationUtility
ËË  
.
ËË  !

Parameters
ËË! +
param
ËË, 1
=
ËË2 3
settings
ËË4 <
.
ËË< =-
GetFragmentationStageParameters
ËË= \
(
ËË\ ]
)
ËË] ^
;
ËË^ _
UnsafeUtility
ÍÍ 
.
ÍÍ 
MemCpy
ÍÍ  
(
ÍÍ  !"
staticInstanceBuffer
ÍÍ! 5
,
ÍÍ5 6
&
ÍÍ7 8
param
ÍÍ8 =
,
ÍÍ= >
UnsafeUtility
ÍÍ? L
.
ÍÍL M
SizeOf
ÍÍM S
<
ÍÍS T"
FragmentationUtility
ÍÍT h
.
ÍÍh i

Parameters
ÍÍi s
>
ÍÍs t
(
ÍÍt u
)
ÍÍu v
)
ÍÍv w
;
ÍÍw x
return
ÏÏ 
new
ÏÏ "
NetworkPipelineStage
ÏÏ +
(
ÏÏ+ ,
Receive
ÌÌ 
:
ÌÌ $
ReceiveFunctionPointer
ÌÌ /
,
ÌÌ/ 0
Send
ÓÓ 
:
ÓÓ !
SendFunctionPointer
ÓÓ )
,
ÓÓ) *"
InitializeConnection
ÔÔ $
:
ÔÔ$ %1
#InitializeConnectionFunctionPointer
ÔÔ& I
,
ÔÔI J
ReceiveCapacity
 
:
  
sizeof
! '
(
' (
FragContext
( 3
)
3 4
+
5 6
param
7 <
.
< =
PayloadCapacity
= L
,
L M
SendCapacity
ÒÒ 
:
ÒÒ 
sizeof
ÒÒ $
(
ÒÒ$ %
FragContext
ÒÒ% 0
)
ÒÒ0 1
+
ÒÒ2 3
param
ÒÒ4 9
.
ÒÒ9 :
PayloadCapacity
ÒÒ: I
,
ÒÒI J
HeaderCapacity
ÚÚ 
:
ÚÚ  
FragHeaderCapacity
ÚÚ  2
,
ÚÚ2 3!
SharedStateCapacity
ÛÛ #
:
ÛÛ# $
$num
ÛÛ% &
,
ÛÛ& '
param
ÙÙ 
.
ÙÙ 
PayloadCapacity
ÙÙ %
)
ıı 
;
ıı 
}
ˆˆ 	
public
˚˚ 
int
˚˚ 

StaticSize
˚˚ 
=>
˚˚  
UnsafeUtility
˚˚! .
.
˚˚. /
SizeOf
˚˚/ 5
<
˚˚5 6"
FragmentationUtility
˚˚6 J
.
˚˚J K

Parameters
˚˚K U
>
˚˚U V
(
˚˚V W
)
˚˚W X
;
˚˚X Y
}
¸¸ 
}˝˝ •ù
UC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\DataStream.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{		 
[

 
StructLayout

 
(

 

LayoutKind

 
.

 
Explicit

 %
)

% &
]

& '
internal 
struct 
	UIntFloat 
{ 
[ 	
FieldOffset	 
( 
$num 
) 
] 
public 
float  %

floatValue& 0
;0 1
[ 	
FieldOffset	 
( 
$num 
) 
] 
public 
uint  $
intValue% -
;- .
[ 	
FieldOffset	 
( 
$num 
) 
] 
public 
double  &
doubleValue' 2
;2 3
[ 	
FieldOffset	 
( 
$num 
) 
] 
public 
ulong  %
	longValue& /
;/ 0
} 
[GG 
StructLayoutGG 
(GG 

LayoutKindGG 
.GG 

SequentialGG '
)GG' (
]GG( )
publicHH 

unsafeHH 
structHH 
DataStreamWriterHH )
{II 
structJJ #
IsLittleEndianStructKeyJJ &
{JJ' (
}JJ( )
privateKK 
staticKK 
readonlyKK 
SharedStaticKK  ,
<KK, -
intKK- 0
>KK0 1
m_IsLittleEndianKK2 B
=KKC D
SharedStaticKKE Q
<KKQ R
intKKR U
>KKU V
.KKV W
GetOrCreateKKW b
<KKb c#
IsLittleEndianStructKeyKKc z
>KKz {
(KK{ |
)KK| }
;KK} ~
publicLL 
staticLL 
boolLL 
IsLittleEndianLL )
{MM 	
getNN 
{OO 
ifPP 
(PP 
m_IsLittleEndianPP $
.PP$ %
DataPP% )
==PP* ,
$numPP- .
)PP. /
{QQ 
uintRR 
testRR 
=RR 
$numRR  !
;RR! "
byteSS 
*SS 
testPtrSS !
=SS" #
(SS$ %
byteSS% )
*SS) *
)SS* +
&SS+ ,
testSS, 0
;SS0 1
m_IsLittleEndianTT $
.TT$ %
DataTT% )
=TT* +
testPtrTT, 3
[TT3 4
$numTT4 5
]TT5 6
==TT7 9
$numTT: ;
?TT< =
$numTT> ?
:TT@ A
$numTTB C
;TTC D
}UU 
returnVV 
m_IsLittleEndianVV '
.VV' (
DataVV( ,
==VV- /
$numVV0 1
;VV1 2
}WW 
}XX 	
structZZ 

StreamDataZZ 
{[[ 	
public\\ 
byte\\ 
*\\ 
buffer\\ 
;\\  
public]] 
int]] 
length]] 
;]] 
public^^ 
int^^ 
capacity^^ 
;^^  
public__ 
ulong__ 
	bitBuffer__ "
;__" #
public`` 
int`` 
bitIndex`` 
;``  
publicaa 
intaa 
failedWritesaa #
;aa# $
}bb 	
[dd 	-
!NativeDisableUnsafePtrRestrictiondd	 *
]dd* +

StreamDatadd, 6
m_Datadd7 =
;dd= >
internalee 
IntPtree 
m_SendHandleDataee (
;ee( )
AtomicSafetyHandlehh 
m_Safetyhh #
;hh# $
publicpp 
DataStreamWriterpp 
(pp  
intpp  #
lengthpp$ *
,pp* +
	Allocatorpp, 5
	allocatorpp6 ?
)pp? @
{qq 	
CheckAllocatorrr 
(rr 
	allocatorrr $
)rr$ %
;rr% &

Initializess 
(ss 
outss 
thisss 
,ss  
newss! $
NativeArrayss% 0
<ss0 1
bytess1 5
>ss5 6
(ss6 7
lengthss7 =
,ss= >
	allocatorss? H
)ssH I
)ssI J
;ssJ K
}tt 	
publiczz 
DataStreamWriterzz 
(zz  
NativeArrayzz  +
<zz+ ,
bytezz, 0
>zz0 1
datazz2 6
)zz6 7
{{{ 	

Initialize|| 
(|| 
out|| 
this|| 
,||  
data||! %
)||% &
;||& '
}}} 	
public
ÑÑ 
DataStreamWriter
ÑÑ 
(
ÑÑ  
byte
ÑÑ  $
*
ÑÑ$ %
data
ÑÑ& *
,
ÑÑ* +
int
ÑÑ, /
length
ÑÑ0 6
)
ÑÑ6 7
{
ÖÖ 	
var
ÜÜ 
na
ÜÜ 
=
ÜÜ &
NativeArrayUnsafeUtility
ÜÜ -
.
ÜÜ- ..
 ConvertExistingDataToNativeArray
ÜÜ. N
<
ÜÜN O
byte
ÜÜO S
>
ÜÜS T
(
ÜÜT U
data
ÜÜU Y
,
ÜÜY Z
length
ÜÜ[ a
,
ÜÜa b
	Allocator
ÜÜc l
.
ÜÜl m
Invalid
ÜÜm t
)
ÜÜt u
;
ÜÜu v&
NativeArrayUnsafeUtility
àà $
.
àà$ %#
SetAtomicSafetyHandle
àà% :
(
àà: ;
ref
àà; >
na
àà? A
,
ààA B 
AtomicSafetyHandle
ààC U
.
ààU V!
GetTempMemoryHandle
ààV i
(
àài j
)
ààj k
)
ààk l
;
ààl m

Initialize
ää 
(
ää 
out
ää 
this
ää 
,
ää  
na
ää! #
)
ää# $
;
ää$ %
}
ãã 	
public
çç 
NativeArray
çç 
<
çç 
byte
çç 
>
çç  
AsNativeArray
çç! .
(
çç. /
)
çç/ 0
{
éé 	
var
èè 
na
èè 
=
èè &
NativeArrayUnsafeUtility
èè -
.
èè- ..
 ConvertExistingDataToNativeArray
èè. N
<
èèN O
byte
èèO S
>
èèS T
(
èèT U
m_Data
èèU [
.
èè[ \
buffer
èè\ b
,
èèb c
Length
èèd j
,
èèj k
	Allocator
èèl u
.
èèu v
Invalid
èèv }
)
èè} ~
;
èè~ &
NativeArrayUnsafeUtility
ëë $
.
ëë$ %#
SetAtomicSafetyHandle
ëë% :
(
ëë: ;
ref
ëë; >
na
ëë? A
,
ëëA B
m_Safety
ëëC K
)
ëëK L
;
ëëL M
return
ìì 
na
ìì 
;
ìì 
}
îî 	
private
ññ 
static
ññ 
void
ññ 

Initialize
ññ &
(
ññ& '
out
ññ' *
DataStreamWriter
ññ+ ;
self
ññ< @
,
ññ@ A
NativeArray
ññB M
<
ññM N
byte
ññN R
>
ññR S
data
ññT X
)
ññX Y
{
óó 	
self
òò 
.
òò 
m_SendHandleData
òò !
=
òò" #
IntPtr
òò$ *
.
òò* +
Zero
òò+ /
;
òò/ 0
self
öö 
.
öö 
m_Data
öö 
.
öö 
capacity
öö  
=
öö! "
data
öö# '
.
öö' (
Length
öö( .
;
öö. /
self
õõ 
.
õõ 
m_Data
õõ 
.
õõ 
length
õõ 
=
õõ  
$num
õõ! "
;
õõ" #
self
úú 
.
úú 
m_Data
úú 
.
úú 
buffer
úú 
=
úú  
(
úú! "
byte
úú" &
*
úú& '
)
úú' (
data
úú( ,
.
úú, -
GetUnsafePtr
úú- 9
(
úú9 :
)
úú: ;
;
úú; <
self
ùù 
.
ùù 
m_Data
ùù 
.
ùù 
	bitBuffer
ùù !
=
ùù" #
$num
ùù$ %
;
ùù% &
self
ûû 
.
ûû 
m_Data
ûû 
.
ûû 
bitIndex
ûû  
=
ûû! "
$num
ûû# $
;
ûû$ %
self
üü 
.
üü 
m_Data
üü 
.
üü 
failedWrites
üü $
=
üü% &
$num
üü' (
;
üü( )
self
¢¢ 
.
¢¢ 
m_Safety
¢¢ 
=
¢¢ &
NativeArrayUnsafeUtility
¢¢ 4
.
¢¢4 5#
GetAtomicSafetyHandle
¢¢5 J
(
¢¢J K
data
¢¢K O
)
¢¢O P
;
¢¢P Q
}
§§ 	
private
¶¶ 
static
¶¶ 
short
¶¶ 
ByteSwap
¶¶ %
(
¶¶% &
short
¶¶& +
val
¶¶, /
)
¶¶/ 0
{
ßß 	
return
®® 
(
®® 
short
®® 
)
®® 
(
®® 
(
®® 
(
®® 
val
®®  
&
®®! "
$num
®®# '
)
®®' (
<<
®®) +
$num
®®, -
)
®®- .
|
®®/ 0
(
®®1 2
(
®®2 3
val
®®3 6
>>
®®7 9
$num
®®: ;
)
®®; <
&
®®= >
$num
®®? C
)
®®C D
)
®®D E
;
®®E F
}
©© 	
private
´´ 
static
´´ 
int
´´ 
ByteSwap
´´ #
(
´´# $
int
´´$ '
val
´´( +
)
´´+ ,
{
¨¨ 	
return
≠≠ 
(
≠≠ 
int
≠≠ 
)
≠≠ 
(
≠≠ 
(
≠≠ 
(
≠≠ 
val
≠≠ 
&
≠≠  
$num
≠≠! %
)
≠≠% &
<<
≠≠' )
$num
≠≠* ,
)
≠≠, -
|
≠≠. /
(
≠≠0 1
(
≠≠1 2
val
≠≠2 5
&
≠≠6 7
$num
≠≠8 >
)
≠≠> ?
<<
≠≠@ B
$num
≠≠C D
)
≠≠D E
|
≠≠F G
(
≠≠H I
(
≠≠I J
val
≠≠J M
>>
≠≠N P
$num
≠≠Q R
)
≠≠R S
&
≠≠T U
$num
≠≠V \
)
≠≠\ ]
|
≠≠^ _
(
≠≠` a
(
≠≠a b
val
≠≠b e
>>
≠≠f h
$num
≠≠i k
)
≠≠k l
&
≠≠m n
$num
≠≠o s
)
≠≠s t
)
≠≠t u
;
≠≠u v
}
ÆÆ 	
public
¥¥ 
bool
¥¥ 
	IsCreated
¥¥ 
{
µµ 	
get
∂∂ 
{
∂∂ 
return
∂∂ 
m_Data
∂∂ 
.
∂∂  
buffer
∂∂  &
!=
∂∂' )
null
∂∂* .
;
∂∂. /
}
∂∂0 1
}
∑∑ 	
public
ππ 
bool
ππ 
HasFailedWrites
ππ #
=>
ππ$ &
m_Data
ππ' -
.
ππ- .
failedWrites
ππ. :
>
ππ; <
$num
ππ= >
;
ππ> ?
public
øø 
int
øø 
Capacity
øø 
{
¿¿ 	
get
¡¡ 
{
¬¬ 
	CheckRead
√√ 
(
√√ 
)
√√ 
;
√√ 
return
ƒƒ 
m_Data
ƒƒ 
.
ƒƒ 
capacity
ƒƒ &
;
ƒƒ& '
}
≈≈ 
}
∆∆ 	
public
ÀÀ 
int
ÀÀ 
Length
ÀÀ 
{
ÃÃ 	
get
ÕÕ 
{
ŒŒ 
	CheckRead
œœ 
(
œœ 
)
œœ 
;
œœ 
SyncBitData
–– 
(
–– 
)
–– 
;
–– 
return
—— 
m_Data
—— 
.
—— 
length
—— $
+
——% &
(
——' (
(
——( )
m_Data
——) /
.
——/ 0
bitIndex
——0 8
+
——9 :
$num
——; <
)
——< =
>>
——> @
$num
——A B
)
——B C
;
——C D
}
““ 
}
”” 	
public
◊◊ 
int
◊◊ 
LengthInBits
◊◊ 
{
ÿÿ 	
get
ŸŸ 
{
⁄⁄ 
	CheckRead
€€ 
(
€€ 
)
€€ 
;
€€ 
SyncBitData
‹‹ 
(
‹‹ 
)
‹‹ 
;
‹‹ 
return
›› 
m_Data
›› 
.
›› 
length
›› $
*
››% &
$num
››' (
+
››) *
m_Data
››+ 1
.
››1 2
bitIndex
››2 :
;
››: ;
}
ﬁﬁ 
}
ﬂﬂ 	
private
·· 
void
·· 
SyncBitData
··  
(
··  !
)
··! "
{
‚‚ 	
var
„„ 
bitIndex
„„ 
=
„„ 
m_Data
„„ !
.
„„! "
bitIndex
„„" *
;
„„* +
if
‰‰ 
(
‰‰ 
bitIndex
‰‰ 
<=
‰‰ 
$num
‰‰ 
)
‰‰ 
return
ÂÂ 
;
ÂÂ 

CheckWrite
ÊÊ 
(
ÊÊ 
)
ÊÊ 
;
ÊÊ 
var
ËË 
	bitBuffer
ËË 
=
ËË 
m_Data
ËË "
.
ËË" #
	bitBuffer
ËË# ,
;
ËË, -
int
ÈÈ 
offset
ÈÈ 
=
ÈÈ 
$num
ÈÈ 
;
ÈÈ 
while
ÍÍ 
(
ÍÍ 
bitIndex
ÍÍ 
>
ÍÍ 
$num
ÍÍ 
)
ÍÍ  
{
ÎÎ 
m_Data
ÏÏ 
.
ÏÏ 
buffer
ÏÏ 
[
ÏÏ 
m_Data
ÏÏ $
.
ÏÏ$ %
length
ÏÏ% +
+
ÏÏ, -
offset
ÏÏ. 4
]
ÏÏ4 5
=
ÏÏ6 7
(
ÏÏ8 9
byte
ÏÏ9 =
)
ÏÏ= >
	bitBuffer
ÏÏ> G
;
ÏÏG H
bitIndex
ÌÌ 
-=
ÌÌ 
$num
ÌÌ 
;
ÌÌ 
	bitBuffer
ÓÓ 
>>=
ÓÓ 
$num
ÓÓ 
;
ÓÓ  
++
ÔÔ 
offset
ÔÔ 
;
ÔÔ 
}
 
}
ÒÒ 	
public
ÛÛ 
void
ÛÛ 
Flush
ÛÛ 
(
ÛÛ 
)
ÛÛ 
{
ÙÙ 	
while
ıı 
(
ıı 
m_Data
ıı 
.
ıı 
bitIndex
ıı "
>
ıı# $
$num
ıı% &
)
ıı& '
{
ˆˆ 
m_Data
˜˜ 
.
˜˜ 
buffer
˜˜ 
[
˜˜ 
m_Data
˜˜ $
.
˜˜$ %
length
˜˜% +
++
˜˜+ -
]
˜˜- .
=
˜˜/ 0
(
˜˜1 2
byte
˜˜2 6
)
˜˜6 7
m_Data
˜˜7 =
.
˜˜= >
	bitBuffer
˜˜> G
;
˜˜G H
m_Data
¯¯ 
.
¯¯ 
bitIndex
¯¯ 
-=
¯¯  "
$num
¯¯# $
;
¯¯$ %
m_Data
˘˘ 
.
˘˘ 
	bitBuffer
˘˘  
>>=
˘˘! $
$num
˘˘% &
;
˘˘& '
}
˙˙ 
m_Data
¸¸ 
.
¸¸ 
bitIndex
¸¸ 
=
¸¸ 
$num
¸¸ 
;
¸¸  
}
˝˝ 	
public
ˇˇ 
bool
ˇˇ 

WriteBytes
ˇˇ 
(
ˇˇ 
byte
ˇˇ #
*
ˇˇ# $
data
ˇˇ% )
,
ˇˇ) *
int
ˇˇ+ .
bytes
ˇˇ/ 4
)
ˇˇ4 5
{
ÄÄ 	

CheckWrite
ÅÅ 
(
ÅÅ 
)
ÅÅ 
;
ÅÅ 
if
ÉÉ 
(
ÉÉ 
m_Data
ÉÉ 
.
ÉÉ 
length
ÉÉ 
+
ÉÉ 
(
ÉÉ  !
(
ÉÉ! "
m_Data
ÉÉ" (
.
ÉÉ( )
bitIndex
ÉÉ) 1
+
ÉÉ2 3
$num
ÉÉ4 5
)
ÉÉ5 6
>>
ÉÉ7 9
$num
ÉÉ: ;
)
ÉÉ; <
+
ÉÉ= >
bytes
ÉÉ? D
>
ÉÉE F
m_Data
ÉÉG M
.
ÉÉM N
capacity
ÉÉN V
)
ÉÉV W
{
ÑÑ 
++
ÖÖ 
m_Data
ÖÖ 
.
ÖÖ 
failedWrites
ÖÖ %
;
ÖÖ% &
return
ÜÜ 
false
ÜÜ 
;
ÜÜ 
}
áá 
Flush
àà 
(
àà 
)
àà 
;
àà 
UnsafeUtility
ââ 
.
ââ 
MemCpy
ââ  
(
ââ  !
m_Data
ââ! '
.
ââ' (
buffer
ââ( .
+
ââ/ 0
m_Data
ââ1 7
.
ââ7 8
length
ââ8 >
,
ââ> ?
data
ââ@ D
,
ââD E
bytes
ââF K
)
ââK L
;
ââL M
m_Data
ää 
.
ää 
length
ää 
+=
ää 
bytes
ää "
;
ää" #
return
ãã 
true
ãã 
;
ãã 
}
åå 	
public
éé 
bool
éé 
	WriteByte
éé 
(
éé 
byte
éé "
value
éé# (
)
éé( )
{
èè 	
return
êê 

WriteBytes
êê 
(
êê 
(
êê 
byte
êê #
*
êê# $
)
êê$ %
&
êê% &
value
êê& +
,
êê+ ,
sizeof
êê- 3
(
êê3 4
byte
êê4 8
)
êê8 9
)
êê9 :
;
êê: ;
}
ëë 	
public
óó 
bool
óó 

WriteBytes
óó 
(
óó 
NativeArray
óó *
<
óó* +
byte
óó+ /
>
óó/ 0
value
óó1 6
)
óó6 7
{
òò 	
return
ôô 

WriteBytes
ôô 
(
ôô 
(
ôô 
byte
ôô #
*
ôô# $
)
ôô$ %
value
ôô% *
.
ôô* +"
GetUnsafeReadOnlyPtr
ôô+ ?
(
ôô? @
)
ôô@ A
,
ôôA B
value
ôôC H
.
ôôH I
Length
ôôI O
)
ôôO P
;
ôôP Q
}
öö 	
public
úú 
bool
úú 

WriteShort
úú 
(
úú 
short
úú $
value
úú% *
)
úú* +
{
ùù 	
return
ûû 

WriteBytes
ûû 
(
ûû 
(
ûû 
byte
ûû #
*
ûû# $
)
ûû$ %
&
ûû% &
value
ûû& +
,
ûû+ ,
sizeof
ûû- 3
(
ûû3 4
short
ûû4 9
)
ûû9 :
)
ûû: ;
;
ûû; <
}
üü 	
public
°° 
bool
°° 
WriteUShort
°° 
(
°°  
ushort
°°  &
value
°°' ,
)
°°, -
{
¢¢ 	
return
££ 

WriteBytes
££ 
(
££ 
(
££ 
byte
££ #
*
££# $
)
££$ %
&
££% &
value
££& +
,
££+ ,
sizeof
££- 3
(
££3 4
ushort
££4 :
)
££: ;
)
££; <
;
££< =
}
§§ 	
public
¶¶ 
bool
¶¶ 
WriteInt
¶¶ 
(
¶¶ 
int
¶¶  
value
¶¶! &
)
¶¶& '
{
ßß 	
return
®® 

WriteBytes
®® 
(
®® 
(
®® 
byte
®® #
*
®®# $
)
®®$ %
&
®®% &
value
®®& +
,
®®+ ,
sizeof
®®- 3
(
®®3 4
int
®®4 7
)
®®7 8
)
®®8 9
;
®®9 :
}
©© 	
public
´´ 
bool
´´ 
	WriteUInt
´´ 
(
´´ 
uint
´´ "
value
´´# (
)
´´( )
{
¨¨ 	
return
≠≠ 

WriteBytes
≠≠ 
(
≠≠ 
(
≠≠ 
byte
≠≠ #
*
≠≠# $
)
≠≠$ %
&
≠≠% &
value
≠≠& +
,
≠≠+ ,
sizeof
≠≠- 3
(
≠≠3 4
uint
≠≠4 8
)
≠≠8 9
)
≠≠9 :
;
≠≠: ;
}
ÆÆ 	
public
∞∞ 
bool
∞∞ 
	WriteLong
∞∞ 
(
∞∞ 
long
∞∞ "
value
∞∞# (
)
∞∞( )
{
±± 	
return
≤≤ 

WriteBytes
≤≤ 
(
≤≤ 
(
≤≤ 
byte
≤≤ #
*
≤≤# $
)
≤≤$ %
&
≤≤% &
value
≤≤& +
,
≤≤+ ,
sizeof
≤≤- 3
(
≤≤3 4
long
≤≤4 8
)
≤≤8 9
)
≤≤9 :
;
≤≤: ;
}
≥≥ 	
public
µµ 
bool
µµ 

WriteULong
µµ 
(
µµ 
ulong
µµ $
value
µµ% *
)
µµ* +
{
∂∂ 	
return
∑∑ 

WriteBytes
∑∑ 
(
∑∑ 
(
∑∑ 
byte
∑∑ #
*
∑∑# $
)
∑∑$ %
&
∑∑% &
value
∑∑& +
,
∑∑+ ,
sizeof
∑∑- 3
(
∑∑3 4
ulong
∑∑4 9
)
∑∑9 :
)
∑∑: ;
;
∑∑; <
}
∏∏ 	
public
∫∫ 
bool
∫∫ (
WriteShortNetworkByteOrder
∫∫ .
(
∫∫. /
short
∫∫/ 4
value
∫∫5 :
)
∫∫: ;
{
ªª 	
short
ºº 
netValue
ºº 
=
ºº 
IsLittleEndian
ºº +
?
ºº, -
ByteSwap
ºº. 6
(
ºº6 7
value
ºº7 <
)
ºº< =
:
ºº> ?
value
ºº@ E
;
ººE F
return
ΩΩ 

WriteBytes
ΩΩ 
(
ΩΩ 
(
ΩΩ 
byte
ΩΩ #
*
ΩΩ# $
)
ΩΩ$ %
&
ΩΩ% &
netValue
ΩΩ& .
,
ΩΩ. /
sizeof
ΩΩ0 6
(
ΩΩ6 7
short
ΩΩ7 <
)
ΩΩ< =
)
ΩΩ= >
;
ΩΩ> ?
}
ææ 	
public
¿¿ 
bool
¿¿ )
WriteUShortNetworkByteOrder
¿¿ /
(
¿¿/ 0
ushort
¿¿0 6
value
¿¿7 <
)
¿¿< =
{
¡¡ 	
return
¬¬ (
WriteShortNetworkByteOrder
¬¬ -
(
¬¬- .
(
¬¬. /
short
¬¬/ 4
)
¬¬4 5
value
¬¬5 :
)
¬¬: ;
;
¬¬; <
}
√√ 	
public
≈≈ 
bool
≈≈ &
WriteIntNetworkByteOrder
≈≈ ,
(
≈≈, -
int
≈≈- 0
value
≈≈1 6
)
≈≈6 7
{
∆∆ 	
int
«« 
netValue
«« 
=
«« 
IsLittleEndian
«« )
?
««* +
ByteSwap
««, 4
(
««4 5
value
««5 :
)
««: ;
:
««< =
value
««> C
;
««C D
return
»» 

WriteBytes
»» 
(
»» 
(
»» 
byte
»» #
*
»»# $
)
»»$ %
&
»»% &
netValue
»»& .
,
»». /
sizeof
»»0 6
(
»»6 7
int
»»7 :
)
»»: ;
)
»»; <
;
»»< =
}
…… 	
public
ÀÀ 
bool
ÀÀ '
WriteUIntNetworkByteOrder
ÀÀ -
(
ÀÀ- .
uint
ÀÀ. 2
value
ÀÀ3 8
)
ÀÀ8 9
{
ÃÃ 	
return
ÕÕ &
WriteIntNetworkByteOrder
ÕÕ +
(
ÕÕ+ ,
(
ÕÕ, -
int
ÕÕ- 0
)
ÕÕ0 1
value
ÕÕ1 6
)
ÕÕ6 7
;
ÕÕ7 8
}
ŒŒ 	
public
–– 
bool
–– 

WriteFloat
–– 
(
–– 
float
–– $
value
––% *
)
––* +
{
—— 	
	UIntFloat
““ 
uf
““ 
=
““ 
new
““ 
	UIntFloat
““ (
(
““( )
)
““) *
;
““* +
uf
”” 
.
”” 

floatValue
”” 
=
”” 
value
”” !
;
””! "
return
‘‘ 
WriteInt
‘‘ 
(
‘‘ 
(
‘‘ 
int
‘‘  
)
‘‘  !
uf
‘‘! #
.
‘‘# $
intValue
‘‘$ ,
)
‘‘, -
;
‘‘- .
}
’’ 	
private
◊◊ 
void
◊◊ 
	FlushBits
◊◊ 
(
◊◊ 
)
◊◊  
{
ÿÿ 	
while
ŸŸ 
(
ŸŸ 
m_Data
ŸŸ 
.
ŸŸ 
bitIndex
ŸŸ "
>=
ŸŸ# %
$num
ŸŸ& '
)
ŸŸ' (
{
⁄⁄ 
m_Data
€€ 
.
€€ 
buffer
€€ 
[
€€ 
m_Data
€€ $
.
€€$ %
length
€€% +
++
€€+ -
]
€€- .
=
€€/ 0
(
€€1 2
byte
€€2 6
)
€€6 7
m_Data
€€7 =
.
€€= >
	bitBuffer
€€> G
;
€€G H
m_Data
‹‹ 
.
‹‹ 
bitIndex
‹‹ 
-=
‹‹  "
$num
‹‹# $
;
‹‹$ %
m_Data
›› 
.
›› 
	bitBuffer
››  
>>=
››! $
$num
››% &
;
››& '
}
ﬁﬁ 
}
ﬂﬂ 	
void
·· "
WriteRawBitsInternal
·· !
(
··! "
uint
··" &
value
··' ,
,
··, -
int
··. 1
numbits
··2 9
)
··9 :
{
‚‚ 	
	CheckBits
„„ 
(
„„ 
value
„„ 
,
„„ 
numbits
„„ $
)
„„$ %
;
„„% &
m_Data
ÂÂ 
.
ÂÂ 
	bitBuffer
ÂÂ 
|=
ÂÂ 
(
ÂÂ  !
(
ÂÂ! "
ulong
ÂÂ" '
)
ÂÂ' (
value
ÂÂ( -
<<
ÂÂ. 0
m_Data
ÂÂ1 7
.
ÂÂ7 8
bitIndex
ÂÂ8 @
)
ÂÂ@ A
;
ÂÂA B
m_Data
ÊÊ 
.
ÊÊ 
bitIndex
ÊÊ 
+=
ÊÊ 
numbits
ÊÊ &
;
ÊÊ& '
}
ÁÁ 	
public
ÈÈ 
bool
ÈÈ 
WriteRawBits
ÈÈ  
(
ÈÈ  !
uint
ÈÈ! %
value
ÈÈ& +
,
ÈÈ+ ,
int
ÈÈ- 0
numbits
ÈÈ1 8
)
ÈÈ8 9
{
ÍÍ 	

CheckWrite
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
if
ÌÌ 
(
ÌÌ 
m_Data
ÌÌ 
.
ÌÌ 
length
ÌÌ 
+
ÌÌ 
(
ÌÌ  !
(
ÌÌ! "
m_Data
ÌÌ" (
.
ÌÌ( )
bitIndex
ÌÌ) 1
+
ÌÌ2 3
numbits
ÌÌ4 ;
+
ÌÌ< =
$num
ÌÌ> ?
)
ÌÌ? @
>>
ÌÌA C
$num
ÌÌD E
)
ÌÌE F
>
ÌÌG H
m_Data
ÌÌI O
.
ÌÌO P
capacity
ÌÌP X
)
ÌÌX Y
{
ÓÓ 
++
ÔÔ 
m_Data
ÔÔ 
.
ÔÔ 
failedWrites
ÔÔ %
;
ÔÔ% &
return
 
false
 
;
 
}
ÒÒ "
WriteRawBitsInternal
ÚÚ  
(
ÚÚ  !
value
ÚÚ! &
,
ÚÚ& '
numbits
ÚÚ( /
)
ÚÚ/ 0
;
ÚÚ0 1
	FlushBits
ÛÛ 
(
ÛÛ 
)
ÛÛ 
;
ÛÛ 
return
ÙÙ 
true
ÙÙ 
;
ÙÙ 
}
ıı 	
public
˜˜ 
bool
˜˜ 
WritePackedUInt
˜˜ #
(
˜˜# $
uint
˜˜$ (
value
˜˜) .
,
˜˜. /%
NetworkCompressionModel
˜˜0 G
model
˜˜H M
)
˜˜M N
{
¯¯ 	

CheckWrite
˘˘ 
(
˘˘ 
)
˘˘ 
;
˘˘ 
int
˙˙ 
bucket
˙˙ 
=
˙˙ 
model
˙˙ 
.
˙˙ 
CalculateBucket
˙˙ .
(
˙˙. /
value
˙˙/ 4
)
˙˙4 5
;
˙˙5 6
uint
˚˚ 
offset
˚˚ 
=
˚˚ 
model
˚˚ 
.
˚˚  
bucketOffsets
˚˚  -
[
˚˚- .
bucket
˚˚. 4
]
˚˚4 5
;
˚˚5 6
int
¸¸ 
bits
¸¸ 
=
¸¸ 
model
¸¸ 
.
¸¸ 
bucketSizes
¸¸ (
[
¸¸( )
bucket
¸¸) /
]
¸¸/ 0
;
¸¸0 1
ushort
˝˝ 
encodeEntry
˝˝ 
=
˝˝  
model
˝˝! &
.
˝˝& '
encodeTable
˝˝' 2
[
˝˝2 3
bucket
˝˝3 9
]
˝˝9 :
;
˝˝: ;
if
ˇˇ 
(
ˇˇ 
m_Data
ˇˇ 
.
ˇˇ 
length
ˇˇ 
+
ˇˇ 
(
ˇˇ  !
(
ˇˇ! "
m_Data
ˇˇ" (
.
ˇˇ( )
bitIndex
ˇˇ) 1
+
ˇˇ2 3
(
ˇˇ4 5
encodeEntry
ˇˇ5 @
&
ˇˇA B
$num
ˇˇC G
)
ˇˇG H
+
ˇˇI J
bits
ˇˇK O
+
ˇˇP Q
$num
ˇˇR S
)
ˇˇS T
>>
ˇˇU W
$num
ˇˇX Y
)
ˇˇY Z
>
ˇˇ[ \
m_Data
ˇˇ] c
.
ˇˇc d
capacity
ˇˇd l
)
ˇˇl m
{
ÄÄ 
++
ÅÅ 
m_Data
ÅÅ 
.
ÅÅ 
failedWrites
ÅÅ %
;
ÅÅ% &
return
ÇÇ 
false
ÇÇ 
;
ÇÇ 
}
ÉÉ "
WriteRawBitsInternal
ÑÑ  
(
ÑÑ  !
(
ÑÑ! "
uint
ÑÑ" &
)
ÑÑ& '
(
ÑÑ' (
encodeEntry
ÑÑ( 3
>>
ÑÑ4 6
$num
ÑÑ7 8
)
ÑÑ8 9
,
ÑÑ9 :
encodeEntry
ÑÑ; F
&
ÑÑG H
$num
ÑÑI M
)
ÑÑM N
;
ÑÑN O"
WriteRawBitsInternal
ÖÖ  
(
ÖÖ  !
value
ÖÖ! &
-
ÖÖ' (
offset
ÖÖ) /
,
ÖÖ/ 0
bits
ÖÖ1 5
)
ÖÖ5 6
;
ÖÖ6 7
	FlushBits
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
return
áá 
true
áá 
;
áá 
}
àà 	
public
ää 
bool
ää 
WritePackedULong
ää $
(
ää$ %
ulong
ää% *
value
ää+ 0
,
ää0 1%
NetworkCompressionModel
ää2 I
model
ääJ O
)
ääO P
{
ãã 	
return
åå 
WritePackedUInt
åå "
(
åå" #
(
åå# $
uint
åå$ (
)
åå( )
(
åå) *
value
åå* /
>>
åå0 2
$num
åå3 5
)
åå5 6
,
åå6 7
model
åå8 =
)
åå= >
&
åå? @
WritePackedUInt
çç 
(
çç  
(
çç  !
uint
çç! %
)
çç% &
(
çç& '
value
çç' ,
&
çç- .
$num
çç/ 9
)
çç9 :
,
çç: ;
model
çç< A
)
ççA B
;
ççB C
}
éé 	
public
êê 
bool
êê 
WritePackedInt
êê "
(
êê" #
int
êê# &
value
êê' ,
,
êê, -%
NetworkCompressionModel
êê. E
model
êêF K
)
êêK L
{
ëë 	
uint
íí 
interleaved
íí 
=
íí 
(
íí  
uint
íí  $
)
íí$ %
(
íí% &
(
íí& '
value
íí' ,
>>
íí- /
$num
íí0 2
)
íí2 3
^
íí4 5
(
íí6 7
value
íí7 <
<<
íí= ?
$num
íí@ A
)
ííA B
)
ííB C
;
ííC D
return
ìì 
WritePackedUInt
ìì "
(
ìì" #
interleaved
ìì# .
,
ìì. /
model
ìì0 5
)
ìì5 6
;
ìì6 7
}
îî 	
public
ññ 
bool
ññ 
WritePackedLong
ññ #
(
ññ# $
long
ññ$ (
value
ññ) .
,
ññ. /%
NetworkCompressionModel
ññ0 G
model
ññH M
)
ññM N
{
óó 	
ulong
òò 
interleaved
òò 
=
òò 
(
òò  !
ulong
òò! &
)
òò& '
(
òò' (
(
òò( )
value
òò) .
>>
òò/ 1
$num
òò2 4
)
òò4 5
^
òò6 7
(
òò8 9
value
òò9 >
<<
òò? A
$num
òòB C
)
òòC D
)
òòD E
;
òòE F
return
ôô 
WritePackedULong
ôô #
(
ôô# $
interleaved
ôô$ /
,
ôô/ 0
model
ôô1 6
)
ôô6 7
;
ôô7 8
}
öö 	
public
úú 
bool
úú 
WritePackedFloat
úú $
(
úú$ %
float
úú% *
value
úú+ 0
,
úú0 1%
NetworkCompressionModel
úú2 I
model
úúJ O
)
úúO P
{
ùù 	
return
ûû #
WritePackedFloatDelta
ûû (
(
ûû( )
value
ûû) .
,
ûû. /
$num
ûû0 1
,
ûû1 2
model
ûû3 8
)
ûû8 9
;
ûû9 :
}
üü 	
public
°° 
bool
°° "
WritePackedUIntDelta
°° (
(
°°( )
uint
°°) -
value
°°. 3
,
°°3 4
uint
°°5 9
baseline
°°: B
,
°°B C%
NetworkCompressionModel
°°D [
model
°°\ a
)
°°a b
{
¢¢ 	
int
££ 
diff
££ 
=
££ 
(
££ 
int
££ 
)
££ 
(
££ 
baseline
££ %
-
££& '
value
££( -
)
££- .
;
££. /
return
§§ 
WritePackedInt
§§ !
(
§§! "
diff
§§" &
,
§§& '
model
§§( -
)
§§- .
;
§§. /
}
•• 	
public
ßß 
bool
ßß !
WritePackedIntDelta
ßß '
(
ßß' (
int
ßß( +
value
ßß, 1
,
ßß1 2
int
ßß3 6
baseline
ßß7 ?
,
ßß? @%
NetworkCompressionModel
ßßA X
model
ßßY ^
)
ßß^ _
{
®® 	
int
©© 
diff
©© 
=
©© 
(
©© 
int
©© 
)
©© 
(
©© 
baseline
©© %
-
©©& '
value
©©( -
)
©©- .
;
©©. /
return
™™ 
WritePackedInt
™™ !
(
™™! "
diff
™™" &
,
™™& '
model
™™( -
)
™™- .
;
™™. /
}
´´ 	
public
≠≠ 
bool
≠≠ "
WritePackedLongDelta
≠≠ (
(
≠≠( )
long
≠≠) -
value
≠≠. 3
,
≠≠3 4
long
≠≠5 9
baseline
≠≠: B
,
≠≠B C%
NetworkCompressionModel
≠≠D [
model
≠≠\ a
)
≠≠a b
{
ÆÆ 	
long
ØØ 
diff
ØØ 
=
ØØ 
(
ØØ 
long
ØØ 
)
ØØ 
(
ØØ 
baseline
ØØ '
-
ØØ( )
value
ØØ* /
)
ØØ/ 0
;
ØØ0 1
return
∞∞ 
WritePackedLong
∞∞ "
(
∞∞" #
diff
∞∞# '
,
∞∞' (
model
∞∞) .
)
∞∞. /
;
∞∞/ 0
}
±± 	
public
≥≥ 
bool
≥≥ #
WritePackedULongDelta
≥≥ )
(
≥≥) *
ulong
≥≥* /
value
≥≥0 5
,
≥≥5 6
ulong
≥≥7 <
baseline
≥≥= E
,
≥≥E F%
NetworkCompressionModel
≥≥G ^
model
≥≥_ d
)
≥≥d e
{
¥¥ 	
long
µµ 
diff
µµ 
=
µµ 
(
µµ 
long
µµ 
)
µµ 
(
µµ 
baseline
µµ '
-
µµ( )
value
µµ* /
)
µµ/ 0
;
µµ0 1
return
∂∂ 
WritePackedLong
∂∂ "
(
∂∂" #
diff
∂∂# '
,
∂∂' (
model
∂∂) .
)
∂∂. /
;
∂∂/ 0
}
∑∑ 	
public
ππ 
bool
ππ #
WritePackedFloatDelta
ππ )
(
ππ) *
float
ππ* /
value
ππ0 5
,
ππ5 6
float
ππ7 <
baseline
ππ= E
,
ππE F%
NetworkCompressionModel
ππG ^
model
ππ_ d
)
ππd e
{
∫∫ 	

CheckWrite
ªª 
(
ªª 
)
ªª 
;
ªª 
var
ºº 
bits
ºº 
=
ºº 
$num
ºº 
;
ºº 
if
ΩΩ 
(
ΩΩ 
value
ΩΩ 
!=
ΩΩ 
baseline
ΩΩ !
)
ΩΩ! "
bits
ææ 
=
ææ 
$num
ææ 
;
ææ 
if
øø 
(
øø 
m_Data
øø 
.
øø 
length
øø 
+
øø 
(
øø  !
(
øø! "
m_Data
øø" (
.
øø( )
bitIndex
øø) 1
+
øø2 3
$num
øø4 5
+
øø6 7
bits
øø8 <
+
øø= >
$num
øø? @
)
øø@ A
>>
øøB D
$num
øøE F
)
øøF G
>
øøH I
m_Data
øøJ P
.
øøP Q
capacity
øøQ Y
)
øøY Z
{
¿¿ 
++
¡¡ 
m_Data
¡¡ 
.
¡¡ 
failedWrites
¡¡ %
;
¡¡% &
return
¬¬ 
false
¬¬ 
;
¬¬ 
}
√√ 
if
ƒƒ 
(
ƒƒ 
bits
ƒƒ 
==
ƒƒ 
$num
ƒƒ 
)
ƒƒ "
WriteRawBitsInternal
≈≈ $
(
≈≈$ %
$num
≈≈% &
,
≈≈& '
$num
≈≈( )
)
≈≈) *
;
≈≈* +
else
∆∆ 
{
«« "
WriteRawBitsInternal
»» $
(
»»$ %
$num
»»% &
,
»»& '
$num
»»( )
)
»») *
;
»»* +
	UIntFloat
…… 
uf
…… 
=
…… 
new
…… "
	UIntFloat
……# ,
(
……, -
)
……- .
;
……. /
uf
   
.
   

floatValue
   
=
   
value
    %
;
  % &"
WriteRawBitsInternal
ÀÀ $
(
ÀÀ$ %
uf
ÀÀ% '
.
ÀÀ' (
intValue
ÀÀ( 0
,
ÀÀ0 1
bits
ÀÀ2 6
)
ÀÀ6 7
;
ÀÀ7 8
}
ÃÃ 
	FlushBits
ÕÕ 
(
ÕÕ 
)
ÕÕ 
;
ÕÕ 
return
ŒŒ 
true
ŒŒ 
;
ŒŒ 
}
œœ 	
public
—— 
unsafe
—— 
bool
——  
WriteFixedString32
—— -
(
——- . 
FixedString32Bytes
——. @
str
——A D
)
——D E
{
““ 	
int
”” 
length
”” 
=
”” 
(
”” 
int
”” 
)
”” 
*
”” 
(
””  
(
””  !
ushort
””! '
*
””' (
)
””( )
&
””) *
str
””* -
)
””- .
+
””/ 0
$num
””1 2
;
””2 3
byte
‘‘ 
*
‘‘ 
data
‘‘ 
=
‘‘ 
(
‘‘ 
(
‘‘ 
byte
‘‘ 
*
‘‘  
)
‘‘  !
&
‘‘! "
str
‘‘" %
)
‘‘% &
;
‘‘& '
return
’’ 

WriteBytes
’’ 
(
’’ 
data
’’ "
,
’’" #
length
’’$ *
)
’’* +
;
’’+ ,
}
÷÷ 	
public
◊◊ 
unsafe
◊◊ 
bool
◊◊  
WriteFixedString64
◊◊ -
(
◊◊- . 
FixedString64Bytes
◊◊. @
str
◊◊A D
)
◊◊D E
{
ÿÿ 	
int
ŸŸ 
length
ŸŸ 
=
ŸŸ 
(
ŸŸ 
int
ŸŸ 
)
ŸŸ 
*
ŸŸ 
(
ŸŸ  
(
ŸŸ  !
ushort
ŸŸ! '
*
ŸŸ' (
)
ŸŸ( )
&
ŸŸ) *
str
ŸŸ* -
)
ŸŸ- .
+
ŸŸ/ 0
$num
ŸŸ1 2
;
ŸŸ2 3
byte
⁄⁄ 
*
⁄⁄ 
data
⁄⁄ 
=
⁄⁄ 
(
⁄⁄ 
(
⁄⁄ 
byte
⁄⁄ 
*
⁄⁄  
)
⁄⁄  !
&
⁄⁄! "
str
⁄⁄" %
)
⁄⁄% &
;
⁄⁄& '
return
€€ 

WriteBytes
€€ 
(
€€ 
data
€€ "
,
€€" #
length
€€$ *
)
€€* +
;
€€+ ,
}
‹‹ 	
public
›› 
unsafe
›› 
bool
›› !
WriteFixedString128
›› .
(
››. /!
FixedString128Bytes
››/ B
str
››C F
)
››F G
{
ﬁﬁ 	
int
ﬂﬂ 
length
ﬂﬂ 
=
ﬂﬂ 
(
ﬂﬂ 
int
ﬂﬂ 
)
ﬂﬂ 
*
ﬂﬂ 
(
ﬂﬂ  
(
ﬂﬂ  !
ushort
ﬂﬂ! '
*
ﬂﬂ' (
)
ﬂﬂ( )
&
ﬂﬂ) *
str
ﬂﬂ* -
)
ﬂﬂ- .
+
ﬂﬂ/ 0
$num
ﬂﬂ1 2
;
ﬂﬂ2 3
byte
‡‡ 
*
‡‡ 
data
‡‡ 
=
‡‡ 
(
‡‡ 
(
‡‡ 
byte
‡‡ 
*
‡‡  
)
‡‡  !
&
‡‡! "
str
‡‡" %
)
‡‡% &
;
‡‡& '
return
·· 

WriteBytes
·· 
(
·· 
data
·· "
,
··" #
length
··$ *
)
··* +
;
··+ ,
}
‚‚ 	
public
„„ 
unsafe
„„ 
bool
„„ !
WriteFixedString512
„„ .
(
„„. /!
FixedString512Bytes
„„/ B
str
„„C F
)
„„F G
{
‰‰ 	
int
ÂÂ 
length
ÂÂ 
=
ÂÂ 
(
ÂÂ 
int
ÂÂ 
)
ÂÂ 
*
ÂÂ 
(
ÂÂ  
(
ÂÂ  !
ushort
ÂÂ! '
*
ÂÂ' (
)
ÂÂ( )
&
ÂÂ) *
str
ÂÂ* -
)
ÂÂ- .
+
ÂÂ/ 0
$num
ÂÂ1 2
;
ÂÂ2 3
byte
ÊÊ 
*
ÊÊ 
data
ÊÊ 
=
ÊÊ 
(
ÊÊ 
(
ÊÊ 
byte
ÊÊ 
*
ÊÊ  
)
ÊÊ  !
&
ÊÊ! "
str
ÊÊ" %
)
ÊÊ% &
;
ÊÊ& '
return
ÁÁ 

WriteBytes
ÁÁ 
(
ÁÁ 
data
ÁÁ "
,
ÁÁ" #
length
ÁÁ$ *
)
ÁÁ* +
;
ÁÁ+ ,
}
ËË 	
public
ÈÈ 
unsafe
ÈÈ 
bool
ÈÈ "
WriteFixedString4096
ÈÈ /
(
ÈÈ/ 0"
FixedString4096Bytes
ÈÈ0 D
str
ÈÈE H
)
ÈÈH I
{
ÍÍ 	
int
ÎÎ 
length
ÎÎ 
=
ÎÎ 
(
ÎÎ 
int
ÎÎ 
)
ÎÎ 
*
ÎÎ 
(
ÎÎ  
(
ÎÎ  !
ushort
ÎÎ! '
*
ÎÎ' (
)
ÎÎ( )
&
ÎÎ) *
str
ÎÎ* -
)
ÎÎ- .
+
ÎÎ/ 0
$num
ÎÎ1 2
;
ÎÎ2 3
byte
ÏÏ 
*
ÏÏ 
data
ÏÏ 
=
ÏÏ 
(
ÏÏ 
(
ÏÏ 
byte
ÏÏ 
*
ÏÏ  
)
ÏÏ  !
&
ÏÏ! "
str
ÏÏ" %
)
ÏÏ% &
;
ÏÏ& '
return
ÌÌ 

WriteBytes
ÌÌ 
(
ÌÌ 
data
ÌÌ "
,
ÌÌ" #
length
ÌÌ$ *
)
ÌÌ* +
;
ÌÌ+ ,
}
ÓÓ 	
public
 
unsafe
 
bool
 +
WritePackedFixedString32Delta
 8
(
8 9 
FixedString32Bytes
9 K
str
L O
,
O P 
FixedString32Bytes
Q c
baseline
d l
,
l m&
NetworkCompressionModeln Ö
modelÜ ã
)ã å
{
ÒÒ 	
ushort
ÚÚ 
length
ÚÚ 
=
ÚÚ 
*
ÚÚ 
(
ÚÚ 
(
ÚÚ 
ushort
ÚÚ %
*
ÚÚ% &
)
ÚÚ& '
&
ÚÚ' (
str
ÚÚ( +
)
ÚÚ+ ,
;
ÚÚ, -
byte
ÛÛ 
*
ÛÛ 
data
ÛÛ 
=
ÛÛ 
(
ÛÛ 
(
ÛÛ 
byte
ÛÛ 
*
ÛÛ  
)
ÛÛ  !
&
ÛÛ! "
str
ÛÛ" %
)
ÛÛ% &
+
ÛÛ' (
$num
ÛÛ) *
;
ÛÛ* +
return
ÙÙ )
WritePackedFixedStringDelta
ÙÙ .
(
ÙÙ. /
data
ÙÙ/ 3
,
ÙÙ3 4
length
ÙÙ5 ;
,
ÙÙ; <
(
ÙÙ= >
(
ÙÙ> ?
byte
ÙÙ? C
*
ÙÙC D
)
ÙÙD E
&
ÙÙE F
baseline
ÙÙF N
)
ÙÙN O
+
ÙÙP Q
$num
ÙÙR S
,
ÙÙS T
*
ÙÙU V
(
ÙÙV W
(
ÙÙW X
ushort
ÙÙX ^
*
ÙÙ^ _
)
ÙÙ_ `
&
ÙÙ` a
baseline
ÙÙa i
)
ÙÙi j
,
ÙÙj k
model
ÙÙl q
)
ÙÙq r
;
ÙÙr s
}
ıı 	
public
ˆˆ 
unsafe
ˆˆ 
bool
ˆˆ +
WritePackedFixedString64Delta
ˆˆ 8
(
ˆˆ8 9 
FixedString64Bytes
ˆˆ9 K
str
ˆˆL O
,
ˆˆO P 
FixedString64Bytes
ˆˆQ c
baseline
ˆˆd l
,
ˆˆl m&
NetworkCompressionModelˆˆn Ö
modelˆˆÜ ã
)ˆˆã å
{
˜˜ 	
ushort
¯¯ 
length
¯¯ 
=
¯¯ 
*
¯¯ 
(
¯¯ 
(
¯¯ 
ushort
¯¯ %
*
¯¯% &
)
¯¯& '
&
¯¯' (
str
¯¯( +
)
¯¯+ ,
;
¯¯, -
byte
˘˘ 
*
˘˘ 
data
˘˘ 
=
˘˘ 
(
˘˘ 
(
˘˘ 
byte
˘˘ 
*
˘˘  
)
˘˘  !
&
˘˘! "
str
˘˘" %
)
˘˘% &
+
˘˘' (
$num
˘˘) *
;
˘˘* +
return
˙˙ )
WritePackedFixedStringDelta
˙˙ .
(
˙˙. /
data
˙˙/ 3
,
˙˙3 4
length
˙˙5 ;
,
˙˙; <
(
˙˙= >
(
˙˙> ?
byte
˙˙? C
*
˙˙C D
)
˙˙D E
&
˙˙E F
baseline
˙˙F N
)
˙˙N O
+
˙˙P Q
$num
˙˙R S
,
˙˙S T
*
˙˙U V
(
˙˙V W
(
˙˙W X
ushort
˙˙X ^
*
˙˙^ _
)
˙˙_ `
&
˙˙` a
baseline
˙˙a i
)
˙˙i j
,
˙˙j k
model
˙˙l q
)
˙˙q r
;
˙˙r s
}
˚˚ 	
public
¸¸ 
unsafe
¸¸ 
bool
¸¸ ,
WritePackedFixedString128Delta
¸¸ 9
(
¸¸9 :!
FixedString128Bytes
¸¸: M
str
¸¸N Q
,
¸¸Q R!
FixedString128Bytes
¸¸S f
baseline
¸¸g o
,
¸¸o p&
NetworkCompressionModel¸¸q à
model¸¸â é
)¸¸é è
{
˝˝ 	
ushort
˛˛ 
length
˛˛ 
=
˛˛ 
*
˛˛ 
(
˛˛ 
(
˛˛ 
ushort
˛˛ %
*
˛˛% &
)
˛˛& '
&
˛˛' (
str
˛˛( +
)
˛˛+ ,
;
˛˛, -
byte
ˇˇ 
*
ˇˇ 
data
ˇˇ 
=
ˇˇ 
(
ˇˇ 
(
ˇˇ 
byte
ˇˇ 
*
ˇˇ  
)
ˇˇ  !
&
ˇˇ! "
str
ˇˇ" %
)
ˇˇ% &
+
ˇˇ' (
$num
ˇˇ) *
;
ˇˇ* +
return
ÄÄ )
WritePackedFixedStringDelta
ÄÄ .
(
ÄÄ. /
data
ÄÄ/ 3
,
ÄÄ3 4
length
ÄÄ5 ;
,
ÄÄ; <
(
ÄÄ= >
(
ÄÄ> ?
byte
ÄÄ? C
*
ÄÄC D
)
ÄÄD E
&
ÄÄE F
baseline
ÄÄF N
)
ÄÄN O
+
ÄÄP Q
$num
ÄÄR S
,
ÄÄS T
*
ÄÄU V
(
ÄÄV W
(
ÄÄW X
ushort
ÄÄX ^
*
ÄÄ^ _
)
ÄÄ_ `
&
ÄÄ` a
baseline
ÄÄa i
)
ÄÄi j
,
ÄÄj k
model
ÄÄl q
)
ÄÄq r
;
ÄÄr s
}
ÅÅ 	
public
ÇÇ 
unsafe
ÇÇ 
bool
ÇÇ ,
WritePackedFixedString512Delta
ÇÇ 9
(
ÇÇ9 :!
FixedString512Bytes
ÇÇ: M
str
ÇÇN Q
,
ÇÇQ R!
FixedString512Bytes
ÇÇS f
baseline
ÇÇg o
,
ÇÇo p&
NetworkCompressionModelÇÇq à
modelÇÇâ é
)ÇÇé è
{
ÉÉ 	
ushort
ÑÑ 
length
ÑÑ 
=
ÑÑ 
*
ÑÑ 
(
ÑÑ 
(
ÑÑ 
ushort
ÑÑ %
*
ÑÑ% &
)
ÑÑ& '
&
ÑÑ' (
str
ÑÑ( +
)
ÑÑ+ ,
;
ÑÑ, -
byte
ÖÖ 
*
ÖÖ 
data
ÖÖ 
=
ÖÖ 
(
ÖÖ 
(
ÖÖ 
byte
ÖÖ 
*
ÖÖ  
)
ÖÖ  !
&
ÖÖ! "
str
ÖÖ" %
)
ÖÖ% &
+
ÖÖ' (
$num
ÖÖ) *
;
ÖÖ* +
return
ÜÜ )
WritePackedFixedStringDelta
ÜÜ .
(
ÜÜ. /
data
ÜÜ/ 3
,
ÜÜ3 4
length
ÜÜ5 ;
,
ÜÜ; <
(
ÜÜ= >
(
ÜÜ> ?
byte
ÜÜ? C
*
ÜÜC D
)
ÜÜD E
&
ÜÜE F
baseline
ÜÜF N
)
ÜÜN O
+
ÜÜP Q
$num
ÜÜR S
,
ÜÜS T
*
ÜÜU V
(
ÜÜV W
(
ÜÜW X
ushort
ÜÜX ^
*
ÜÜ^ _
)
ÜÜ_ `
&
ÜÜ` a
baseline
ÜÜa i
)
ÜÜi j
,
ÜÜj k
model
ÜÜl q
)
ÜÜq r
;
ÜÜr s
}
áá 	
public
àà 
unsafe
àà 
bool
àà -
WritePackedFixedString4096Delta
àà :
(
àà: ;"
FixedString4096Bytes
àà; O
str
ààP S
,
ààS T"
FixedString4096Bytes
ààU i
baseline
ààj r
,
ààr s&
NetworkCompressionModelààt ã
modelààå ë
)ààë í
{
ââ 	
ushort
ää 
length
ää 
=
ää 
*
ää 
(
ää 
(
ää 
ushort
ää %
*
ää% &
)
ää& '
&
ää' (
str
ää( +
)
ää+ ,
;
ää, -
byte
ãã 
*
ãã 
data
ãã 
=
ãã 
(
ãã 
(
ãã 
byte
ãã 
*
ãã  
)
ãã  !
&
ãã! "
str
ãã" %
)
ãã% &
+
ãã' (
$num
ãã) *
;
ãã* +
return
åå )
WritePackedFixedStringDelta
åå .
(
åå. /
data
åå/ 3
,
åå3 4
length
åå5 ;
,
åå; <
(
åå= >
(
åå> ?
byte
åå? C
*
ååC D
)
ååD E
&
ååE F
baseline
ååF N
)
ååN O
+
ååP Q
$num
ååR S
,
ååS T
*
ååU V
(
ååV W
(
ååW X
ushort
ååX ^
*
åå^ _
)
åå_ `
&
åå` a
baseline
ååa i
)
ååi j
,
ååj k
model
åål q
)
ååq r
;
åår s
}
çç 	
private
èè 
unsafe
èè 
bool
èè )
WritePackedFixedStringDelta
èè 7
(
èè7 8
byte
èè8 <
*
èè< =
data
èè> B
,
èèB C
uint
èèD H
length
èèI O
,
èèO P
byte
èèQ U
*
èèU V
baseData
èèW _
,
èè_ `
uint
èèa e

baseLength
èèf p
,
èèp q&
NetworkCompressionModelèèr â
modelèèä è
)èèè ê
{
êê 	
var
ëë 
oldData
ëë 
=
ëë 
m_Data
ëë  
;
ëë  !
if
íí 
(
íí 
!
íí "
WritePackedUIntDelta
íí %
(
íí% &
length
íí& ,
,
íí, -

baseLength
íí. 8
,
íí8 9
model
íí: ?
)
íí? @
)
íí@ A
return
ìì 
false
ìì 
;
ìì 
bool
îî 
didFailWrite
îî 
=
îî 
false
îî  %
;
îî% &
if
ïï 
(
ïï 
length
ïï 
<=
ïï 

baseLength
ïï $
)
ïï$ %
{
ññ 
for
óó 
(
óó 
uint
óó 
i
óó 
=
óó 
$num
óó 
;
óó  
i
óó! "
<
óó# $
length
óó% +
;
óó+ ,
++
óó- /
i
óó/ 0
)
óó0 1
didFailWrite
òò  
|=
òò! #
!
òò$ %"
WritePackedUIntDelta
òò% 9
(
òò9 :
data
òò: >
[
òò> ?
i
òò? @
]
òò@ A
,
òòA B
baseData
òòC K
[
òòK L
i
òòL M
]
òòM N
,
òòN O
model
òòP U
)
òòU V
;
òòV W
}
ôô 
else
öö 
{
õõ 
for
úú 
(
úú 
uint
úú 
i
úú 
=
úú 
$num
úú 
;
úú  
i
úú! "
<
úú# $

baseLength
úú% /
;
úú/ 0
++
úú1 3
i
úú3 4
)
úú4 5
didFailWrite
ùù  
|=
ùù! #
!
ùù$ %"
WritePackedUIntDelta
ùù% 9
(
ùù9 :
data
ùù: >
[
ùù> ?
i
ùù? @
]
ùù@ A
,
ùùA B
baseData
ùùC K
[
ùùK L
i
ùùL M
]
ùùM N
,
ùùN O
model
ùùP U
)
ùùU V
;
ùùV W
for
ûû 
(
ûû 
uint
ûû 
i
ûû 
=
ûû 

baseLength
ûû (
;
ûû( )
i
ûû* +
<
ûû, -
length
ûû. 4
;
ûû4 5
++
ûû6 8
i
ûû8 9
)
ûû9 :
didFailWrite
üü  
|=
üü! #
!
üü$ %
WritePackedUInt
üü% 4
(
üü4 5
data
üü5 9
[
üü9 :
i
üü: ;
]
üü; <
,
üü< =
model
üü> C
)
üüC D
;
üüD E
}
†† 
if
¢¢ 
(
¢¢ 
didFailWrite
¢¢ 
)
¢¢ 
{
££ 
m_Data
§§ 
=
§§ 
oldData
§§  
;
§§  !
++
•• 
m_Data
•• 
.
•• 
failedWrites
•• %
;
••% &
}
¶¶ 
return
ßß 
!
ßß 
didFailWrite
ßß  
;
ßß  !
}
®® 	
public
≠≠ 
void
≠≠ 
Clear
≠≠ 
(
≠≠ 
)
≠≠ 
{
ÆÆ 	
m_Data
ØØ 
.
ØØ 
length
ØØ 
=
ØØ 
$num
ØØ 
;
ØØ 
m_Data
∞∞ 
.
∞∞ 
bitIndex
∞∞ 
=
∞∞ 
$num
∞∞ 
;
∞∞  
m_Data
±± 
.
±± 
	bitBuffer
±± 
=
±± 
$num
±±  
;
±±  !
m_Data
≤≤ 
.
≤≤ 
failedWrites
≤≤ 
=
≤≤  !
$num
≤≤" #
;
≤≤# $
}
≥≥ 	
[
µµ 	
Conditional
µµ	 
(
µµ 
$str
µµ 6
)
µµ6 7
]
µµ7 8
void
∂∂ 
	CheckRead
∂∂ 
(
∂∂ 
)
∂∂ 
{
∑∑ 	 
AtomicSafetyHandle
ππ 
.
ππ 
CheckReadAndThrow
ππ 0
(
ππ0 1
m_Safety
ππ1 9
)
ππ9 :
;
ππ: ;
}
ªª 	
[
ΩΩ 	
Conditional
ΩΩ	 
(
ΩΩ 
$str
ΩΩ 6
)
ΩΩ6 7
]
ΩΩ7 8
void
ææ 

CheckWrite
ææ 
(
ææ 
)
ææ 
{
øø 	 
AtomicSafetyHandle
¡¡ 
.
¡¡  
CheckWriteAndThrow
¡¡ 1
(
¡¡1 2
m_Safety
¡¡2 :
)
¡¡: ;
;
¡¡; <
}
√√ 	
[
≈≈ 	
Conditional
≈≈	 
(
≈≈ 
$str
≈≈ 6
)
≈≈6 7
]
≈≈7 8
static
∆∆ 
void
∆∆ 
CheckAllocator
∆∆ "
(
∆∆" #
	Allocator
∆∆# ,
	allocator
∆∆- 6
)
∆∆6 7
{
«« 	
if
»» 
(
»» 
	allocator
»» 
!=
»» 
	Allocator
»» &
.
»»& '
Temp
»»' +
)
»»+ ,
throw
…… 
new
…… '
InvalidOperationException
…… 3
(
……3 4
$str
……4 l
)
……l m
;
……m n
}
   	
[
ÃÃ 	
Conditional
ÃÃ	 
(
ÃÃ 
$str
ÃÃ 6
)
ÃÃ6 7
]
ÃÃ7 8
static
ÕÕ 
void
ÕÕ 
	CheckBits
ÕÕ 
(
ÕÕ 
uint
ÕÕ "
value
ÕÕ# (
,
ÕÕ( )
int
ÕÕ* -
numbits
ÕÕ. 5
)
ÕÕ5 6
{
ŒŒ 	
if
œœ 
(
œœ 
numbits
œœ 
<
œœ 
$num
œœ 
||
œœ 
numbits
œœ &
>
œœ' (
$num
œœ) +
)
œœ+ ,
throw
–– 
new
–– )
ArgumentOutOfRangeException
–– 5
(
––5 6
$str
––6 N
)
––N O
;
––O P
if
—— 
(
—— 
value
—— 
>=
—— 
(
—— 
$num
—— 
<<
——  
numbits
——! (
)
——( )
)
——) *
throw
““ 
new
““ )
ArgumentOutOfRangeException
““ 5
(
““5 6
$str
““6 j
)
““j k
;
““k l
}
”” 	
}
‘‘ 
public
ÚÚ 

unsafe
ÚÚ 
struct
ÚÚ 
DataStreamReader
ÚÚ )
{
ÛÛ 
struct
ÙÙ 
Context
ÙÙ 
{
ıı 	
public
ˆˆ 
int
ˆˆ 
m_ReadByteIndex
ˆˆ &
;
ˆˆ& '
public
˜˜ 
int
˜˜ 

m_BitIndex
˜˜ !
;
˜˜! "
public
¯¯ 
ulong
¯¯ 
m_BitBuffer
¯¯ $
;
¯¯$ %
public
˘˘ 
int
˘˘ 
m_FailedReads
˘˘ $
;
˘˘$ %
}
˙˙ 	
[
¸¸ 	/
!NativeDisableUnsafePtrRestriction
¸¸	 *
]
¸¸* +
byte
¸¸, 0
*
¸¸0 1
m_bufferPtr
¸¸2 =
;
¸¸= >
Context
˝˝ 
	m_Context
˝˝ 
;
˝˝ 
int
˛˛ 
m_Length
˛˛ 
;
˛˛  
AtomicSafetyHandle
ÄÄ 
m_Safety
ÄÄ #
;
ÄÄ# $
public
ÉÉ 
DataStreamReader
ÉÉ 
(
ÉÉ  
NativeArray
ÉÉ  +
<
ÉÉ+ ,
byte
ÉÉ, 0
>
ÉÉ0 1
array
ÉÉ2 7
)
ÉÉ7 8
{
ÑÑ 	

Initialize
ÖÖ 
(
ÖÖ 
out
ÖÖ 
this
ÖÖ 
,
ÖÖ  
array
ÖÖ! &
)
ÖÖ& '
;
ÖÖ' (
}
ÜÜ 	
public
àà 
DataStreamReader
àà 
(
àà  
byte
àà  $
*
àà$ %
data
àà& *
,
àà* +
int
àà, /
length
àà0 6
)
àà6 7
{
ââ 	
var
ää 
na
ää 
=
ää &
NativeArrayUnsafeUtility
ää -
.
ää- ..
 ConvertExistingDataToNativeArray
ää. N
<
ääN O
byte
ääO S
>
ääS T
(
ääT U
data
ääU Y
,
ääY Z
length
ää[ a
,
ääa b
	Allocator
ääc l
.
ääl m
Invalid
ääm t
)
äät u
;
ääu v&
NativeArrayUnsafeUtility
åå $
.
åå$ %#
SetAtomicSafetyHandle
åå% :
(
åå: ;
ref
åå; >
na
åå? A
,
ååA B 
AtomicSafetyHandle
ååC U
.
ååU V!
GetTempMemoryHandle
ååV i
(
ååi j
)
ååj k
)
ååk l
;
åål m

Initialize
éé 
(
éé 
out
éé 
this
éé 
,
éé  
na
éé! #
)
éé# $
;
éé$ %
}
èè 	
private
ëë 
static
ëë 
void
ëë 

Initialize
ëë &
(
ëë& '
out
ëë' *
DataStreamReader
ëë+ ;
self
ëë< @
,
ëë@ A
NativeArray
ëëB M
<
ëëM N
byte
ëëN R
>
ëëR S
array
ëëT Y
)
ëëY Z
{
íí 	
self
îî 
.
îî 
m_Safety
îî 
=
îî &
NativeArrayUnsafeUtility
îî 4
.
îî4 5#
GetAtomicSafetyHandle
îî5 J
(
îîJ K
array
îîK P
)
îîP Q
;
îîQ R
self
ññ 
.
ññ 
m_bufferPtr
ññ 
=
ññ 
(
ññ  
byte
ññ  $
*
ññ$ %
)
ññ% &
array
ññ& +
.
ññ+ ,"
GetUnsafeReadOnlyPtr
ññ, @
(
ññ@ A
)
ññA B
;
ññB C
self
óó 
.
óó 
m_Length
óó 
=
óó 
array
óó !
.
óó! "
Length
óó" (
;
óó( )
self
òò 
.
òò 
	m_Context
òò 
=
òò 
default
òò $
;
òò$ %
}
ôô 	
public
õõ 
bool
õõ 
IsLittleEndian
õõ "
=>
õõ# %
DataStreamWriter
õõ& 6
.
õõ6 7
IsLittleEndian
õõ7 E
;
õõE F
private
ùù 
static
ùù 
short
ùù 
ByteSwap
ùù %
(
ùù% &
short
ùù& +
val
ùù, /
)
ùù/ 0
{
ûû 	
return
üü 
(
üü 
short
üü 
)
üü 
(
üü 
(
üü 
(
üü 
val
üü  
&
üü! "
$num
üü# '
)
üü' (
<<
üü) +
$num
üü, -
)
üü- .
|
üü/ 0
(
üü1 2
(
üü2 3
val
üü3 6
>>
üü7 9
$num
üü: ;
)
üü; <
&
üü= >
$num
üü? C
)
üüC D
)
üüD E
;
üüE F
}
†† 	
private
¢¢ 
static
¢¢ 
int
¢¢ 
ByteSwap
¢¢ #
(
¢¢# $
int
¢¢$ '
val
¢¢( +
)
¢¢+ ,
{
££ 	
return
§§ 
(
§§ 
int
§§ 
)
§§ 
(
§§ 
(
§§ 
(
§§ 
val
§§ 
&
§§  
$num
§§! %
)
§§% &
<<
§§' )
$num
§§* ,
)
§§, -
|
§§. /
(
§§0 1
(
§§1 2
val
§§2 5
&
§§6 7
$num
§§8 >
)
§§> ?
<<
§§@ B
$num
§§C D
)
§§D E
|
§§F G
(
§§H I
(
§§I J
val
§§J M
>>
§§N P
$num
§§Q R
)
§§R S
&
§§T U
$num
§§V \
)
§§\ ]
|
§§^ _
(
§§` a
(
§§a b
val
§§b e
>>
§§f h
$num
§§i k
)
§§k l
&
§§m n
$num
§§o s
)
§§s t
)
§§t u
;
§§u v
}
•• 	
public
ßß 
bool
ßß 
HasFailedReads
ßß "
=>
ßß# %
	m_Context
ßß& /
.
ßß/ 0
m_FailedReads
ßß0 =
>
ßß> ?
$num
ßß@ A
;
ßßA B
public
´´ 
int
´´ 
Length
´´ 
{
¨¨ 	
get
≠≠ 
{
ÆÆ 
	CheckRead
ØØ 
(
ØØ 
)
ØØ 
;
ØØ 
return
∞∞ 
m_Length
∞∞ 
;
∞∞  
}
±± 
}
≤≤ 	
public
∏∏ 
bool
∏∏ 
	IsCreated
∏∏ 
{
ππ 	
get
∫∫ 
{
∫∫ 
return
∫∫ 
m_bufferPtr
∫∫ $
!=
∫∫% '
null
∫∫( ,
;
∫∫, -
}
∫∫. /
}
ªª 	
public
∆∆ 
void
∆∆ 
	ReadBytes
∆∆ 
(
∆∆ 
byte
∆∆ "
*
∆∆" #
data
∆∆$ (
,
∆∆( )
int
∆∆* -
length
∆∆. 4
)
∆∆4 5
{
«« 	
	CheckRead
»» 
(
»» 
)
»» 
;
»» 
if
…… 
(
…… 
GetBytesRead
…… 
(
…… 
)
…… 
+
……  
length
……! '
>
……( )
m_Length
……* 2
)
……2 3
{
   
++
ÀÀ 
	m_Context
ÀÀ 
.
ÀÀ 
m_FailedReads
ÀÀ )
;
ÀÀ) *
UnityEngine
ÕÕ 
.
ÕÕ 
Debug
ÕÕ !
.
ÕÕ! "
LogError
ÕÕ" *
(
ÕÕ* +
$"
ÕÕ+ -
$str
ÕÕ- <
{
ÕÕ< =
length
ÕÕ= C
}
ÕÕC D
$str
ÕÕD d
{
ÕÕd e
m_Length
ÕÕe m
-
ÕÕn o
GetBytesRead
ÕÕp |
(
ÕÕ| }
)
ÕÕ} ~
}
ÕÕ~ 
$strÕÕ ç
"ÕÕç é
)ÕÕé è
;ÕÕè ê
UnsafeUtility
œœ 
.
œœ 
MemClear
œœ &
(
œœ& '
data
œœ' +
,
œœ+ ,
length
œœ- 3
)
œœ3 4
;
œœ4 5
return
–– 
;
–– 
}
—— 
	m_Context
”” 
.
”” 
m_ReadByteIndex
”” %
-=
””& (
(
””) *
	m_Context
””* 3
.
””3 4

m_BitIndex
””4 >
>>
””? A
$num
””B C
)
””C D
;
””D E
	m_Context
‘‘ 
.
‘‘ 

m_BitIndex
‘‘  
=
‘‘! "
$num
‘‘# $
;
‘‘$ %
	m_Context
’’ 
.
’’ 
m_BitBuffer
’’ !
=
’’" #
$num
’’$ %
;
’’% &
UnsafeUtility
÷÷ 
.
÷÷ 
MemCpy
÷÷  
(
÷÷  !
data
÷÷! %
,
÷÷% &
m_bufferPtr
÷÷' 2
+
÷÷3 4
	m_Context
÷÷5 >
.
÷÷> ?
m_ReadByteIndex
÷÷? N
,
÷÷N O
length
÷÷P V
)
÷÷V W
;
÷÷W X
	m_Context
◊◊ 
.
◊◊ 
m_ReadByteIndex
◊◊ %
+=
◊◊& (
length
◊◊) /
;
◊◊/ 0
}
ÿÿ 	
public
ﬂﬂ 
void
ﬂﬂ 
	ReadBytes
ﬂﬂ 
(
ﬂﬂ 
NativeArray
ﬂﬂ )
<
ﬂﬂ) *
byte
ﬂﬂ* .
>
ﬂﬂ. /
array
ﬂﬂ0 5
)
ﬂﬂ5 6
{
‡‡ 	
	ReadBytes
·· 
(
·· 
(
·· 
byte
·· 
*
·· 
)
·· 
array
·· "
.
··" #
GetUnsafePtr
··# /
(
··/ 0
)
··0 1
,
··1 2
array
··3 8
.
··8 9
Length
··9 ?
)
··? @
;
··@ A
}
‚‚ 	
public
‰‰ 
int
‰‰ 
GetBytesRead
‰‰ 
(
‰‰  
)
‰‰  !
{
ÂÂ 	
return
ÊÊ 
	m_Context
ÊÊ 
.
ÊÊ 
m_ReadByteIndex
ÊÊ ,
-
ÊÊ- .
(
ÊÊ/ 0
	m_Context
ÊÊ0 9
.
ÊÊ9 :

m_BitIndex
ÊÊ: D
>>
ÊÊE G
$num
ÊÊH I
)
ÊÊI J
;
ÊÊJ K
}
ÁÁ 	
public
ÈÈ 
int
ÈÈ 
GetBitsRead
ÈÈ 
(
ÈÈ 
)
ÈÈ  
{
ÍÍ 	
return
ÎÎ 
(
ÎÎ 
	m_Context
ÎÎ 
.
ÎÎ 
m_ReadByteIndex
ÎÎ -
<<
ÎÎ. 0
$num
ÎÎ1 2
)
ÎÎ2 3
-
ÎÎ4 5
	m_Context
ÎÎ6 ?
.
ÎÎ? @

m_BitIndex
ÎÎ@ J
;
ÎÎJ K
}
ÏÏ 	
public
ÓÓ 
void
ÓÓ 
SeekSet
ÓÓ 
(
ÓÓ 
int
ÓÓ 
pos
ÓÓ  #
)
ÓÓ# $
{
ÔÔ 	
if
 
(
 
pos
 
>
 
m_Length
 
)
 
{
ÒÒ 
++
ÚÚ 
	m_Context
ÚÚ 
.
ÚÚ 
m_FailedReads
ÚÚ )
;
ÚÚ) *
UnityEngine
ÙÙ 
.
ÙÙ 
Debug
ÙÙ !
.
ÙÙ! "
LogError
ÙÙ" *
(
ÙÙ* +
$"
ÙÙ+ -
$str
ÙÙ- ?
{
ÙÙ? @
pos
ÙÙ@ C
}
ÙÙC D
$str
ÙÙD [
{
ÙÙ[ \
m_Length
ÙÙ\ d
}
ÙÙd e
"
ÙÙe f
)
ÙÙf g
;
ÙÙg h
return
ˆˆ 
;
ˆˆ 
}
˜˜ 
	m_Context
¯¯ 
.
¯¯ 
m_ReadByteIndex
¯¯ %
=
¯¯& '
pos
¯¯( +
;
¯¯+ ,
	m_Context
˘˘ 
.
˘˘ 

m_BitIndex
˘˘  
=
˘˘! "
$num
˘˘# $
;
˘˘$ %
	m_Context
˙˙ 
.
˙˙ 
m_BitBuffer
˙˙ !
=
˙˙" #
$num
˙˙$ '
;
˙˙' (
}
˚˚ 	
public
˝˝ 
byte
˝˝ 
ReadByte
˝˝ 
(
˝˝ 
)
˝˝ 
{
˛˛ 	
byte
ˇˇ 
data
ˇˇ 
;
ˇˇ 
	ReadBytes
ÄÄ 
(
ÄÄ 
(
ÄÄ 
byte
ÄÄ 
*
ÄÄ 
)
ÄÄ 
&
ÄÄ 
data
ÄÄ "
,
ÄÄ" #
sizeof
ÄÄ$ *
(
ÄÄ* +
byte
ÄÄ+ /
)
ÄÄ/ 0
)
ÄÄ0 1
;
ÄÄ1 2
return
ÅÅ 
data
ÅÅ 
;
ÅÅ 
}
ÇÇ 	
public
ÑÑ 
short
ÑÑ 
	ReadShort
ÑÑ 
(
ÑÑ 
)
ÑÑ  
{
ÖÖ 	
short
ÜÜ 
data
ÜÜ 
;
ÜÜ 
	ReadBytes
áá 
(
áá 
(
áá 
byte
áá 
*
áá 
)
áá 
&
áá 
data
áá "
,
áá" #
sizeof
áá$ *
(
áá* +
short
áá+ 0
)
áá0 1
)
áá1 2
;
áá2 3
return
àà 
data
àà 
;
àà 
}
ââ 	
public
ãã 
ushort
ãã 

ReadUShort
ãã  
(
ãã  !
)
ãã! "
{
åå 	
ushort
çç 
data
çç 
;
çç 
	ReadBytes
éé 
(
éé 
(
éé 
byte
éé 
*
éé 
)
éé 
&
éé 
data
éé "
,
éé" #
sizeof
éé$ *
(
éé* +
ushort
éé+ 1
)
éé1 2
)
éé2 3
;
éé3 4
return
èè 
data
èè 
;
èè 
}
êê 	
public
íí 
int
íí 
ReadInt
íí 
(
íí 
)
íí 
{
ìì 	
int
îî 
data
îî 
;
îî 
	ReadBytes
ïï 
(
ïï 
(
ïï 
byte
ïï 
*
ïï 
)
ïï 
&
ïï 
data
ïï "
,
ïï" #
sizeof
ïï$ *
(
ïï* +
int
ïï+ .
)
ïï. /
)
ïï/ 0
;
ïï0 1
return
ññ 
data
ññ 
;
ññ 
}
óó 	
public
ôô 
uint
ôô 
ReadUInt
ôô 
(
ôô 
)
ôô 
{
öö 	
uint
õõ 
data
õõ 
;
õõ 
	ReadBytes
úú 
(
úú 
(
úú 
byte
úú 
*
úú 
)
úú 
&
úú 
data
úú "
,
úú" #
sizeof
úú$ *
(
úú* +
uint
úú+ /
)
úú/ 0
)
úú0 1
;
úú1 2
return
ùù 
data
ùù 
;
ùù 
}
ûû 	
public
†† 
long
†† 
ReadLong
†† 
(
†† 
)
†† 
{
°° 	
long
¢¢ 
data
¢¢ 
;
¢¢ 
	ReadBytes
££ 
(
££ 
(
££ 
byte
££ 
*
££ 
)
££ 
&
££ 
data
££ "
,
££" #
sizeof
££$ *
(
££* +
long
££+ /
)
££/ 0
)
££0 1
;
££1 2
return
§§ 
data
§§ 
;
§§ 
}
•• 	
public
ßß 
ulong
ßß 
	ReadULong
ßß 
(
ßß 
)
ßß  
{
®® 	
ulong
©© 
data
©© 
;
©© 
	ReadBytes
™™ 
(
™™ 
(
™™ 
byte
™™ 
*
™™ 
)
™™ 
&
™™ 
data
™™ "
,
™™" #
sizeof
™™$ *
(
™™* +
ulong
™™+ 0
)
™™0 1
)
™™1 2
;
™™2 3
return
´´ 
data
´´ 
;
´´ 
}
¨¨ 	
public
ÆÆ 
short
ÆÆ '
ReadShortNetworkByteOrder
ÆÆ .
(
ÆÆ. /
)
ÆÆ/ 0
{
ØØ 	
short
∞∞ 
data
∞∞ 
;
∞∞ 
	ReadBytes
±± 
(
±± 
(
±± 
byte
±± 
*
±± 
)
±± 
&
±± 
data
±± "
,
±±" #
sizeof
±±$ *
(
±±* +
short
±±+ 0
)
±±0 1
)
±±1 2
;
±±2 3
return
≤≤ 
IsLittleEndian
≤≤ !
?
≤≤" #
ByteSwap
≤≤$ ,
(
≤≤, -
data
≤≤- 1
)
≤≤1 2
:
≤≤3 4
data
≤≤5 9
;
≤≤9 :
}
≥≥ 	
public
µµ 
ushort
µµ (
ReadUShortNetworkByteOrder
µµ 0
(
µµ0 1
)
µµ1 2
{
∂∂ 	
return
∑∑ 
(
∑∑ 
ushort
∑∑ 
)
∑∑ '
ReadShortNetworkByteOrder
∑∑ 4
(
∑∑4 5
)
∑∑5 6
;
∑∑6 7
}
∏∏ 	
public
∫∫ 
int
∫∫ %
ReadIntNetworkByteOrder
∫∫ *
(
∫∫* +
)
∫∫+ ,
{
ªª 	
int
ºº 
data
ºº 
;
ºº 
	ReadBytes
ΩΩ 
(
ΩΩ 
(
ΩΩ 
byte
ΩΩ 
*
ΩΩ 
)
ΩΩ 
&
ΩΩ 
data
ΩΩ "
,
ΩΩ" #
sizeof
ΩΩ$ *
(
ΩΩ* +
int
ΩΩ+ .
)
ΩΩ. /
)
ΩΩ/ 0
;
ΩΩ0 1
return
ææ 
IsLittleEndian
ææ !
?
ææ" #
ByteSwap
ææ$ ,
(
ææ, -
data
ææ- 1
)
ææ1 2
:
ææ3 4
data
ææ5 9
;
ææ9 :
}
øø 	
public
¡¡ 
uint
¡¡ &
ReadUIntNetworkByteOrder
¡¡ ,
(
¡¡, -
)
¡¡- .
{
¬¬ 	
return
√√ 
(
√√ 
uint
√√ 
)
√√ %
ReadIntNetworkByteOrder
√√ 0
(
√√0 1
)
√√1 2
;
√√2 3
}
ƒƒ 	
public
∆∆ 
float
∆∆ 
	ReadFloat
∆∆ 
(
∆∆ 
)
∆∆  
{
«« 	
	UIntFloat
»» 
uf
»» 
=
»» 
new
»» 
	UIntFloat
»» (
(
»»( )
)
»») *
;
»»* +
uf
…… 
.
…… 
intValue
…… 
=
…… 
(
…… 
uint
…… 
)
……  
ReadInt
……  '
(
……' (
)
……( )
;
……) *
return
   
uf
   
.
   

floatValue
    
;
    !
}
ÀÀ 	
public
ÕÕ 
uint
ÕÕ 
ReadPackedUInt
ÕÕ "
(
ÕÕ" #%
NetworkCompressionModel
ÕÕ# :
model
ÕÕ; @
)
ÕÕ@ A
{
ŒŒ 	
	CheckRead
œœ 
(
œœ 
)
œœ 
;
œœ 
FillBitBuffer
–– 
(
–– 
)
–– 
;
–– 
uint
—— 
peekMask
—— 
=
—— 
(
—— 
$num
—— 
<<
——  "%
NetworkCompressionModel
——# :
.
——: ;&
k_MaxHuffmanSymbolLength
——; S
)
——S T
-
——U V
$num
——W Y
;
——Y Z
uint
““ 
peekBits
““ 
=
““ 
(
““ 
uint
““ !
)
““! "
	m_Context
““" +
.
““+ ,
m_BitBuffer
““, 7
&
““8 9
peekMask
““: B
;
““B C
ushort
”” 
huffmanEntry
”” 
=
””  !
model
””" '
.
””' (
decodeTable
””( 3
[
””3 4
(
””4 5
int
””5 8
)
””8 9
peekBits
””9 A
]
””A B
;
””B C
int
‘‘ 
symbol
‘‘ 
=
‘‘ 
huffmanEntry
‘‘ %
>>
‘‘& (
$num
‘‘) *
;
‘‘* +
int
’’ 
length
’’ 
=
’’ 
huffmanEntry
’’ %
&
’’& '
$num
’’( ,
;
’’, -
if
◊◊ 
(
◊◊ 
	m_Context
◊◊ 
.
◊◊ 

m_BitIndex
◊◊ $
<
◊◊% &
length
◊◊' -
)
◊◊- .
{
ÿÿ 
++
ŸŸ 
	m_Context
ŸŸ 
.
ŸŸ 
m_FailedReads
ŸŸ )
;
ŸŸ) *
UnityEngine
€€ 
.
€€ 
Debug
€€ !
.
€€! "
LogError
€€" *
(
€€* +
$"
€€+ -
$str
€€- <
{
€€< =
length
€€= C
}
€€C D
$str
€€D c
{
€€c d
	m_Context
€€d m
.
€€m n

m_BitIndex
€€n x
}
€€x y
$str€€y á
"€€á à
)€€à â
;€€â ä
return
›› 
$num
›› 
;
›› 
}
ﬁﬁ 
	m_Context
·· 
.
·· 
m_BitBuffer
·· !
>>=
··" %
length
··& ,
;
··, -
	m_Context
‚‚ 
.
‚‚ 

m_BitIndex
‚‚  
-=
‚‚! #
length
‚‚$ *
;
‚‚* +
uint
‰‰ 
offset
‰‰ 
=
‰‰ 
model
‰‰ 
.
‰‰  
bucketOffsets
‰‰  -
[
‰‰- .
symbol
‰‰. 4
]
‰‰4 5
;
‰‰5 6
int
ÂÂ 
bits
ÂÂ 
=
ÂÂ 
model
ÂÂ 
.
ÂÂ 
bucketSizes
ÂÂ (
[
ÂÂ( )
symbol
ÂÂ) /
]
ÂÂ/ 0
;
ÂÂ0 1
return
ÊÊ !
ReadRawBitsInternal
ÊÊ &
(
ÊÊ& '
bits
ÊÊ' +
)
ÊÊ+ ,
+
ÊÊ- .
offset
ÊÊ/ 5
;
ÊÊ5 6
}
ÁÁ 	
void
ÈÈ 
FillBitBuffer
ÈÈ 
(
ÈÈ 
)
ÈÈ 
{
ÍÍ 	
while
ÎÎ 
(
ÎÎ 
	m_Context
ÎÎ 
.
ÎÎ 

m_BitIndex
ÎÎ '
<=
ÎÎ( *
$num
ÎÎ+ -
&&
ÎÎ. 0
	m_Context
ÎÎ1 :
.
ÎÎ: ;
m_ReadByteIndex
ÎÎ; J
<
ÎÎK L
m_Length
ÎÎM U
)
ÎÎU V
{
ÏÏ 
	m_Context
ÌÌ 
.
ÌÌ 
m_BitBuffer
ÌÌ %
|=
ÌÌ& (
(
ÌÌ) *
ulong
ÌÌ* /
)
ÌÌ/ 0
m_bufferPtr
ÌÌ0 ;
[
ÌÌ; <
	m_Context
ÌÌ< E
.
ÌÌE F
m_ReadByteIndex
ÌÌF U
++
ÌÌU W
]
ÌÌW X
<<
ÌÌY [
	m_Context
ÌÌ\ e
.
ÌÌe f

m_BitIndex
ÌÌf p
;
ÌÌp q
	m_Context
ÓÓ 
.
ÓÓ 

m_BitIndex
ÓÓ $
+=
ÓÓ% '
$num
ÓÓ( )
;
ÓÓ) *
}
ÔÔ 
}
 	
uint
ÚÚ !
ReadRawBitsInternal
ÚÚ  
(
ÚÚ  !
int
ÚÚ! $
numbits
ÚÚ% ,
)
ÚÚ, -
{
ÛÛ 	
	CheckBits
ÙÙ 
(
ÙÙ 
numbits
ÙÙ 
)
ÙÙ 
;
ÙÙ 
if
ıı 
(
ıı 
	m_Context
ıı 
.
ıı 

m_BitIndex
ıı $
<
ıı% &
numbits
ıı' .
)
ıı. /
{
ˆˆ 
++
˜˜ 
	m_Context
˜˜ 
.
˜˜ 
m_FailedReads
˜˜ )
;
˜˜) *
UnityEngine
˘˘ 
.
˘˘ 
Debug
˘˘ !
.
˘˘! "
LogError
˘˘" *
(
˘˘* +
$"
˘˘+ -
$str
˘˘- <
{
˘˘< =
numbits
˘˘= D
}
˘˘D E
$str
˘˘E d
{
˘˘d e
	m_Context
˘˘e n
.
˘˘n o

m_BitIndex
˘˘o y
}
˘˘y z
$str˘˘z à
"˘˘à â
)˘˘â ä
;˘˘ä ã
return
˚˚ 
$num
˚˚ 
;
˚˚ 
}
¸¸ 
uint
˝˝ 
res
˝˝ 
=
˝˝ 
(
˝˝ 
uint
˝˝ 
)
˝˝ 
(
˝˝ 
	m_Context
˝˝ '
.
˝˝' (
m_BitBuffer
˝˝( 3
&
˝˝4 5
(
˝˝6 7
(
˝˝7 8
$num
˝˝8 ;
<<
˝˝< >
numbits
˝˝? F
)
˝˝F G
-
˝˝H I
$num
˝˝J M
)
˝˝M N
)
˝˝N O
;
˝˝O P
	m_Context
˛˛ 
.
˛˛ 
m_BitBuffer
˛˛ !
>>=
˛˛" %
numbits
˛˛& -
;
˛˛- .
	m_Context
ˇˇ 
.
ˇˇ 

m_BitIndex
ˇˇ  
-=
ˇˇ! #
numbits
ˇˇ$ +
;
ˇˇ+ ,
return
ÄÄ 
res
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
public
ÉÉ 
uint
ÉÉ 
ReadRawBits
ÉÉ 
(
ÉÉ  
int
ÉÉ  #
numbits
ÉÉ$ +
)
ÉÉ+ ,
{
ÑÑ 	
	CheckRead
ÖÖ 
(
ÖÖ 
)
ÖÖ 
;
ÖÖ 
FillBitBuffer
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
return
áá !
ReadRawBitsInternal
áá &
(
áá& '
numbits
áá' .
)
áá. /
;
áá/ 0
}
àà 	
public
ää 
ulong
ää 
ReadPackedULong
ää $
(
ää$ %%
NetworkCompressionModel
ää% <
model
ää= B
)
ääB C
{
ãã 	
ulong
çç 
hi
çç 
=
çç 
ReadPackedUInt
çç %
(
çç% &
model
çç& +
)
çç+ ,
;
çç, -
hi
éé 
<<=
éé 
$num
éé 
;
éé 
hi
èè 
|=
èè 
ReadPackedUInt
èè  
(
èè  !
model
èè! &
)
èè& '
;
èè' (
return
êê 
hi
êê 
;
êê 
}
ëë 	
public
ìì 
int
ìì 
ReadPackedInt
ìì  
(
ìì  !%
NetworkCompressionModel
ìì! 8
model
ìì9 >
)
ìì> ?
{
îî 	
uint
ïï 
folded
ïï 
=
ïï 
ReadPackedUInt
ïï (
(
ïï( )
model
ïï) .
)
ïï. /
;
ïï/ 0
return
ññ 
(
ññ 
int
ññ 
)
ññ 
(
ññ 
folded
ññ 
>>
ññ  "
$num
ññ# $
)
ññ$ %
^
ññ& '
-
ññ( )
(
ññ) *
int
ññ* -
)
ññ- .
(
ññ. /
folded
ññ/ 5
&
ññ6 7
$num
ññ8 9
)
ññ9 :
;
ññ: ;
}
óó 	
public
ôô 
long
ôô 
ReadPackedLong
ôô "
(
ôô" #%
NetworkCompressionModel
ôô# :
model
ôô; @
)
ôô@ A
{
öö 	
ulong
õõ 
folded
õõ 
=
õõ 
ReadPackedULong
õõ *
(
õõ* +
model
õõ+ 0
)
õõ0 1
;
õõ1 2
return
úú 
(
úú 
long
úú 
)
úú 
(
úú 
folded
úú  
>>
úú! #
$num
úú$ %
)
úú% &
^
úú' (
-
úú) *
(
úú* +
long
úú+ /
)
úú/ 0
(
úú0 1
folded
úú1 7
&
úú8 9
$num
úú: ;
)
úú; <
;
úú< =
}
ùù 	
public
üü 
float
üü 
ReadPackedFloat
üü $
(
üü$ %%
NetworkCompressionModel
üü% <
model
üü= B
)
üüB C
{
†† 	
return
°° "
ReadPackedFloatDelta
°° '
(
°°' (
$num
°°( )
,
°°) *
model
°°+ 0
)
°°0 1
;
°°1 2
}
¢¢ 	
public
§§ 
int
§§  
ReadPackedIntDelta
§§ %
(
§§% &
int
§§& )
baseline
§§* 2
,
§§2 3%
NetworkCompressionModel
§§4 K
model
§§L Q
)
§§Q R
{
•• 	
int
¶¶ 
delta
¶¶ 
=
¶¶ 
ReadPackedInt
¶¶ %
(
¶¶% &
model
¶¶& +
)
¶¶+ ,
;
¶¶, -
return
ßß 
baseline
ßß 
-
ßß 
delta
ßß #
;
ßß# $
}
®® 	
public
™™ 
uint
™™ !
ReadPackedUIntDelta
™™ '
(
™™' (
uint
™™( ,
baseline
™™- 5
,
™™5 6%
NetworkCompressionModel
™™7 N
model
™™O T
)
™™T U
{
´´ 	
uint
¨¨ 
delta
¨¨ 
=
¨¨ 
(
¨¨ 
uint
¨¨ 
)
¨¨ 
ReadPackedInt
¨¨ ,
(
¨¨, -
model
¨¨- 2
)
¨¨2 3
;
¨¨3 4
return
≠≠ 
baseline
≠≠ 
-
≠≠ 
delta
≠≠ #
;
≠≠# $
}
ÆÆ 	
public
∞∞ 
long
∞∞ !
ReadPackedLongDelta
∞∞ '
(
∞∞' (
long
∞∞( ,
baseline
∞∞- 5
,
∞∞5 6%
NetworkCompressionModel
∞∞7 N
model
∞∞O T
)
∞∞T U
{
±± 	
long
≤≤ 
delta
≤≤ 
=
≤≤ 
ReadPackedLong
≤≤ '
(
≤≤' (
model
≤≤( -
)
≤≤- .
;
≤≤. /
return
≥≥ 
baseline
≥≥ 
-
≥≥ 
delta
≥≥ #
;
≥≥# $
}
¥¥ 	
public
∂∂ 
ulong
∂∂ "
ReadPackedULongDelta
∂∂ )
(
∂∂) *
ulong
∂∂* /
baseline
∂∂0 8
,
∂∂8 9%
NetworkCompressionModel
∂∂: Q
model
∂∂R W
)
∂∂W X
{
∑∑ 	
ulong
∏∏ 
delta
∏∏ 
=
∏∏ 
(
∏∏ 
ulong
∏∏  
)
∏∏  !
ReadPackedLong
∏∏! /
(
∏∏/ 0
model
∏∏0 5
)
∏∏5 6
;
∏∏6 7
return
ππ 
baseline
ππ 
-
ππ 
delta
ππ #
;
ππ# $
}
∫∫ 	
public
ºº 
float
ºº "
ReadPackedFloatDelta
ºº )
(
ºº) *
float
ºº* /
baseline
ºº0 8
,
ºº8 9%
NetworkCompressionModel
ºº: Q
model
ººR W
)
ººW X
{
ΩΩ 	
	CheckRead
ææ 
(
ææ 
)
ææ 
;
ææ 
FillBitBuffer
øø 
(
øø 
)
øø 
;
øø 
if
¿¿ 
(
¿¿ !
ReadRawBitsInternal
¿¿ #
(
¿¿# $
$num
¿¿$ %
)
¿¿% &
==
¿¿' )
$num
¿¿* +
)
¿¿+ ,
return
¡¡ 
baseline
¡¡ 
;
¡¡  
var
√√ 
bits
√√ 
=
√√ 
$num
√√ 
;
√√ 
	UIntFloat
ƒƒ 
uf
ƒƒ 
=
ƒƒ 
new
ƒƒ 
	UIntFloat
ƒƒ (
(
ƒƒ( )
)
ƒƒ) *
;
ƒƒ* +
uf
≈≈ 
.
≈≈ 
intValue
≈≈ 
=
≈≈ !
ReadRawBitsInternal
≈≈ -
(
≈≈- .
bits
≈≈. 2
)
≈≈2 3
;
≈≈3 4
return
∆∆ 
uf
∆∆ 
.
∆∆ 

floatValue
∆∆  
;
∆∆  !
}
«« 	
public
…… 
unsafe
……  
FixedString32Bytes
…… (
ReadFixedString32
……) :
(
……: ;
)
……; <
{
   	 
FixedString32Bytes
ÀÀ 
str
ÀÀ "
;
ÀÀ" #
byte
ÃÃ 
*
ÃÃ 
data
ÃÃ 
=
ÃÃ 
(
ÃÃ 
(
ÃÃ 
byte
ÃÃ 
*
ÃÃ  
)
ÃÃ  !
&
ÃÃ! "
str
ÃÃ" %
)
ÃÃ% &
+
ÃÃ' (
$num
ÃÃ) *
;
ÃÃ* +
*
ÕÕ 
(
ÕÕ 
ushort
ÕÕ 
*
ÕÕ 
)
ÕÕ 
&
ÕÕ 
str
ÕÕ 
=
ÕÕ 
ReadFixedString
ÕÕ ,
(
ÕÕ, -
data
ÕÕ- 1
,
ÕÕ1 2
str
ÕÕ3 6
.
ÕÕ6 7
Capacity
ÕÕ7 ?
)
ÕÕ? @
;
ÕÕ@ A
return
ŒŒ 
str
ŒŒ 
;
ŒŒ 
}
œœ 	
public
–– 
unsafe
––  
FixedString64Bytes
–– (
ReadFixedString64
––) :
(
––: ;
)
––; <
{
—— 	 
FixedString64Bytes
““ 
str
““ "
;
““" #
byte
”” 
*
”” 
data
”” 
=
”” 
(
”” 
(
”” 
byte
”” 
*
””  
)
””  !
&
””! "
str
””" %
)
””% &
+
””' (
$num
””) *
;
””* +
*
‘‘ 
(
‘‘ 
ushort
‘‘ 
*
‘‘ 
)
‘‘ 
&
‘‘ 
str
‘‘ 
=
‘‘ 
ReadFixedString
‘‘ ,
(
‘‘, -
data
‘‘- 1
,
‘‘1 2
str
‘‘3 6
.
‘‘6 7
Capacity
‘‘7 ?
)
‘‘? @
;
‘‘@ A
return
’’ 
str
’’ 
;
’’ 
}
÷÷ 	
public
◊◊ 
unsafe
◊◊ !
FixedString128Bytes
◊◊ ) 
ReadFixedString128
◊◊* <
(
◊◊< =
)
◊◊= >
{
ÿÿ 	!
FixedString128Bytes
ŸŸ 
str
ŸŸ  #
;
ŸŸ# $
byte
⁄⁄ 
*
⁄⁄ 
data
⁄⁄ 
=
⁄⁄ 
(
⁄⁄ 
(
⁄⁄ 
byte
⁄⁄ 
*
⁄⁄  
)
⁄⁄  !
&
⁄⁄! "
str
⁄⁄" %
)
⁄⁄% &
+
⁄⁄' (
$num
⁄⁄) *
;
⁄⁄* +
*
€€ 
(
€€ 
ushort
€€ 
*
€€ 
)
€€ 
&
€€ 
str
€€ 
=
€€ 
ReadFixedString
€€ ,
(
€€, -
data
€€- 1
,
€€1 2
str
€€3 6
.
€€6 7
Capacity
€€7 ?
)
€€? @
;
€€@ A
return
‹‹ 
str
‹‹ 
;
‹‹ 
}
›› 	
public
ﬁﬁ 
unsafe
ﬁﬁ !
FixedString512Bytes
ﬁﬁ ) 
ReadFixedString512
ﬁﬁ* <
(
ﬁﬁ< =
)
ﬁﬁ= >
{
ﬂﬂ 	!
FixedString512Bytes
‡‡ 
str
‡‡  #
;
‡‡# $
byte
·· 
*
·· 
data
·· 
=
·· 
(
·· 
(
·· 
byte
·· 
*
··  
)
··  !
&
··! "
str
··" %
)
··% &
+
··' (
$num
··) *
;
··* +
*
‚‚ 
(
‚‚ 
ushort
‚‚ 
*
‚‚ 
)
‚‚ 
&
‚‚ 
str
‚‚ 
=
‚‚ 
ReadFixedString
‚‚ ,
(
‚‚, -
data
‚‚- 1
,
‚‚1 2
str
‚‚3 6
.
‚‚6 7
Capacity
‚‚7 ?
)
‚‚? @
;
‚‚@ A
return
„„ 
str
„„ 
;
„„ 
}
‰‰ 	
public
ÂÂ 
unsafe
ÂÂ "
FixedString4096Bytes
ÂÂ *!
ReadFixedString4096
ÂÂ+ >
(
ÂÂ> ?
)
ÂÂ? @
{
ÊÊ 	"
FixedString4096Bytes
ÁÁ  
str
ÁÁ! $
;
ÁÁ$ %
byte
ËË 
*
ËË 
data
ËË 
=
ËË 
(
ËË 
(
ËË 
byte
ËË 
*
ËË  
)
ËË  !
&
ËË! "
str
ËË" %
)
ËË% &
+
ËË' (
$num
ËË) *
;
ËË* +
*
ÈÈ 
(
ÈÈ 
ushort
ÈÈ 
*
ÈÈ 
)
ÈÈ 
&
ÈÈ 
str
ÈÈ 
=
ÈÈ 
ReadFixedString
ÈÈ ,
(
ÈÈ, -
data
ÈÈ- 1
,
ÈÈ1 2
str
ÈÈ3 6
.
ÈÈ6 7
Capacity
ÈÈ7 ?
)
ÈÈ? @
;
ÈÈ@ A
return
ÍÍ 
str
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
public
ÌÌ 
unsafe
ÌÌ 
ushort
ÌÌ 
ReadFixedString
ÌÌ ,
(
ÌÌ, -
byte
ÌÌ- 1
*
ÌÌ1 2
data
ÌÌ3 7
,
ÌÌ7 8
int
ÌÌ9 <
	maxLength
ÌÌ= F
)
ÌÌF G
{
ÓÓ 	
ushort
ÔÔ 
length
ÔÔ 
=
ÔÔ 

ReadUShort
ÔÔ &
(
ÔÔ& '
)
ÔÔ' (
;
ÔÔ( )
if
 
(
 
length
 
>
 
	maxLength
 "
)
" #
{
ÒÒ 
UnityEngine
ÛÛ 
.
ÛÛ 
Debug
ÛÛ !
.
ÛÛ! "
LogError
ÛÛ" *
(
ÛÛ* +
$"
ÛÛ+ -
$str
ÛÛ- O
{
ÛÛO P
length
ÛÛP V
}
ÛÛV W
$str
ÛÛW j
{
ÛÛj k
	maxLength
ÛÛk t
}
ÛÛt u
"
ÛÛu v
)
ÛÛv w
;
ÛÛw x
return
ıı 
$num
ıı 
;
ıı 
}
ˆˆ 
	ReadBytes
˜˜ 
(
˜˜ 
data
˜˜ 
,
˜˜ 
length
˜˜ "
)
˜˜" #
;
˜˜# $
return
¯¯ 
length
¯¯ 
;
¯¯ 
}
˘˘ 	
public
˚˚ 
unsafe
˚˚  
FixedString32Bytes
˚˚ (*
ReadPackedFixedString32Delta
˚˚) E
(
˚˚E F 
FixedString32Bytes
˚˚F X
baseline
˚˚Y a
,
˚˚a b%
NetworkCompressionModel
˚˚c z
model˚˚{ Ä
)˚˚Ä Å
{
¸¸ 	 
FixedString32Bytes
˝˝ 
str
˝˝ "
;
˝˝" #
byte
˛˛ 
*
˛˛ 
data
˛˛ 
=
˛˛ 
(
˛˛ 
(
˛˛ 
byte
˛˛ 
*
˛˛  
)
˛˛  !
&
˛˛! "
str
˛˛" %
)
˛˛% &
+
˛˛' (
$num
˛˛) *
;
˛˛* +
*
ˇˇ 
(
ˇˇ 
ushort
ˇˇ 
*
ˇˇ 
)
ˇˇ 
&
ˇˇ 
str
ˇˇ 
=
ˇˇ (
ReadPackedFixedStringDelta
ˇˇ 7
(
ˇˇ7 8
data
ˇˇ8 <
,
ˇˇ< =
str
ˇˇ> A
.
ˇˇA B
Capacity
ˇˇB J
,
ˇˇJ K
(
ˇˇL M
(
ˇˇM N
byte
ˇˇN R
*
ˇˇR S
)
ˇˇS T
&
ˇˇT U
baseline
ˇˇU ]
)
ˇˇ] ^
+
ˇˇ_ `
$num
ˇˇa b
,
ˇˇb c
*
ˇˇd e
(
ˇˇe f
(
ˇˇf g
ushort
ˇˇg m
*
ˇˇm n
)
ˇˇn o
&
ˇˇo p
baseline
ˇˇp x
)
ˇˇx y
,
ˇˇy z
modelˇˇ{ Ä
)ˇˇÄ Å
;ˇˇÅ Ç
return
ÄÄ 
str
ÄÄ 
;
ÄÄ 
}
ÅÅ 	
public
ÇÇ 
unsafe
ÇÇ  
FixedString64Bytes
ÇÇ (*
ReadPackedFixedString64Delta
ÇÇ) E
(
ÇÇE F 
FixedString64Bytes
ÇÇF X
baseline
ÇÇY a
,
ÇÇa b%
NetworkCompressionModel
ÇÇc z
modelÇÇ{ Ä
)ÇÇÄ Å
{
ÉÉ 	 
FixedString64Bytes
ÑÑ 
str
ÑÑ "
;
ÑÑ" #
byte
ÖÖ 
*
ÖÖ 
data
ÖÖ 
=
ÖÖ 
(
ÖÖ 
(
ÖÖ 
byte
ÖÖ 
*
ÖÖ  
)
ÖÖ  !
&
ÖÖ! "
str
ÖÖ" %
)
ÖÖ% &
+
ÖÖ' (
$num
ÖÖ) *
;
ÖÖ* +
*
ÜÜ 
(
ÜÜ 
ushort
ÜÜ 
*
ÜÜ 
)
ÜÜ 
&
ÜÜ 
str
ÜÜ 
=
ÜÜ (
ReadPackedFixedStringDelta
ÜÜ 7
(
ÜÜ7 8
data
ÜÜ8 <
,
ÜÜ< =
str
ÜÜ> A
.
ÜÜA B
Capacity
ÜÜB J
,
ÜÜJ K
(
ÜÜL M
(
ÜÜM N
byte
ÜÜN R
*
ÜÜR S
)
ÜÜS T
&
ÜÜT U
baseline
ÜÜU ]
)
ÜÜ] ^
+
ÜÜ_ `
$num
ÜÜa b
,
ÜÜb c
*
ÜÜd e
(
ÜÜe f
(
ÜÜf g
ushort
ÜÜg m
*
ÜÜm n
)
ÜÜn o
&
ÜÜo p
baseline
ÜÜp x
)
ÜÜx y
,
ÜÜy z
modelÜÜ{ Ä
)ÜÜÄ Å
;ÜÜÅ Ç
return
áá 
str
áá 
;
áá 
}
àà 	
public
ââ 
unsafe
ââ !
FixedString128Bytes
ââ )+
ReadPackedFixedString128Delta
ââ* G
(
ââG H!
FixedString128Bytes
ââH [
baseline
ââ\ d
,
ââd e%
NetworkCompressionModel
ââf }
modelââ~ É
)ââÉ Ñ
{
ää 	!
FixedString128Bytes
ãã 
str
ãã  #
;
ãã# $
byte
åå 
*
åå 
data
åå 
=
åå 
(
åå 
(
åå 
byte
åå 
*
åå  
)
åå  !
&
åå! "
str
åå" %
)
åå% &
+
åå' (
$num
åå) *
;
åå* +
*
çç 
(
çç 
ushort
çç 
*
çç 
)
çç 
&
çç 
str
çç 
=
çç (
ReadPackedFixedStringDelta
çç 7
(
çç7 8
data
çç8 <
,
çç< =
str
çç> A
.
ççA B
Capacity
ççB J
,
ççJ K
(
ççL M
(
ççM N
byte
ççN R
*
ççR S
)
ççS T
&
ççT U
baseline
ççU ]
)
çç] ^
+
çç_ `
$num
çça b
,
ççb c
*
ççd e
(
ççe f
(
ççf g
ushort
ççg m
*
ççm n
)
ççn o
&
çço p
baseline
ççp x
)
ççx y
,
ççy z
modelçç{ Ä
)ççÄ Å
;ççÅ Ç
return
éé 
str
éé 
;
éé 
}
èè 	
public
êê 
unsafe
êê !
FixedString512Bytes
êê )+
ReadPackedFixedString512Delta
êê* G
(
êêG H!
FixedString512Bytes
êêH [
baseline
êê\ d
,
êêd e%
NetworkCompressionModel
êêf }
modelêê~ É
)êêÉ Ñ
{
ëë 	!
FixedString512Bytes
íí 
str
íí  #
;
íí# $
byte
ìì 
*
ìì 
data
ìì 
=
ìì 
(
ìì 
(
ìì 
byte
ìì 
*
ìì  
)
ìì  !
&
ìì! "
str
ìì" %
)
ìì% &
+
ìì' (
$num
ìì) *
;
ìì* +
*
îî 
(
îî 
ushort
îî 
*
îî 
)
îî 
&
îî 
str
îî 
=
îî (
ReadPackedFixedStringDelta
îî 7
(
îî7 8
data
îî8 <
,
îî< =
str
îî> A
.
îîA B
Capacity
îîB J
,
îîJ K
(
îîL M
(
îîM N
byte
îîN R
*
îîR S
)
îîS T
&
îîT U
baseline
îîU ]
)
îî] ^
+
îî_ `
$num
îîa b
,
îîb c
*
îîd e
(
îîe f
(
îîf g
ushort
îîg m
*
îîm n
)
îîn o
&
îîo p
baseline
îîp x
)
îîx y
,
îîy z
modelîî{ Ä
)îîÄ Å
;îîÅ Ç
return
ïï 
str
ïï 
;
ïï 
}
ññ 	
public
óó 
unsafe
óó "
FixedString4096Bytes
óó *,
ReadPackedFixedString4096Delta
óó+ I
(
óóI J"
FixedString4096Bytes
óóJ ^
baseline
óó_ g
,
óóg h&
NetworkCompressionModelóói Ä
modelóóÅ Ü
)óóÜ á
{
òò 	"
FixedString4096Bytes
ôô  
str
ôô! $
;
ôô$ %
byte
öö 
*
öö 
data
öö 
=
öö 
(
öö 
(
öö 
byte
öö 
*
öö  
)
öö  !
&
öö! "
str
öö" %
)
öö% &
+
öö' (
$num
öö) *
;
öö* +
*
õõ 
(
õõ 
ushort
õõ 
*
õõ 
)
õõ 
&
õõ 
str
õõ 
=
õõ (
ReadPackedFixedStringDelta
õõ 7
(
õõ7 8
data
õõ8 <
,
õõ< =
str
õõ> A
.
õõA B
Capacity
õõB J
,
õõJ K
(
õõL M
(
õõM N
byte
õõN R
*
õõR S
)
õõS T
&
õõT U
baseline
õõU ]
)
õõ] ^
+
õõ_ `
$num
õõa b
,
õõb c
*
õõd e
(
õõe f
(
õõf g
ushort
õõg m
*
õõm n
)
õõn o
&
õõo p
baseline
õõp x
)
õõx y
,
õõy z
modelõõ{ Ä
)õõÄ Å
;õõÅ Ç
return
úú 
str
úú 
;
úú 
}
ùù 	
public
üü 
unsafe
üü 
ushort
üü (
ReadPackedFixedStringDelta
üü 7
(
üü7 8
byte
üü8 <
*
üü< =
data
üü> B
,
üüB C
int
üüD G
	maxLength
üüH Q
,
üüQ R
byte
üüS W
*
üüW X
baseData
üüY a
,
üüa b
ushort
üüc i

baseLength
üüj t
,
üüt u&
NetworkCompressionModelüüv ç
modelüüé ì
)üüì î
{
†† 	
uint
°° 
length
°° 
=
°° !
ReadPackedUIntDelta
°° -
(
°°- .

baseLength
°°. 8
,
°°8 9
model
°°: ?
)
°°? @
;
°°@ A
if
¢¢ 
(
¢¢ 
length
¢¢ 
>
¢¢ 
(
¢¢ 
uint
¢¢ 
)
¢¢ 
	maxLength
¢¢ (
)
¢¢( )
{
££ 
UnityEngine
•• 
.
•• 
Debug
•• !
.
••! "
LogError
••" *
(
••* +
$"
••+ -
$str
••- O
{
••O P
length
••P V
}
••V W
$str
••W j
{
••j k
	maxLength
••k t
}
••t u
"
••u v
)
••v w
;
••w x
return
ßß 
$num
ßß 
;
ßß 
}
®® 
if
©© 
(
©© 
length
©© 
<=
©© 

baseLength
©© $
)
©©$ %
{
™™ 
for
´´ 
(
´´ 
int
´´ 
i
´´ 
=
´´ 
$num
´´ 
;
´´ 
i
´´  !
<
´´" #
length
´´$ *
;
´´* +
++
´´, .
i
´´. /
)
´´/ 0
data
¨¨ 
[
¨¨ 
i
¨¨ 
]
¨¨ 
=
¨¨ 
(
¨¨ 
byte
¨¨ #
)
¨¨# $!
ReadPackedUIntDelta
¨¨$ 7
(
¨¨7 8
baseData
¨¨8 @
[
¨¨@ A
i
¨¨A B
]
¨¨B C
,
¨¨C D
model
¨¨E J
)
¨¨J K
;
¨¨K L
}
≠≠ 
else
ÆÆ 
{
ØØ 
for
∞∞ 
(
∞∞ 
int
∞∞ 
i
∞∞ 
=
∞∞ 
$num
∞∞ 
;
∞∞ 
i
∞∞  !
<
∞∞" #

baseLength
∞∞$ .
;
∞∞. /
++
∞∞0 2
i
∞∞2 3
)
∞∞3 4
data
±± 
[
±± 
i
±± 
]
±± 
=
±± 
(
±± 
byte
±± #
)
±±# $!
ReadPackedUIntDelta
±±$ 7
(
±±7 8
baseData
±±8 @
[
±±@ A
i
±±A B
]
±±B C
,
±±C D
model
±±E J
)
±±J K
;
±±K L
for
≤≤ 
(
≤≤ 
int
≤≤ 
i
≤≤ 
=
≤≤ 

baseLength
≤≤ '
;
≤≤' (
i
≤≤) *
<
≤≤+ ,
length
≤≤- 3
;
≤≤3 4
++
≤≤5 7
i
≤≤7 8
)
≤≤8 9
data
≥≥ 
[
≥≥ 
i
≥≥ 
]
≥≥ 
=
≥≥ 
(
≥≥ 
byte
≥≥ #
)
≥≥# $
ReadPackedUInt
≥≥$ 2
(
≥≥2 3
model
≥≥3 8
)
≥≥8 9
;
≥≥9 :
}
¥¥ 
return
µµ 
(
µµ 
ushort
µµ 
)
µµ 
length
µµ !
;
µµ! "
}
∂∂ 	
[
∏∏ 	
Conditional
∏∏	 
(
∏∏ 
$str
∏∏ 6
)
∏∏6 7
]
∏∏7 8
void
ππ 
	CheckRead
ππ 
(
ππ 
)
ππ 
{
∫∫ 	 
AtomicSafetyHandle
ºº 
.
ºº 
CheckReadAndThrow
ºº 0
(
ºº0 1
m_Safety
ºº1 9
)
ºº9 :
;
ºº: ;
}
ææ 	
[
¿¿ 	
Conditional
¿¿	 
(
¿¿ 
$str
¿¿ 6
)
¿¿6 7
]
¿¿7 8
static
¡¡ 
void
¡¡ 
	CheckBits
¡¡ 
(
¡¡ 
int
¡¡ !
numbits
¡¡" )
)
¡¡) *
{
¬¬ 	
if
√√ 
(
√√ 
numbits
√√ 
<
√√ 
$num
√√ 
||
√√ 
numbits
√√ &
>
√√' (
$num
√√) +
)
√√+ ,
throw
ƒƒ 
new
ƒƒ )
ArgumentOutOfRangeException
ƒƒ 5
(
ƒƒ5 6
$str
ƒƒ6 N
)
ƒƒN O
;
ƒƒO P
}
≈≈ 	
}
∆∆ 
}«« ˛ÿ
ZC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkEndPoint.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
public 

enum 
NetworkFamily 
{ 
Invalid 
= 
$num 
, 
Ipv4 
= 
$num 
, 
Ipv6 
= 
$num 
} 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
public 

unsafe 
struct 
NetworkEndPoint (
{ 
enum## 
AddressType## 
{$$ 	
Any&& 
=&& 
$num&& 
,&& 
Loopback(( 
=(( 
$num(( 
})) 	
private++ 
const++ 
int++ 
rawIpv4Length++ '
=++( )
$num++* +
;+++ ,
private-- 
const-- 
int-- 
rawIpv6Length-- '
=--( )
$num--* ,
;--, -
private// 
const// 
int// 
rawDataLength// '
=//( )
$num//* ,
;//, -
private33 
const33 
int33 
	rawLength33 #
=33$ %
rawDataLength33& 3
+334 5
$num336 7
;337 8
private66 
static66 
readonly66 
bool66  $
IsLittleEndian66% 3
=664 5
true666 :
;66: ;
internal88 
Binding88 
.88 "
Baselib_NetworkAddress88 /
rawNetworkAddress880 A
;88A B
public== 
int== 
Length== 
{>> 	
get?? 
{@@ 
switchAA 
(AA 
FamilyAA 
)AA 
{BB 
caseCC 
NetworkFamilyCC &
.CC& '
Ipv4CC' +
:CC+ ,
returnDD 
rawIpv4LengthDD ,
;DD, -
caseEE 
NetworkFamilyEE &
.EE& '
Ipv6EE' +
:EE+ ,
returnFF 
rawIpv6LengthFF ,
;FF, -
caseGG 
NetworkFamilyGG &
.GG& '
InvalidGG' .
:GG. /
defaultHH 
:HH 
returnII 
$numII  
;II  !
}JJ 
}KK 
}LL 	
staticQQ 
NetworkEndPointQQ 
(QQ 
)QQ  
{RR 	
uintSS 
testSS 
=SS 
$numSS 
;SS 
byteTT 
*TT 
test_bTT 
=TT 
(TT 
byteTT  
*TT  !
)TT! "
&TT" #
testTT# '
;TT' (
IsLittleEndianUU 
=UU 
test_bUU #
[UU# $
$numUU$ %
]UU% &
==UU' )
$numUU* +
;UU+ ,
}VV 	
public[[ 
ushort[[ 
Port[[ 
{\\ 	
get]] 
=>]] 
(]] 
ushort]] 
)]] 
(]] 
rawNetworkAddress]] -
.]]- .
port1]]. 3
|]]4 5
(]]6 7
rawNetworkAddress]]7 H
.]]H I
port0]]I N
<<]]O Q
$num]]R S
)]]S T
)]]T U
;]]U V
set^^ 
{__ 
rawNetworkAddress`` !
.``! "
port0``" '
=``( )
(``* +
byte``+ /
)``/ 0
(``0 1
(``1 2
value``2 7
>>``8 :
$num``; <
)``< =
&``> ?
$num``@ D
)``D E
;``E F
rawNetworkAddressaa !
.aa! "
port1aa" '
=aa( )
(aa* +
byteaa+ /
)aa/ 0
(aa0 1
valueaa1 6
&aa7 8
$numaa9 =
)aa= >
;aa> ?
}bb 
}cc 	
publichh 
NetworkFamilyhh 
Familyhh #
{ii 	
getjj 
=>jj 
FromBaselibFamilyjj $
(jj$ %
(jj% &
Bindingjj& -
.jj- .)
Baselib_NetworkAddress_Familyjj. K
)jjK L
rawNetworkAddressjjL ]
.jj] ^
familyjj^ d
)jjd e
;jje f
setkk 
=>kk 
rawNetworkAddresskk $
.kk$ %
familykk% +
=kk, -
(kk. /
bytekk/ 3
)kk3 4
ToBaselibFamilykk4 C
(kkC D
valuekkD I
)kkI J
;kkJ K
}ll 	
publicrr 
NativeArrayrr 
<rr 
byterr 
>rr  
GetRawAddressBytesrr! 3
(rr3 4
)rr4 5
{ss 	
vartt 
bytestt 
=tt 
newtt 
NativeArraytt '
<tt' (
bytett( ,
>tt, -
(tt- .
Lengthtt. 4
,tt4 5
	Allocatortt6 ?
.tt? @
Temptt@ D
)ttD E
;ttE F
UnsafeUtilityuu 
.uu 
MemCpyuu  
(uu  !
bytesuu! &
.uu& '
GetUnsafePtruu' 3
(uu3 4
)uu4 5
,uu5 6
UnsafeUtilityuu7 D
.uuD E
	AddressOfuuE N
(uuN O
refuuO R
rawNetworkAddressuuS d
)uud e
,uue f
Lengthuug m
)uum n
;uun o
returnvv 
bytesvv 
;vv 
}ww 	
public 
void 
SetRawAddressBytes &
(& '
NativeArray' 2
<2 3
byte3 7
>7 8
bytes9 >
,> ?
NetworkFamily@ M
familyN T
=U V
NetworkFamilyW d
.d e
Ipv4e i
)i j
{
ÄÄ 	
if
ÅÅ 
(
ÅÅ 
(
ÅÅ 
family
ÅÅ 
==
ÅÅ 
NetworkFamily
ÅÅ (
.
ÅÅ( )
Ipv4
ÅÅ) -
&&
ÅÅ. 0
bytes
ÅÅ1 6
.
ÅÅ6 7
Length
ÅÅ7 =
!=
ÅÅ> @
rawIpv4Length
ÅÅA N
)
ÅÅN O
||
ÅÅP R
(
ÇÇ 
family
ÇÇ 
==
ÇÇ 
NetworkFamily
ÇÇ (
.
ÇÇ( )
Ipv6
ÇÇ) -
&&
ÇÇ. 0
bytes
ÇÇ1 6
.
ÇÇ6 7
Length
ÇÇ7 =
!=
ÇÇ> @
rawIpv6Length
ÇÇA N
)
ÇÇN O
)
ÇÇO P
{
ÉÉ 
throw
ÖÖ 
new
ÖÖ '
InvalidOperationException
ÖÖ 3
(
ÖÖ3 4
$str
ÖÖ4 `
)
ÖÖ` a
;
ÖÖa b
}
ää 
if
åå 
(
åå 
family
åå 
==
åå 
NetworkFamily
åå '
.
åå' (
Ipv4
åå( ,
)
åå, -
{
çç 
UnsafeUtility
éé 
.
éé 
MemCpy
éé $
(
éé$ %
UnsafeUtility
éé% 2
.
éé2 3
	AddressOf
éé3 <
(
éé< =
ref
éé= @
rawNetworkAddress
ééA R
)
ééR S
,
ééS T
bytes
ééU Z
.
ééZ ["
GetUnsafeReadOnlyPtr
éé[ o
(
ééo p
)
éép q
,
ééq r
rawIpv4Lengthéés Ä
)ééÄ Å
;ééÅ Ç
Family
èè 
=
èè 
family
èè 
;
èè  
}
êê 
else
ëë 
if
ëë 
(
ëë 
family
ëë 
==
ëë 
NetworkFamily
ëë ,
.
ëë, -
Ipv6
ëë- 1
)
ëë1 2
{
íí 
UnsafeUtility
ìì 
.
ìì 
MemCpy
ìì $
(
ìì$ %
UnsafeUtility
ìì% 2
.
ìì2 3
	AddressOf
ìì3 <
(
ìì< =
ref
ìì= @
rawNetworkAddress
ììA R
)
ììR S
,
ììS T
bytes
ììU Z
.
ììZ ["
GetUnsafeReadOnlyPtr
ìì[ o
(
ììo p
)
ììp q
,
ììq r
rawIpv6Lengthììs Ä
)ììÄ Å
;ììÅ Ç
Family
îî 
=
îî 
family
îî 
;
îî  
}
ïï 
}
ññ 	
public
õõ 
ushort
õõ 
RawPort
õõ 
{
úú 	
get
ùù 
{
ûû 
ushort
üü 
*
üü 
port
üü 
=
üü 
(
üü  
ushort
üü  &
*
üü& '
)
üü' (
(
üü( )
(
üü) *
byte
üü* .
*
üü. /
)
üü/ 0
UnsafeUtility
üü0 =
.
üü= >
	AddressOf
üü> G
(
üüG H
ref
üüH K
rawNetworkAddress
üüL ]
)
üü] ^
+
üü_ `
rawDataLength
üüa n
)
üün o
;
üüo p
return
†† 
*
†† 
port
†† 
;
†† 
}
°° 
set
¢¢ 
{
££ 
ushort
§§ 
*
§§ 
port
§§ 
=
§§ 
(
§§  
ushort
§§  &
*
§§& '
)
§§' (
(
§§( )
(
§§) *
byte
§§* .
*
§§. /
)
§§/ 0
UnsafeUtility
§§0 =
.
§§= >
	AddressOf
§§> G
(
§§G H
ref
§§H K
rawNetworkAddress
§§L ]
)
§§] ^
+
§§_ `
rawDataLength
§§a n
)
§§n o
;
§§o p
*
•• 
port
•• 
=
•• 
value
•• 
;
•• 
}
¶¶ 
}
ßß 	
public
¨¨ 
string
¨¨ 
Address
¨¨ 
=>
¨¨  
AddressAsString
¨¨! 0
(
¨¨0 1
)
¨¨1 2
;
¨¨2 3
public
±± 
bool
±± 
IsValid
±± 
=>
±± 
Family
±± %
!=
±±& (
$num
±±) *
;
±±* +
public
∂∂ 
static
∂∂ 
NetworkEndPoint
∂∂ %
AnyIpv4
∂∂& -
=>
∂∂. 0
CreateAddress
∂∂1 >
(
∂∂> ?
$num
∂∂? @
)
∂∂@ A
;
∂∂A B
public
ªª 
static
ªª 
NetworkEndPoint
ªª %
LoopbackIpv4
ªª& 2
=>
ªª3 5
CreateAddress
ªª6 C
(
ªªC D
$num
ªªD E
,
ªªE F
AddressType
ªªG R
.
ªªR S
Loopback
ªªS [
)
ªª[ \
;
ªª\ ]
public
¿¿ 
static
¿¿ 
NetworkEndPoint
¿¿ %
AnyIpv6
¿¿& -
=>
¿¿. 0
CreateAddress
¿¿1 >
(
¿¿> ?
$num
¿¿? @
,
¿¿@ A
AddressType
¿¿B M
.
¿¿M N
Any
¿¿N Q
,
¿¿Q R
NetworkFamily
¿¿S `
.
¿¿` a
Ipv6
¿¿a e
)
¿¿e f
;
¿¿f g
public
≈≈ 
static
≈≈ 
NetworkEndPoint
≈≈ %
LoopbackIpv6
≈≈& 2
=>
≈≈3 5
CreateAddress
≈≈6 C
(
≈≈C D
$num
≈≈D E
,
≈≈E F
AddressType
≈≈G R
.
≈≈R S
Loopback
≈≈S [
,
≈≈[ \
NetworkFamily
≈≈] j
.
≈≈j k
Ipv6
≈≈k o
)
≈≈o p
;
≈≈p q
public
ÃÃ 
NetworkEndPoint
ÃÃ 
WithPort
ÃÃ '
(
ÃÃ' (
ushort
ÃÃ( .
port
ÃÃ/ 3
)
ÃÃ3 4
{
ÕÕ 	
var
ŒŒ 
ep
ŒŒ 
=
ŒŒ 
this
ŒŒ 
;
ŒŒ 
ep
œœ 
.
œœ 
Port
œœ 
=
œœ 
port
œœ 
;
œœ 
return
–– 
ep
–– 
;
–– 
}
—— 	
public
÷÷ 
bool
÷÷ 

IsLoopback
÷÷ 
=>
÷÷ !
(
÷÷" #
this
÷÷# '
==
÷÷( *
LoopbackIpv4
÷÷+ 7
.
÷÷7 8
WithPort
÷÷8 @
(
÷÷@ A
Port
÷÷A E
)
÷÷E F
)
÷÷F G
||
÷÷H J
(
÷÷K L
this
÷÷L P
==
÷÷Q S
LoopbackIpv6
÷÷T `
.
÷÷` a
WithPort
÷÷a i
(
÷÷i j
Port
÷÷j n
)
÷÷n o
)
÷÷o p
;
÷÷p q
public
€€ 
bool
€€ 
IsAny
€€ 
=>
€€ 
(
€€ 
this
€€ "
==
€€# %
AnyIpv4
€€& -
.
€€- .
WithPort
€€. 6
(
€€6 7
Port
€€7 ;
)
€€; <
)
€€< =
||
€€> @
(
€€A B
this
€€B F
==
€€G I
AnyIpv6
€€J Q
.
€€Q R
WithPort
€€R Z
(
€€Z [
Port
€€[ _
)
€€_ `
)
€€` a
;
€€a b
public
ÂÂ 
static
ÂÂ 
bool
ÂÂ 
TryParse
ÂÂ #
(
ÂÂ# $
string
ÂÂ$ *
address
ÂÂ+ 2
,
ÂÂ2 3
ushort
ÂÂ4 :
port
ÂÂ; ?
,
ÂÂ? @
out
ÂÂA D
NetworkEndPoint
ÂÂE T
endpoint
ÂÂU ]
,
ÂÂ] ^
NetworkFamily
ÂÂ_ l
family
ÂÂm s
=
ÂÂt u
NetworkFamilyÂÂv É
.ÂÂÉ Ñ
Ipv4ÂÂÑ à
)ÂÂà â
{
ÊÊ 	
UnsafeUtility
ÁÁ 
.
ÁÁ 
SizeOf
ÁÁ  
<
ÁÁ  !
Binding
ÁÁ! (
.
ÁÁ( )$
Baselib_NetworkAddress
ÁÁ) ?
>
ÁÁ? @
(
ÁÁ@ A
)
ÁÁA B
;
ÁÁB C
endpoint
ËË 
=
ËË 
default
ËË 
;
ËË 
var
ÍÍ 
nullTerminator
ÍÍ 
=
ÍÍ  
$char
ÍÍ! %
;
ÍÍ% &
var
ÎÎ 

errorState
ÎÎ 
=
ÎÎ 
default
ÎÎ $
(
ÎÎ$ %

ErrorState
ÎÎ% /
)
ÎÎ/ 0
;
ÎÎ0 1
var
ÏÏ 
ipBytes
ÏÏ 
=
ÏÏ 
System
ÏÏ  
.
ÏÏ  !
Text
ÏÏ! %
.
ÏÏ% &
Encoding
ÏÏ& .
.
ÏÏ. /
UTF8
ÏÏ/ 3
.
ÏÏ3 4
GetBytes
ÏÏ4 <
(
ÏÏ< =
address
ÏÏ= D
+
ÏÏE F
nullTerminator
ÏÏG U
)
ÏÏU V
;
ÏÏV W
fixed
ÓÓ 
(
ÓÓ 
byte
ÓÓ 
*
ÓÓ 

ipBytesPtr
ÓÓ "
=
ÓÓ# $
ipBytes
ÓÓ% ,
)
ÓÓ, -
fixed
ÔÔ 
(
ÔÔ 
Binding
ÔÔ 
.
ÔÔ $
Baselib_NetworkAddress
ÔÔ 0
*
ÔÔ1 2

rawAddress
ÔÔ3 =
=
ÔÔ> ?
&
ÔÔ@ A
endpoint
ÔÔA I
.
ÔÔI J
rawNetworkAddress
ÔÔJ [
)
ÔÔ[ \
{
 
Binding
ÒÒ 
.
ÒÒ +
Baselib_NetworkAddress_Encode
ÒÒ 5
(
ÒÒ5 6

rawAddress
ÚÚ 
,
ÚÚ 
ToBaselibFamily
ÛÛ #
(
ÛÛ# $
family
ÛÛ$ *
)
ÛÛ* +
,
ÛÛ+ ,

ipBytesPtr
ÙÙ 
,
ÙÙ 
(
ıı 
ushort
ıı 
)
ıı 
port
ıı  
,
ıı  !
&
ˆˆ 

errorState
ˆˆ 
)
ˆˆ  
;
ˆˆ  !
}
˜˜ 
if
˘˘ 
(
˘˘ 

errorState
˘˘ 
.
˘˘ 
code
˘˘ 
!=
˘˘  "
Binding
˘˘# *
.
˘˘* +
Baselib_ErrorCode
˘˘+ <
.
˘˘< =
Success
˘˘= D
)
˘˘D E
{
˙˙ 
return
˚˚ 
false
˚˚ 
;
˚˚ 
}
¸¸ 
return
˝˝ 
endpoint
˝˝ 
.
˝˝ 
IsValid
˝˝ #
;
˝˝# $
}
˛˛ 	
public
àà 
static
àà 
NetworkEndPoint
àà %
Parse
àà& +
(
àà+ ,
string
àà, 2
address
àà3 :
,
àà: ;
ushort
àà< B
port
ààC G
,
ààG H
NetworkFamily
ààI V
family
ààW ]
=
àà^ _
NetworkFamily
àà` m
.
ààm n
Ipv4
ààn r
)
ààr s
{
ââ 	
if
ää 
(
ää 
TryParse
ää 
(
ää 
address
ää  
,
ää  !
port
ää" &
,
ää& '
out
ää( +
var
ää, /
endpoint
ää0 8
,
ää8 9
family
ää: @
)
ää@ A
)
ääA B
return
ãã 
endpoint
ãã 
;
ãã  
return
çç 
default
çç 
;
çç 
}
éé 	
public
êê 
static
êê 
bool
êê 
operator
êê #
==
êê# %
(
êê% &
NetworkEndPoint
êê& 5
lhs
êê6 9
,
êê9 :
NetworkEndPoint
êê; J
rhs
êêK N
)
êêN O
{
ëë 	
return
íí 
lhs
íí 
.
íí 
Compare
íí 
(
íí 
rhs
íí "
)
íí" #
;
íí# $
}
ìì 	
public
ïï 
static
ïï 
bool
ïï 
operator
ïï #
!=
ïï# %
(
ïï% &
NetworkEndPoint
ïï& 5
lhs
ïï6 9
,
ïï9 :
NetworkEndPoint
ïï; J
rhs
ïïK N
)
ïïN O
{
ññ 	
return
óó 
!
óó 
lhs
óó 
.
óó 
Compare
óó 
(
óó  
rhs
óó  #
)
óó# $
;
óó$ %
}
òò 	
public
öö 
override
öö 
bool
öö 
Equals
öö #
(
öö# $
object
öö$ *
other
öö+ 0
)
öö0 1
{
õõ 	
return
úú 
this
úú 
==
úú 
(
úú 
NetworkEndPoint
úú +
)
úú+ ,
other
úú, 1
;
úú1 2
}
ùù 	
public
üü 
override
üü 
int
üü 
GetHashCode
üü '
(
üü' (
)
üü( )
{
†† 	
var
°° 
p
°° 
=
°° 
(
°° 
byte
°° 
*
°° 
)
°° 
UnsafeUtility
°° (
.
°°( )
	AddressOf
°°) 2
(
°°2 3
ref
°°3 6
rawNetworkAddress
°°7 H
)
°°H I
;
°°I J
	unchecked
¢¢ 
{
££ 
var
§§ 
result
§§ 
=
§§ 
$num
§§ 
;
§§ 
for
¶¶ 
(
¶¶ 
int
¶¶ 
i
¶¶ 
=
¶¶ 
$num
¶¶ 
;
¶¶ 
i
¶¶  !
<
¶¶" #
	rawLength
¶¶$ -
;
¶¶- .
i
¶¶/ 0
++
¶¶0 2
)
¶¶2 3
{
ßß 
result
®® 
=
®® 
(
®® 
result
®® $
*
®®% &
$num
®®' )
)
®®) *
^
®®+ ,
(
®®- .
int
®®. 1
)
®®1 2
p
®®2 3
[
®®3 4
i
®®4 5
]
®®5 6
;
®®6 7
}
©© 
return
´´ 
result
´´ 
;
´´ 
}
¨¨ 
}
≠≠ 	
bool
ØØ 
Compare
ØØ 
(
ØØ 
NetworkEndPoint
ØØ $
other
ØØ% *
)
ØØ* +
{
∞∞ 	
var
±± 
p
±± 
=
±± 
(
±± 
byte
±± 
*
±± 
)
±± 
UnsafeUtility
±± (
.
±±( )
	AddressOf
±±) 2
(
±±2 3
ref
±±3 6
rawNetworkAddress
±±7 H
)
±±H I
;
±±I J
var
≤≤ 
p1
≤≤ 
=
≤≤ 
(
≤≤ 
byte
≤≤ 
*
≤≤ 
)
≤≤ 
UnsafeUtility
≤≤ )
.
≤≤) *
	AddressOf
≤≤* 3
(
≤≤3 4
ref
≤≤4 7
other
≤≤8 =
.
≤≤= >
rawNetworkAddress
≤≤> O
)
≤≤O P
;
≤≤P Q
return
≥≥ 
UnsafeUtility
≥≥  
.
≥≥  !
MemCmp
≥≥! '
(
≥≥' (
p
≥≥( )
,
≥≥) *
p1
≥≥+ -
,
≥≥- .
	rawLength
≥≥/ 8
)
≥≥8 9
==
≥≥: <
$num
≥≥= >
;
≥≥> ?
}
¥¥ 	
internal
∂∂ 
static
∂∂ !
FixedString128Bytes
∂∂ +
AddressToString
∂∂, ;
(
∂∂; <
ref
∂∂< ?
Binding
∂∂@ G
.
∂∂G H$
Baselib_NetworkAddress
∂∂H ^
rawNetworkAddress
∂∂_ p
)
∂∂p q
{
∑∑ 	!
FixedString128Bytes
∏∏ 
str
∏∏  #
=
∏∏$ %
default
∏∏& -
;
∏∏- . 
FixedString32Bytes
ππ 
dot
ππ "
=
ππ# $
$str
ππ% (
;
ππ( ) 
FixedString32Bytes
∫∫ 
colon
∫∫ $
=
∫∫% &
$str
∫∫' *
;
∫∫* + 
FixedString32Bytes
ªª 
opensqb
ªª &
=
ªª' (
$str
ªª) ,
;
ªª, - 
FixedString32Bytes
ºº 
closesqb
ºº '
=
ºº( )
$str
ºº* -
;
ºº- .
switch
ΩΩ 
(
ΩΩ 
(
ΩΩ 
Binding
ΩΩ 
.
ΩΩ +
Baselib_NetworkAddress_Family
ΩΩ :
)
ΩΩ: ;
rawNetworkAddress
ΩΩ; L
.
ΩΩL M
family
ΩΩM S
)
ΩΩS T
{
ææ 
case
øø 
Binding
øø 
.
øø +
Baselib_NetworkAddress_Family
øø :
.
øø: ;
IPv4
øø; ?
:
øø? @
str
¡¡ 
.
¡¡ 
Append
¡¡ 
(
¡¡ 
rawNetworkAddress
¡¡ 0
.
¡¡0 1
data0
¡¡1 6
)
¡¡6 7
;
¡¡7 8
str
¬¬ 
.
¬¬ 
Append
¬¬ 
(
¬¬ 
dot
¬¬ "
)
¬¬" #
;
¬¬# $
str
√√ 
.
√√ 
Append
√√ 
(
√√ 
rawNetworkAddress
√√ 0
.
√√0 1
data1
√√1 6
)
√√6 7
;
√√7 8
str
ƒƒ 
.
ƒƒ 
Append
ƒƒ 
(
ƒƒ 
dot
ƒƒ "
)
ƒƒ" #
;
ƒƒ# $
str
≈≈ 
.
≈≈ 
Append
≈≈ 
(
≈≈ 
rawNetworkAddress
≈≈ 0
.
≈≈0 1
data2
≈≈1 6
)
≈≈6 7
;
≈≈7 8
str
∆∆ 
.
∆∆ 
Append
∆∆ 
(
∆∆ 
dot
∆∆ "
)
∆∆" #
;
∆∆# $
str
«« 
.
«« 
Append
«« 
(
«« 
rawNetworkAddress
«« 0
.
««0 1
data3
««1 6
)
««6 7
;
««7 8
str
…… 
.
…… 
Append
…… 
(
…… 
colon
…… $
)
……$ %
;
……% &
str
   
.
   
Append
   
(
   
(
    
ushort
    &
)
  & '
(
  ' (
rawNetworkAddress
  ( 9
.
  9 :
port1
  : ?
|
  @ A
(
  B C
rawNetworkAddress
  C T
.
  T U
port0
  U Z
<<
  [ ]
$num
  ^ _
)
  _ `
)
  ` a
)
  a b
;
  b c
break
ÀÀ 
;
ÀÀ 
case
ÃÃ 
Binding
ÃÃ 
.
ÃÃ +
Baselib_NetworkAddress_Family
ÃÃ :
.
ÃÃ: ;
IPv6
ÃÃ; ?
:
ÃÃ? @
str
œœ 
.
œœ 
Append
œœ 
(
œœ 
opensqb
œœ &
)
œœ& '
;
œœ' (
str
—— 
.
—— 
	AppendHex
—— !
(
——! "
(
——" #
ushort
——# )
)
——) *
(
——* +
rawNetworkAddress
——+ <
.
——< =
data1
——= B
|
——C D
(
——E F
rawNetworkAddress
——F W
.
——W X
data0
——X ]
<<
——^ `
$num
——a b
)
——b c
)
——c d
)
——d e
;
——e f
str
““ 
.
““ 
Append
““ 
(
““ 
colon
““ $
)
““$ %
;
““% &
str
”” 
.
”” 
	AppendHex
”” !
(
””! "
(
””" #
ushort
””# )
)
””) *
(
””* +
rawNetworkAddress
””+ <
.
””< =
data3
””= B
|
””C D
(
””E F
rawNetworkAddress
””F W
.
””W X
data2
””X ]
<<
””^ `
$num
””a b
)
””b c
)
””c d
)
””d e
;
””e f
str
‘‘ 
.
‘‘ 
Append
‘‘ 
(
‘‘ 
colon
‘‘ $
)
‘‘$ %
;
‘‘% &
str
’’ 
.
’’ 
	AppendHex
’’ !
(
’’! "
(
’’" #
ushort
’’# )
)
’’) *
(
’’* +
rawNetworkAddress
’’+ <
.
’’< =
data5
’’= B
|
’’C D
(
’’E F
rawNetworkAddress
’’F W
.
’’W X
data4
’’X ]
<<
’’^ `
$num
’’a b
)
’’b c
)
’’c d
)
’’d e
;
’’e f
str
÷÷ 
.
÷÷ 
Append
÷÷ 
(
÷÷ 
colon
÷÷ $
)
÷÷$ %
;
÷÷% &
str
◊◊ 
.
◊◊ 
	AppendHex
◊◊ !
(
◊◊! "
(
◊◊" #
ushort
◊◊# )
)
◊◊) *
(
◊◊* +
rawNetworkAddress
◊◊+ <
.
◊◊< =
data7
◊◊= B
|
◊◊C D
(
◊◊E F
rawNetworkAddress
◊◊F W
.
◊◊W X
data6
◊◊X ]
<<
◊◊^ `
$num
◊◊a b
)
◊◊b c
)
◊◊c d
)
◊◊d e
;
◊◊e f
str
ÿÿ 
.
ÿÿ 
Append
ÿÿ 
(
ÿÿ 
colon
ÿÿ $
)
ÿÿ$ %
;
ÿÿ% &
str
ŸŸ 
.
ŸŸ 
	AppendHex
ŸŸ !
(
ŸŸ! "
(
ŸŸ" #
ushort
ŸŸ# )
)
ŸŸ) *
(
ŸŸ* +
rawNetworkAddress
ŸŸ+ <
.
ŸŸ< =
data9
ŸŸ= B
|
ŸŸC D
(
ŸŸE F
rawNetworkAddress
ŸŸF W
.
ŸŸW X
data8
ŸŸX ]
<<
ŸŸ^ `
$num
ŸŸa b
)
ŸŸb c
)
ŸŸc d
)
ŸŸd e
;
ŸŸe f
str
⁄⁄ 
.
⁄⁄ 
Append
⁄⁄ 
(
⁄⁄ 
colon
⁄⁄ $
)
⁄⁄$ %
;
⁄⁄% &
str
€€ 
.
€€ 
	AppendHex
€€ !
(
€€! "
(
€€" #
ushort
€€# )
)
€€) *
(
€€* +
rawNetworkAddress
€€+ <
.
€€< =
data11
€€= C
|
€€D E
(
€€F G
rawNetworkAddress
€€G X
.
€€X Y
data10
€€Y _
<<
€€` b
$num
€€c d
)
€€d e
)
€€e f
)
€€f g
;
€€g h
str
‹‹ 
.
‹‹ 
Append
‹‹ 
(
‹‹ 
colon
‹‹ $
)
‹‹$ %
;
‹‹% &
str
›› 
.
›› 
	AppendHex
›› !
(
››! "
(
››" #
ushort
››# )
)
››) *
(
››* +
rawNetworkAddress
››+ <
.
››< =
data13
››= C
|
››D E
(
››F G
rawNetworkAddress
››G X
.
››X Y
data12
››Y _
<<
››` b
$num
››c d
)
››d e
)
››e f
)
››f g
;
››g h
str
ﬁﬁ 
.
ﬁﬁ 
Append
ﬁﬁ 
(
ﬁﬁ 
colon
ﬁﬁ $
)
ﬁﬁ$ %
;
ﬁﬁ% &
str
ﬂﬂ 
.
ﬂﬂ 
	AppendHex
ﬂﬂ !
(
ﬂﬂ! "
(
ﬂﬂ" #
ushort
ﬂﬂ# )
)
ﬂﬂ) *
(
ﬂﬂ* +
rawNetworkAddress
ﬂﬂ+ <
.
ﬂﬂ< =
data15
ﬂﬂ= C
|
ﬂﬂD E
(
ﬂﬂF G
rawNetworkAddress
ﬂﬂG X
.
ﬂﬂX Y
data14
ﬂﬂY _
<<
ﬂﬂ` b
$num
ﬂﬂc d
)
ﬂﬂd e
)
ﬂﬂe f
)
ﬂﬂf g
;
ﬂﬂg h
str
‡‡ 
.
‡‡ 
Append
‡‡ 
(
‡‡ 
colon
‡‡ $
)
‡‡$ %
;
‡‡% &
str
‚‚ 
.
‚‚ 
Append
‚‚ 
(
‚‚ 
closesqb
‚‚ '
)
‚‚' (
;
‚‚( )
str
„„ 
.
„„ 
Append
„„ 
(
„„ 
colon
„„ $
)
„„$ %
;
„„% &
str
‰‰ 
.
‰‰ 
Append
‰‰ 
(
‰‰ 
(
‰‰  
ushort
‰‰  &
)
‰‰& '
(
‰‰' (
rawNetworkAddress
‰‰( 9
.
‰‰9 :
port1
‰‰: ?
|
‰‰@ A
(
‰‰B C
rawNetworkAddress
‰‰C T
.
‰‰T U
port0
‰‰U Z
<<
‰‰[ ]
$num
‰‰^ _
)
‰‰_ `
)
‰‰` a
)
‰‰a b
;
‰‰b c
break
ÂÂ 
;
ÂÂ 
default
ÊÊ 
:
ÊÊ 
break
ÁÁ 
;
ÁÁ 
}
ËË 
return
ÈÈ 
str
ÈÈ 
;
ÈÈ 
}
ÍÍ 	
private
ÏÏ 
string
ÏÏ 
AddressAsString
ÏÏ &
(
ÏÏ& '
)
ÏÏ' (
{
ÌÌ 	
return
ÓÓ 
AddressToString
ÓÓ "
(
ÓÓ" #
ref
ÓÓ# &
rawNetworkAddress
ÓÓ' 8
)
ÓÓ8 9
.
ÓÓ9 :
ToString
ÓÓ: B
(
ÓÓB C
)
ÓÓC D
;
ÓÓD E
}
ÔÔ 	
public
ÒÒ 
override
ÒÒ 
string
ÒÒ 
ToString
ÒÒ '
(
ÒÒ' (
)
ÒÒ( )
{
ÚÚ 	
return
ÛÛ 
AddressToString
ÛÛ "
(
ÛÛ" #
ref
ÛÛ# &
rawNetworkAddress
ÛÛ' 8
)
ÛÛ8 9
.
ÛÛ9 :
ToString
ÛÛ: B
(
ÛÛB C
)
ÛÛC D
;
ÛÛD E
}
ÙÙ 	
private
ˆˆ 
static
ˆˆ 
ushort
ˆˆ 
ByteSwap
ˆˆ &
(
ˆˆ& '
ushort
ˆˆ' -
val
ˆˆ. 1
)
ˆˆ1 2
{
˜˜ 	
return
¯¯ 
(
¯¯ 
ushort
¯¯ 
)
¯¯ 
(
¯¯ 
(
¯¯ 
(
¯¯ 
val
¯¯ !
&
¯¯" #
$num
¯¯$ (
)
¯¯( )
<<
¯¯* ,
$num
¯¯- .
)
¯¯. /
|
¯¯0 1
(
¯¯2 3
val
¯¯3 6
>>
¯¯7 9
$num
¯¯: ;
)
¯¯; <
)
¯¯< =
;
¯¯= >
}
˘˘ 	
private
˚˚ 
static
˚˚ 
uint
˚˚ 
ByteSwap
˚˚ $
(
˚˚$ %
uint
˚˚% )
val
˚˚* -
)
˚˚- .
{
¸¸ 	
return
˝˝ 
(
˝˝ 
uint
˝˝ 
)
˝˝ 
(
˝˝ 
(
˝˝ 
(
˝˝ 
val
˝˝ 
&
˝˝  !
$num
˝˝" &
)
˝˝& '
<<
˝˝( *
$num
˝˝+ -
)
˝˝- .
|
˝˝/ 0
(
˝˝1 2
(
˝˝2 3
val
˝˝3 6
&
˝˝7 8
$num
˝˝9 ?
)
˝˝? @
<<
˝˝A C
$num
˝˝D E
)
˝˝E F
|
˝˝G H
(
˝˝I J
(
˝˝J K
val
˝˝K N
>>
˝˝O Q
$num
˝˝R S
)
˝˝S T
&
˝˝U V
$num
˝˝W ]
)
˝˝] ^
|
˝˝_ `
(
˝˝a b
val
˝˝b e
>>
˝˝f h
$num
˝˝i k
)
˝˝k l
)
˝˝l m
;
˝˝m n
}
˛˛ 	
static
ÄÄ 
NetworkEndPoint
ÄÄ 
CreateAddress
ÄÄ ,
(
ÄÄ, -
ushort
ÄÄ- 3
port
ÄÄ4 8
,
ÄÄ8 9
AddressType
ÄÄ: E
type
ÄÄF J
=
ÄÄK L
AddressType
ÄÄM X
.
ÄÄX Y
Any
ÄÄY \
,
ÄÄ\ ]
NetworkFamily
ÄÄ^ k
family
ÄÄl r
=
ÄÄs t
NetworkFamilyÄÄu Ç
.ÄÄÇ É
Ipv4ÄÄÉ á
)ÄÄá à
{
ÅÅ 	
UnityEngine
ÉÉ 
.
ÉÉ 
Debug
ÉÉ 
.
ÉÉ 
Assert
ÉÉ $
(
ÉÉ$ %
UnsafeUtility
ÉÉ% 2
.
ÉÉ2 3
SizeOf
ÉÉ3 9
<
ÉÉ9 :
Binding
ÉÉ: A
.
ÉÉA B$
Baselib_NetworkAddress
ÉÉB X
>
ÉÉX Y
(
ÉÉY Z
)
ÉÉZ [
==
ÉÉ\ ^
	rawLength
ÉÉ_ h
)
ÉÉh i
;
ÉÉi j
if
ÖÖ 
(
ÖÖ 
family
ÖÖ 
==
ÖÖ 
NetworkFamily
ÖÖ '
.
ÖÖ' (
Invalid
ÖÖ( /
)
ÖÖ/ 0
return
ÜÜ 
default
ÜÜ 
;
ÜÜ 
uint
àà 
ipv4Loopback
àà 
=
àà 
(
àà  !
$num
àà! $
<<
àà% '
$num
àà( *
)
àà* +
|
àà, -
$num
àà. /
;
àà/ 0
if
ää 
(
ää 
IsLittleEndian
ää 
)
ää 
{
ãã 
port
åå 
=
åå 
ByteSwap
åå 
(
åå  
port
åå  $
)
åå$ %
;
åå% &
ipv4Loopback
çç 
=
çç 
ByteSwap
çç '
(
çç' (
ipv4Loopback
çç( 4
)
çç4 5
;
çç5 6
}
éé 
var
êê 
ep
êê 
=
êê 
new
êê 
NetworkEndPoint
êê (
{
ëë 
Family
íí 
=
íí 
family
íí 
,
íí  
RawPort
ìì 
=
ìì 
port
ìì 
}
îî 
;
îî 
if
ññ 
(
ññ 
type
ññ 
==
ññ 
AddressType
ññ #
.
ññ# $
Loopback
ññ$ ,
)
ññ, -
{
óó 
if
òò 
(
òò 
family
òò 
==
òò 
NetworkFamily
òò +
.
òò+ ,
Ipv4
òò, 0
)
òò0 1
{
ôô 
*
öö 
(
öö 
uint
öö 
*
öö 
)
öö 
UnsafeUtility
öö )
.
öö) *
	AddressOf
öö* 3
(
öö3 4
ref
öö4 7
ep
öö8 :
.
öö: ;
rawNetworkAddress
öö; L
)
ööL M
=
ööN O
ipv4Loopback
ööP \
;
öö\ ]
}
õõ 
else
úú 
if
úú 
(
úú 
family
úú 
==
úú  "
NetworkFamily
úú# 0
.
úú0 1
Ipv6
úú1 5
)
úú5 6
{
ùù 
ep
ûû 
.
ûû 
rawNetworkAddress
ûû (
.
ûû( )
data15
ûû) /
=
ûû0 1
$num
ûû2 3
;
ûû3 4
}
üü 
}
†† 
return
°° 
ep
°° 
;
°° 
}
¢¢ 	
static
§§ 
NetworkFamily
§§ 
FromBaselibFamily
§§ .
(
§§. /
Binding
§§/ 6
.
§§6 7+
Baselib_NetworkAddress_Family
§§7 T
family
§§U [
)
§§[ \
{
•• 	
if
¶¶ 
(
¶¶ 
family
¶¶ 
==
¶¶ 
Binding
¶¶ !
.
¶¶! "+
Baselib_NetworkAddress_Family
¶¶" ?
.
¶¶? @
IPv4
¶¶@ D
)
¶¶D E
return
ßß 
NetworkFamily
ßß $
.
ßß$ %
Ipv4
ßß% )
;
ßß) *
if
®® 
(
®® 
family
®® 
==
®® 
Binding
®® !
.
®®! "+
Baselib_NetworkAddress_Family
®®" ?
.
®®? @
IPv6
®®@ D
)
®®D E
return
©© 
NetworkFamily
©© $
.
©©$ %
Ipv6
©©% )
;
©©) *
return
™™ 
NetworkFamily
™™  
.
™™  !
Invalid
™™! (
;
™™( )
}
´´ 	
static
≠≠ 
Binding
≠≠ 
.
≠≠ +
Baselib_NetworkAddress_Family
≠≠ 4
ToBaselibFamily
≠≠5 D
(
≠≠D E
NetworkFamily
≠≠E R
family
≠≠S Y
)
≠≠Y Z
{
ÆÆ 	
if
ØØ 
(
ØØ 
family
ØØ 
==
ØØ 
NetworkFamily
ØØ '
.
ØØ' (
Ipv4
ØØ( ,
)
ØØ, -
return
∞∞ 
Binding
∞∞ 
.
∞∞ +
Baselib_NetworkAddress_Family
∞∞ <
.
∞∞< =
IPv4
∞∞= A
;
∞∞A B
if
±± 
(
±± 
family
±± 
==
±± 
NetworkFamily
±± '
.
±±' (
Ipv6
±±( ,
)
±±, -
return
≤≤ 
Binding
≤≤ 
.
≤≤ +
Baselib_NetworkAddress_Family
≤≤ <
.
≤≤< =
IPv6
≤≤= A
;
≤≤A B
return
≥≥ 
Binding
≥≥ 
.
≥≥ +
Baselib_NetworkAddress_Family
≥≥ 8
.
≥≥8 9
Invalid
≥≥9 @
;
≥≥@ A
}
¥¥ 	
}
µµ 
public
∫∫ 

unsafe
∫∫ 
struct
∫∫ &
NetworkInterfaceEndPoint
∫∫ 1
:
∫∫2 3

IEquatable
∫∫4 >
<
∫∫> ?&
NetworkInterfaceEndPoint
∫∫? W
>
∫∫W X
{
ªª 
public
øø 
const
øø 
int
øø 
k_MaxLength
øø $
=
øø% &
$num
øø' )
;
øø) *
public
ƒƒ 
int
ƒƒ 

dataLength
ƒƒ 
;
ƒƒ 
public
…… 
fixed
…… 
byte
…… 
data
…… 
[
…… 
k_MaxLength
…… *
]
……* +
;
……+ ,
public
ŒŒ 
bool
ŒŒ 
IsValid
ŒŒ 
=>
ŒŒ 

dataLength
ŒŒ )
!=
ŒŒ* ,
$num
ŒŒ- .
;
ŒŒ. /
public
–– 
static
–– 
bool
–– 
operator
–– #
==
––# %
(
––% &&
NetworkInterfaceEndPoint
––& >
lhs
––? B
,
––B C&
NetworkInterfaceEndPoint
––D \
rhs
––] `
)
––` a
{
—— 	
return
““ 
lhs
““ 
.
““ 
Equals
““ 
(
““ 
rhs
““ !
)
““! "
;
““" #
}
”” 	
public
’’ 
static
’’ 
bool
’’ 
operator
’’ #
!=
’’# %
(
’’% &&
NetworkInterfaceEndPoint
’’& >
lhs
’’? B
,
’’B C&
NetworkInterfaceEndPoint
’’D \
rhs
’’] `
)
’’` a
{
÷÷ 	
return
◊◊ 
!
◊◊ 
lhs
◊◊ 
.
◊◊ 
Equals
◊◊ 
(
◊◊ 
rhs
◊◊ "
)
◊◊" #
;
◊◊# $
}
ÿÿ 	
public
⁄⁄ 
override
⁄⁄ 
bool
⁄⁄ 
Equals
⁄⁄ #
(
⁄⁄# $
object
⁄⁄$ *
other
⁄⁄+ 0
)
⁄⁄0 1
{
€€ 	
return
‹‹ 
Equals
‹‹ 
(
‹‹ 
(
‹‹ &
NetworkInterfaceEndPoint
‹‹ 3
)
‹‹3 4
other
‹‹4 9
)
‹‹9 :
;
‹‹: ;
}
›› 	
public
ﬂﬂ 
override
ﬂﬂ 
int
ﬂﬂ 
GetHashCode
ﬂﬂ '
(
ﬂﬂ' (
)
ﬂﬂ( )
{
‡‡ 	
fixed
·· 
(
·· 
byte
·· 
*
·· 
p
·· 
=
·· 
data
··  
)
··  !
	unchecked
‚‚ 
{
„„ 
var
‰‰ 
result
‰‰ 
=
‰‰ 
$num
‰‰ 
;
‰‰ 
for
ÊÊ 
(
ÊÊ 
int
ÊÊ 
i
ÊÊ 
=
ÊÊ 
$num
ÊÊ 
;
ÊÊ 
i
ÊÊ  !
<
ÊÊ" #

dataLength
ÊÊ$ .
;
ÊÊ. /
i
ÊÊ0 1
++
ÊÊ1 3
)
ÊÊ3 4
{
ÁÁ 
result
ËË 
=
ËË 
(
ËË 
result
ËË $
*
ËË% &
$num
ËË' )
)
ËË) *
^
ËË+ ,
(
ËË- .
int
ËË. 1
)
ËË1 2
p
ËË2 3
[
ËË3 4
i
ËË4 5
]
ËË5 6
;
ËË6 7
}
ÈÈ 
return
ÎÎ 
result
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}
ÌÌ 	
public
ÔÔ 
bool
ÔÔ 
Equals
ÔÔ 
(
ÔÔ &
NetworkInterfaceEndPoint
ÔÔ 3
other
ÔÔ4 9
)
ÔÔ9 :
{
 	
if
ÛÛ 
(
ÛÛ 

dataLength
ÛÛ 
!=
ÛÛ 
other
ÛÛ #
.
ÛÛ# $

dataLength
ÛÛ$ .
&&
ÛÛ/ 1
(
ÛÛ2 3

dataLength
ÛÛ3 =
<=
ÛÛ> @
$num
ÛÛA B
||
ÛÛC E
other
ÛÛF K
.
ÛÛK L

dataLength
ÛÛL V
<=
ÛÛW Y
$num
ÛÛZ [
)
ÛÛ[ \
)
ÛÛ\ ]
return
ÙÙ 
false
ÙÙ 
;
ÙÙ 
fixed
ˆˆ 
(
ˆˆ 
void
ˆˆ 
*
ˆˆ 
p
ˆˆ 
=
ˆˆ 
this
ˆˆ  
.
ˆˆ  !
data
ˆˆ! %
)
ˆˆ% &
{
˜˜ 
return
¯¯ 
UnsafeUtility
¯¯ $
.
¯¯$ %
MemCmp
¯¯% +
(
¯¯+ ,
p
¯¯, -
,
¯¯- .
other
¯¯/ 4
.
¯¯4 5
data
¯¯5 9
,
¯¯9 :
math
¯¯; ?
.
¯¯? @
min
¯¯@ C
(
¯¯C D

dataLength
¯¯D N
,
¯¯N O
other
¯¯P U
.
¯¯U V

dataLength
¯¯V `
)
¯¯` a
)
¯¯a b
==
¯¯c e
$num
¯¯f g
;
¯¯g h
}
˘˘ 
}
˙˙ 	
public
ˇˇ  
FixedString64Bytes
ˇˇ !
ToFixedString
ˇˇ" /
(
ˇˇ/ 0
)
ˇˇ0 1
{
ÄÄ 	
if
ÅÅ 
(
ÅÅ 
IsValid
ÅÅ 
==
ÅÅ 
false
ÅÅ  
)
ÅÅ  !
return
ÇÇ 
(
ÇÇ  
FixedString64Bytes
ÇÇ *
)
ÇÇ* +
$str
ÇÇ+ 6
;
ÇÇ6 7
var
ÑÑ 
n
ÑÑ 
=
ÑÑ 

dataLength
ÑÑ 
;
ÑÑ 
var
ÖÖ 
res
ÖÖ 
=
ÖÖ 
new
ÖÖ  
FixedString64Bytes
ÖÖ ,
(
ÖÖ, -
)
ÖÖ- .
;
ÖÖ. /
if
áá 
(
áá 
n
áá 
==
áá 
$num
áá 
)
áá 
{
àà 
res
ââ 
.
ââ 
Append
ââ 
(
ââ 
data
ââ 
[
ââ  
$num
ââ  !
]
ââ! "
)
ââ" #
;
ââ# $
res
ää 
.
ää 
Append
ää 
(
ää 
$char
ää 
)
ää 
;
ää  
res
ãã 
.
ãã 
Append
ãã 
(
ãã 
data
ãã 
[
ãã  
$num
ãã  !
]
ãã! "
)
ãã" #
;
ãã# $
res
åå 
.
åå 
Append
åå 
(
åå 
$char
åå 
)
åå 
;
åå  
res
çç 
.
çç 
Append
çç 
(
çç 
data
çç 
[
çç  
$num
çç  !
]
çç! "
)
çç" #
;
çç# $
res
éé 
.
éé 
Append
éé 
(
éé 
$char
éé 
)
éé 
;
éé  
res
èè 
.
èè 
Append
èè 
(
èè 
data
èè 
[
èè  
$num
èè  !
]
èè! "
)
èè" #
;
èè# $
return
ëë 
res
ëë 
;
ëë 
}
íí 
res
îî 
.
îî 
Append
îî 
(
îî 
(
îî  
FixedString32Bytes
îî *
)
îî* +
$str
îî+ /
)
îî/ 0
;
îî0 1
fixed
ïï 
(
ïï 
byte
ïï 
*
ïï 
p
ïï 
=
ïï 
this
ïï  
.
ïï  !
data
ïï! %
)
ïï% &
{
ññ 
for
óó 
(
óó 
var
óó 
i
óó 
=
óó 
$num
óó 
;
óó 
i
óó  !
<
óó" #
n
óó$ %
;
óó% &
i
óó' (
+=
óó) +
$num
óó, -
)
óó- .
{
òò 
var
ôô 
ushortP
ôô 
=
ôô  !
(
ôô" #
ushort
ôô# )
*
ôô) *
)
ôô* +
(
ôô+ ,
p
ôô, -
+
ôô. /
i
ôô0 1
)
ôô1 2
;
ôô2 3
res
öö 
.
öö 
	AppendHex
öö !
(
öö! "
*
öö" #
ushortP
öö# *
)
öö* +
;
öö+ ,
}
õõ 
}
úú 
return
ùù 
res
ùù 
;
ùù 
}
ûû 	
public
££ 
override
££ 
string
££ 
ToString
££ '
(
££' (
)
££( )
{
§§ 	
return
•• 
ToFixedString
••  
(
••  !
)
••! "
.
••" #
ToString
••# +
(
••+ ,
)
••, -
;
••- .
}
¶¶ 	
}
ßß 
}®® ÖY
QC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Base64.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
internal 
static 
class 
Base64  
{ 
private 
static 
unsafe 
int !#
FromBase64_Decode_UTF16" 9
(9 :
byte: >
*> ?
startInputPtr@ M
,M N
intO R
inputLengthS ^
,^ _
byte` d
*d e
startDestPtrf r
,r s
intt w

destLength	x Ç
)
Ç É
{ 	
if 
( 
inputLength 
== 
$num  
)  !
return 
$num 
; 
const 
int 
sizeCharUTF16 #
=$ %
$num& '
;' (
if 
( 
inputLength 
% 
$num 
!=  "
$num# $
)$ %
{   
Debug!! 
.!! 
LogError!! 
(!! 
$str!! M
)!!M N
;!!N O
return"" 
-"" 
$num"" 
;"" 
}## 
if%% 
(%% 

destLength%% 
<%% 
inputLength%% (
/%%) *
$num%%+ ,
*%%- .
$num%%/ 0
-%%1 2
$num%%3 4
)%%4 5
{&& 
Debug'' 
.'' 
LogError'' 
('' 
$str'' 8
)''8 9
;''9 :
return(( 
-(( 
$num(( 
;(( 
})) 
var++  
originalStartDestPtr++ $
=++% &
startDestPtr++' 3
;++3 4
var-- 
n-- 
=-- 
inputLength-- 
/--  !
$num--" #
;--# $
const// 
string// 
table// 
=//  
$str//! c
;//c d
var11 
lookup11 
=11 

stackalloc11 #
byte11$ (
[11( )
$num11) ,
]11, -
;11- .
UnsafeUtility22 
.22 
MemSet22  
(22  !
lookup22! '
,22' (
$num22) -
,22- .
$num22/ 2
)222 3
;223 4
for33 
(33 
byte33 
i33 
=33 
$num33 
;33 
i33 
<33  
table33! &
.33& '
Length33' -
;33- .
i33/ 0
++330 2
)332 3
lookup44 
[44 
table44 
[44 
i44 
]44 
]44  
=44! "
i44# $
;44$ %
lookup55 
[55 
$char55 
]55 
=55 
$num55 
;55 
for88 
(88 
var88 
i88 
=88 
$num88 
;88 
i88 
<88 
n88  !
-88" #
$num88$ %
;88% &
i88' (
++88( *
)88* +
{99 
byte:: 
a:: 
=:: 
lookup:: 
[::  
startInputPtr::  -
[::- .
$num::. /
*::0 1
sizeCharUTF16::2 ?
]::? @
]::@ A
;::A B
byte;; 
b;; 
=;; 
lookup;; 
[;;  
startInputPtr;;  -
[;;- .
$num;;. /
*;;0 1
sizeCharUTF16;;2 ?
];;? @
];;@ A
;;;A B
byte<< 
c<< 
=<< 
lookup<< 
[<<  
startInputPtr<<  -
[<<- .
$num<<. /
*<<0 1
sizeCharUTF16<<2 ?
]<<? @
]<<@ A
;<<A B
byte== 
d== 
=== 
lookup== 
[==  
startInputPtr==  -
[==- .
$num==. /
*==0 1
sizeCharUTF16==2 ?
]==? @
]==@ A
;==A B
if?? 
(?? 
a?? 
==?? 
$num?? 
||??  
b??! "
==??# %
$num??& *
||??+ -
c??. /
==??0 2
$num??3 7
||??8 :
d??; <
==??= ?
$num??@ D
)??D E
{@@ 
DebugAA 
.AA 
LogErrorAA "
(AA" #
$strAA# :
)AA: ;
;AA; <
returnBB 
-BB 
$numBB 
;BB 
}CC 
*EE 
startDestPtrEE 
++EE 
=EE  !
(EE" #
byteEE# '
)EE' (
(EE( )
(EE) *
aEE* +
<<EE, .
$numEE/ 0
)EE0 1
|EE2 3
(EE4 5
bEE5 6
>>EE7 9
$numEE: ;
)EE; <
)EE< =
;EE= >
*FF 
startDestPtrFF 
++FF 
=FF  !
(FF" #
byteFF# '
)FF' (
(FF( )
(FF) *
bFF* +
<<FF, .
$numFF/ 0
)FF0 1
|FF2 3
(FF4 5
cFF5 6
>>FF7 9
$numFF: ;
)FF; <
)FF< =
;FF= >
*GG 
startDestPtrGG 
++GG 
=GG  !
(GG" #
byteGG# '
)GG' (
(GG( )
(GG) *
cGG* +
<<GG, .
$numGG/ 0
)GG0 1
|GG2 3
dGG4 5
)GG5 6
;GG6 7
startInputPtrII 
+=II  
$numII! "
*II# $
sizeCharUTF16II% 2
;II2 3
}JJ 
varMM 
ccMM 
=MM 
startInputPtrMM "
[MM" #
$numMM# $
*MM% &
sizeCharUTF16MM' 4
]MM4 5
;MM5 6
varNN 
ddNN 
=NN 
startInputPtrNN "
[NN" #
$numNN# $
*NN% &
sizeCharUTF16NN' 4
]NN4 5
;NN5 6
varPP 
laPP 
=PP 
lookupPP 
[PP 
startInputPtrPP )
[PP) *
$numPP* +
*PP, -
sizeCharUTF16PP. ;
]PP; <
]PP< =
;PP= >
varQQ 
lbQQ 
=QQ 
lookupQQ 
[QQ 
startInputPtrQQ )
[QQ) *
$numQQ* +
*QQ, -
sizeCharUTF16QQ. ;
]QQ; <
]QQ< =
;QQ= >
varRR 
lcRR 
=RR 
lookupRR 
[RR 
ccRR 
]RR 
;RR  
varSS 
ldSS 
=SS 
lookupSS 
[SS 
ddSS 
]SS 
;SS  
ifUU 
(UU 
laUU 
==UU 
$numUU 
||UU 
lbUU  
==UU! #
$numUU$ (
||UU) +
lcUU, .
==UU/ 1
$numUU2 6
||UU7 9
ldUU: <
==UU= ?
$numUU@ D
)UUD E
{VV 
DebugWW 
.WW 
LogErrorWW 
(WW 
$strWW 6
)WW6 7
;WW7 8
returnXX 
-XX 
$numXX 
;XX 
}YY 
*[[ 
startDestPtr[[ 
++[[ 
=[[ 
([[ 
byte[[ #
)[[# $
([[$ %
([[% &
la[[& (
<<[[) +
$num[[, -
)[[- .
|[[/ 0
([[1 2
lb[[2 4
>>[[5 7
$num[[8 9
)[[9 :
)[[: ;
;[[; <
if]] 
(]] 
cc]] 
!=]] 
$char]] 
)]] 
{^^ 
if__ 
(__ 
dd__ 
==__ 
$char__ 
)__ 
{`` 
ifaa 
(aa 

destLengthaa "
<aa# $
inputLengthaa% 0
/aa1 2
$numaa3 4
*aa5 6
$numaa7 8
-aa9 :
$numaa; <
)aa< =
{bb 
Debugcc 
.cc 
LogErrorcc &
(cc& '
$strcc' @
)cc@ A
;ccA B
returndd 
-dd  
$numdd  !
;dd! "
}ee 
*gg 
startDestPtrgg !
++gg! #
=gg$ %
(gg& '
bytegg' +
)gg+ ,
(gg, -
(gg- .
lbgg. 0
<<gg1 3
$numgg4 5
)gg5 6
|gg7 8
(gg9 :
lcgg: <
>>gg= ?
$numgg@ A
)ggA B
)ggB C
;ggC D
}hh 
elseii 
{jj 
ifkk 
(kk 

destLengthkk "
<kk# $
inputLengthkk% 0
/kk1 2
$numkk3 4
*kk5 6
$numkk7 8
)kk8 9
{ll 
Debugmm 
.mm 
LogErrormm &
(mm& '
$strmm' @
)mm@ A
;mmA B
returnnn 
-nn  
$numnn  !
;nn! "
}oo 
*qq 
startDestPtrqq !
++qq! #
=qq$ %
(qq& '
byteqq' +
)qq+ ,
(qq, -
(qq- .
lbqq. 0
<<qq1 3
$numqq4 5
)qq5 6
|qq7 8
(qq9 :
lcqq: <
>>qq= ?
$numqq@ A
)qqA B
)qqB C
;qqC D
*rr 
startDestPtrrr !
++rr! #
=rr$ %
(rr& '
byterr' +
)rr+ ,
(rr, -
(rr- .
lcrr. 0
<<rr1 3
$numrr4 5
)rr5 6
|rr7 8
ldrr9 ;
)rr; <
;rr< =
}ss 
}tt 
returnvv 
(vv 
intvv 
)vv 
(vv 
startDestPtrvv %
-vv& ' 
originalStartDestPtrvv( <
)vv< =
;vv= >
}ww 	
public
ÉÉ 
static
ÉÉ 
unsafe
ÉÉ 
int
ÉÉ  
FromBase64String
ÉÉ! 1
(
ÉÉ1 2
string
ÉÉ2 8
base64
ÉÉ9 ?
,
ÉÉ? @
byte
ÉÉA E
*
ÉÉE F
dest
ÉÉG K
,
ÉÉK L
int
ÉÉM P
destMaxLength
ÉÉQ ^
)
ÉÉ^ _
{
ÑÑ 	
var
ÖÖ 
result
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
;
ÖÖ 
fixed
ÜÜ 
(
ÜÜ 
char
ÜÜ 
*
ÜÜ 
ptr
ÜÜ 
=
ÜÜ 
base64
ÜÜ $
)
ÜÜ$ %
{
áá 
result
àà 
=
àà %
FromBase64_Decode_UTF16
àà 0
(
àà0 1
(
àà1 2
byte
àà2 6
*
àà6 7
)
àà7 8
ptr
àà8 ;
,
àà; <
base64
àà= C
.
ààC D
Length
ààD J
,
ààJ K
dest
ààL P
,
ààP Q
destMaxLength
ààR _
)
àà_ `
;
àà` a
}
ââ 
if
åå 
(
åå 
result
åå 
==
åå 
-
åå 
$num
åå 
)
åå 
{
çç 
throw
éé 
new
éé 
ArgumentException
éé +
(
éé+ ,
$str
éé, b
)
ééb c
;
ééc d
}
èè 
return
ëë 
result
ëë 
;
ëë 
}
íí 	
}
ìì 
}îî è
tC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\Messages\RelayMessageConnectRequest.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
[ 
StructLayout 
( 

LayoutKind 
. 

Sequential '
)' (
]( )
internal 
struct &
RelayMessageConnectRequest .
{ 
public 
const 
int 
Length 
=  !
RelayMessageHeader" 4
.4 5
Length5 ;
+< =
RelayAllocationId> O
.O P
k_LengthP X
+Y Z
$num[ \
+] ^
RelayConnectionData_ r
.r s
k_Lengths {
;{ |
public

 
RelayMessageHeader

 !
Header

" (
;

( )
public 
RelayAllocationId  
AllocationId! -
;- .
public 
byte "
ToConnectionDataLength *
;* +
public 
RelayConnectionData "
ToConnectionData# 3
;3 4
internal 
static &
RelayMessageConnectRequest 2
Create3 9
(9 :
RelayAllocationId: K
allocationIdL X
,X Y
RelayConnectionDataZ m
toConnectionDatan ~
)~ 
{ 	
return 
new &
RelayMessageConnectRequest 1
{ 
Header 
= 
RelayMessageHeader +
.+ ,
Create, 2
(2 3
RelayMessageType3 C
.C D
ConnectRequestD R
)R S
,S T
AllocationId 
= 
allocationId +
,+ ,"
ToConnectionDataLength &
=' (
$num) ,
,, -
ToConnectionData  
=! "
toConnectionData# 3
,3 4
} 
; 
} 	
} 
} Ô
]C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\RelayHMACKey.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
public		 

unsafe		 
struct		 
RelayHMACKey		 %
{

 
public 
const 
int 
k_Length !
=" #
$num$ &
;& '
public 
fixed 
byte 
Value 
[  
k_Length  (
]( )
;) *
public 
static 
RelayHMACKey "
FromBytePointer# 2
(2 3
byte3 7
*7 8
data9 =
,= >
int? B
lengthC I
)I J
{ 	
if 
( 
length 
!= 
k_Length "
)" #
{   
throw"" 
new"" 
ArgumentException"" +
(""+ ,
$""", .
$str"". ]
{""] ^
k_Length""^ f
}""f g
$str""g p
{""p q
length""q w
}""w x
$str""x y
"""y z
)""z {
;""{ |
}'' 
var)) 
hmacKey)) 
=)) 
new)) 
RelayHMACKey)) *
())* +
)))+ ,
;)), -
UnsafeUtility** 
.** 
MemCpy**  
(**  !
hmacKey**! (
.**( )
Value**) .
,**. /
data**0 4
,**4 5
length**6 <
)**< =
;**= >
return++ 
hmacKey++ 
;++ 
},, 	
}-- 
}.. •)
UC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\HMACSHA256.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
internal 
static 
class 

HMACSHA256 $
{		 
public 
static 
unsafe 
void !
ComputeHash" -
(- .
byte. 2
*2 3
keyValue4 <
,< =
int> A
keyArrayLengthB P
,P Q
byteR V
*V W
messageBytesX d
,d e
intf i
messageLengthj w
,w x
bytey }
*} ~
result	 Ö
)
Ö Ü
{ 	
const 
int 
B 
= 
$num 
; 
const 
int 
sha256SizeBytes %
=& '
$num( *
;* +
const 
byte 
ipad 
= 
$num "
;" #
const 
byte 
opad 
= 
$num "
;" #
var 

shorterKey 
= 

stackalloc '
byte( ,
[, -
sha256SizeBytes- <
]< =
;= >
var 
sha256State 
= 
SHA256 $
.$ %
SHA256State% 0
.0 1
Create1 7
(7 8
)8 9
;9 :
if 
( 
keyArrayLength 
>  
B! "
)" #
{ 
sha256State 
. 
Update "
(" #
keyValue# +
,+ ,
keyArrayLength- ;
); <
;< =
sha256State   
.   
Final   !
(  ! "

shorterKey  " ,
)  , -
;  - .
keyValue"" 
="" 

shorterKey"" %
;""% &
keyArrayLength## 
=##  
sha256SizeBytes##! 0
;##0 1
}$$ 
var&& 
kx&& 
=&& 

stackalloc&& 
byte&&  $
[&&$ %
B&&% &
]&&& '
;&&' (
for'' 
('' 
var'' 
i'' 
='' 
$num'' 
;'' 
i'' 
<'' 
keyArrayLength''  .
;''. /
i''0 1
++''1 3
)''3 4
kx(( 
[(( 
i(( 
](( 
=(( 
((( 
byte(( 
)(( 
((( 
ipad(( #
^(($ %
keyValue((& .
[((. /
i((/ 0
]((0 1
)((1 2
;((2 3
for)) 
()) 
var)) 
i)) 
=)) 
keyArrayLength)) '
;))' (
i))) *
<))+ ,
B))- .
;)). /
i))0 1
++))1 3
)))3 4
kx** 
[** 
i** 
]** 
=** 
ipad** 
;** 
sha256State,, 
=,, 
SHA256,,  
.,,  !
SHA256State,,! ,
.,,, -
Create,,- 3
(,,3 4
),,4 5
;,,5 6
sha256State-- 
.-- 
Update-- 
(-- 
kx-- !
,--! "
B--# $
)--$ %
;--% &
sha256State.. 
... 
Update.. 
(.. 
messageBytes.. +
,..+ ,
messageLength..- :
)..: ;
;..; <
sha256State// 
.// 
Final// 
(// 
result// $
)//$ %
;//% &
for11 
(11 
var11 
i11 
=11 
$num11 
;11 
i11 
<11 
keyArrayLength11  .
;11. /
i110 1
++111 3
)113 4
kx22 
[22 
i22 
]22 
=22 
(22 
byte22 
)22 
(22 
opad22 #
^22$ %
keyValue22& .
[22. /
i22/ 0
]220 1
)221 2
;222 3
for33 
(33 
var33 
i33 
=33 
keyArrayLength33 '
;33' (
i33) *
<33+ ,
B33- .
;33. /
i330 1
++331 3
)333 4
kx44 
[44 
i44 
]44 
=44 
opad44 
;44 
sha256State66 
=66 
SHA25666  
.66  !
SHA256State66! ,
.66, -
Create66- 3
(663 4
)664 5
;665 6
sha256State77 
.77 
Update77 
(77 
kx77 !
,77! "
B77# $
)77$ %
;77% &
sha256State88 
.88 
Update88 
(88 
result88 %
,88% &
sha256SizeBytes88' 6
)886 7
;887 8
sha256State99 
.99 
Final99 
(99 
result99 $
)99$ %
;99% &
}:: 	
};; 
}<< —R
^C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\BaselibNetworkArray.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
internal 
unsafe 
struct %
UnsafeBaselibNetworkArray 4
:5 6
IDisposable7 B
{ 
[ 	-
!NativeDisableUnsafePtrRestriction	 *
]* +
UnsafePtrList, 9
<9 :
Binding: A
.A B,
 Baselib_RegisteredNetwork_BufferB b
>b c
m_BufferPoold p
;p q
public %
UnsafeBaselibNetworkArray (
(( )
int) ,
capacity- 5
,5 6
int7 :
typeSize; C
)C D
{ 	
var   
	totalSize   
=   
(   
long   !
)  ! "
typeSize  " *
;  * +
if&& 
(&& 
typeSize&& 
<&& 
$num&& 
)&& 
throw'' 
new'' '
ArgumentOutOfRangeException'' 5
(''5 6
nameof''6 <
(''< =
typeSize''= E
)''E F
,''F G
$str''H _
)''_ `
;''` a
if)) 
()) 
	totalSize)) 
>)) 
int)) 
.))  
MaxValue))  (
)))( )
throw** 
new** '
ArgumentOutOfRangeException** 5
(**5 6
nameof**6 <
(**< =
typeSize**= E
)**E F
,**F G
$"**H J
$str**J m
{**m n
int**n q
.**q r
MaxValue**r z
}**z {
$str	**{ Å
"
**Å Ç
)
**Ç É
;
**É Ñ
var-- 
poolSize-- 
=-- 
capacity-- #
;--# $
m_BufferPool22 
=22 
new22 
UnsafePtrList22 ,
<22, -
Binding22- 4
.224 5,
 Baselib_RegisteredNetwork_Buffer225 U
>22U V
(22V W
poolSize22W _
,22_ `
	Allocator22a j
.22j k

Persistent22k u
)22u v
;22v w
for44 
(44 
int44 
i44 
=44 
$num44 
;44 
i44 
<44 
poolSize44  (
;44( )
i44* +
++44+ -
)44- .
{55 
var66 
pageInfo66 
=66 

stackalloc66 )
Binding66* 1
.661 2'
Baselib_Memory_PageSizeInfo662 M
[66M N
$num66N O
]66O P
;66P Q
Binding77 
.77 *
Baselib_Memory_GetPageSizeInfo77 6
(776 7
pageInfo777 ?
)77? @
;77@ A
var88 
defaultPageSize88 #
=88$ %
(88& '
ulong88' ,
)88, -
pageInfo88- 5
->885 7
defaultPageSize887 F
;88F G
var:: 
	pageCount:: 
=:: 
(::  !
ulong::! &
)::& '
$num::' (
;::( )
if;; 
(;; 
(;; 
ulong;; 
);; 
	totalSize;; $
>;;% &
defaultPageSize;;' 6
);;6 7
{<< 
	pageCount== 
=== 
(==  !
ulong==! &
)==& '
math==' +
.==+ ,
ceil==, 0
(==0 1
	totalSize==1 :
/==; <
(=== >
double==> D
)==D E
defaultPageSize==E T
)==T U
;==U V
}>> 
var@@ 
buffer@@ 
=@@ 
(@@ 
Binding@@ %
.@@% &,
 Baselib_RegisteredNetwork_Buffer@@& F
*@@F G
)@@G H
UnsafeUtility@@H U
.@@U V
Malloc@@V \
(@@\ ]
UnsafeUtility@@] j
.@@j k
SizeOf@@k q
<@@q r
Binding@@r y
.@@y z-
 Baselib_RegisteredNetwork_Buffer	@@z ö
>
@@ö õ
(
@@õ ú
)
@@ú ù
,
@@ù û
UnsafeUtility
@@ü ¨
.
@@¨ ≠
AlignOf
@@≠ ¥
<
@@¥ µ
Binding
@@µ º
.
@@º Ω.
 Baselib_RegisteredNetwork_Buffer
@@Ω ›
>
@@› ﬁ
(
@@ﬁ ﬂ
)
@@ﬂ ‡
,
@@‡ ·
	Allocator
@@‚ Î
.
@@Î Ï

Persistent
@@Ï ˆ
)
@@ˆ ˜
;
@@˜ ¯
varBB 
errorBB 
=BB 
defaultBB #
(BB# $

ErrorStateBB$ .
)BB. /
;BB/ 0
varDD 
pageAllocationDD "
=DD# $
BindingDD% ,
.DD, -(
Baselib_Memory_AllocatePagesDD- I
(DDI J
pageInfoEE 
->EE 
defaultPageSizeEE -
,EE- .
	pageCountFF 
,FF 
$numGG 
,GG 
BindingHH 
.HH $
Baselib_Memory_PageStateHH 4
.HH4 5
	ReadWriteHH5 >
,HH> ?
&II 
errorII 
)II 
;II 
ifKK 
(KK 
errorKK 
.KK 
codeKK 
!=KK !
	ErrorCodeKK" +
.KK+ ,
SuccessKK, 3
)KK3 4
{LL 
throwNN 
newNN 
	ExceptionNN '
(NN' (
$strNN( P
)NNP Q
;NNQ R
}RR 
UnsafeUtilityTT 
.TT 
MemSetTT $
(TT$ %
(TT% &
voidTT& *
*TT* +
)TT+ ,
pageAllocationTT, :
.TT: ;
ptrTT; >
,TT> ?
$numTT@ A
,TTA B
(TTC D
longTTD H
)TTH I
(TTI J
pageAllocationTTJ X
.TTX Y
	pageCountTTY b
*TTc d
pageAllocationTTe s
.TTs t
pageSizeTTt |
)TT| }
)TT} ~
;TT~ 
*UU 
bufferUU 
=UU 
BindingUU !
.UU! "5
)Baselib_RegisteredNetwork_Buffer_RegisterUU" K
(UUK L
pageAllocationUUL Z
,UUZ [
&UU\ ]
errorUU] b
)UUb c
;UUc d
ifWW 
(WW 
errorWW 
.WW 
codeWW 
!=WW !
(WW" #
intWW# &
)WW& '
	ErrorCodeWW' 0
.WW0 1
SuccessWW1 8
)WW8 9
{XX 
BindingYY 
.YY '
Baselib_Memory_ReleasePagesYY 7
(YY7 8
pageAllocationYY8 F
,YYF G
&YYH I
errorYYI N
)YYN O
;YYO P
*ZZ 
bufferZZ 
=ZZ 
defaultZZ %
;ZZ% &
throw\\ 
new\\ 
	Exception\\ '
(\\' (
$str\\( R
)\\R S
;\\S T
}^^ 
m_BufferPool`` 
.`` 
Add``  
(``  !
buffer``! '
)``' (
;``( )
}aa 
}bb 	
publicdd 
voiddd 
Disposedd 
(dd 
)dd 
{ee 	
varff 
errorff 
=ff 
defaultff 
(ff  

ErrorStateff  *
)ff* +
;ff+ ,
forgg 
(gg 
intgg 
igg 
=gg 
$numgg 
;gg 
igg 
<gg 
m_BufferPoolgg  ,
.gg, -
Lengthgg- 3
;gg3 4
igg5 6
++gg6 8
)gg8 9
{hh 
varii 
bufferii 
=ii 
m_BufferPoolii )
[ii) *
iii* +
]ii+ ,
;ii, -
varjj 
pageAllocationjj "
=jj# $
bufferjj% +
->jj+ -

allocationjj- 7
;jj7 8
Bindingkk 
.kk 7
+Baselib_RegisteredNetwork_Buffer_Deregisterkk C
(kkC D
*kkD E
bufferkkE K
)kkK L
;kkL M
Bindingll 
.ll '
Baselib_Memory_ReleasePagesll 3
(ll3 4
pageAllocationll4 B
,llB C
&llD E
errorllE J
)llJ K
;llK L
UnsafeUtilitymm 
.mm 
Freemm "
(mm" #
buffermm# )
,mm) *
	Allocatormm+ 4
.mm4 5

Persistentmm5 ?
)mm? @
;mm@ A
}nn 
}oo 	
publicuu 
Bindinguu 
.uu 1
%Baselib_RegisteredNetwork_BufferSliceuu <
AtIndexAsSliceuu= K
(uuK L
intuuL O
indexuuP U
,uuU V
uintuuW [
elementSizeuu\ g
)uug h
{vv 	
uintww 
offsetww 
=ww 
$numww 
;ww 
IntPtrxx 
dataxx 
;xx 
Bindingyy 
.yy ,
 Baselib_RegisteredNetwork_Bufferyy 4
*yy4 5
bufferyy6 <
=yy= >
nullyy? C
;yyC D
if|| 
(|| 
index|| 
>=|| 
m_BufferPool|| %
.||% &
Length||& ,
)||, -
{}} 
throw~~ 
new~~ 
	Exception~~ #
(~~# $
$"~~$ &
$str~~& R
{~~R S
index~~S X
}~~X Y
"~~Y Z
)~~Z [
;~~[ \
} 
buffer
ÅÅ 
=
ÅÅ 
m_BufferPool
ÅÅ !
[
ÅÅ! "
index
ÅÅ" '
]
ÅÅ' (
;
ÅÅ( )
data
ÇÇ 
=
ÇÇ 
(
ÇÇ 
IntPtr
ÇÇ 
)
ÇÇ 
(
ÇÇ 
(
ÇÇ 
byte
ÇÇ !
*
ÇÇ! "
)
ÇÇ" #
buffer
ÇÇ# )
->
ÇÇ) +

allocation
ÇÇ+ 5
.
ÇÇ5 6
ptr
ÇÇ6 9
)
ÇÇ9 :
;
ÇÇ: ;
Binding
ââ 
.
ââ 3
%Baselib_RegisteredNetwork_BufferSlice
ââ 9
slice
ââ: ?
;
ââ? @
slice
ää 
.
ää 
id
ää 
=
ää 
buffer
ää 
->
ää 
id
ää !
;
ää! "
slice
ãã 
.
ãã 
data
ãã 
=
ãã 
data
ãã 
;
ãã 
slice
åå 
.
åå 
offset
åå 
=
åå 
offset
åå !
;
åå! "
slice
çç 
.
çç 
size
çç 
=
çç 
elementSize
çç $
;
çç$ %
return
éé 
slice
éé 
;
éé 
}
èè 	
}
êê 
}ëë óˇ
eC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Relay\RelayNetworkProtocol.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
Relay% *
{ 
internal 
static 
class '
ConnectionAddressExtensions 5
{ 
public 
static 
unsafe 
ref  
RelayAllocationId! 2
AsRelayAllocationId3 F
(F G
thisG K
refL O$
NetworkInterfaceEndPointP h
addressi p
)p q
{ 	
fixed 
( 
byte 
* 

addressPtr "
=# $
address% ,
., -
data- 1
)1 2
{ 
return 
ref 
* 
( 
RelayAllocationId .
*. /
)/ 0

addressPtr0 :
;: ;
} 
} 	
} 
public!! 

static!! 
class!! $
RelayParameterExtensions!! 0
{"" 
public(( 
static(( 
ref(( 
NetworkSettings(( )
WithRelayParameters((* =
(((= >
ref)) 
this)) 
NetworkSettings)) $
settings))% -
,))- .
ref** 
RelayServerData** 

serverData**  *
,*** +
int++ !
relayConnectionTimeMS++ %
=++& '!
RelayNetworkParameter++( =
.++= >%
k_DefaultConnectionTimeMS++> W
),, 	
{-- 	
var.. 
	parameter.. 
=.. 
new.. !
RelayNetworkParameter..  5
{// 

ServerData00 
=00 

serverData00 '
,00' (!
RelayConnectionTimeMS11 %
=11& '!
relayConnectionTimeMS11( =
,11= >
}22 
;22 
settings44 
.44 !
AddRawParameterStruct44 *
(44* +
ref44+ .
	parameter44/ 8
)448 9
;449 :
return66 
ref66 
settings66 
;66  
}77 	
public== 
static== !
RelayNetworkParameter== +
GetRelayParameters==, >
(==> ?
ref==? B
this==C G
NetworkSettings==H W
settings==X `
)==` a
{>> 	
if?? 
(?? 
!?? 
settings?? 
.?? 
TryGet??  
<??  !!
RelayNetworkParameter??! 6
>??6 7
(??7 8
out??8 ;
var??< ?

parameters??@ J
)??J K
)??K L
{@@ 
throwAA 
newAA 
SystemAA  
.AA  !%
InvalidOperationExceptionAA! :
(AA: ;
$"AA; =
$strAA= ]
{AA] ^
nameofAA^ d
(AAd e!
RelayNetworkParameterAAe z
)AAz {
}AA{ |
$str	AA| ï
{
AAï ñ
nameof
AAñ ú
(
AAú ù
NetworkSettings
AAù ¨
)
AA¨ ≠
}
AA≠ Æ
"
AAÆ Ø
)
AAØ ∞
;
AA∞ ±
}BB 
returnDD 

parametersDD 
;DD 
}EE 	
}FF 
publicLL 

structLL !
RelayNetworkParameterLL '
:LL( )
INetworkParameterLL* ;
{MM 
internalNN 
constNN 
intNN %
k_DefaultConnectionTimeMSNN 4
=NN5 6
$numNN7 ;
;NN; <
publicSS 
RelayServerDataSS 

ServerDataSS )
;SS) *
publicXX 
intXX !
RelayConnectionTimeMSXX (
;XX( )
publicZZ 
unsafeZZ 
boolZZ 
ValidateZZ #
(ZZ# $
)ZZ$ %
{[[ 	
var\\ 
valid\\ 
=\\ 
true\\ 
;\\ 
if^^ 
(^^ 

ServerData^^ 
.^^ 
Endpoint^^ #
==^^$ &
default^^' .
)^^. /
{__ 
valid`` 
=`` 
false`` 
;`` 
UnityEngineaa 
.aa 
Debugaa !
.aa! "
LogErroraa" *
(aa* +
$"aa+ -
{aa- .
nameofaa. 4
(aa4 5

ServerDataaa5 ?
.aa? @
Endpointaa@ H
)aaH I
}aaI J
$straaJ R
{aaR S

ServerDataaaS ]
.aa] ^
Endpointaa^ f
}aaf g
$straag ~
"aa~ 
)	aa Ä
;
aaÄ Å
}bb 
ifcc 
(cc 

ServerDatacc 
.cc 
Noncecc  
==cc! #
defaultcc$ +
)cc+ ,
{dd 
validee 
=ee 
falseee 
;ee 
UnityEngineff 
.ff 
Debugff !
.ff! "
LogErrorff" *
(ff* +
$"ff+ -
{ff- .
nameofff. 4
(ff4 5

ServerDataff5 ?
.ff? @
Nonceff@ E
)ffE F
}ffF G
$strffG O
{ffO P

ServerDataffP Z
.ffZ [
Nonceff[ `
}ff` a
$strffa x
"ffx y
)ffy z
;ffz {
}gg 
ifhh 
(hh 

ServerDatahh 
.hh 
AllocationIdhh '
==hh( *
defaulthh+ 2
)hh2 3
{ii 
validjj 
=jj 
falsejj 
;jj 
UnityEnginekk 
.kk 
Debugkk !
.kk! "
LogErrorkk" *
(kk* +
$"kk+ -
{kk- .
nameofkk. 4
(kk4 5

ServerDatakk5 ?
.kk? @
AllocationIdkk@ L
)kkL M
}kkM N
$strkkN V
{kkV W

ServerDatakkW a
.kka b
AllocationIdkkb n
}kkn o
$str	kko Ü
"
kkÜ á
)
kká à
;
kkà â
}ll 
ifmm 
(mm !
RelayConnectionTimeMSmm %
<mm& '
$nummm( )
)mm) *
{nn 
validoo 
=oo 
falseoo 
;oo 
UnityEnginepp 
.pp 
Debugpp !
.pp! "
LogErrorpp" *
(pp* +
$"pp+ -
{pp- .
nameofpp. 4
(pp4 5!
RelayConnectionTimeMSpp5 J
)ppJ K
}ppK L
$strppL S
{ppS T!
RelayConnectionTimeMSppT i
}ppi j
$str	ppj â
"
ppâ ä
)
ppä ã
;
ppã å
}qq 
returnss 
validss 
;ss 
}tt 	
}uu 
[ww 
BurstCompileww 
]ww 
internalxx 
structxx  
RelayNetworkProtocolxx (
:xx) *
INetworkProtocolxx+ ;
{yy 
publiczz 
staticzz 
ushortzz 
SwitchEndiannesszz -
(zz- .
ushortzz. 4
valuezz5 :
)zz: ;
{{{ 	
if|| 
(|| 
DataStreamWriter||  
.||  !
IsLittleEndian||! /
)||/ 0
return}} 
(}} 
ushort}} 
)}} 
(}}  
(}}  !
value}}! &
<<}}' )
$num}}* +
)}}+ ,
|}}- .
(}}/ 0
value}}0 5
>>}}6 8
$num}}9 :
)}}: ;
)}}; <
;}}< =
return 
value 
; 
}
ÄÄ 	
private
ÇÇ 
enum
ÇÇ "
RelayConnectionState
ÇÇ )
:
ÇÇ* +
byte
ÇÇ, 0
{
ÉÉ 	
Unbound
ÑÑ 
=
ÑÑ 
$num
ÑÑ 
,
ÑÑ 
	Handshake
ÖÖ 
=
ÖÖ 
$num
ÖÖ 
,
ÖÖ 
Binding
ÜÜ 
=
ÜÜ 
$num
ÜÜ 
,
ÜÜ 
Bound
áá 
=
áá 
$num
áá 
,
áá 
	Connected
àà 
=
àà 
$num
àà 
,
àà 
}
ââ 	
private
ãã 
enum
ãã )
SecuredRelayConnectionState
ãã 0
:
ãã1 2
byte
ãã3 7
{
åå 	
Unsecure
çç 
=
çç 
$num
çç 
,
çç 
Secured
éé 
=
éé 
$num
éé 
}
èè 	
private
ëë 
struct
ëë 
RelayProtocolData
ëë (
{
íí 	
public
ìì "
RelayConnectionState
ìì '
ConnectionState
ìì( 7
;
ìì7 8
public
îî )
SecuredRelayConnectionState
îî .
SecureState
îî/ :
;
îî: ;
public
ïï 
SessionIdToken
ïï !$
ConnectionReceiveToken
ïï" 8
;
ïï8 9
public
ññ 
long
ññ  
LastConnectAttempt
ññ *
;
ññ* +
public
óó 
long
óó 
LastUpdateTime
óó &
;
óó& '
public
òò 
long
òò 
LastSentTime
òò $
;
òò$ %
public
ôô 
int
ôô 
ConnectTimeoutMS
ôô '
;
ôô' (
public
öö 
int
öö #
RelayConnectionTimeMS
öö ,
;
öö, -
public
õõ 
RelayAllocationId
õõ $
HostAllocationId
õõ% 5
;
õõ5 6
public
úú &
NetworkInterfaceEndPoint
úú +
ServerEndpoint
úú, :
;
úú: ;
public
ùù 
RelayServerData
ùù "

ServerData
ùù# -
;
ùù- .
public
üü 
SecureClientState
üü $
SecureClientState
üü% 6
;
üü6 7
public
§§ 
bool
§§ 
ConnectOnBind
§§ %
;
§§% &
}
•• 	
public
ßß 
IntPtr
ßß 
UserData
ßß 
;
ßß 
public
©© 
void
©© 

Initialize
©© 
(
©© 
NetworkSettings
©© .
settings
©©/ 7
)
©©7 8
{
™™ 	
var
´´ 
relayConfig
´´ 
=
´´ 
settings
´´ &
.
´´& ' 
GetRelayParameters
´´' 9
(
´´9 :
)
´´: ;
;
´´; <
var
¨¨ 
config
¨¨ 
=
¨¨ 
settings
¨¨ !
.
¨¨! "(
GetNetworkConfigParameters
¨¨" <
(
¨¨< =
)
¨¨= >
;
¨¨> ?
if
ØØ 
(
ØØ 
relayConfig
ØØ 
.
ØØ 

ServerData
ØØ &
.
ØØ& '
IsSecure
ØØ' /
==
ØØ0 2
$num
ØØ3 4
)
ØØ4 5
{
∞∞ $
ManagedSecureFunctions
±± &
.
±±& '

Initialize
±±' 1
(
±±1 2
)
±±2 3
;
±±3 4
}
≤≤ 
unsafe
¥¥ 
{
µµ 
UserData
∂∂ 
=
∂∂ 
(
∂∂ 
IntPtr
∂∂ "
)
∂∂" #
UnsafeUtility
∂∂# 0
.
∂∂0 1
Malloc
∂∂1 7
(
∂∂7 8
UnsafeUtility
∂∂8 E
.
∂∂E F
SizeOf
∂∂F L
<
∂∂L M
RelayProtocolData
∂∂M ^
>
∂∂^ _
(
∂∂_ `
)
∂∂` a
,
∂∂a b
UnsafeUtility
∂∂c p
.
∂∂p q
AlignOf
∂∂q x
<
∂∂x y 
RelayProtocolData∂∂y ä
>∂∂ä ã
(∂∂ã å
)∂∂å ç
,∂∂ç é
	Allocator∂∂è ò
.∂∂ò ô

Persistent∂∂ô £
)∂∂£ §
;∂∂§ •
*
∑∑ 
(
∑∑ 
RelayProtocolData
∑∑ #
*
∑∑# $
)
∑∑$ %
UserData
∑∑% -
=
∑∑. /
new
∑∑0 3
RelayProtocolData
∑∑4 E
{
∏∏ 

ServerData
ππ 
=
ππ  
relayConfig
ππ! ,
.
ππ, -

ServerData
ππ- 7
,
ππ7 8
ConnectionState
∫∫ #
=
∫∫$ %"
RelayConnectionState
∫∫& :
.
∫∫: ;
Unbound
∫∫; B
,
∫∫B C
ConnectTimeoutMS
ªª $
=
ªª% &
config
ªª' -
.
ªª- .
connectTimeoutMS
ªª. >
,
ªª> ?#
RelayConnectionTimeMS
ºº )
=
ºº* +
relayConfig
ºº, 7
.
ºº7 8#
RelayConnectionTimeMS
ºº8 M
,
ººM N
SecureState
ΩΩ 
=
ΩΩ  !)
SecuredRelayConnectionState
ΩΩ" =
.
ΩΩ= >
Unsecure
ΩΩ> F
}
ææ 
;
ææ 
}
øø 
}
¿¿ 	
public
¬¬ 
void
¬¬ 
Dispose
¬¬ 
(
¬¬ 
)
¬¬ 
{
√√ 	
unsafe
ƒƒ 
{
≈≈ 
var
»» 
protocolData
»»  
=
»»! "
(
»»# $
RelayProtocolData
»»$ 5
*
»»5 6
)
»»6 7
UserData
»»7 ?
;
»»? @
if
…… 
(
…… 
protocolData
……  
->
……  "
SecureClientState
……" 3
.
……3 4
	ClientPtr
……4 =
!=
……> @
null
……A E
)
……E F#
SecureNetworkProtocol
   )
.
  ) *!
DisposeSecureClient
  * =
(
  = >
ref
  > A
protocolData
  B N
->
  N P
SecureClientState
  P a
)
  a b
;
  b c
if
ÃÃ 
(
ÃÃ 
UserData
ÃÃ 
!=
ÃÃ 
default
ÃÃ  '
)
ÃÃ' (
UnsafeUtility
ÕÕ !
.
ÕÕ! "
Free
ÕÕ" &
(
ÕÕ& '
UserData
ÕÕ' /
.
ÕÕ/ 0
	ToPointer
ÕÕ0 9
(
ÕÕ9 :
)
ÕÕ: ;
,
ÕÕ; <
	Allocator
ÕÕ= F
.
ÕÕF G

Persistent
ÕÕG Q
)
ÕÕQ R
;
ÕÕR S
UserData
œœ 
=
œœ 
default
œœ "
;
œœ" #
}
–– 
}
—— 	
bool
”” "
TryExtractParameters
”” !
<
””! "
T
””" #
>
””# $
(
””$ %
out
””% (
T
””) *
config
””+ 1
,
””1 2
params
””3 9
INetworkParameter
””: K
[
””K L
]
””L M
param
””N S
)
””S T
{
‘‘ 	
for
’’ 
(
’’ 
var
’’ 
i
’’ 
=
’’ 
$num
’’ 
;
’’ 
i
’’ 
<
’’ 
param
’’  %
.
’’% &
Length
’’& ,
;
’’, -
++
’’. 0
i
’’0 1
)
’’1 2
{
÷÷ 
if
◊◊ 
(
◊◊ 
param
◊◊ 
[
◊◊ 
i
◊◊ 
]
◊◊ 
is
◊◊ 
T
◊◊  !
)
◊◊! "
{
ÿÿ 
config
ŸŸ 
=
ŸŸ 
(
ŸŸ 
T
ŸŸ 
)
ŸŸ  
param
ŸŸ  %
[
ŸŸ% &
i
ŸŸ& '
]
ŸŸ' (
;
ŸŸ( )
return
⁄⁄ 
true
⁄⁄ 
;
⁄⁄  
}
€€ 
}
‹‹ 
config
ﬁﬁ 
=
ﬁﬁ 
default
ﬁﬁ 
;
ﬁﬁ 
return
ﬂﬂ 
false
ﬂﬂ 
;
ﬂﬂ 
}
‡‡ 	
public
‚‚ 
int
‚‚ 
Bind
‚‚ 
(
‚‚ 
INetworkInterface
‚‚ )
networkInterface
‚‚* :
,
‚‚: ;
ref
‚‚< ?&
NetworkInterfaceEndPoint
‚‚@ X
localEndPoint
‚‚Y f
)
‚‚f g
{
„„ 	
if
‰‰ 
(
‰‰ 
networkInterface
‰‰  
.
‰‰  !
Bind
‰‰! %
(
‰‰% &
localEndPoint
‰‰& 3
)
‰‰3 4
!=
‰‰5 7
$num
‰‰8 9
)
‰‰9 :
return
ÂÂ 
-
ÂÂ 
$num
ÂÂ 
;
ÂÂ 
unsafe
ÁÁ 
{
ËË 
var
ÈÈ 
protocolData
ÈÈ  
=
ÈÈ! "
(
ÈÈ# $
RelayProtocolData
ÈÈ$ 5
*
ÈÈ5 6
)
ÈÈ6 7
UserData
ÈÈ7 ?
;
ÈÈ? @
networkInterface
ÏÏ  
.
ÏÏ  !%
CreateInterfaceEndPoint
ÏÏ! 8
(
ÏÏ8 9
protocolData
ÏÏ9 E
->
ÏÏE G

ServerData
ÏÏG Q
.
ÏÏQ R
Endpoint
ÏÏR Z
,
ÏÏZ [
out
ÏÏ\ _
protocolData
ÏÏ` l
->
ÏÏl n
ServerEndpoint
ÏÏn |
)
ÏÏ| }
;
ÏÏ} ~
if
ÓÓ 
(
ÓÓ 
protocolData
ÓÓ  
->
ÓÓ  "

ServerData
ÓÓ" ,
.
ÓÓ, -
IsSecure
ÓÓ- 5
==
ÓÓ6 8
$num
ÓÓ9 :
)
ÓÓ: ;
{
ÔÔ 
protocolData
  
->
  "
ConnectionState
" 1
=
2 3"
RelayConnectionState
4 H
.
H I
	Handshake
I R
;
R S
}
ÒÒ 
else
ÚÚ 
{
ÛÛ 
protocolData
ˆˆ  
->
ˆˆ  "
ConnectionState
ˆˆ" 1
=
ˆˆ2 3"
RelayConnectionState
ˆˆ4 H
.
ˆˆH I
Binding
ˆˆI P
;
ˆˆP Q
}
˜˜ 
return
˘˘ 
$num
˘˘ 
;
˘˘ 
}
˙˙ 
}
˚˚ 	
public
˝˝ 
int
˝˝ %
CreateConnectionAddress
˝˝ *
(
˝˝* +
INetworkInterface
˝˝+ <
networkInterface
˝˝= M
,
˝˝M N
NetworkEndPoint
˝˝O ^
endPoint
˝˝_ g
,
˝˝g h
out
˝˝i l'
NetworkInterfaceEndPoint˝˝m Ö
address˝˝Ü ç
)˝˝ç é
{
˛˛ 	
if
ÄÄ 
(
ÄÄ 
UnsafeUtility
ÄÄ 
.
ÄÄ 
SizeOf
ÄÄ $
<
ÄÄ$ %&
NetworkInterfaceEndPoint
ÄÄ% =
>
ÄÄ= >
(
ÄÄ> ?
)
ÄÄ? @
<
ÄÄA B
UnsafeUtility
ÄÄC P
.
ÄÄP Q
SizeOf
ÄÄQ W
<
ÄÄW X
RelayAllocationId
ÄÄX i
>
ÄÄi j
(
ÄÄj k
)
ÄÄk l
)
ÄÄl m
throw
ÅÅ 
new
ÅÅ '
InvalidOperationException
ÅÅ 3
(
ÅÅ3 4
$str
ÅÅ4 p
)
ÅÅp q
;
ÅÅq r
unsafe
ÉÉ 
{
ÑÑ 
var
ÖÖ 
protocolData
ÖÖ  
=
ÖÖ! "
(
ÖÖ# $
RelayProtocolData
ÖÖ$ 5
*
ÖÖ5 6
)
ÖÖ6 7
UserData
ÖÖ7 ?
;
ÖÖ? @
address
ää 
=
ää 
default
ää !
;
ää! "
fixed
ãã 
(
ãã 
byte
ãã 
*
ãã 

addressPtr
ãã &
=
ãã' (
address
ãã) 0
.
ãã0 1
data
ãã1 5
)
ãã5 6
{
åå 
*
çç 
(
çç 
RelayAllocationId
çç '
*
çç' (
)
çç( )

addressPtr
çç) 3
=
çç4 5
protocolData
çç6 B
->
ççB D
HostAllocationId
ççD T
;
ççT U
}
éé 
return
êê 
$num
êê 
;
êê 
}
ëë 
}
íí 	
public
îî 
NetworkEndPoint
îî 
GetRemoteEndPoint
îî 0
(
îî0 1
INetworkInterface
îî1 B
networkInterface
îîC S
,
îîS T&
NetworkInterfaceEndPoint
îîU m
address
îîn u
)
îîu v
{
ïï 	
unsafe
ññ 
{
óó 
var
òò 
protocolData
òò  
=
òò! "
(
òò# $
RelayProtocolData
òò$ 5
*
òò5 6
)
òò6 7
UserData
òò7 ?
;
òò? @
return
ôô 
networkInterface
ôô '
.
ôô' ( 
GetGenericEndPoint
ôô( :
(
ôô: ;
protocolData
ôô; G
->
ôôG I
ServerEndpoint
ôôI W
)
ôôW X
;
ôôX Y
}
öö 
}
õõ 	
public
ùù 
NetworkProtocol
ùù %
CreateProtocolInterface
ùù 6
(
ùù6 7
)
ùù7 8
{
ûû 	
return
üü 
new
üü 
NetworkProtocol
üü &
(
üü& '#
computePacketOverhead
†† %
:
††% &
new
††' *&
TransportFunctionPointer
††+ C
<
††C D
NetworkProtocol
††D S
.
††S T+
ComputePacketOverheadDelegate
††T q
>
††q r
(
††r s$
ComputePacketOverhead††s à
)††à â
,††â ä
processReceive
°° 
:
°° 
new
°°  #&
TransportFunctionPointer
°°$ <
<
°°< =
NetworkProtocol
°°= L
.
°°L M$
ProcessReceiveDelegate
°°M c
>
°°c d
(
°°d e
ProcessReceive
°°e s
)
°°s t
,
°°t u
processSend
¢¢ 
:
¢¢ 
new
¢¢  &
TransportFunctionPointer
¢¢! 9
<
¢¢9 :
NetworkProtocol
¢¢: I
.
¢¢I J!
ProcessSendDelegate
¢¢J ]
>
¢¢] ^
(
¢¢^ _
ProcessSend
¢¢_ j
)
¢¢j k
,
¢¢k l)
processSendConnectionAccept
££ +
:
££+ ,
new
££- 0&
TransportFunctionPointer
££1 I
<
££I J
NetworkProtocol
££J Y
.
££Y Z1
#ProcessSendConnectionAcceptDelegate
££Z }
>
££} ~
(
££~ *
ProcessSendConnectionAccept££ ö
)££ö õ
,££õ ú
connect
§§ 
:
§§ 
new
§§ &
TransportFunctionPointer
§§ 5
<
§§5 6
NetworkProtocol
§§6 E
.
§§E F
ConnectDelegate
§§F U
>
§§U V
(
§§V W
Connect
§§W ^
)
§§^ _
,
§§_ `

disconnect
•• 
:
•• 
new
•• &
TransportFunctionPointer
••  8
<
••8 9
NetworkProtocol
••9 H
.
••H I 
DisconnectDelegate
••I [
>
••[ \
(
••\ ]

Disconnect
••] g
)
••g h
,
••h i
processSendPing
¶¶ 
:
¶¶  
new
¶¶! $&
TransportFunctionPointer
¶¶% =
<
¶¶= >
NetworkProtocol
¶¶> M
.
¶¶M N%
ProcessSendPingDelegate
¶¶N e
>
¶¶e f
(
¶¶f g
ProcessSendPing
¶¶g v
)
¶¶v w
,
¶¶w x
processSendPong
ßß 
:
ßß  
new
ßß! $&
TransportFunctionPointer
ßß% =
<
ßß= >
NetworkProtocol
ßß> M
.
ßßM N%
ProcessSendPongDelegate
ßßN e
>
ßße f
(
ßßf g
ProcessSendPong
ßßg v
)
ßßv w
,
ßßw x
update
®® 
:
®® 
new
®® &
TransportFunctionPointer
®® 4
<
®®4 5
NetworkProtocol
®®5 D
.
®®D E
UpdateDelegate
®®E S
>
®®S T
(
®®T U
Update
®®U [
)
®®[ \
,
®®\ ]
needsUpdate
©© 
:
©© 
true
©© !
,
©©! "
userData
™™ 
:
™™ 
UserData
™™ "
,
™™" #
maxHeaderSize
´´ 
:
´´ 
RelayMessageRelay
´´ 0
.
´´0 1
Length
´´1 7
+
´´8 9

UdpCHeader
´´: D
.
´´D E
Length
´´E K
,
´´K L
maxFooterSize
¨¨ 
:
¨¨ 
SessionIdToken
¨¨ -
.
¨¨- .
k_Length
¨¨. 6
)
≠≠ 
;
≠≠ 
}
ÆÆ 	
[
∞∞ 	
BurstCompile
∞∞	 
(
∞∞ 
DisableDirectCall
∞∞ '
=
∞∞( )
true
∞∞* .
)
∞∞. /
]
∞∞/ 0
[
±± 	!
MonoPInvokeCallback
±±	 
(
±± 
typeof
±± #
(
±±# $
NetworkProtocol
±±$ 3
.
±±3 4+
ComputePacketOverheadDelegate
±±4 Q
)
±±Q R
)
±±R S
]
±±S T
public
≤≤ 
static
≤≤ 
int
≤≤ #
ComputePacketOverhead
≤≤ /
(
≤≤/ 0
ref
≤≤0 3
NetworkDriver
≤≤4 A
.
≤≤A B

Connection
≤≤B L

connection
≤≤M W
,
≤≤W X
out
≤≤Y \
int
≤≤] `

dataOffset
≤≤a k
)
≤≤k l
{
≥≥ 	
var
¥¥ 
utpOverhead
¥¥ 
=
¥¥ $
UnityTransportProtocol
¥¥ 4
.
¥¥4 5#
ComputePacketOverhead
¥¥5 J
(
¥¥J K
ref
¥¥K N

connection
¥¥O Y
,
¥¥Y Z
out
¥¥[ ^

dataOffset
¥¥_ i
)
¥¥i j
;
¥¥j k

dataOffset
µµ 
+=
µµ 
RelayMessageRelay
µµ +
.
µµ+ ,
Length
µµ, 2
;
µµ2 3
return
∂∂ 
utpOverhead
∂∂ 
+
∂∂  
RelayMessageRelay
∂∂! 2
.
∂∂2 3
Length
∂∂3 9
;
∂∂9 :
}
∑∑ 	
[
ππ 	
BurstCompile
ππ	 
(
ππ 
DisableDirectCall
ππ '
=
ππ( )
true
ππ* .
)
ππ. /
]
ππ/ 0
[
∫∫ 	!
MonoPInvokeCallback
∫∫	 
(
∫∫ 
typeof
∫∫ #
(
∫∫# $
NetworkProtocol
∫∫$ 3
.
∫∫3 4$
ProcessReceiveDelegate
∫∫4 J
)
∫∫J K
)
∫∫K L
]
∫∫L M
public
ªª 
static
ªª 
void
ªª 
ProcessReceive
ªª )
(
ªª) *
IntPtr
ªª* 0
stream
ªª1 7
,
ªª7 8
ref
ªª9 <&
NetworkInterfaceEndPoint
ªª= U
endpoint
ªªV ^
,
ªª^ _
int
ªª` c
size
ªªd h
,
ªªh i
ref
ªªj m#
NetworkSendInterfaceªªn Ç
sendInterfaceªªÉ ê
,ªªê ë
refªªí ï&
NetworkSendQueueHandleªªñ ¨
queueHandleªª≠ ∏
,ªª∏ π
IntPtrªª∫ ¿
userDataªª¡ …
,ªª…  
refªªÀ Œ$
ProcessPacketCommandªªœ „
commandªª‰ Î
)ªªÎ Ï
{
ºº 	
unsafe
ΩΩ 
{
ææ 
var
øø 
protocolData
øø  
=
øø! "
(
øø# $
RelayProtocolData
øø$ 5
*
øø5 6
)
øø6 7
userData
øø7 ?
;
øø? @
if
¡¡ 
(
¡¡ 
endpoint
¡¡ 
!=
¡¡ 
protocolData
¡¡  ,
->
¡¡, .
ServerEndpoint
¡¡. <
)
¡¡< =
{
¬¬ 
command
√√ 
.
√√ 
Type
√√  
=
√√! "&
ProcessPacketCommandType
√√# ;
.
√√; <
Drop
√√< @
;
√√@ A
return
ƒƒ 
;
ƒƒ 
}
≈≈ 
if
»» 
(
»» 
protocolData
»»  
->
»»  "
ConnectionState
»»" 1
==
»»2 4"
RelayConnectionState
»»5 I
.
»»I J
	Handshake
»»J S
)
»»S T
{
…… 
var
   
secureUserData
   &
=
  ' (
(
  ) *
SecureUserData
  * 8
*
  8 9
)
  9 :
protocolData
  : F
->
  F H
SecureClientState
  H Y
.
  Y Z
ClientConfig
  Z f
->
  f h
transportUserData
  h y
;
  y z#
SecureNetworkProtocol
ÃÃ )
.
ÃÃ) *
SetSecureUserData
ÃÃ* ;
(
ÃÃ; <
stream
ÃÃ< B
,
ÃÃB C
size
ÃÃD H
,
ÃÃH I
ref
ÃÃJ M
endpoint
ÃÃN V
,
ÃÃV W
ref
ÃÃX [
sendInterface
ÃÃ\ i
,
ÃÃi j
ref
ÃÃk n
queueHandle
ÃÃo z
,
ÃÃz {
secureUserDataÃÃ| ä
)ÃÃä ã
;ÃÃã å
var
ŒŒ 
clientState
ŒŒ #
=
ŒŒ$ %
Binding
ŒŒ& -
.
ŒŒ- .'
unitytls_client_get_state
ŒŒ. G
(
ŒŒG H
protocolData
ŒŒH T
->
ŒŒT V
SecureClientState
ŒŒV g
.
ŒŒg h
	ClientPtr
ŒŒh q
)
ŒŒq r
;
ŒŒr s
uint
œœ 
handshakeResult
œœ (
=
œœ) *
Binding
œœ+ 2
.
œœ2 3
UNITYTLS_SUCCESS
œœ3 C
;
œœC D
if
““ 
(
““ 
clientState
““ #
==
““$ &
Binding
““' .
.
““. /+
UnityTLSClientState_Handshake
““/ L
||
”” 
clientState
”” &
==
””' )
Binding
””* 1
.
””1 2&
UnityTLSClientState_Init
””2 J
)
””J K
{
‘‘ 
bool
’’ 
shouldRunAgain
’’ +
=
’’, -
false
’’. 3
;
’’3 4
do
÷÷ 
{
◊◊ 
handshakeResult
ÿÿ +
=
ÿÿ, -#
SecureNetworkProtocol
ÿÿ. C
.
ÿÿC D!
SecureHandshakeStep
ÿÿD W
(
ÿÿW X
ref
ÿÿX [
protocolData
ÿÿ\ h
->
ÿÿh j
SecureClientState
ÿÿj {
)
ÿÿ{ |
;
ÿÿ| }
clientState
ŸŸ '
=
ŸŸ( )
Binding
ŸŸ* 1
.
ŸŸ1 2'
unitytls_client_get_state
ŸŸ2 K
(
ŸŸK L
protocolData
ŸŸL X
->
ŸŸX Z
SecureClientState
ŸŸZ k
.
ŸŸk l
	ClientPtr
ŸŸl u
)
ŸŸu v
;
ŸŸv w
shouldRunAgain
⁄⁄ *
=
⁄⁄+ ,
(
⁄⁄- .
size
⁄⁄. 2
!=
⁄⁄3 5
$num
⁄⁄6 7
&&
⁄⁄8 :
secureUserData
⁄⁄; I
->
⁄⁄I K
BytesProcessed
⁄⁄K Y
==
⁄⁄Z \
$num
⁄⁄] ^
&&
⁄⁄_ a
clientState
⁄⁄b m
==
⁄⁄n p
Binding
⁄⁄q x
.
⁄⁄x y,
UnityTLSClientState_Handshake⁄⁄y ñ
)⁄⁄ñ ó
;⁄⁄ó ò
}
€€ 
while
‹‹ 
(
‹‹ 
shouldRunAgain
‹‹ -
)
‹‹- .
;
‹‹. /
}
›› 
if
ﬂﬂ 
(
ﬂﬂ 
clientState
ﬂﬂ #
==
ﬂﬂ$ &
Binding
ﬂﬂ' .
.
ﬂﬂ. /+
UnityTLSClientState_Messaging
ﬂﬂ/ L
)
ﬂﬂL M
{
‡‡ 
protocolData
‚‚ $
->
‚‚$ &
ConnectionState
‚‚& 5
=
‚‚6 7"
RelayConnectionState
‚‚8 L
.
‚‚L M
Binding
‚‚M T
;
‚‚T U
protocolData
„„ $
->
„„$ &
SecureState
„„& 1
=
„„2 3)
SecuredRelayConnectionState
„„4 O
.
„„O P
Secured
„„P W
;
„„W X
}
‰‰ 
command
ÊÊ 
.
ÊÊ 
Type
ÊÊ  
=
ÊÊ! "&
ProcessPacketCommandType
ÊÊ# ;
.
ÊÊ; <
Drop
ÊÊ< @
;
ÊÊ@ A
return
ÁÁ 
;
ÁÁ 
}
ËË 
if
ÎÎ 
(
ÎÎ 
protocolData
ÎÎ  
->
ÎÎ  "

ServerData
ÎÎ" ,
.
ÎÎ, -
IsSecure
ÎÎ- 5
==
ÎÎ6 8
$num
ÎÎ9 :
&&
ÎÎ; =
(
ÏÏ 
protocolData
ÏÏ !
->
ÏÏ! #
SecureState
ÏÏ# .
!=
ÏÏ/ 1)
SecuredRelayConnectionState
ÏÏ2 M
.
ÏÏM N
Secured
ÏÏN U
)
ÏÏU V
)
ÏÏV W
{
ÌÌ 
command
ÔÔ 
.
ÔÔ 
Type
ÔÔ  
=
ÔÔ! "&
ProcessPacketCommandType
ÔÔ# ;
.
ÔÔ; <
Drop
ÔÔ< @
;
ÔÔ@ A
return
 
;
 
}
ÒÒ 
if
ÛÛ 
(
ÛÛ 
protocolData
ÛÛ  
->
ÛÛ  "

ServerData
ÛÛ" ,
.
ÛÛ, -
IsSecure
ÛÛ- 5
==
ÛÛ6 8
$num
ÛÛ9 :
&&
ÛÛ; =
(
ÙÙ 
protocolData
ÙÙ !
->
ÙÙ! #
SecureState
ÙÙ# .
==
ÙÙ/ 1)
SecuredRelayConnectionState
ÙÙ2 M
.
ÙÙM N
Secured
ÙÙN U
)
ÙÙU V
)
ÙÙV W
{
ıı 
var
ˆˆ 
secureUserData
ˆˆ &
=
ˆˆ' (
(
ˆˆ) *
SecureUserData
ˆˆ* 8
*
ˆˆ8 9
)
ˆˆ9 :
protocolData
ˆˆ: F
->
ˆˆF H
SecureClientState
ˆˆH Y
.
ˆˆY Z
ClientConfig
ˆˆZ f
->
ˆˆf h
transportUserData
ˆˆh y
;
ˆˆy z#
SecureNetworkProtocol
¯¯ )
.
¯¯) *
SetSecureUserData
¯¯* ;
(
¯¯; <
stream
¯¯< B
,
¯¯B C
size
¯¯D H
,
¯¯H I
ref
¯¯J M
endpoint
¯¯N V
,
¯¯V W
ref
¯¯X [
sendInterface
¯¯\ i
,
¯¯i j
ref
¯¯k n
queueHandle
¯¯o z
,
¯¯z {
secureUserData¯¯| ä
)¯¯ä ã
;¯¯ã å
var
˙˙ 
buffer
˙˙ 
=
˙˙  
new
˙˙! $
NativeArray
˙˙% 0
<
˙˙0 1
byte
˙˙1 5
>
˙˙5 6
(
˙˙6 7'
NetworkParameterConstants
˙˙7 P
.
˙˙P Q
MTU
˙˙Q T
,
˙˙T U
	Allocator
˙˙V _
.
˙˙_ `
Temp
˙˙` d
)
˙˙d e
;
˙˙e f
var
˚˚ 
	bytesRead
˚˚ !
=
˚˚" #
new
˚˚$ '
UIntPtr
˚˚( /
(
˚˚/ 0
)
˚˚0 1
;
˚˚1 2
var
¸¸ 
result
¸¸ 
=
¸¸  
Binding
¸¸! (
.
¸¸( )'
unitytls_client_read_data
¸¸) B
(
¸¸B C
protocolData
¸¸C O
->
¸¸O Q
SecureClientState
¸¸Q b
.
¸¸b c
	ClientPtr
¸¸c l
,
¸¸l m
(
˝˝ 
byte
˝˝ 
*
˝˝ 
)
˝˝ 
buffer
˝˝ %
.
˝˝% &
GetUnsafePtr
˝˝& 2
(
˝˝2 3
)
˝˝3 4
,
˝˝4 5
new
˝˝6 9
UIntPtr
˝˝: A
(
˝˝A B'
NetworkParameterConstants
˝˝B [
.
˝˝[ \
MTU
˝˝\ _
)
˝˝_ `
,
˝˝` a
&
˛˛ 
	bytesRead
˛˛ "
)
˛˛" #
;
˛˛# $
if
ÄÄ 
(
ÄÄ 
result
ÄÄ 
==
ÄÄ !
Binding
ÄÄ" )
.
ÄÄ) *
UNITYTLS_SUCCESS
ÄÄ* :
)
ÄÄ: ;
{
ÅÅ 
UnsafeUtility
ÑÑ %
.
ÑÑ% &
MemCpy
ÑÑ& ,
(
ÑÑ, -
(
ÑÑ- .
void
ÑÑ. 2
*
ÑÑ2 3
)
ÑÑ3 4
stream
ÑÑ4 :
,
ÑÑ: ;
buffer
ÑÑ< B
.
ÑÑB C
GetUnsafePtr
ÑÑC O
(
ÑÑO P
)
ÑÑP Q
,
ÑÑQ R
	bytesRead
ÑÑS \
.
ÑÑ\ ]
ToUInt32
ÑÑ] e
(
ÑÑe f
)
ÑÑf g
)
ÑÑg h
;
ÑÑh i
if
ÜÜ 
(
ÜÜ 
ProcessRelayData
ÜÜ ,
(
ÜÜ, -
stream
ÜÜ- 3
,
ÜÜ3 4
ref
ÜÜ5 8
endpoint
ÜÜ9 A
,
ÜÜA B
(
ÜÜC D
int
ÜÜD G
)
ÜÜG H
	bytesRead
ÜÜH Q
.
ÜÜQ R
ToUInt32
ÜÜR Z
(
ÜÜZ [
)
ÜÜ[ \
,
ÜÜ\ ]
ref
ÜÜ^ a
sendInterface
ÜÜb o
,
ÜÜo p
ref
ÜÜq t
queueHandleÜÜu Ä
,ÜÜÄ Å
refÜÜÇ Ö
commandÜÜÜ ç
,ÜÜç é
protocolDataÜÜè õ
)ÜÜõ ú
)ÜÜú ù
return
áá "
;
áá" #
}
àà 
command
ää 
.
ää 
Type
ää  
=
ää! "&
ProcessPacketCommandType
ää# ;
.
ää; <
Drop
ää< @
;
ää@ A
return
ãã 
;
ãã 
}
åå 
if
éé 
(
éé 
ProcessRelayData
éé $
(
éé$ %
stream
éé% +
,
éé+ ,
ref
éé- 0
endpoint
éé1 9
,
éé9 :
size
éé; ?
,
éé? @
ref
ééA D
sendInterface
ééE R
,
ééR S
ref
ééT W
queueHandle
ééX c
,
ééc d
ref
éée h
command
ééi p
,
éép q
protocolData
éér ~
)
éé~ 
)éé Ä
return
èè 
;
èè 
command
ëë 
.
ëë 
Type
ëë 
=
ëë &
ProcessPacketCommandType
ëë 7
.
ëë7 8
Drop
ëë8 <
;
ëë< =
}
íí 
}
ìì 	
private
ïï 
static
ïï 
unsafe
ïï 
bool
ïï "
ProcessRelayData
ïï# 3
(
ïï3 4
IntPtr
ïï4 :
stream
ïï; A
,
ïïA B
ref
ïïC F&
NetworkInterfaceEndPoint
ïïG _
endpoint
ïï` h
,
ïïh i
int
ïïj m
size
ïïn r
,
ïïr s
ref
ññ "
NetworkSendInterface
ññ $
sendInterface
ññ% 2
,
ññ2 3
ref
ññ4 7$
NetworkSendQueueHandle
ññ8 N
queueHandle
ññO Z
,
ññZ [
ref
ññ\ _"
ProcessPacketCommand
ññ` t
command
ññu |
,
ññ| }
RelayProtocolData
óó 
*
óó 
protocolData
óó +
)
óó+ ,
{
òò 	
var
ôô 
data
ôô 
=
ôô 
(
ôô 
byte
ôô 
*
ôô 
)
ôô 
stream
ôô $
;
ôô$ %
var
öö 
header
öö 
=
öö 
*
öö 
(
öö  
RelayMessageHeader
öö -
*
öö- .
)
öö. /
data
öö/ 3
;
öö3 4
if
úú 
(
úú 
size
úú 
<
úú  
RelayMessageHeader
úú )
.
úú) *
Length
úú* 0
||
úú1 3
!
úú4 5
header
úú5 ;
.
úú; <
IsValid
úú< C
(
úúC D
)
úúD E
)
úúE F
{
ùù 
UnityEngine
üü 
.
üü 
Debug
üü !
.
üü! "
LogError
üü" *
(
üü* +
$str
üü+ U
)
üüU V
;
üüV W
command
°° 
.
°° 
Type
°° 
=
°° &
ProcessPacketCommandType
°° 7
.
°°7 8
Drop
°°8 <
;
°°< =
return
¢¢ 
true
¢¢ 
;
¢¢ 
}
££ 
if
•• 
(
•• 
protocolData
•• 
->
•• 

ServerData
•• (
.
••( )
IsSecure
••) 1
==
••2 4
$num
••5 6
&&
••7 9
(
¶¶ 
protocolData
¶¶ 
->
¶¶ 
SecureState
¶¶ *
==
¶¶+ -)
SecuredRelayConnectionState
¶¶. I
.
¶¶I J
Secured
¶¶J Q
)
¶¶Q R
)
¶¶R S
{
ßß 
var
®® 
secureUserData
®® "
=
®®# $
(
®®% &
SecureUserData
®®& 4
*
®®4 5
)
®®5 6
protocolData
®®6 B
->
®®B D
SecureClientState
®®D U
.
®®U V
ClientConfig
®®V b
->
®®b d
transportUserData
®®d u
;
®®u v#
SecureNetworkProtocol
©© %
.
©©% &
SetSecureUserData
©©& 7
(
©©7 8
stream
©©8 >
,
©©> ?
size
©©@ D
,
©©D E
ref
©©F I
endpoint
©©J R
,
©©R S
ref
©©T W
sendInterface
©©X e
,
©©e f
ref
©©g j
queueHandle
©©k v
,
©©v w
secureUserData©©x Ü
)©©Ü á
;©©á à
}
™™ 
switch
¨¨ 
(
¨¨ 
header
¨¨ 
.
¨¨ 
Type
¨¨ 
)
¨¨  
{
≠≠ 
case
ÆÆ 
RelayMessageType
ÆÆ %
.
ÆÆ% &
BindReceived
ÆÆ& 2
:
ÆÆ2 3
command
ØØ 
.
ØØ 
Type
ØØ  
=
ØØ! "&
ProcessPacketCommandType
ØØ# ;
.
ØØ; <
Drop
ØØ< @
;
ØØ@ A
if
±± 
(
±± 
size
±± 
!=
±±  
RelayMessageHeader
±±  2
.
±±2 3
Length
±±3 9
)
±±9 :
{
≤≤ 
UnityEngine
≥≥ #
.
≥≥# $
Debug
≥≥$ )
.
≥≥) *
LogError
≥≥* 2
(
≥≥2 3
$str
≥≥3 r
)
≥≥r s
;
≥≥s t
return
¥¥ 
true
¥¥ #
;
¥¥# $
}
µµ 
protocolData
∑∑  
->
∑∑  "
ConnectionState
∑∑" 1
=
∑∑2 3"
RelayConnectionState
∑∑4 H
.
∑∑H I
Bound
∑∑I N
;
∑∑N O
if
ππ 
(
ππ 
protocolData
ππ $
->
ππ$ &
ConnectOnBind
ππ& 3
)
ππ3 4
{
∫∫ *
SendConnectionRequestToRelay
ªª 4
(
ªª4 5
protocolData
ªª5 A
,
ªªA B
ref
ªªC F
sendInterface
ªªG T
,
ªªT U
ref
ªªV Y
queueHandle
ªªZ e
)
ªªe f
;
ªªf g
}
ºº 
command
ææ 
.
ææ 
Type
ææ  
=
ææ! "&
ProcessPacketCommandType
ææ# ;
.
ææ; <"
ProtocolStatusUpdate
ææ< P
;
ææP Q
command
øø 
.
øø 
As
øø 
.
øø "
ProtocolStatusUpdate
øø 3
.
øø3 4
Status
øø4 :
=
øø; <
(
øø= >
int
øø> A
)
øøA B#
RelayConnectionStatus
øøB W
.
øøW X
Established
øøX c
;
øøc d
return
¡¡ 
true
¡¡ 
;
¡¡  
case
√√ 
RelayMessageType
√√ %
.
√√% &
Accepted
√√& .
:
√√. /
command
ƒƒ 
.
ƒƒ 
Type
ƒƒ  
=
ƒƒ! "&
ProcessPacketCommandType
ƒƒ# ;
.
ƒƒ; <
Drop
ƒƒ< @
;
ƒƒ@ A
if
∆∆ 
(
∆∆ 
size
∆∆ 
!=
∆∆ "
RelayMessageAccepted
∆∆  4
.
∆∆4 5
Length
∆∆5 ;
)
∆∆; <
{
«« 
UnityEngine
»» #
.
»»# $
Debug
»»$ )
.
»») *
LogError
»»* 2
(
»»2 3
$str
»»3 m
)
»»m n
;
»»n o
return
…… 
true
…… #
;
……# $
}
   
if
ÃÃ 
(
ÃÃ 
protocolData
ÃÃ $
->
ÃÃ$ &
HostAllocationId
ÃÃ& 6
!=
ÃÃ7 9
default
ÃÃ: A
)
ÃÃA B
return
ÕÕ 
true
ÕÕ #
;
ÕÕ# $
var
œœ 
acceptedMessage
œœ '
=
œœ( )
*
œœ* +
(
œœ+ ,"
RelayMessageAccepted
œœ, @
*
œœ@ A
)
œœA B
data
œœB F
;
œœF G
protocolData
––  
->
––  "
HostAllocationId
––" 2
=
––3 4
acceptedMessage
––5 D
.
––D E
FromAllocationId
––E U
;
––U V
command
““ 
.
““ 
Type
““  
=
““! "&
ProcessPacketCommandType
““# ;
.
““; <
AddressUpdate
““< I
;
““I J
command
”” 
.
”” 
Address
”” #
=
””$ %
default
””& -
;
””- .
command
‘‘ 
.
‘‘ 
	SessionId
‘‘ %
=
‘‘& '
protocolData
‘‘( 4
->
‘‘4 6$
ConnectionReceiveToken
‘‘6 L
;
‘‘L M
command
’’ 
.
’’ 
As
’’ 
.
’’ 
AddressUpdate
’’ ,
.
’’, -

NewAddress
’’- 7
=
’’8 9
default
’’: A
;
’’A B
fixed
◊◊ 
(
◊◊ 
byte
◊◊ 
*
◊◊ 

addressPtr
◊◊  *
=
◊◊+ ,
command
◊◊- 4
.
◊◊4 5
As
◊◊5 7
.
◊◊7 8
AddressUpdate
◊◊8 E
.
◊◊E F

NewAddress
◊◊F P
.
◊◊P Q
data
◊◊Q U
)
◊◊U V
{
ÿÿ 
*
ŸŸ 
(
ŸŸ 
RelayAllocationId
ŸŸ +
*
ŸŸ+ ,
)
ŸŸ, -

addressPtr
ŸŸ- 7
=
ŸŸ8 9
acceptedMessage
ŸŸ: I
.
ŸŸI J
FromAllocationId
ŸŸJ Z
;
ŸŸZ [
}
⁄⁄ 
var
‹‹ 
type
‹‹ 
=
‹‹ 
UdpCProtocol
‹‹ +
.
‹‹+ ,
ConnectionRequest
‹‹, =
;
‹‹= >
var
›› 
token
›› 
=
›› 
protocolData
››  ,
->
››, .$
ConnectionReceiveToken
››. D
;
››D E
var
ﬁﬁ 
result
ﬁﬁ 
=
ﬁﬁ  '
SendHeaderOnlyHostMessage
ﬁﬁ! :
(
ﬁﬁ: ;
type
ﬂﬂ 
,
ﬂﬂ 
token
ﬂﬂ #
,
ﬂﬂ# $
protocolData
ﬂﬂ% 1
,
ﬂﬂ1 2
ref
ﬂﬂ3 6
acceptedMessage
ﬂﬂ7 F
.
ﬂﬂF G
FromAllocationId
ﬂﬂG W
,
ﬂﬂW X
ref
ﬂﬂY \
sendInterface
ﬂﬂ] j
,
ﬂﬂj k
ref
ﬂﬂl o
queueHandle
ﬂﬂp {
)
ﬂﬂ{ |
;
ﬂﬂ| }
if
‡‡ 
(
‡‡ 
result
‡‡ 
<
‡‡  
$num
‡‡! "
)
‡‡" #
{
·· 
Debug
‚‚ 
.
‚‚ 
LogError
‚‚ &
(
‚‚& '
$str
‚‚' [
)
‚‚[ \
;
‚‚\ ]
return
„„ 
false
„„ $
;
„„$ %
}
‰‰ 
return
ÊÊ 
true
ÊÊ 
;
ÊÊ  
case
ËË 
RelayMessageType
ËË %
.
ËË% &
Relay
ËË& +
:
ËË+ ,
var
ÈÈ 
relayMessage
ÈÈ $
=
ÈÈ% &
*
ÈÈ' (
(
ÈÈ( )
RelayMessageRelay
ÈÈ) :
*
ÈÈ: ;
)
ÈÈ; <
data
ÈÈ< @
;
ÈÈ@ A
relayMessage
ÍÍ  
.
ÍÍ  !

DataLength
ÍÍ! +
=
ÍÍ, -"
RelayNetworkProtocol
ÍÍ. B
.
ÍÍB C
SwitchEndianness
ÍÍC S
(
ÍÍS T
relayMessage
ÍÍT `
.
ÍÍ` a

DataLength
ÍÍa k
)
ÍÍk l
;
ÍÍl m
if
ÎÎ 
(
ÎÎ 
size
ÎÎ 
<
ÎÎ 
RelayMessageRelay
ÎÎ 0
.
ÎÎ0 1
Length
ÎÎ1 7
||
ÎÎ8 :
size
ÎÎ; ?
!=
ÎÎ@ B
RelayMessageRelay
ÎÎC T
.
ÎÎT U
Length
ÎÎU [
+
ÎÎ\ ]
relayMessage
ÎÎ^ j
.
ÎÎj k

DataLength
ÎÎk u
)
ÎÎu v
{
ÏÏ 
UnityEngine
ÌÌ #
.
ÌÌ# $
Debug
ÌÌ$ )
.
ÌÌ) *
LogError
ÌÌ* 2
(
ÌÌ2 3
$"
ÌÌ3 5
$str
ÌÌ5 m
"
ÌÌm n
)
ÌÌn o
;
ÌÌo p
command
ÓÓ 
.
ÓÓ  
Type
ÓÓ  $
=
ÓÓ% &&
ProcessPacketCommandType
ÓÓ' ?
.
ÓÓ? @
Drop
ÓÓ@ D
;
ÓÓD E
return
ÔÔ 
true
ÔÔ #
;
ÔÔ# $
}
 $
UnityTransportProtocol
ÛÛ *
.
ÛÛ* +
ProcessReceive
ÛÛ+ 9
(
ÛÛ9 :
stream
ÛÛ: @
+
ÛÛA B
RelayMessageRelay
ÛÛC T
.
ÛÛT U
Length
ÛÛU [
,
ÛÛ[ \
ref
ÛÛ] `
endpoint
ÛÛa i
,
ÛÛi j
size
ÙÙ 
-
ÙÙ 
RelayMessageRelay
ÙÙ 0
.
ÙÙ0 1
Length
ÙÙ1 7
,
ÙÙ7 8
ref
ÙÙ9 <
sendInterface
ÙÙ= J
,
ÙÙJ K
ref
ÙÙL O
queueHandle
ÙÙP [
,
ÙÙ[ \
IntPtr
ÙÙ] c
.
ÙÙc d
Zero
ÙÙd h
,
ÙÙh i
ref
ÙÙj m
command
ÙÙn u
)
ÙÙu v
;
ÙÙv w
switch
ˆˆ 
(
ˆˆ 
command
ˆˆ #
.
ˆˆ# $
Type
ˆˆ$ (
)
ˆˆ( )
{
˜˜ 
case
¯¯ &
ProcessPacketCommandType
¯¯ 5
.
¯¯5 6
ConnectionAccept
¯¯6 F
:
¯¯F G
protocolData
˘˘ (
->
˘˘( *
ConnectionState
˘˘* 9
=
˘˘: ;"
RelayConnectionState
˘˘< P
.
˘˘P Q
	Connected
˘˘Q Z
;
˘˘Z [
break
˙˙ !
;
˙˙! "
case
¸¸ &
ProcessPacketCommandType
¸¸ 5
.
¸¸5 6
Data
¸¸6 :
:
¸¸: ;
command
˝˝ #
.
˝˝# $
As
˝˝$ &
.
˝˝& '
Data
˝˝' +
.
˝˝+ ,
Offset
˝˝, 2
+=
˝˝3 5
RelayMessageRelay
˝˝6 G
.
˝˝G H
Length
˝˝H N
;
˝˝N O
break
˛˛ !
;
˛˛! "
case
ÄÄ &
ProcessPacketCommandType
ÄÄ 5
.
ÄÄ5 6.
 DataWithImplicitConnectionAccept
ÄÄ6 V
:
ÄÄV W
command
ÅÅ #
.
ÅÅ# $
As
ÅÅ$ &
.
ÅÅ& '.
 DataWithImplicitConnectionAccept
ÅÅ' G
.
ÅÅG H
Offset
ÅÅH N
+=
ÅÅO Q
RelayMessageRelay
ÅÅR c
.
ÅÅc d
Length
ÅÅd j
;
ÅÅj k
break
ÇÇ !
;
ÇÇ! "
case
ÑÑ &
ProcessPacketCommandType
ÑÑ 5
.
ÑÑ5 6

Disconnect
ÑÑ6 @
:
ÑÑ@ A!
SendRelayDisconnect
ÖÖ /
(
ÖÖ/ 0
protocolData
ÜÜ  ,
,
ÜÜ, -
ref
ÜÜ. 1
relayMessage
ÜÜ2 >
.
ÜÜ> ?
FromAllocationId
ÜÜ? O
,
ÜÜO P
ref
ÜÜQ T
sendInterface
ÜÜU b
,
ÜÜb c
ref
ÜÜd g
queueHandle
ÜÜh s
)
ÜÜs t
;
ÜÜt u
break
áá !
;
áá! "
}
àà 
command
ää 
.
ää 
Address
ää #
=
ää$ %
default
ää& -
;
ää- .
fixed
ãã 
(
ãã 
byte
ãã 
*
ãã 

addressPtr
ãã  *
=
ãã+ ,
command
ãã- 4
.
ãã4 5
Address
ãã5 <
.
ãã< =
data
ãã= A
)
ããA B
{
åå 
*
çç 
(
çç 
RelayAllocationId
çç +
*
çç+ ,
)
çç, -

addressPtr
çç- 7
=
çç8 9
relayMessage
çç: F
.
ççF G
FromAllocationId
ççG W
;
ççW X
}
éé 
return
êê 
true
êê 
;
êê  
case
íí 
RelayMessageType
íí %
.
íí% &
Error
íí& +
:
íí+ ,
command
ìì 
.
ìì 
Type
ìì  
=
ìì! "&
ProcessPacketCommandType
ìì# ;
.
ìì; <
Drop
ìì< @
;
ìì@ A
ProcessRelayError
îî %
(
îî% &
data
îî& *
,
îî* +
size
îî, 0
,
îî0 1
ref
îî2 5
command
îî6 =
)
îî= >
;
îî> ?
return
ïï 
true
ïï 
;
ïï  
}
ññ 
command
òò 
.
òò 
Type
òò 
=
òò &
ProcessPacketCommandType
òò 3
.
òò3 4
Drop
òò4 8
;
òò8 9
return
ôô 
true
ôô 
;
ôô 
}
öö 	
private
úú 
static
úú 
unsafe
úú 
void
úú "
ProcessRelayError
úú# 4
(
úú4 5
byte
úú5 9
*
úú9 :
data
úú; ?
,
úú? @
int
úúA D
size
úúE I
,
úúI J
ref
úúK N"
ProcessPacketCommand
úúO c
command
úúd k
)
úúk l
{
ùù 	
if
ûû 
(
ûû 
size
ûû 
!=
ûû 
RelayMessageError
ûû )
.
ûû) *
Length
ûû* 0
)
ûû0 1
{
üü 
Debug
†† 
.
†† 
LogError
†† 
(
†† 
$str
†† X
)
††X Y
;
††Y Z
return
°° 
;
°° 
}
¢¢ 
var
§§ 
errorMessage
§§ 
=
§§ 
*
§§  
(
§§  !
RelayMessageError
§§! 2
*
§§2 3
)
§§3 4
data
§§4 8
;
§§8 9
switch
¶¶ 
(
¶¶ 
errorMessage
¶¶  
.
¶¶  !
	ErrorCode
¶¶! *
)
¶¶* +
{
ßß 
case
®® 
$num
®® 
:
®® 
Debug
©© 
.
©© 
LogError
©© "
(
©©" #
$str
©©# b
+
©©c d
$str
™™ O
)
™™O P
;
™™P Q
break
´´ 
;
´´ 
case
¨¨ 
$num
¨¨ 
:
¨¨ 
Debug
≠≠ 
.
≠≠ 
LogError
≠≠ "
(
≠≠" #
$str
≠≠# k
)
≠≠k l
;
≠≠l m
break
ÆÆ 
;
ÆÆ 
case
ØØ 
$num
ØØ 
:
ØØ 
Debug
∞∞ 
.
∞∞ 
LogError
∞∞ "
(
∞∞" #
$str
∞∞# U
)
∞∞U V
;
∞∞V W
break
±± 
;
±± 
case
≤≤ 
$num
≤≤ 
:
≤≤ 
Debug
≥≥ 
.
≥≥ 
LogError
≥≥ "
(
≥≥" #
$str
≥≥# f
)
≥≥f g
;
≥≥g h
break
¥¥ 
;
¥¥ 
case
µµ 
$num
µµ 
:
µµ 
Debug
∂∂ 
.
∂∂ 
LogError
∂∂ "
(
∂∂" #
$str
∂∂# `
)
∂∂` a
;
∂∂a b
break
∑∑ 
;
∑∑ 
case
∏∏ 
$num
∏∏ 
:
∏∏ 
Debug
ππ 
.
ππ 
LogError
ππ "
(
ππ" #
$str
ππ# V
)
ππV W
;
ππW X
break
∫∫ 
;
∫∫ 
case
ªª 
$num
ªª 
:
ªª 
Debug
ºº 
.
ºº 
LogError
ºº "
(
ºº" #
$str
ºº# a
)
ººa b
;
ººb c
break
ΩΩ 
;
ΩΩ 
default
ææ 
:
ææ 
Debug
øø 
.
øø 
LogError
øø "
(
øø" #
$"
øø# %
$str
øø% _
{
øø_ `
errorMessage
øø` l
.
øøl m
	ErrorCode
øøm v
}
øøv w
"
øøw x
)
øøx y
;
øøy z
break
¿¿ 
;
¿¿ 
}
¡¡ 
if
≈≈ 
(
≈≈ 
errorMessage
≈≈ 
.
≈≈ 
	ErrorCode
≈≈ &
==
≈≈' )
$num
≈≈* +
||
≈≈, .
errorMessage
≈≈/ ;
.
≈≈; <
	ErrorCode
≈≈< E
==
≈≈F H
$num
≈≈I J
)
≈≈J K
{
∆∆ 
Debug
«« 
.
«« 
LogError
«« 
(
«« 
$str
«« m
+
««n o
$str
»» j
)
»»j k
;
»»k l
command
…… 
.
…… 
Type
…… 
=
…… &
ProcessPacketCommandType
…… 7
.
……7 8"
ProtocolStatusUpdate
……8 L
;
……L M
command
   
.
   
As
   
.
   "
ProtocolStatusUpdate
   /
.
  / 0
Status
  0 6
=
  7 8
(
  9 :
int
  : =
)
  = >#
RelayConnectionStatus
  > S
.
  S T
AllocationInvalid
  T e
;
  e f
}
ÀÀ 
}
ÃÃ 	
private
ŒŒ 
static
ŒŒ 
unsafe
ŒŒ 
int
ŒŒ !
SendMessage
ŒŒ" -
(
ŒŒ- .
RelayProtocolData
ŒŒ. ?
*
ŒŒ? @
protocolData
ŒŒA M
,
ŒŒM N
ref
ŒŒO R"
NetworkSendInterface
ŒŒS g
sendInterface
ŒŒh u
,
ŒŒu v
ref
œœ (
NetworkInterfaceSendHandle
œœ *

sendHandle
œœ+ 5
,
œœ5 6
ref
œœ7 :$
NetworkSendQueueHandle
œœ; Q
queueHandle
œœR ]
)
œœ] ^
{
–– 	
if
““ 
(
““ 
protocolData
““ 
->
““ 

ServerData
““ (
.
““( )
IsSecure
““) 1
==
““2 4
$num
““5 6
&&
““7 9
protocolData
““: F
->
““F H
SecureState
““H S
==
““T V)
SecuredRelayConnectionState
““W r
.
““r s
Secured
““s z
)
““z {
{
”” 
var
‘‘ 
secureUserData
‘‘ "
=
‘‘# $
(
‘‘% &
SecureUserData
‘‘& 4
*
‘‘4 5
)
‘‘5 6
protocolData
‘‘6 B
->
‘‘B D
SecureClientState
‘‘D U
.
‘‘U V
ClientConfig
‘‘V b
->
‘‘b d
transportUserData
‘‘d u
;
‘‘u v#
SecureNetworkProtocol
’’ %
.
’’% &
SetSecureUserData
’’& 7
(
’’7 8
IntPtr
÷÷ 
.
÷÷ 
Zero
÷÷ 
,
÷÷  
$num
÷÷! "
,
÷÷" #
ref
÷÷$ '
protocolData
÷÷( 4
->
÷÷4 6
ServerEndpoint
÷÷6 D
,
÷÷D E
ref
÷÷F I
sendInterface
÷÷J W
,
÷÷W X
ref
÷÷Y \
queueHandle
÷÷] h
,
÷÷h i
secureUserData
÷÷j x
)
÷÷x y
;
÷÷y z
var
⁄⁄ 
buffer
⁄⁄ 
=
⁄⁄ 
new
⁄⁄  
NativeArray
⁄⁄! ,
<
⁄⁄, -
byte
⁄⁄- 1
>
⁄⁄1 2
(
⁄⁄2 3

sendHandle
⁄⁄3 =
.
⁄⁄= >
size
⁄⁄> B
,
⁄⁄B C
	Allocator
⁄⁄D M
.
⁄⁄M N
Temp
⁄⁄N R
)
⁄⁄R S
;
⁄⁄S T
UnsafeUtility
€€ 
.
€€ 
MemCpy
€€ $
(
€€$ %
buffer
€€% +
.
€€+ ,
GetUnsafePtr
€€, 8
(
€€8 9
)
€€9 :
,
€€: ;
(
€€< =
void
€€= A
*
€€A B
)
€€B C

sendHandle
€€C M
.
€€M N
data
€€N R
,
€€R S

sendHandle
€€T ^
.
€€^ _
size
€€_ c
)
€€c d
;
€€d e
sendInterface
ﬂﬂ 
.
ﬂﬂ 
AbortSendMessage
ﬂﬂ .
.
ﬂﬂ. /
Ptr
ﬂﬂ/ 2
.
ﬂﬂ2 3
Invoke
ﬂﬂ3 9
(
ﬂﬂ9 :
ref
ﬂﬂ: =

sendHandle
ﬂﬂ> H
,
ﬂﬂH I
sendInterface
ﬂﬂJ W
.
ﬂﬂW X
UserData
ﬂﬂX `
)
ﬂﬂ` a
;
ﬂﬂa b
var
·· 
result
·· 
=
·· 
Binding
·· $
.
··$ %'
unitytls_client_send_data
··% >
(
··> ?
protocolData
‚‚  
->
‚‚  "
SecureClientState
‚‚" 3
.
‚‚3 4
	ClientPtr
‚‚4 =
,
‚‚= >
(
‚‚? @
byte
‚‚@ D
*
‚‚D E
)
‚‚E F
buffer
‚‚F L
.
‚‚L M
GetUnsafePtr
‚‚M Y
(
‚‚Y Z
)
‚‚Z [
,
‚‚[ \
new
‚‚] `
UIntPtr
‚‚a h
(
‚‚h i
(
‚‚i j
uint
‚‚j n
)
‚‚n o
buffer
‚‚o u
.
‚‚u v
Length
‚‚v |
)
‚‚| }
)
‚‚} ~
;
‚‚~ 
if
‰‰ 
(
‰‰ 
result
‰‰ 
!=
‰‰ 
Binding
‰‰ %
.
‰‰% &
UNITYTLS_SUCCESS
‰‰& 6
)
‰‰6 7
{
ÂÂ 
Debug
ÊÊ 
.
ÊÊ 
LogError
ÊÊ "
(
ÊÊ" #
$"
ÊÊ# %
$str
ÊÊ% E
{
ÊÊE F
result
ÊÊF L
}
ÊÊL M
$str
ÊÊM N
"
ÊÊN O
)
ÊÊO P
;
ÊÊP Q
return
ËË 
(
ËË 
int
ËË 
)
ËË  
Error
ËË  %
.
ËË% &

StatusCode
ËË& 0
.
ËË0 1"
NetworkStateMismatch
ËË1 E
;
ËËE F
}
ÈÈ 
return
ÎÎ 
buffer
ÎÎ 
.
ÎÎ 
Length
ÎÎ $
;
ÎÎ$ %
}
ÏÏ 
else
ÌÌ 
{
ÔÔ 
return
 
sendInterface
 $
.
$ %
EndSendMessage
% 3
.
3 4
Ptr
4 7
.
7 8
Invoke
8 >
(
> ?
ref
ÒÒ 

sendHandle
ÒÒ "
,
ÒÒ" #
ref
ÒÒ$ '
protocolData
ÒÒ( 4
->
ÒÒ4 6
ServerEndpoint
ÒÒ6 D
,
ÒÒD E
sendInterface
ÒÒF S
.
ÒÒS T
UserData
ÒÒT \
,
ÒÒ\ ]
ref
ÒÒ^ a
queueHandle
ÒÒb m
)
ÒÒm n
;
ÒÒn o
}
ÚÚ 
}
ÛÛ 	
private
ıı 
static
ıı 
unsafe
ıı 
void
ıı "!
SendRelayDisconnect
ıı# 6
(
ıı6 7
RelayProtocolData
ıı7 H
*
ııH I
protocolData
ııJ V
,
ııV W
ref
ııX [
RelayAllocationId
ıı\ m
hostAllocationId
ıın ~
,
ıı~ 
ref
ˆˆ "
NetworkSendInterface
ˆˆ $
sendInterface
ˆˆ% 2
,
ˆˆ2 3
ref
ˆˆ4 7$
NetworkSendQueueHandle
ˆˆ8 N
queueHandle
ˆˆO Z
)
ˆˆZ [
{
˜˜ 	
var
¯¯ 
result
¯¯ 
=
¯¯ 
sendInterface
¯¯ &
.
¯¯& '
BeginSendMessage
¯¯' 7
.
¯¯7 8
Ptr
¯¯8 ;
.
¯¯; <
Invoke
¯¯< B
(
¯¯B C
out
˘˘ 
var
˘˘ 

sendHandle
˘˘ "
,
˘˘" #
sendInterface
˘˘$ 1
.
˘˘1 2
UserData
˘˘2 :
,
˘˘: ;$
RelayMessageDisconnect
˘˘< R
.
˘˘R S
Length
˘˘S Y
)
˘˘Y Z
;
˘˘Z [
if
˙˙ 
(
˙˙ 
result
˙˙ 
!=
˙˙ 
$num
˙˙ 
)
˙˙ 
{
˚˚ 
UnityEngine
¸¸ 
.
¸¸ 
Debug
¸¸ !
.
¸¸! "
LogError
¸¸" *
(
¸¸* +
$str
¸¸+ X
)
¸¸X Y
;
¸¸Y Z
return
˝˝ 
;
˝˝ 
}
˛˛ 
var
ÄÄ 
packet
ÄÄ 
=
ÄÄ 
(
ÄÄ 
byte
ÄÄ 
*
ÄÄ 
)
ÄÄ  

sendHandle
ÄÄ  *
.
ÄÄ* +
data
ÄÄ+ /
;
ÄÄ/ 0

sendHandle
ÅÅ 
.
ÅÅ 
size
ÅÅ 
=
ÅÅ $
RelayMessageDisconnect
ÅÅ 4
.
ÅÅ4 5
Length
ÅÅ5 ;
;
ÅÅ; <
if
ÇÇ 
(
ÇÇ 

sendHandle
ÇÇ 
.
ÇÇ 
size
ÇÇ 
>
ÇÇ  !

sendHandle
ÇÇ" ,
.
ÇÇ, -
capacity
ÇÇ- 5
)
ÇÇ5 6
{
ÉÉ 
sendInterface
ÑÑ 
.
ÑÑ 
AbortSendMessage
ÑÑ .
.
ÑÑ. /
Ptr
ÑÑ/ 2
.
ÑÑ2 3
Invoke
ÑÑ3 9
(
ÑÑ9 :
ref
ÑÑ: =

sendHandle
ÑÑ> H
,
ÑÑH I
sendInterface
ÑÑJ W
.
ÑÑW X
UserData
ÑÑX `
)
ÑÑ` a
;
ÑÑa b
UnityEngine
ÖÖ 
.
ÖÖ 
Debug
ÖÖ !
.
ÖÖ! "
LogError
ÖÖ" *
(
ÖÖ* +
$str
ÖÖ+ X
)
ÖÖX Y
;
ÖÖY Z
return
ÜÜ 
;
ÜÜ 
}
áá 
var
ââ 
disconnectMessage
ââ !
=
ââ" #
(
ââ$ %$
RelayMessageDisconnect
ââ% ;
*
ââ; <
)
ââ< =
packet
ââ= C
;
ââC D
*
ää 
disconnectMessage
ää 
=
ää  $
RelayMessageDisconnect
ää! 7
.
ää7 8
Create
ää8 >
(
ää> ?
protocolData
ää? K
->
ääK M

ServerData
ääM W
.
ääW X
AllocationId
ääX d
,
ääd e
hostAllocationId
ääf v
)
ääv w
;
ääw x
if
åå 
(
åå 
SendMessage
åå 
(
åå 
protocolData
åå (
,
åå( )
ref
åå* -
sendInterface
åå. ;
,
åå; <
ref
åå= @

sendHandle
ååA K
,
ååK L
ref
ååM P
queueHandle
ååQ \
)
åå\ ]
<
åå^ _
$num
åå` a
)
ååa b
{
çç 
Debug
éé 
.
éé 
LogError
éé 
(
éé 
$str
éé L
)
ééL M
;
ééM N
return
èè 
;
èè 
}
êê 
}
ëë 	
[
ìì 	
BurstCompile
ìì	 
(
ìì 
DisableDirectCall
ìì '
=
ìì( )
true
ìì* .
)
ìì. /
]
ìì/ 0
[
îî 	!
MonoPInvokeCallback
îî	 
(
îî 
typeof
îî #
(
îî# $
NetworkProtocol
îî$ 3
.
îî3 4!
ProcessSendDelegate
îî4 G
)
îîG H
)
îîH I
]
îîI J
public
ïï 
static
ïï 
unsafe
ïï 
int
ïï  
ProcessSend
ïï! ,
(
ïï, -
ref
ïï- 0
NetworkDriver
ïï1 >
.
ïï> ?

Connection
ïï? I

connection
ïïJ T
,
ïïT U
bool
ïïV Z
hasPipeline
ïï[ f
,
ïïf g
ref
ïïh k#
NetworkSendInterfaceïïl Ä
sendInterfaceïïÅ é
,ïïé è
refïïê ì*
NetworkInterfaceSendHandleïïî Æ

sendHandleïïØ π
,ïïπ ∫
refïïª æ&
NetworkSendQueueHandleïïø ’
queueHandleïï÷ ·
,ïï· ‚
IntPtrïï„ È
userDataïïÍ Ú
)ïïÚ Û
{
ññ 	
var
óó 
relayProtocolData
óó !
=
óó" #
(
óó$ %
RelayProtocolData
óó% 6
*
óó6 7
)
óó7 8
userData
óó8 @
;
óó@ A
var
ôô 

dataLength
ôô 
=
ôô 
(
ôô 
ushort
ôô $
)
ôô$ %$
UnityTransportProtocol
ôô% ;
.
ôô; <$
WriteSendMessageHeader
ôô< R
(
ôôR S
ref
ôôS V

connection
ôôW a
,
ôôa b
hasPipeline
ôôc n
,
ôôn o
ref
ôôp s

sendHandle
ôôt ~
,
ôô~ !
RelayMessageRelayôôÄ ë
.ôôë í
Lengthôôí ò
)ôôò ô
;ôôô ö
var
õõ 
relayMessage
õõ 
=
õõ 
(
õõ  
RelayMessageRelay
õõ  1
*
õõ1 2
)
õõ2 3

sendHandle
õõ3 =
.
õõ= >
data
õõ> B
;
õõB C
fixed
úú 
(
úú 
byte
úú 
*
úú 

addressPtr
úú "
=
úú# $

connection
úú% /
.
úú/ 0
Address
úú0 7
.
úú7 8
data
úú8 <
)
úú< =
{
ùù 
*
ûû 
relayMessage
ûû 
=
ûû 
RelayMessageRelay
ûû  1
.
ûû1 2
Create
ûû2 8
(
ûû8 9
relayProtocolData
ûû9 J
->
ûûJ L

ServerData
ûûL V
.
ûûV W
AllocationId
ûûW c
,
ûûc d
*
ûûe f
(
ûûf g
RelayAllocationId
ûûg x
*
ûûx y
)
ûûy z

addressPtrûûz Ñ
,ûûÑ Ö

dataLengthûûÜ ê
)ûûê ë
;ûûë í
}
üü 
Interlocked
°° 
.
°° 
Exchange
°°  
(
°°  !
ref
°°! $
relayProtocolData
°°% 6
->
°°6 8
LastSentTime
°°8 D
,
°°D E
relayProtocolData
°°F W
->
°°W Y
LastUpdateTime
°°Y g
)
°°g h
;
°°h i
return
££ 
SendMessage
££ 
(
££ 
relayProtocolData
££ 0
,
££0 1
ref
££2 5
sendInterface
££6 C
,
££C D
ref
££E H

sendHandle
££I S
,
££S T
ref
££U X
queueHandle
££Y d
)
££d e
;
££e f
}
§§ 	
[
¶¶ 	
BurstCompile
¶¶	 
(
¶¶ 
DisableDirectCall
¶¶ '
=
¶¶( )
true
¶¶* .
)
¶¶. /
]
¶¶/ 0
[
ßß 	!
MonoPInvokeCallback
ßß	 
(
ßß 
typeof
ßß #
(
ßß# $
NetworkProtocol
ßß$ 3
.
ßß3 41
#ProcessSendConnectionAcceptDelegate
ßß4 W
)
ßßW X
)
ßßX Y
]
ßßY Z
public
®® 
static
®® 
void
®® )
ProcessSendConnectionAccept
®® 6
(
®®6 7
ref
®®7 :
NetworkDriver
®®; H
.
®®H I

Connection
®®I S

connection
®®T ^
,
®®^ _
ref
®®` c"
NetworkSendInterface
®®d x
sendInterface®®y Ü
,®®Ü á
ref®®à ã&
NetworkSendQueueHandle®®å ¢
queueHandle®®£ Æ
,®®Æ Ø
IntPtr®®∞ ∂
userData®®∑ ø
)®®ø ¿
{
©© 	
unsafe
™™ 
{
´´ 
var
¨¨ 
relayProtocolData
¨¨ %
=
¨¨& '
(
¨¨( )
RelayProtocolData
¨¨) :
*
¨¨: ;
)
¨¨; <
userData
¨¨< D
;
¨¨D E
var
ÆÆ 
toAllocationId
ÆÆ "
=
ÆÆ# $
default
ÆÆ% ,
(
ÆÆ, -
RelayAllocationId
ÆÆ- >
)
ÆÆ> ?
;
ÆÆ? @
fixed
∞∞ 
(
∞∞ 
byte
∞∞ 
*
∞∞ 
addrPtr
∞∞ #
=
∞∞$ %

connection
∞∞& 0
.
∞∞0 1
Address
∞∞1 8
.
∞∞8 9
data
∞∞9 =
)
∞∞= >
toAllocationId
±± 
=
±±  
*
±±! "
(
±±" #
RelayAllocationId
±±# 4
*
±±4 5
)
±±5 6
addrPtr
±±6 =
;
±±= >
var
≥≥ 
maxLengthNeeded
≥≥ #
=
≥≥$ %
RelayMessageRelay
≥≥& 7
.
≥≥7 8
Length
≥≥8 >
+
≥≥? @$
UnityTransportProtocol
≥≥A W
.
≥≥W X1
#GetConnectionAcceptMessageMaxLength
≥≥X {
(
≥≥{ |
)
≥≥| }
;
≥≥} ~
if
¥¥ 
(
¥¥ 
sendInterface
¥¥ !
.
¥¥! "
BeginSendMessage
¥¥" 2
.
¥¥2 3
Ptr
¥¥3 6
.
¥¥6 7
Invoke
¥¥7 =
(
¥¥= >
out
¥¥> A
var
¥¥B E

sendHandle
¥¥F P
,
¥¥P Q
sendInterface
¥¥R _
.
¥¥_ `
UserData
¥¥` h
,
¥¥h i
maxLengthNeeded
¥¥j y
)
¥¥y z
!=
¥¥{ }
$num
¥¥~ 
)¥¥ Ä
{
µµ 
UnityEngine
∂∂ 
.
∂∂  
Debug
∂∂  %
.
∂∂% &
LogError
∂∂& .
(
∂∂. /
$str
∂∂/ Z
)
∂∂Z [
;
∂∂[ \
return
∑∑ 
;
∑∑ 
}
∏∏ 
if
∫∫ 
(
∫∫ 

sendHandle
∫∫ 
.
∫∫ 
capacity
∫∫ '
<
∫∫( )
maxLengthNeeded
∫∫* 9
)
∫∫9 :
{
ªª 
sendInterface
ºº !
.
ºº! "
AbortSendMessage
ºº" 2
.
ºº2 3
Ptr
ºº3 6
.
ºº6 7
Invoke
ºº7 =
(
ºº= >
ref
ºº> A

sendHandle
ººB L
,
ººL M
sendInterface
ººN [
.
ºº[ \
UserData
ºº\ d
)
ººd e
;
ººe f
UnityEngine
ΩΩ 
.
ΩΩ  
Debug
ΩΩ  %
.
ΩΩ% &
LogError
ΩΩ& .
(
ΩΩ. /
$str
ΩΩ/ p
)
ΩΩp q
;
ΩΩq r
return
ææ 
;
ææ 
}
øø 
var
¡¡ 
packet
¡¡ 
=
¡¡ 
(
¡¡ 
byte
¡¡ "
*
¡¡" #
)
¡¡# $

sendHandle
¡¡$ .
.
¡¡. /
data
¡¡/ 3
;
¡¡3 4
var
¬¬ 
size
¬¬ 
=
¬¬ $
UnityTransportProtocol
¬¬ 1
.
¬¬1 2*
WriteConnectionAcceptMessage
¬¬2 N
(
¬¬N O
ref
¬¬O R

connection
¬¬S ]
,
¬¬] ^
packet
¬¬_ e
+
¬¬f g
RelayMessageRelay
¬¬h y
.
¬¬y z
Length¬¬z Ä
,¬¬Ä Å

sendHandle¬¬Ç å
.¬¬å ç
capacity¬¬ç ï
-¬¬ñ ó!
RelayMessageRelay¬¬ò ©
.¬¬© ™
Length¬¬™ ∞
)¬¬∞ ±
;¬¬± ≤
if
ƒƒ 
(
ƒƒ 
size
ƒƒ 
<
ƒƒ 
$num
ƒƒ 
)
ƒƒ 
{
≈≈ 
sendInterface
∆∆ !
.
∆∆! "
AbortSendMessage
∆∆" 2
.
∆∆2 3
Ptr
∆∆3 6
.
∆∆6 7
Invoke
∆∆7 =
(
∆∆= >
ref
∆∆> A

sendHandle
∆∆B L
,
∆∆L M
sendInterface
∆∆N [
.
∆∆[ \
UserData
∆∆\ d
)
∆∆d e
;
∆∆e f
UnityEngine
«« 
.
««  
Debug
««  %
.
««% &
LogError
««& .
(
««. /
$str
««/ Y
)
««Y Z
;
««Z [
return
»» 
;
»» 
}
…… 

sendHandle
ÀÀ 
.
ÀÀ 
size
ÀÀ 
=
ÀÀ  !
RelayMessageRelay
ÀÀ" 3
.
ÀÀ3 4
Length
ÀÀ4 :
+
ÀÀ; <
size
ÀÀ= A
;
ÀÀA B
var
ÕÕ 
relayMessage
ÕÕ  
=
ÕÕ! "
(
ÕÕ# $
RelayMessageRelay
ÕÕ$ 5
*
ÕÕ5 6
)
ÕÕ6 7
packet
ÕÕ7 =
;
ÕÕ= >
*
ŒŒ 
relayMessage
ŒŒ 
=
ŒŒ 
RelayMessageRelay
ŒŒ  1
.
ŒŒ1 2
Create
ŒŒ2 8
(
ŒŒ8 9
relayProtocolData
ŒŒ9 J
->
ŒŒJ L

ServerData
ŒŒL V
.
ŒŒV W
AllocationId
ŒŒW c
,
ŒŒc d
toAllocationId
ŒŒe s
,
ŒŒs t
(
ŒŒu v
ushort
ŒŒv |
)
ŒŒ| }
sizeŒŒ} Å
)ŒŒÅ Ç
;ŒŒÇ É
Assert
œœ 
.
œœ 
IsTrue
œœ 
(
œœ 

sendHandle
œœ (
.
œœ( )
size
œœ) -
<=
œœ. 0

sendHandle
œœ1 ;
.
œœ; <
capacity
œœ< D
)
œœD E
;
œœE F
if
—— 
(
—— 
SendMessage
—— 
(
——  
relayProtocolData
——  1
,
——1 2
ref
——3 6
sendInterface
——7 D
,
——D E
ref
——F I

sendHandle
——J T
,
——T U
ref
——V Y
queueHandle
——Z e
)
——e f
<
——g h
$num
——i j
)
——j k
{
““ 
Debug
”” 
.
”” 
LogError
”” "
(
””" #
$str
””# V
)
””V W
;
””W X
return
‘‘ 
;
‘‘ 
}
’’ 
}
÷÷ 
}
◊◊ 	
private
ŸŸ 
static
ŸŸ 
unsafe
ŸŸ 
int
ŸŸ !'
SendHeaderOnlyHostMessage
ŸŸ" ;
(
ŸŸ; <
UdpCProtocol
ŸŸ< H
type
ŸŸI M
,
ŸŸM N
SessionIdToken
ŸŸO ]
token
ŸŸ^ c
,
ŸŸc d
RelayProtocolData
ŸŸe v
*
ŸŸv w 
relayProtocolDataŸŸx â
,ŸŸâ ä
ref
⁄⁄ 
RelayAllocationId
⁄⁄ !
hostAllocationId
⁄⁄" 2
,
⁄⁄2 3
ref
⁄⁄4 7"
NetworkSendInterface
⁄⁄8 L
sendInterface
⁄⁄M Z
,
⁄⁄Z [
ref
⁄⁄\ _$
NetworkSendQueueHandle
⁄⁄` v
queueHandle⁄⁄w Ç
)⁄⁄Ç É
{
€€ 	
var
‹‹ 
result
‹‹ 
=
‹‹ 
sendInterface
‹‹ &
.
‹‹& '
BeginSendMessage
‹‹' 7
.
‹‹7 8
Ptr
‹‹8 ;
.
‹‹; <
Invoke
‹‹< B
(
‹‹B C
out
›› 
var
›› 

sendHandle
›› "
,
››" #
sendInterface
››$ 1
.
››1 2
UserData
››2 :
,
››: ;
RelayMessageRelay
››< M
.
››M N
Length
››N T
+
››U V

UdpCHeader
››W a
.
››a b
Length
››b h
)
››h i
;
››i j
if
ﬁﬁ 
(
ﬁﬁ 
result
ﬁﬁ 
!=
ﬁﬁ 
$num
ﬁﬁ 
)
ﬁﬁ 
{
ﬂﬂ 
return
‡‡ 
-
‡‡ 
$num
‡‡ 
;
‡‡ 
}
·· 
var
„„ 
packet
„„ 
=
„„ 
(
„„ 
byte
„„ 
*
„„ 
)
„„  

sendHandle
„„  *
.
„„* +
data
„„+ /
;
„„/ 0

sendHandle
‰‰ 
.
‰‰ 
size
‰‰ 
=
‰‰ 
RelayMessageRelay
‰‰ /
.
‰‰/ 0
Length
‰‰0 6
+
‰‰7 8

UdpCHeader
‰‰9 C
.
‰‰C D
Length
‰‰D J
;
‰‰J K
if
ÂÂ 
(
ÂÂ 

sendHandle
ÂÂ 
.
ÂÂ 
size
ÂÂ 
>
ÂÂ  !

sendHandle
ÂÂ" ,
.
ÂÂ, -
capacity
ÂÂ- 5
)
ÂÂ5 6
{
ÊÊ 
sendInterface
ÁÁ 
.
ÁÁ 
AbortSendMessage
ÁÁ .
.
ÁÁ. /
Ptr
ÁÁ/ 2
.
ÁÁ2 3
Invoke
ÁÁ3 9
(
ÁÁ9 :
ref
ÁÁ: =

sendHandle
ÁÁ> H
,
ÁÁH I
sendInterface
ÁÁJ W
.
ÁÁW X
UserData
ÁÁX `
)
ÁÁ` a
;
ÁÁa b
return
ËË 
-
ËË 
$num
ËË 
;
ËË 
}
ÈÈ 
var
ÎÎ 
relayMessage
ÎÎ 
=
ÎÎ 
(
ÎÎ  
RelayMessageRelay
ÎÎ  1
*
ÎÎ1 2
)
ÎÎ2 3
packet
ÎÎ3 9
;
ÎÎ9 :
*
ÏÏ 
relayMessage
ÏÏ 
=
ÏÏ 
RelayMessageRelay
ÏÏ -
.
ÏÏ- .
Create
ÏÏ. 4
(
ÏÏ4 5
relayProtocolData
ÌÌ !
->
ÌÌ! #

ServerData
ÌÌ# -
.
ÌÌ- .
AllocationId
ÌÌ. :
,
ÌÌ: ;
hostAllocationId
ÌÌ< L
,
ÌÌL M

UdpCHeader
ÌÌN X
.
ÌÌX Y
Length
ÌÌY _
)
ÌÌ_ `
;
ÌÌ` a
var
ÔÔ 
header
ÔÔ 
=
ÔÔ 
(
ÔÔ 

UdpCHeader
ÔÔ $
*
ÔÔ$ %
)
ÔÔ% &
(
ÔÔ& '
(
ÔÔ' (
(
ÔÔ( )
byte
ÔÔ) -
*
ÔÔ- .
)
ÔÔ. /
relayMessage
ÔÔ/ ;
)
ÔÔ; <
+
ÔÔ= >
RelayMessageRelay
ÔÔ? P
.
ÔÔP Q
Length
ÔÔQ W
)
ÔÔW X
;
ÔÔX Y
*
 
header
 
=
 
new
 

UdpCHeader
 $
{
ÒÒ 
Type
ÚÚ 
=
ÚÚ 
(
ÚÚ 
byte
ÚÚ 
)
ÚÚ 
type
ÚÚ !
,
ÚÚ! "
SessionToken
ÛÛ 
=
ÛÛ 
token
ÛÛ $
,
ÛÛ$ %
Flags
ÙÙ 
=
ÙÙ 
$num
ÙÙ 
}
ıı 
;
ıı 
return
˜˜ 
SendMessage
˜˜ 
(
˜˜ 
relayProtocolData
˜˜ 0
,
˜˜0 1
ref
˜˜2 5
sendInterface
˜˜6 C
,
˜˜C D
ref
˜˜E H

sendHandle
˜˜I S
,
˜˜S T
ref
˜˜U X
queueHandle
˜˜Y d
)
˜˜d e
;
˜˜e f
}
¯¯ 	
private
˙˙ 
static
˙˙ 
unsafe
˙˙ 
void
˙˙ "*
SendConnectionRequestToRelay
˙˙# ?
(
˙˙? @
RelayProtocolData
˙˙@ Q
*
˙˙Q R
relayProtocolData
˙˙S d
,
˙˙d e
ref
˚˚ "
NetworkSendInterface
˚˚ $
sendInterface
˚˚% 2
,
˚˚2 3
ref
˚˚4 7$
NetworkSendQueueHandle
˚˚8 N
queueHandle
˚˚O Z
)
˚˚Z [
{
¸¸ 	
var
˝˝ 
result
˝˝ 
=
˝˝ 
sendInterface
˝˝ &
.
˝˝& '
BeginSendMessage
˝˝' 7
.
˝˝7 8
Ptr
˝˝8 ;
.
˝˝; <
Invoke
˝˝< B
(
˝˝B C
out
˛˛ 
var
˛˛ 

sendHandle
˛˛ "
,
˛˛" #
sendInterface
˛˛$ 1
.
˛˛1 2
UserData
˛˛2 :
,
˛˛: ;(
RelayMessageConnectRequest
˛˛< V
.
˛˛V W
Length
˛˛W ]
)
˛˛] ^
;
˛˛^ _
if
ˇˇ 
(
ˇˇ 
result
ˇˇ 
!=
ˇˇ 
$num
ˇˇ 
)
ˇˇ 
{
ÄÄ 
Debug
ÅÅ 
.
ÅÅ 
LogError
ÅÅ 
(
ÅÅ 
$str
ÅÅ H
)
ÅÅH I
;
ÅÅI J
return
ÇÇ 
;
ÇÇ 
}
ÉÉ 
var
ÖÖ 
packet
ÖÖ 
=
ÖÖ 
(
ÖÖ 
byte
ÖÖ 
*
ÖÖ 
)
ÖÖ  

sendHandle
ÖÖ  *
.
ÖÖ* +
data
ÖÖ+ /
;
ÖÖ/ 0

sendHandle
ÜÜ 
.
ÜÜ 
size
ÜÜ 
=
ÜÜ (
RelayMessageConnectRequest
ÜÜ 8
.
ÜÜ8 9
Length
ÜÜ9 ?
;
ÜÜ? @
if
áá 
(
áá 

sendHandle
áá 
.
áá 
size
áá 
>
áá  !

sendHandle
áá" ,
.
áá, -
capacity
áá- 5
)
áá5 6
{
àà 
sendInterface
ââ 
.
ââ 
AbortSendMessage
ââ .
.
ââ. /
Ptr
ââ/ 2
.
ââ2 3
Invoke
ââ3 9
(
ââ9 :
ref
ââ: =

sendHandle
ââ> H
,
ââH I
sendInterface
ââJ W
.
ââW X
UserData
ââX `
)
ââ` a
;
ââa b
Debug
ää 
.
ää 
LogError
ää 
(
ää 
$str
ää H
)
ääH I
;
ääI J
return
ãã 
;
ãã 
}
åå 
var
éé 
message
éé 
=
éé 
(
éé (
RelayMessageConnectRequest
éé 5
*
éé5 6
)
éé6 7
packet
éé7 =
;
éé= >
*
èè 
message
èè 
=
èè (
RelayMessageConnectRequest
èè 1
.
èè1 2
Create
èè2 8
(
èè8 9
relayProtocolData
êê !
->
êê! #

ServerData
êê# -
.
êê- .
AllocationId
êê. :
,
êê: ;
relayProtocolData
êê< M
->
êêM O

ServerData
êêO Y
.
êêY Z 
HostConnectionData
êêZ l
)
êêl m
;
êêm n
if
íí 
(
íí 
SendMessage
íí 
(
íí 
relayProtocolData
íí -
,
íí- .
ref
íí/ 2
sendInterface
íí3 @
,
íí@ A
ref
ííB E

sendHandle
ííF P
,
ííP Q
ref
ííR U
queueHandle
ííV a
)
íía b
<
ííc d
$num
ííe f
)
ííf g
{
ìì 
Debug
îî 
.
îî 
LogError
îî 
(
îî 
$str
îî H
)
îîH I
;
îîI J
return
ïï 
;
ïï 
}
ññ 
}
óó 	
[
ôô 	
BurstCompile
ôô	 
(
ôô 
DisableDirectCall
ôô '
=
ôô( )
true
ôô* .
)
ôô. /
]
ôô/ 0
[
öö 	!
MonoPInvokeCallback
öö	 
(
öö 
typeof
öö #
(
öö# $
NetworkProtocol
öö$ 3
.
öö3 4
ConnectDelegate
öö4 C
)
ööC D
)
ööD E
]
ööE F
public
õõ 
static
õõ 
void
õõ 
Connect
õõ "
(
õõ" #
ref
õõ# &
NetworkDriver
õõ' 4
.
õõ4 5

Connection
õõ5 ?

connection
õõ@ J
,
õõJ K
ref
õõL O"
NetworkSendInterface
õõP d
sendInterface
õõe r
,
õõr s
ref
õõt w%
NetworkSendQueueHandleõõx é
queueHandleõõè ö
,õõö õ
IntPtrõõú ¢
userDataõõ£ ´
)õõ´ ¨
{
úú 	
unsafe
ùù 
{
ûû 
var
üü 
relayProtocolData
üü %
=
üü& '
(
üü( )
RelayProtocolData
üü) :
*
üü: ;
)
üü; <
userData
üü< D
;
üüD E
relayProtocolData
†† !
->
††! #$
ConnectionReceiveToken
††# 9
=
††: ;

connection
††< F
.
††F G
ReceiveToken
††G S
;
††S T
if
§§ 
(
§§ 
relayProtocolData
§§ %
->
§§% '
ConnectionState
§§' 6
!=
§§7 9"
RelayConnectionState
§§: N
.
§§N O
Bound
§§O T
)
§§T U
{
•• 
relayProtocolData
¶¶ %
->
¶¶% '
ConnectOnBind
¶¶' 4
=
¶¶5 6
true
¶¶7 ;
;
¶¶; <
return
ßß 
;
ßß 
}
®® 
if
™™ 
(
™™ 
relayProtocolData
™™ %
->
™™% '
HostAllocationId
™™' 7
==
™™8 :
default
™™; B
)
™™B C
{
´´ *
SendConnectionRequestToRelay
¨¨ 0
(
¨¨0 1
relayProtocolData
¨¨1 B
,
¨¨B C
ref
¨¨D G
sendInterface
¨¨H U
,
¨¨U V
ref
¨¨W Z
queueHandle
¨¨[ f
)
¨¨f g
;
¨¨g h
}
≠≠ 
else
ÆÆ 
{
ØØ 
var
∞∞ 
type
∞∞ 
=
∞∞ 
UdpCProtocol
∞∞ +
.
∞∞+ ,
ConnectionRequest
∞∞, =
;
∞∞= >
var
±± 
token
±± 
=
±± 
relayProtocolData
±±  1
->
±±1 3$
ConnectionReceiveToken
±±3 I
;
±±I J
var
≤≤ 
result
≤≤ 
=
≤≤  '
SendHeaderOnlyHostMessage
≤≤! :
(
≤≤: ;
type
≥≥ 
,
≥≥ 
token
≥≥ #
,
≥≥# $
relayProtocolData
≥≥% 6
,
≥≥6 7
ref
≥≥8 ;
relayProtocolData
≥≥< M
->
≥≥M O
HostAllocationId
≥≥O _
,
≥≥_ `
ref
≥≥a d
sendInterface
≥≥e r
,
≥≥r s
ref
≥≥t w
queueHandle≥≥x É
)≥≥É Ñ
;≥≥Ñ Ö
if
¥¥ 
(
¥¥ 
result
¥¥ 
<
¥¥  
$num
¥¥! "
)
¥¥" #
{
µµ 
Debug
∂∂ 
.
∂∂ 
LogError
∂∂ &
(
∂∂& '
$str
∂∂' [
)
∂∂[ \
;
∂∂\ ]
return
∑∑ 
;
∑∑ 
}
∏∏ 
}
ππ 
}
∫∫ 
}
ªª 	
[
ΩΩ 	
BurstCompile
ΩΩ	 
(
ΩΩ 
DisableDirectCall
ΩΩ '
=
ΩΩ( )
true
ΩΩ* .
)
ΩΩ. /
]
ΩΩ/ 0
[
ææ 	!
MonoPInvokeCallback
ææ	 
(
ææ 
typeof
ææ #
(
ææ# $
NetworkProtocol
ææ$ 3
.
ææ3 4 
DisconnectDelegate
ææ4 F
)
ææF G
)
ææG H
]
ææH I
public
øø 
static
øø 
unsafe
øø 
void
øø !

Disconnect
øø" ,
(
øø, -
ref
øø- 0
NetworkDriver
øø1 >
.
øø> ?

Connection
øø? I

connection
øøJ T
,
øøT U
ref
øøV Y"
NetworkSendInterface
øøZ n
sendInterface
øøo |
,
øø| }
reføø~ Å&
NetworkSendQueueHandleøøÇ ò
queueHandleøøô §
,øø§ •
IntPtrøø¶ ¨
userDataøø≠ µ
)øøµ ∂
{
¿¿ 	
var
¡¡ 
relayProtocolData
¡¡ !
=
¡¡" #
(
¡¡$ %
RelayProtocolData
¡¡% 6
*
¡¡6 7
)
¡¡7 8
userData
¡¡8 @
;
¡¡@ A
var
√√ 
type
√√ 
=
√√ 
UdpCProtocol
√√ #
.
√√# $

Disconnect
√√$ .
;
√√. /
var
ƒƒ 
token
ƒƒ 
=
ƒƒ 

connection
ƒƒ "
.
ƒƒ" #
	SendToken
ƒƒ# ,
;
ƒƒ, -
var
≈≈ 
result
≈≈ 
=
≈≈ '
SendHeaderOnlyHostMessage
≈≈ 2
(
≈≈2 3
type
∆∆ 
,
∆∆ 
token
∆∆ 
,
∆∆ 
relayProtocolData
∆∆ .
,
∆∆. /
ref
∆∆0 3

connection
∆∆4 >
.
∆∆> ?
Address
∆∆? F
.
∆∆F G!
AsRelayAllocationId
∆∆G Z
(
∆∆Z [
)
∆∆[ \
,
∆∆\ ]
ref
∆∆^ a
sendInterface
∆∆b o
,
∆∆o p
ref
∆∆q t
queueHandle∆∆u Ä
)∆∆Ä Å
;∆∆Å Ç
if
«« 
(
«« 
result
«« 
<
«« 
$num
«« 
)
«« 
{
»» 
Debug
…… 
.
…… 
LogError
…… 
(
…… 
$str
…… K
)
……K L
;
……L M
return
   
;
   
}
ÀÀ 
}
ÃÃ 	
[
ŒŒ 	
BurstCompile
ŒŒ	 
(
ŒŒ 
DisableDirectCall
ŒŒ '
=
ŒŒ( )
true
ŒŒ* .
)
ŒŒ. /
]
ŒŒ/ 0
[
œœ 	!
MonoPInvokeCallback
œœ	 
(
œœ 
typeof
œœ #
(
œœ# $
NetworkProtocol
œœ$ 3
.
œœ3 4%
ProcessSendPingDelegate
œœ4 K
)
œœK L
)
œœL M
]
œœM N
public
–– 
static
–– 
unsafe
–– 
void
–– !
ProcessSendPing
––" 1
(
––1 2
ref
––2 5
NetworkDriver
––6 C
.
––C D

Connection
––D N

connection
––O Y
,
––Y Z
ref
––[ ^"
NetworkSendInterface
––_ s
sendInterface––t Å
,––Å Ç
ref––É Ü&
NetworkSendQueueHandle––á ù
queueHandle––û ©
,––© ™
IntPtr––´ ±
userData––≤ ∫
)––∫ ª
{
—— 	
var
““ 
relayProtocolData
““ !
=
““" #
(
““$ %
RelayProtocolData
““% 6
*
““6 7
)
““7 8
userData
““8 @
;
““@ A
var
‘‘ 
type
‘‘ 
=
‘‘ 
UdpCProtocol
‘‘ #
.
‘‘# $
Ping
‘‘$ (
;
‘‘( )
var
’’ 
token
’’ 
=
’’ 

connection
’’ "
.
’’" #
	SendToken
’’# ,
;
’’, -
var
÷÷ 
result
÷÷ 
=
÷÷ '
SendHeaderOnlyHostMessage
÷÷ 2
(
÷÷2 3
type
◊◊ 
,
◊◊ 
token
◊◊ 
,
◊◊ 
relayProtocolData
◊◊ .
,
◊◊. /
ref
◊◊0 3

connection
◊◊4 >
.
◊◊> ?
Address
◊◊? F
.
◊◊F G!
AsRelayAllocationId
◊◊G Z
(
◊◊Z [
)
◊◊[ \
,
◊◊\ ]
ref
◊◊^ a
sendInterface
◊◊b o
,
◊◊o p
ref
◊◊q t
queueHandle◊◊u Ä
)◊◊Ä Å
;◊◊Å Ç
if
ÿÿ 
(
ÿÿ 
result
ÿÿ 
<
ÿÿ 
$num
ÿÿ 
)
ÿÿ 
{
ŸŸ 
Debug
⁄⁄ 
.
⁄⁄ 
LogError
⁄⁄ 
(
⁄⁄ 
$str
⁄⁄ E
)
⁄⁄E F
;
⁄⁄F G
return
€€ 
;
€€ 
}
‹‹ 
}
›› 	
[
ﬂﬂ 	
BurstCompile
ﬂﬂ	 
(
ﬂﬂ 
DisableDirectCall
ﬂﬂ '
=
ﬂﬂ( )
true
ﬂﬂ* .
)
ﬂﬂ. /
]
ﬂﬂ/ 0
[
‡‡ 	!
MonoPInvokeCallback
‡‡	 
(
‡‡ 
typeof
‡‡ #
(
‡‡# $
NetworkProtocol
‡‡$ 3
.
‡‡3 4%
ProcessSendPingDelegate
‡‡4 K
)
‡‡K L
)
‡‡L M
]
‡‡M N
public
·· 
static
·· 
unsafe
·· 
void
·· !
ProcessSendPong
··" 1
(
··1 2
ref
··2 5
NetworkDriver
··6 C
.
··C D

Connection
··D N

connection
··O Y
,
··Y Z
ref
··[ ^"
NetworkSendInterface
··_ s
sendInterface··t Å
,··Å Ç
ref··É Ü&
NetworkSendQueueHandle··á ù
queueHandle··û ©
,··© ™
IntPtr··´ ±
userData··≤ ∫
)··∫ ª
{
‚‚ 	
var
„„ 
relayProtocolData
„„ !
=
„„" #
(
„„$ %
RelayProtocolData
„„% 6
*
„„6 7
)
„„7 8
userData
„„8 @
;
„„@ A
var
ÂÂ 
type
ÂÂ 
=
ÂÂ 
UdpCProtocol
ÂÂ #
.
ÂÂ# $
Pong
ÂÂ$ (
;
ÂÂ( )
var
ÊÊ 
token
ÊÊ 
=
ÊÊ 

connection
ÊÊ "
.
ÊÊ" #
	SendToken
ÊÊ# ,
;
ÊÊ, -
var
ÁÁ 
result
ÁÁ 
=
ÁÁ '
SendHeaderOnlyHostMessage
ÁÁ 2
(
ÁÁ2 3
type
ËË 
,
ËË 
token
ËË 
,
ËË 
relayProtocolData
ËË .
,
ËË. /
ref
ËË0 3

connection
ËË4 >
.
ËË> ?
Address
ËË? F
.
ËËF G!
AsRelayAllocationId
ËËG Z
(
ËËZ [
)
ËË[ \
,
ËË\ ]
ref
ËË^ a
sendInterface
ËËb o
,
ËËo p
ref
ËËq t
queueHandleËËu Ä
)ËËÄ Å
;ËËÅ Ç
if
ÈÈ 
(
ÈÈ 
result
ÈÈ 
<
ÈÈ 
$num
ÈÈ 
)
ÈÈ 
{
ÍÍ 
Debug
ÎÎ 
.
ÎÎ 
LogError
ÎÎ 
(
ÎÎ 
$str
ÎÎ E
)
ÎÎE F
;
ÎÎF G
return
ÏÏ 
;
ÏÏ 
}
ÌÌ 
}
ÓÓ 	
[
 	
BurstCompile
	 
(
 
DisableDirectCall
 '
=
( )
true
* .
)
. /
]
/ 0
[
ÒÒ 	!
MonoPInvokeCallback
ÒÒ	 
(
ÒÒ 
typeof
ÒÒ #
(
ÒÒ# $
NetworkProtocol
ÒÒ$ 3
.
ÒÒ3 4
UpdateDelegate
ÒÒ4 B
)
ÒÒB C
)
ÒÒC D
]
ÒÒD E
public
ÚÚ 
static
ÚÚ 
void
ÚÚ 
Update
ÚÚ !
(
ÚÚ! "
long
ÚÚ" &

updateTime
ÚÚ' 1
,
ÚÚ1 2
ref
ÚÚ3 6"
NetworkSendInterface
ÚÚ7 K
sendInterface
ÚÚL Y
,
ÚÚY Z
ref
ÚÚ[ ^$
NetworkSendQueueHandle
ÚÚ_ u
queueHandleÚÚv Å
,ÚÚÅ Ç
IntPtrÚÚÉ â
userDataÚÚä í
)ÚÚí ì
{
ÛÛ 	
unsafe
ÙÙ 
{
ıı 
var
ˆˆ 
protocolData
ˆˆ  
=
ˆˆ! "
(
ˆˆ# $
RelayProtocolData
ˆˆ$ 5
*
ˆˆ5 6
)
ˆˆ6 7
userData
ˆˆ7 ?
;
ˆˆ? @
switch
¯¯ 
(
¯¯ 
protocolData
¯¯ $
->
¯¯$ &
ConnectionState
¯¯& 5
)
¯¯5 6
{
˘˘ 
case
˚˚ "
RelayConnectionState
˚˚ -
.
˚˚- .
	Handshake
˚˚. 7
:
˚˚7 8
{
¸¸ 
if
˝˝ 
(
˝˝ 
protocolData
˝˝ (
->
˝˝( *
SecureClientState
˝˝* ;
.
˝˝; <
	ClientPtr
˝˝< E
==
˝˝F H
null
˝˝I M
)
˝˝M N
{
˛˛ 
var
ÄÄ 
config
ÄÄ  &
=
ÄÄ' (
(
ÄÄ) *
Binding
ÄÄ* 1
.
ÄÄ1 2$
unitytls_client_config
ÄÄ2 H
*
ÄÄH I
)
ÄÄI J
UnsafeUtility
ÄÄJ W
.
ÄÄW X
Malloc
ÄÄX ^
(
ÄÄ^ _
UnsafeUtility
ÅÅ  -
.
ÅÅ- .
SizeOf
ÅÅ. 4
<
ÅÅ4 5
Binding
ÅÅ5 <
.
ÅÅ< =$
unitytls_client_config
ÅÅ= S
>
ÅÅS T
(
ÅÅT U
)
ÅÅU V
,
ÅÅV W
UnsafeUtility
ÇÇ  -
.
ÇÇ- .
AlignOf
ÇÇ. 5
<
ÇÇ5 6
Binding
ÇÇ6 =
.
ÇÇ= >$
unitytls_client_config
ÇÇ> T
>
ÇÇT U
(
ÇÇU V
)
ÇÇV W
,
ÇÇW X
	Allocator
ÇÇY b
.
ÇÇb c

Persistent
ÇÇc m
)
ÇÇm n
;
ÇÇn o
*
ÑÑ 
config
ÑÑ #
=
ÑÑ$ %
new
ÑÑ& )
Binding
ÑÑ* 1
.
ÑÑ1 2$
unitytls_client_config
ÑÑ2 H
(
ÑÑH I
)
ÑÑI J
;
ÑÑJ K
Binding
ÜÜ #
.
ÜÜ# $)
unitytls_client_init_config
ÜÜ$ ?
(
ÜÜ? @
config
ÜÜ@ F
)
ÜÜF G
;
ÜÜG H
config
àà "
->
àà" $

dataSendCB
àà$ .
=
àà/ 0$
ManagedSecureFunctions
àà1 G
.
ààG H
s_SendCallback
ààH V
.
ààV W
Data
ààW [
.
àà[ \
Value
àà\ a
;
ààa b
config
ââ "
->
ââ" $
dataReceiveCB
ââ$ 1
=
ââ2 3$
ManagedSecureFunctions
ââ4 J
.
ââJ K
s_RecvMethod
ââK W
.
ââW X
Data
ââX \
.
ââ\ ]
Value
ââ] b
;
ââb c
config
ãã "
->
ãã" $

clientAuth
ãã$ .
=
ãã/ 0
Binding
ãã1 8
.
ãã8 9!
UnityTLSRole_Client
ãã9 L
;
ããL M
config
åå "
->
åå" $
transportProtocol
åå$ 5
=
åå6 7
Binding
åå8 ?
.
åå? @0
"UnityTLSTransportProtocol_Datagram
åå@ b
;
ååb c
config
çç "
->
çç" $

clientAuth
çç$ .
=
çç/ 0
Binding
çç1 8
.
çç8 9)
UnityTLSClientAuth_Optional
çç9 T
;
ççT U
config
èè "
->
èè" $!
ssl_read_timeout_ms
èè$ 7
=
èè8 9#
SecureNetworkProtocol
èè: O
.
èèO P
DefaultParameters
èèP a
.
èèa b
SSLReadTimeoutMs
èèb r
;
èèr s
config
êê "
->
êê" $'
ssl_handshake_timeout_min
êê$ =
=
êê> ?#
SecureNetworkProtocol
ëë  5
.
ëë5 6
DefaultParameters
ëë6 G
.
ëëG H$
SSLHandshakeTimeoutMin
ëëH ^
;
ëë^ _
config
íí "
->
íí" $'
ssl_handshake_timeout_max
íí$ =
=
íí> ?#
SecureNetworkProtocol
ìì  5
.
ìì5 6
DefaultParameters
ìì6 G
.
ììG H$
SSLHandshakeTimeoutMax
ììH ^
;
ìì^ _ 
FixedString32Bytes
ïï .
hostname
ïï/ 7
=
ïï8 9
$str
ïï: A
;
ïïA B
config
ññ "
->
ññ" $
hostname
ññ$ ,
=
ññ- .
hostname
ññ/ 7
.
ññ7 8
GetUnsafePtr
ññ8 D
(
ññD E
)
ññE F
;
ññF G
config
òò "
->
òò" $
psk
òò$ '
=
òò( )
new
òò* -
Binding
òò. 5
.
òò5 6
unitytls_dataRef
òò6 F
(
òòF G
)
òòG H
{
ôô 
dataPtr
öö  '
=
öö( )
protocolData
öö* 6
->
öö6 8

ServerData
öö8 B
.
ööB C
HMACKey
ööC J
.
ööJ K
Value
ööK P
,
ööP Q
dataLen
õõ  '
=
õõ( )
new
õõ* -
UIntPtr
õõ. 5
(
õõ5 6
$num
õõ6 8
)
õõ8 9
}
úú 
;
úú 
config
ûû "
->
ûû" $
pskIdentity
ûû$ /
=
ûû0 1
new
ûû2 5
Binding
ûû6 =
.
ûû= >
unitytls_dataRef
ûû> N
(
ûûN O
)
ûûO P
{
üü 
dataPtr
††  '
=
††( )
protocolData
††* 6
->
††6 8

ServerData
††8 B
.
††B C
AllocationId
††C O
.
††O P
Value
††P U
,
††U V
dataLen
°°  '
=
°°( )
new
°°* -
UIntPtr
°°. 5
(
°°5 6
(
°°6 7
uint
°°7 ;
)
°°; <
$num
°°< >
)
°°> ?
}
¢¢ 
;
¢¢ 
protocolData
§§ (
->
§§( *
SecureClientState
§§* ;
.
§§; <
ClientConfig
§§< H
=
§§I J
config
§§K Q
;
§§Q R
protocolData
¶¶ (
->
¶¶( *
SecureClientState
¶¶* ;
.
¶¶; <
	ClientPtr
¶¶< E
=
¶¶F G
Binding
¶¶H O
.
¶¶O P$
unitytls_client_create
¶¶P f
(
¶¶f g
Binding
¶¶g n
.
¶¶n o"
UnityTLSRole_Client¶¶o Ç
,¶¶Ç É
protocolData¶¶Ñ ê
->¶¶ê í!
SecureClientState¶¶í £
.¶¶£ §
ClientConfig¶¶§ ∞
)¶¶∞ ±
;¶¶± ≤
IntPtr
®® "
secureUserData
®®# 1
=
®®2 3
(
®®4 5
IntPtr
®®5 ;
)
®®; <
UnsafeUtility
®®< I
.
®®I J
Malloc
®®J P
(
®®P Q
UnsafeUtility
®®Q ^
.
®®^ _
SizeOf
®®_ e
<
®®e f
SecureUserData
®®f t
>
®®t u
(
®®u v
)
®®v w
,
®®w x
UnsafeUtility
©©  -
.
©©- .
AlignOf
©©. 5
<
©©5 6
SecureUserData
©©6 D
>
©©D E
(
©©E F
)
©©F G
,
©©G H
	Allocator
©©I R
.
©©R S

Persistent
©©S ]
)
©©] ^
;
©©^ _
*
´´ 
(
´´ 
SecureUserData
´´ ,
*
´´, -
)
´´- .
secureUserData
´´. <
=
´´= >
new
´´? B
SecureUserData
´´C Q
{
¨¨ 
	Interface
≠≠  )
=
≠≠* +
default
≠≠, 3
,
≠≠3 4
Remote
ÆÆ  &
=
ÆÆ' (
default
ÆÆ) 0
,
ÆÆ0 1
QueueHandle
ØØ  +
=
ØØ, -
default
ØØ. 5
,
ØØ5 6

StreamData
∞∞  *
=
∞∞+ ,
IntPtr
∞∞- 3
.
∞∞3 4
Zero
∞∞4 8
,
∞∞8 9
Size
±±  $
=
±±% &
$num
±±' (
,
±±( )
BytesProcessed
≤≤  .
=
≤≤/ 0
$num
≤≤1 2
}
≥≥ 
;
≥≥ 
protocolData
µµ (
->
µµ( *
SecureClientState
µµ* ;
.
µµ; <
ClientConfig
µµ< H
->
µµH J
transportUserData
µµJ [
=
µµ\ ]
secureUserData
µµ^ l
;
µµl m
Binding
∑∑ #
.
∑∑# $"
unitytls_client_init
∑∑$ 8
(
∑∑8 9
protocolData
∑∑9 E
->
∑∑E G
SecureClientState
∑∑G X
.
∑∑X Y
	ClientPtr
∑∑Y b
)
∑∑b c
;
∑∑c d
}
∏∏ 
var
∫∫ 
currentState
∫∫ (
=
∫∫) *
Binding
∫∫+ 2
.
∫∫2 3'
unitytls_client_get_state
∫∫3 L
(
∫∫L M
protocolData
∫∫M Y
->
∫∫Y [
SecureClientState
∫∫[ l
.
∫∫l m
	ClientPtr
∫∫m v
)
∫∫v w
;
∫∫w x
if
ªª 
(
ªª 
currentState
ªª (
==
ªª) +
Binding
ªª, 3
.
ªª3 4+
UnityTLSClientState_Handshake
ªª4 Q
)
ªªQ R
return
ºº "
;
ºº" #
var
ææ 
data
ææ  
=
ææ! "
(
ææ# $
SecureUserData
ææ$ 2
*
ææ2 3
)
ææ3 4
protocolData
ææ4 @
->
ææ@ B
SecureClientState
ææB S
.
ææS T
ClientConfig
ææT `
->
ææ` b
transportUserData
ææb s
;
ææs t#
SecureNetworkProtocol
¿¿ -
.
¿¿- .
SetSecureUserData
¿¿. ?
(
¿¿? @
IntPtr
¿¿@ F
.
¿¿F G
Zero
¿¿G K
,
¿¿K L
$num
¿¿M N
,
¿¿N O
ref
¿¿P S
protocolData
¿¿T `
->
¿¿` b
ServerEndpoint
¿¿b p
,
¿¿p q
ref
¿¿r u
sendInterface¿¿v É
,¿¿É Ñ
ref¿¿Ö à
queueHandle¿¿â î
,¿¿î ï
data¿¿ñ ö
)¿¿ö õ
;¿¿õ ú
var
¡¡ 
handshakeResult
¡¡ +
=
¡¡, -#
SecureNetworkProtocol
¡¡. C
.
¡¡C D!
SecureHandshakeStep
¡¡D W
(
¡¡W X
ref
¡¡X [
protocolData
¡¡\ h
->
¡¡h j
SecureClientState
¡¡j {
)
¡¡{ |
;
¡¡| }
}
¬¬ 
break
√√ 
;
√√ 
case
≈≈ "
RelayConnectionState
≈≈ -
.
≈≈- .
Binding
≈≈. 5
:
≈≈5 6
if
∆∆ 
(
∆∆ 

updateTime
∆∆ &
-
∆∆' (
protocolData
∆∆) 5
->
∆∆5 7 
LastConnectAttempt
∆∆7 I
>
∆∆J K
protocolData
∆∆L X
->
∆∆X Z
ConnectTimeoutMS
∆∆Z j
||
∆∆k m
protocolData
∆∆n z
->
∆∆z |
LastUpdateTime∆∆| ä
==∆∆ã ç
$num∆∆é è
)∆∆è ê
{
«« 
protocolData
»» (
->
»»( * 
LastConnectAttempt
»»* <
=
»»= >

updateTime
»»? I
;
»»I J
protocolData
…… (
->
……( *
LastSentTime
……* 6
=
……7 8

updateTime
……9 C
;
……C D
const
ÀÀ !
int
ÀÀ" % 
requirePayloadSize
ÀÀ& 8
=
ÀÀ9 :
RelayMessageBind
ÀÀ; K
.
ÀÀK L
Length
ÀÀL R
;
ÀÀR S
if
ÕÕ 
(
ÕÕ  
sendInterface
ÕÕ  -
.
ÕÕ- .
BeginSendMessage
ÕÕ. >
.
ÕÕ> ?
Ptr
ÕÕ? B
.
ÕÕB C
Invoke
ÕÕC I
(
ÕÕI J
out
ÕÕJ M
var
ÕÕN Q

sendHandle
ÕÕR \
,
ÕÕ\ ]
sendInterface
ÕÕ^ k
.
ÕÕk l
UserData
ÕÕl t
,
ÕÕt u!
requirePayloadSizeÕÕv à
)ÕÕà â
!=ÕÕä å
$numÕÕç é
)ÕÕé è
{
ŒŒ 
UnityEngine
œœ  +
.
œœ+ ,
Debug
œœ, 1
.
œœ1 2
LogError
œœ2 :
(
œœ: ;
$str
œœ; f
)
œœf g
;
œœg h
return
––  &
;
––& '
}
—— 
var
”” 
writeResult
””  +
=
””, -
WriteBindMessage
””. >
(
””> ?
ref
””? B
protocolData
””C O
->
””O Q
ServerEndpoint
””Q _
,
””_ `
ref
””a d

sendHandle
””e o
,
””o p
ref
””q t
queueHandle””u Ä
,””Ä Å
userData””Ç ä
)””ä ã
;””ã å
if
’’ 
(
’’  
!
’’  !
writeResult
’’! ,
)
’’, -
{
÷÷ 
sendInterface
◊◊  -
.
◊◊- .
AbortSendMessage
◊◊. >
.
◊◊> ?
Ptr
◊◊? B
.
◊◊B C
Invoke
◊◊C I
(
◊◊I J
ref
◊◊J M

sendHandle
◊◊N X
,
◊◊X Y
sendInterface
◊◊Z g
.
◊◊g h
UserData
◊◊h p
)
◊◊p q
;
◊◊q r
return
ÿÿ  &
;
ÿÿ& '
}
ŸŸ 
if
€€ 
(
€€  
SendMessage
€€  +
(
€€+ ,
protocolData
€€, 8
,
€€8 9
ref
€€: =
sendInterface
€€> K
,
€€K L
ref
€€M P

sendHandle
€€Q [
,
€€[ \
ref
€€] `
queueHandle
€€a l
)
€€l m
<
€€n o
$num
€€p q
)
€€q r
{
‹‹ 
Debug
››  %
.
››% &
LogError
››& .
(
››. /
$str
››/ V
)
››V W
;
››W X
return
ﬁﬁ  &
;
ﬁﬁ& '
}
ﬂﬂ 
}
‡‡ 
break
·· 
;
·· 
case
‚‚ "
RelayConnectionState
‚‚ -
.
‚‚- .
Bound
‚‚. 3
:
‚‚3 4
case
„„ "
RelayConnectionState
„„ -
.
„„- .
	Connected
„„. 7
:
„„7 8
{
‰‰ 
if
ÂÂ 
(
ÂÂ 

updateTime
ÂÂ &
-
ÂÂ' (
protocolData
ÂÂ) 5
->
ÂÂ5 7
LastSentTime
ÂÂ7 C
>=
ÂÂD F
protocolData
ÂÂG S
->
ÂÂS U#
RelayConnectionTimeMS
ÂÂU j
)
ÂÂj k
{
ÊÊ 
if
ÁÁ 
(
ÁÁ  
sendInterface
ÁÁ  -
.
ÁÁ- .
BeginSendMessage
ÁÁ. >
.
ÁÁ> ?
Ptr
ÁÁ? B
.
ÁÁB C
Invoke
ÁÁC I
(
ÁÁI J
out
ÁÁJ M
var
ÁÁN Q

sendHandle
ÁÁR \
,
ÁÁ\ ]
sendInterface
ÁÁ^ k
.
ÁÁk l
UserData
ÁÁl t
,
ÁÁt u
RelayMessagePingÁÁv Ü
.ÁÁÜ á
LengthÁÁá ç
)ÁÁç é
!=ÁÁè ë
$numÁÁí ì
)ÁÁì î
{
ËË 
UnityEngine
ÈÈ  +
.
ÈÈ+ ,
Debug
ÈÈ, 1
.
ÈÈ1 2
LogError
ÈÈ2 :
(
ÈÈ: ;
$str
ÈÈ; e
)
ÈÈe f
;
ÈÈf g
return
ÍÍ  &
;
ÍÍ& '
}
ÎÎ 
var
ÌÌ 
writeResult
ÌÌ  +
=
ÌÌ, -#
WriteRelayPingMessage
ÌÌ. C
(
ÌÌC D
ref
ÌÌD G
protocolData
ÌÌH T
->
ÌÌT V
ServerEndpoint
ÌÌV d
,
ÌÌd e
ref
ÌÌf i

sendHandle
ÌÌj t
,
ÌÌt u
ref
ÌÌv y
queueHandleÌÌz Ö
,ÌÌÖ Ü
userDataÌÌá è
)ÌÌè ê
;ÌÌê ë
if
ÔÔ 
(
ÔÔ  
!
ÔÔ  !
writeResult
ÔÔ! ,
)
ÔÔ, -
{
 
sendInterface
ÒÒ  -
.
ÒÒ- .
AbortSendMessage
ÒÒ. >
.
ÒÒ> ?
Ptr
ÒÒ? B
.
ÒÒB C
Invoke
ÒÒC I
(
ÒÒI J
ref
ÒÒJ M

sendHandle
ÒÒN X
,
ÒÒX Y
sendInterface
ÒÒZ g
.
ÒÒg h
UserData
ÒÒh p
)
ÒÒp q
;
ÒÒq r
return
ÚÚ  &
;
ÚÚ& '
}
ÛÛ 
if
ıı 
(
ıı  
SendMessage
ıı  +
(
ıı+ ,
protocolData
ıı, 8
,
ıı8 9
ref
ıı: =
sendInterface
ıı> K
,
ııK L
ref
ııM P

sendHandle
ııQ [
,
ıı[ \
ref
ıı] `
queueHandle
ııa l
)
ııl m
<
ıın o
$num
ııp q
)
ııq r
{
ˆˆ 
Debug
˜˜  %
.
˜˜% &
LogError
˜˜& .
(
˜˜. /
$str
˜˜/ V
)
˜˜V W
;
˜˜W X
return
¯¯  &
;
¯¯& '
}
˘˘ 
protocolData
˚˚ (
->
˚˚( *
LastSentTime
˚˚* 6
=
˚˚7 8

updateTime
˚˚9 C
;
˚˚C D
}
¸¸ 
}
˝˝ 
break
˛˛ 
;
˛˛ 
}
ˇˇ 
protocolData
ÅÅ 
->
ÅÅ 
LastUpdateTime
ÅÅ ,
=
ÅÅ- .

updateTime
ÅÅ/ 9
;
ÅÅ9 :
}
ÇÇ 
}
ÉÉ 	
[
ÖÖ 	
BurstCompatible
ÖÖ	 
]
ÖÖ 
private
ÜÜ 
static
ÜÜ 
unsafe
ÜÜ 
bool
ÜÜ "#
WriteRelayPingMessage
ÜÜ# 8
(
ÜÜ8 9
ref
ÜÜ9 <&
NetworkInterfaceEndPoint
ÜÜ= U
serverEndpoint
ÜÜV d
,
ÜÜd e
ref
ÜÜf i)
NetworkInterfaceSendHandleÜÜj Ñ

sendHandleÜÜÖ è
,ÜÜè ê
refÜÜë î&
NetworkSendQueueHandleÜÜï ´
queueHandleÜÜ¨ ∑
,ÜÜ∑ ∏
IntPtrÜÜπ ø
userDataÜÜ¿ »
)ÜÜ» …
{
áá 	
var
àà 
protocolData
àà 
=
àà 
(
àà  
RelayProtocolData
àà  1
*
àà1 2
)
àà2 3
userData
àà3 ;
;
àà; <
var
ää 
packet
ää 
=
ää 
(
ää 
byte
ää 
*
ää 
)
ää  

sendHandle
ää  *
.
ää* +
data
ää+ /
;
ää/ 0

sendHandle
ãã 
.
ãã 
size
ãã 
=
ãã 
RelayMessagePing
ãã .
.
ãã. /
Length
ãã/ 5
;
ãã5 6
if
åå 
(
åå 

sendHandle
åå 
.
åå 
size
åå 
>
åå  !

sendHandle
åå" ,
.
åå, -
capacity
åå- 5
)
åå5 6
{
çç 
UnityEngine
éé 
.
éé 
Debug
éé !
.
éé! "
LogError
éé" *
(
éé* +
$str
éé+ U
)
ééU V
;
ééV W
return
èè 
false
èè 
;
èè 
}
êê 
var
íí 
message
íí 
=
íí 
(
íí 
RelayMessagePing
íí +
*
íí+ ,
)
íí, -
packet
íí- 3
;
íí3 4
*
ìì 
message
ìì 
=
ìì 
RelayMessagePing
ìì '
.
ìì' (
Create
ìì( .
(
ìì. /
protocolData
ìì/ ;
->
ìì; =

ServerData
ìì= G
.
ììG H
AllocationId
ììH T
,
ììT U
$num
ììV W
)
ììW X
;
ììX Y
return
ïï 
true
ïï 
;
ïï 
}
ññ 	
[
òò 	
BurstCompatible
òò	 
]
òò 
private
ôô 
static
ôô 
unsafe
ôô 
bool
ôô "
WriteBindMessage
ôô# 3
(
ôô3 4
ref
ôô4 7&
NetworkInterfaceEndPoint
ôô8 P
serverEndpoint
ôôQ _
,
ôô_ `
ref
ôôa d(
NetworkInterfaceSendHandle
ôôe 

sendHandleôôÄ ä
,ôôä ã
refôôå è&
NetworkSendQueueHandleôôê ¶
queueHandleôôß ≤
,ôô≤ ≥
IntPtrôô¥ ∫
userDataôôª √
)ôô√ ƒ
{
öö 	
var
õõ 
writer
õõ 
=
õõ !
WriterForSendBuffer
õõ ,
(
õõ, -
RelayMessageBind
õõ- =
.
õõ= >
Length
õõ> D
,
õõD E
ref
õõF I

sendHandle
õõJ T
)
õõT U
;
õõU V
if
úú 
(
úú 
writer
úú 
.
úú 
	IsCreated
úú  
==
úú! #
false
úú$ )
)
úú) *
{
ùù 
UnityEngine
ûû 
.
ûû 
Debug
ûû !
.
ûû! "
LogError
ûû" *
(
ûû* +
$str
ûû+ U
)
ûûU V
;
ûûV W
return
üü 
false
üü 
;
üü 
}
†† 
var
££ 
protocolData
££ 
=
££ 
(
££  
RelayProtocolData
££  1
*
££1 2
)
££2 3
userData
££3 ;
;
££; <
RelayMessageBind
§§ 
.
§§ 
Write
§§ "
(
§§" #
writer
§§# )
,
§§) *
$num
§§+ ,
,
§§, -
protocolData
§§. :
->
§§: <

ServerData
§§< F
.
§§F G
Nonce
§§G L
,
§§L M
protocolData
§§N Z
->
§§Z \

ServerData
§§\ f
.
§§f g
ConnectionData
§§g u
.
§§u v
Value
§§v {
,
§§{ |
protocolData§§} â
->§§â ã

ServerData§§ã ï
.§§ï ñ
HMAC§§ñ ö
)§§ö õ
;§§õ ú
return
¶¶ 
true
¶¶ 
;
¶¶ 
}
ßß 	
static
©© 
DataStreamWriter
©© !
WriterForSendBuffer
©©  3
(
©©3 4
int
©©4 7
requestSize
©©8 C
,
©©C D
ref
©©E H(
NetworkInterfaceSendHandle
©©I c

sendHandle
©©d n
)
©©n o
{
™™ 	
unsafe
´´ 
{
¨¨ 
if
≠≠ 
(
≠≠ 
requestSize
≠≠ 
<=
≠≠  "

sendHandle
≠≠# -
.
≠≠- .
capacity
≠≠. 6
)
≠≠6 7
{
ÆÆ 

sendHandle
ØØ 
.
ØØ 
size
ØØ #
=
ØØ$ %
requestSize
ØØ& 1
;
ØØ1 2
return
∞∞ 
new
∞∞ 
DataStreamWriter
∞∞ /
(
∞∞/ 0
(
∞∞0 1
byte
∞∞1 5
*
∞∞5 6
)
∞∞6 7

sendHandle
∞∞7 A
.
∞∞A B
data
∞∞B F
,
∞∞F G

sendHandle
∞∞H R
.
∞∞R S
size
∞∞S W
)
∞∞W X
;
∞∞X Y
}
±± 
}
≤≤ 
return
¥¥ 
default
¥¥ 
;
¥¥ 
}
µµ 	
}
∂∂ 
}∑∑ ”/
fC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\Pipelines\NullPipelineStage.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
[		 
BurstCompile		 
]		 
public

 

unsafe

 
struct

 
NullPipelineStage

 *
:

+ ,!
INetworkPipelineStage

- B
{ 
[ 	
BurstCompile	 
( 
DisableDirectCall '
=( )
true* .
). /
]/ 0
[ 	
MonoPInvokeCallback	 
( 
typeof #
(# $ 
NetworkPipelineStage$ 8
.8 9
SendDelegate9 E
)E F
)F G
]G H
private 
static 
int 
Send 
(  
ref  #"
NetworkPipelineContext$ :
ctx; >
,> ?
ref@ C
InboundSendBufferD U
inboundBufferV c
,c d
refe h 
NetworkPipelineStagei }
.} ~
Requests	~ Ü
requests
á è
,
è ê
int
ë î
systemHeaderSize
ï •
)
• ¶
{ 	
return 
( 
int 
) 
Error 
. 

StatusCode (
.( )
Success) 0
;0 1
} 	
[ 	
BurstCompile	 
( 
DisableDirectCall '
=( )
true* .
). /
]/ 0
[ 	
MonoPInvokeCallback	 
( 
typeof #
(# $ 
NetworkPipelineStage$ 8
.8 9
ReceiveDelegate9 H
)H I
)I J
]J K
private 
static 
void 
Receive #
(# $
ref$ '"
NetworkPipelineContext( >
ctx? B
,B C
refD G
InboundRecvBufferH Y
inboundBufferZ g
,g h
refi l!
NetworkPipelineStage	m Å
.
Å Ç
Requests
Ç ä
requests
ã ì
,
ì î
int
ï ò
systemHeaderSize
ô ©
)
© ™
{ 	
} 	
[ 	
BurstCompile	 
( 
DisableDirectCall '
=( )
true* .
). /
]/ 0
[ 	
MonoPInvokeCallback	 
( 
typeof #
(# $ 
NetworkPipelineStage$ 8
.8 9(
InitializeConnectionDelegate9 U
)U V
)V W
]W X
private 
static 
void  
InitializeConnection 0
(0 1
byte1 5
*5 6 
staticInstanceBuffer7 K
,K L
intM P&
staticInstanceBufferLengthQ k
,k l
byte 
* 
sendProcessBuffer #
,# $
int% (#
sendProcessBufferLength) @
,@ A
byteB F
*F G
recvProcessBufferH Y
,Y Z
int[ ^#
recvProcessBufferLength_ v
,v w
byte 
* 
sharedProcessBuffer %
,% &
int' *%
sharedProcessBufferLength+ D
)D E
{ 	
} 	
static!! $
TransportFunctionPointer!! '
<!!' ( 
NetworkPipelineStage!!( <
.!!< =
ReceiveDelegate!!= L
>!!L M"
ReceiveFunctionPointer!!N d
=!!e f
new!!g j%
TransportFunctionPointer	!!k É
<
!!É Ñ"
NetworkPipelineStage
!!Ñ ò
.
!!ò ô
ReceiveDelegate
!!ô ®
>
!!® ©
(
!!© ™
Receive
!!™ ±
)
!!± ≤
;
!!≤ ≥
static## $
TransportFunctionPointer## '
<##' ( 
NetworkPipelineStage##( <
.##< =
SendDelegate##= I
>##I J
SendFunctionPointer##K ^
=##_ `
new##a d$
TransportFunctionPointer##e }
<##} ~!
NetworkPipelineStage	##~ í
.
##í ì
SendDelegate
##ì ü
>
##ü †
(
##† °
Send
##° •
)
##• ¶
;
##¶ ß
static%% $
TransportFunctionPointer%% '
<%%' ( 
NetworkPipelineStage%%( <
.%%< =(
InitializeConnectionDelegate%%= Y
>%%Y Z/
#InitializeConnectionFunctionPointer%%[ ~
=	%% Ä
new
%%Å Ñ&
TransportFunctionPointer
%%Ö ù
<
%%ù û"
NetworkPipelineStage
%%û ≤
.
%%≤ ≥*
InitializeConnectionDelegate
%%≥ œ
>
%%œ –
(
%%– —"
InitializeConnection
%%— Â
)
%%Â Ê
;
%%Ê Á
public''  
NetworkPipelineStage'' #
StaticInitialize''$ 4
(''4 5
byte''5 9
*''9 : 
staticInstanceBuffer''; O
,''O P
int''Q T&
staticInstanceBufferLength''U o
,''o p
NetworkSettings	''q Ä
	netParams
''Å ä
)
''ä ã
{(( 	
return)) 
new))  
NetworkPipelineStage)) +
())+ ,
Receive** 
:** "
ReceiveFunctionPointer** /
,**/ 0
Send++ 
:++ 
SendFunctionPointer++ )
,++) * 
InitializeConnection,, $
:,,$ %/
#InitializeConnectionFunctionPointer,,& I
,,,I J
ReceiveCapacity-- 
:--  
$num--! "
,--" #
SendCapacity.. 
:.. 
$num.. 
,..  
HeaderCapacity// 
:// 
$num//  !
,//! "
SharedStateCapacity00 #
:00# $
$num00% &
)11 
;11 
}22 	
public44 
int44 

StaticSize44 
=>44  
$num44! "
;44" #
}55 
}66 ˙ª
bC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkCompressionModel.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
public

 

unsafe

 
struct

 #
NetworkCompressionModel

 0
:

1 2
IDisposable

3 >
{ 
internal 
static 
readonly  
byte! %
[% &
]& '
k_BucketSizes( 5
=6 7
{ 	
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
,  
$num! "
," #
$num$ &
,& '
$num( *
,* +
$num, .
,. /
$num0 2
,2 3
$num4 6
,6 7
$num8 :
,: ;
$num< >
,> ?
$num@ B
} 	
;	 

internal 
static 
readonly  
uint! %
[% &
]& '
k_BucketOffsets( 7
=8 9
{ 	
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num !
,! "
$num# %
,% &
$num' *
,* +
$num, 0
,0 1
$num2 6
,6 7
$num8 =
,= >
$num? E
,E F
$numG N
,N O
$numP X
,X Y
$numZ c
} 	
;	 

internal 
static 
readonly  
int! $
[$ %
]% &"
k_FirstBucketCandidate' =
=> ?
{ 	
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num 
, 
$num  "
," #
$num$ &
,& '
$num( *
,* +
$num, .
,. /
$num0 2
,2 3
$num4 6
,6 7
$num8 :
,: ;
$num< >
,> ?
$num@ B
,B C
$numD F
,F G
$numH J
,J K
$numL N
,N O
$numP R
,R S
$numT V
,V W
$numX Y
,Y Z
$num[ \
,\ ]
$num^ _
,_ `
$numa b
,b c
$numd e
,e f
$numg h
,h i
$numj k
,k l
$numm n
,n o
$nump q
,q r
$nums t
,t u
$numv w
,w x
$numy z
,z {
$num| }
,} ~
$num	 Ä
} 	
;	 

internal 
static 
readonly  
byte! %
[% &
]& '
k_DefaultModelData( :
=; <
{= >
$num? A
,A B
$num? @
,@ A
$numB C
,C D
$numE F
,F G
$numH I
,I J
$numM N
,N O
$numP Q
,Q R
$numS T
,T U
$numV W
,W X
$num] ^
,^ _
$num` a
,a b
$numc d
,d e
$numf g
,g h
$numm n
,n o
$nump q
,q r
$nums t
,t u
$numv w
,w x
$num? @
,@ A
$numB C
}D E
;E F
internal 
const 
int 
k_AlphabetSize )
=* +
$num, .
;. /
internal 
const 
int $
k_MaxHuffmanSymbolLength 3
=4 5
$num6 7
;7 8
internal 
const 
int 
k_MaxContexts (
=) *
$num+ ,
;, -
public$$ 
void$$ 
Dispose$$ 
($$ 
)$$ 
{%% 	
}&& 	
public,, #
NetworkCompressionModel,, &
(,,& '
	Allocator,,' 0
	allocator,,1 :
),,: ;
{-- 	
for.. 
(.. 
int.. 
i.. 
=.. 
$num.. 
;.. 
i.. 
<.. 
k_AlphabetSize..  .
;... /
++..0 2
i..2 3
)..3 4
{// 
bucketSizes00 
[00 
i00 
]00 
=00  
k_BucketSizes00! .
[00. /
i00/ 0
]000 1
;001 2
bucketOffsets11 
[11 
i11 
]11  
=11! "
k_BucketOffsets11# 2
[112 3
i113 4
]114 5
;115 6
}22 
byte33 
[33 
]33 
	modelData33 
=33 
k_DefaultModelData33 1
;331 2
int66 
numContexts66 
=66 
$num66 
;66  
byte77 
[77 
,77 
]77 
symbolLengths77 !
=77" #
new77$ '
byte77( ,
[77, -
numContexts77- 8
,778 9
k_AlphabetSize77: H
]77H I
;77I J
int99 

readOffset99 
=99 
$num99 
;99 
{:: 
int<< $
defaultModelAlphabetSize<< ,
=<<- .
	modelData<</ 8
[<<8 9

readOffset<<9 C
++<<C E
]<<E F
;<<F G
if>> 
(>> $
defaultModelAlphabetSize>> ,
!=>>- /
k_AlphabetSize>>0 >
)>>> ?
throw?? 
new?? %
InvalidOperationException?? 7
(??7 8
$str??8 j
+??k l
k_AlphabetSize??m {
)??{ |
;??| }
forBB 
(BB 
intBB 
iBB 
=BB 
$numBB 
;BB 
iBB  !
<BB" #
k_AlphabetSizeBB$ 2
;BB2 3
iBB4 5
++BB5 7
)BB7 8
{CC 
byteDD 
lengthDD 
=DD  !
	modelDataDD" +
[DD+ ,

readOffsetDD, 6
++DD6 8
]DD8 9
;DD9 :
forEE 
(EE 
intEE 
contextEE $
=EE% &
$numEE' (
;EE( )
contextEE* 1
<EE2 3
numContextsEE4 ?
;EE? @
contextEEA H
++EEH J
)EEJ K
{FF 
symbolLengthsGG %
[GG% &
contextGG& -
,GG- .
iGG/ 0
]GG0 1
=GG2 3
lengthGG4 :
;GG: ;
}HH 
}II 
intLL 
	numModelsLL 
=LL 
	modelDataLL  )
[LL) *

readOffsetLL* 4
]LL4 5
|LL6 7
(LL8 9
	modelDataLL9 B
[LLB C

readOffsetLLC M
+LLN O
$numLLP Q
]LLQ R
<<LLS U
$numLLV W
)LLW X
;LLX Y

readOffsetMM 
+=MM 
$numMM 
;MM  
forNN 
(NN 
intNN 
modelNN 
=NN  
$numNN! "
;NN" #
modelNN$ )
<NN* +
	numModelsNN, 5
;NN5 6
modelNN7 <
++NN< >
)NN> ?
{OO 
intPP 
contextPP 
=PP  !
	modelDataPP" +
[PP+ ,

readOffsetPP, 6
]PP6 7
|PP8 9
(PP: ;
	modelDataPP; D
[PPD E

readOffsetPPE O
+PPP Q
$numPPR S
]PPS T
<<PPU W
$numPPX Y
)PPY Z
;PPZ [

readOffsetQQ 
+=QQ !
$numQQ" #
;QQ# $
intSS 
modelAlphabetSizeSS )
=SS* +
	modelDataSS, 5
[SS5 6

readOffsetSS6 @
++SS@ B
]SSB C
;SSC D
ifUU 
(UU 
modelAlphabetSizeUU )
!=UU* ,
k_AlphabetSizeUU- ;
)UU; <
throwVV 
newVV !%
InvalidOperationExceptionVV" ;
(VV; <
$strVV< n
+VVo p
k_AlphabetSizeVVq 
)	VV Ä
;
VVÄ Å
forXX 
(XX 
intXX 
iXX 
=XX  
$numXX! "
;XX" #
iXX$ %
<XX& '
k_AlphabetSizeXX( 6
;XX6 7
iXX8 9
++XX9 ;
)XX; <
{YY 
byteZZ 
lengthZZ #
=ZZ$ %
	modelDataZZ& /
[ZZ/ 0

readOffsetZZ0 :
++ZZ: <
]ZZ< =
;ZZ= >
symbolLengths[[ %
[[[% &
context[[& -
,[[- .
i[[/ 0
][[0 1
=[[2 3
length[[4 :
;[[: ;
}\\ 
}]] 
}^^ 
varaa 
tmpSymbolLengthsaa  
=aa! "
newaa# &
byteaa' +
[aa+ ,
k_AlphabetSizeaa, :
]aa: ;
;aa; <
varbb  
tmpSymbolDecodeTablebb $
=bb% &
newbb' *
ushortbb+ 1
[bb1 2
$numbb2 3
<<bb4 6$
k_MaxHuffmanSymbolLengthbb7 O
]bbO P
;bbP Q
varcc 
symbolCodescc 
=cc 
newcc !
bytecc" &
[cc& '
k_AlphabetSizecc' 5
]cc5 6
;cc6 7
foree 
(ee 
intee 
contextee 
=ee 
$numee  
;ee  !
contextee" )
<ee* +
numContextsee, 7
;ee7 8
contextee9 @
++ee@ B
)eeB C
{ff 
forgg 
(gg 
intgg 
igg 
=gg 
$numgg 
;gg 
igg  !
<gg" #
k_AlphabetSizegg$ 2
;gg2 3
igg4 5
++gg5 7
)gg7 8
tmpSymbolLengthshh $
[hh$ %
ihh% &
]hh& '
=hh( )
symbolLengthshh* 7
[hh7 8
contexthh8 ?
,hh? @
ihhA B
]hhB C
;hhC D 
GenerateHuffmanCodesjj $
(jj$ %
symbolCodesjj% 0
,jj0 1
$numjj2 3
,jj3 4
tmpSymbolLengthsjj5 E
,jjE F
$numjjG H
,jjH I
k_AlphabetSizejjJ X
,jjX Y$
k_MaxHuffmanSymbolLengthjjZ r
)jjr s
;jjs t&
GenerateHuffmanDecodeTablekk *
(kk* + 
tmpSymbolDecodeTablekk+ ?
,kk? @
$numkkA B
,kkB C
tmpSymbolLengthskkD T
,kkT U
symbolCodeskkV a
,kka b
k_AlphabetSizekkc q
,kkq r%
k_MaxHuffmanSymbolLength	kks ã
)
kkã å
;
kkå ç
forll 
(ll 
intll 
ill 
=ll 
$numll 
;ll 
ill  !
<ll" #
k_AlphabetSizell$ 2
;ll2 3
ill4 5
++ll5 7
)ll7 8
{mm 
encodeTablenn 
[nn  
contextnn  '
*nn( )
k_AlphabetSizenn* 8
+nn9 :
inn; <
]nn< =
=nn> ?
(nn@ A
ushortnnA G
)nnG H
(nnH I
(nnI J
symbolCodesnnJ U
[nnU V
innV W
]nnW X
<<nnY [
$numnn\ ]
)nn] ^
|nn_ `
symbolLengthsnna n
[nnn o
contextnno v
,nnv w
innx y
]nny z
)nnz {
;nn{ |
}oo 
forpp 
(pp 
intpp 
ipp 
=pp 
$numpp 
;pp 
ipp  !
<pp" #
(pp$ %
$numpp% &
<<pp' )$
k_MaxHuffmanSymbolLengthpp* B
)ppB C
;ppC D
ippE F
++ppF H
)ppH I
{qq 
decodeTablerr 
[rr  
contextrr  '
*rr( )
(rr* +
$numrr+ ,
<<rr- /$
k_MaxHuffmanSymbolLengthrr0 H
)rrH I
+rrJ K
irrL M
]rrM N
=rrO P 
tmpSymbolDecodeTablerrQ e
[rre f
irrf g
]rrg h
;rrh i
}ss 
}tt 
}uu 	
privateww 
staticww 
voidww  
GenerateHuffmanCodesww 0
(ww0 1
byteww1 5
[ww5 6
]ww6 7
symboLCodesww8 C
,wwC D
intwwE H
symbolCodesOffsetwwI Z
,wwZ [
byteww\ `
[ww` a
]wwa b
symbolLengthswwc p
,wwp q
intwwr u 
symbolLengthsOffset	wwv â
,
wwâ ä
int
wwã é
alphabetSize
wwè õ
,
wwõ ú
int
wwù †
maxCodeLength
ww° Æ
)
wwÆ Ø
{xx 	
ifzz 
(zz 
alphabetSizezz 
>zz 
$numzz "
||zz# %
maxCodeLengthzz& 3
>zz4 5
$numzz6 7
)zz7 8
throw{{ 
new{{ %
InvalidOperationException{{ 3
({{3 4
$str	{{4 á
)
{{á à
;
{{à â
var~~ 
lengthCounts~~ 
=~~ 
new~~ "
byte~~# '
[~~' (
maxCodeLength~~( 5
+~~6 7
$num~~8 9
]~~9 :
;~~: ;
var 

symbolList 
= 
new  
byte! %
[% &
maxCodeLength& 3
+4 5
$num6 7
,7 8
alphabetSize9 E
]E F
;F G
for
ÇÇ 
(
ÇÇ 
int
ÇÇ 
symbol
ÇÇ 
=
ÇÇ 
$num
ÇÇ 
;
ÇÇ  
symbol
ÇÇ! '
<
ÇÇ( )
alphabetSize
ÇÇ* 6
;
ÇÇ6 7
symbol
ÇÇ8 >
++
ÇÇ> @
)
ÇÇ@ A
{
ÉÉ 
int
ÑÑ 
length
ÑÑ 
=
ÑÑ 
symbolLengths
ÑÑ *
[
ÑÑ* +
symbol
ÑÑ+ 1
+
ÑÑ2 3!
symbolLengthsOffset
ÑÑ4 G
]
ÑÑG H
;
ÑÑH I
if
ÜÜ 
(
ÜÜ 
length
ÜÜ 
>
ÜÜ 
maxCodeLength
ÜÜ *
)
ÜÜ* +
throw
áá 
new
áá '
InvalidOperationException
áá 7
(
áá7 8
$str
áá8 V
)
ááV W
;
ááW X

symbolList
ââ 
[
ââ 
length
ââ !
,
ââ! "
lengthCounts
ââ# /
[
ââ/ 0
length
ââ0 6
]
ââ6 7
++
ââ7 9
]
ââ9 :
=
ââ; <
(
ââ= >
byte
ââ> B
)
ââB C
symbol
ââC I
;
ââI J
}
ää 
uint
åå 
nextCodeWord
åå 
=
åå 
$num
åå  !
;
åå! "
for
çç 
(
çç 
int
çç 
length
çç 
=
çç 
$num
çç 
;
çç  
length
çç! '
<=
çç( *
maxCodeLength
çç+ 8
;
çç8 9
length
çç: @
++
çç@ B
)
ççB C
{
éé 
int
èè 
length_count
èè  
=
èè! "
lengthCounts
èè# /
[
èè/ 0
length
èè0 6
]
èè6 7
;
èè7 8
for
êê 
(
êê 
int
êê 
i
êê 
=
êê 
$num
êê 
;
êê 
i
êê  !
<
êê" #
length_count
êê$ 0
;
êê0 1
i
êê2 3
++
êê3 5
)
êê5 6
{
ëë 
int
íí 
symbol
íí 
=
íí  

symbolList
íí! +
[
íí+ ,
length
íí, 2
,
íí2 3
i
íí4 5
]
íí5 6
;
íí6 7
if
îî 
(
îî 
symbolLengths
îî %
[
îî% &
symbol
îî& ,
+
îî- .!
symbolLengthsOffset
îî/ B
]
îîB C
!=
îîD F
length
îîG M
)
îîM N
throw
ïï 
new
ïï !'
InvalidOperationException
ïï" ;
(
ïï; <
$str
ïï< U
)
ïïU V
;
ïïV W
symboLCodes
óó 
[
óó  
symbol
óó  &
+
óó' (
symbolCodesOffset
óó) :
]
óó: ;
=
óó< =
(
óó> ?
byte
óó? C
)
óóC D
ReverseBits
óóD O
(
óóO P
nextCodeWord
óóP \
++
óó\ ^
,
óó^ _
length
óó` f
)
óóf g
;
óóg h
}
òò 
nextCodeWord
ôô 
<<=
ôô  
$num
ôô! "
;
ôô" #
}
öö 
}
õõ 	
private
ùù 
static
ùù 
uint
ùù 
ReverseBits
ùù '
(
ùù' (
uint
ùù( ,
value
ùù- 2
,
ùù2 3
int
ùù4 7
num_bits
ùù8 @
)
ùù@ A
{
ûû 	
value
üü 
=
üü 
(
üü 
(
üü 
value
üü 
&
üü 
$num
üü )
)
üü) *
<<
üü+ -
$num
üü. /
)
üü/ 0
|
üü1 2
(
üü3 4
(
üü4 5
value
üü5 :
&
üü; <
$num
üü= H
)
üüH I
>>
üüJ L
$num
üüM N
)
üüN O
;
üüO P
value
†† 
=
†† 
(
†† 
(
†† 
value
†† 
&
†† 
$num
†† )
)
††) *
<<
††+ -
$num
††. /
)
††/ 0
|
††1 2
(
††3 4
(
††4 5
value
††5 :
&
††; <
$num
††= H
)
††H I
>>
††J L
$num
††M N
)
††N O
;
††O P
value
°° 
=
°° 
(
°° 
(
°° 
value
°° 
&
°° 
$num
°° )
)
°°) *
<<
°°+ -
$num
°°. /
)
°°/ 0
|
°°1 2
(
°°3 4
(
°°4 5
value
°°5 :
&
°°; <
$num
°°= H
)
°°H I
>>
°°J L
$num
°°M N
)
°°N O
;
°°O P
value
¢¢ 
=
¢¢ 
(
¢¢ 
(
¢¢ 
value
¢¢ 
&
¢¢ 
$num
¢¢ )
)
¢¢) *
<<
¢¢+ -
$num
¢¢. /
)
¢¢/ 0
|
¢¢1 2
(
¢¢3 4
(
¢¢4 5
value
¢¢5 :
&
¢¢; <
$num
¢¢= H
)
¢¢H I
>>
¢¢J L
$num
¢¢M N
)
¢¢N O
;
¢¢O P
value
££ 
=
££ 
(
££ 
value
££ 
<<
££ 
$num
££  
)
££  !
|
££" #
(
££$ %
value
££% *
>>
££+ -
$num
££. 0
)
££0 1
;
££1 2
return
§§ 
value
§§ 
>>
§§ 
(
§§ 
$num
§§ 
-
§§  !
num_bits
§§" *
)
§§* +
;
§§+ ,
}
•• 	
private
®® 
static
®® 
void
®® (
GenerateHuffmanDecodeTable
®® 6
(
®®6 7
ushort
®®7 =
[
®®= >
]
®®> ?
decodeTable
®®@ K
,
®®K L
int
®®M P
decodeTableOffset
®®Q b
,
®®b c
byte
®®d h
[
®®h i
]
®®i j
symbolLengths
®®k x
,
®®x y
byte
®®z ~
[
®®~ 
]®® Ä
symbolCodes®®Å å
,®®å ç
int®®é ë
alphabetSize®®í û
,®®û ü
int®®† £
maxCodeLength®®§ ±
)®®± ≤
{
©© 	
if
´´ 
(
´´ 
alphabetSize
´´ 
>
´´ 
$num
´´ "
||
´´# %
maxCodeLength
´´& 3
>
´´4 5
$num
´´6 7
)
´´7 8
throw
¨¨ 
new
¨¨ '
InvalidOperationException
¨¨ 3
(
¨¨3 4
$str¨¨4 á
)¨¨á à
;¨¨à â
uint
ØØ 
maxCode
ØØ 
=
ØØ 
$num
ØØ 
<<
ØØ  
maxCodeLength
ØØ! .
;
ØØ. /
for
∞∞ 
(
∞∞ 
int
∞∞ 
symbol
∞∞ 
=
∞∞ 
$num
∞∞ 
;
∞∞  
symbol
∞∞! '
<
∞∞( )
alphabetSize
∞∞* 6
;
∞∞6 7
symbol
∞∞8 >
++
∞∞> @
)
∞∞@ A
{
±± 
int
≤≤ 
length
≤≤ 
=
≤≤ 
symbolLengths
≤≤ *
[
≤≤* +
symbol
≤≤+ 1
]
≤≤1 2
;
≤≤2 3
if
¥¥ 
(
¥¥ 
length
¥¥ 
>
¥¥ 
maxCodeLength
¥¥ *
)
¥¥* +
throw
µµ 
new
µµ '
InvalidOperationException
µµ 7
(
µµ7 8
$str
µµ8 V
)
µµV W
;
µµW X
if
∑∑ 
(
∑∑ 
length
∑∑ 
>
∑∑ 
$num
∑∑ 
)
∑∑ 
{
∏∏ 
uint
ππ 
code
ππ 
=
ππ 
symbolCodes
ππ  +
[
ππ+ ,
symbol
ππ, 2
]
ππ2 3
;
ππ3 4
uint
∫∫ 
step
∫∫ 
=
∫∫ 
$num
∫∫  "
<<
∫∫# %
length
∫∫& ,
;
∫∫, -
do
ªª 
{
ºº 
decodeTable
ΩΩ #
[
ΩΩ# $
decodeTableOffset
ΩΩ$ 5
+
ΩΩ6 7
code
ΩΩ8 <
]
ΩΩ< =
=
ΩΩ> ?
(
ΩΩ@ A
ushort
ΩΩA G
)
ΩΩG H
(
ΩΩH I
symbol
ΩΩI O
<<
ΩΩP R
$num
ΩΩS T
|
ΩΩU V
length
ΩΩW ]
)
ΩΩ] ^
;
ΩΩ^ _
code
ææ 
+=
ææ 
step
ææ  $
;
ææ$ %
}
øø 
while
¿¿ 
(
¿¿ 
code
¿¿ 
<
¿¿  !
maxCode
¿¿" )
)
¿¿) *
;
¿¿* +
}
¡¡ 
}
¬¬ 
}
√√ 	
internal
≈≈ 
fixed
≈≈ 
ushort
≈≈ 
encodeTable
≈≈ )
[
≈≈) *
k_MaxContexts
≈≈* 7
*
≈≈8 9
k_AlphabetSize
≈≈: H
]
≈≈H I
;
≈≈I J
internal
∆∆ 
fixed
∆∆ 
ushort
∆∆ 
decodeTable
∆∆ )
[
∆∆) *
k_MaxContexts
∆∆* 7
*
∆∆8 9
(
∆∆: ;
$num
∆∆; <
<<
∆∆= ?&
k_MaxHuffmanSymbolLength
∆∆@ X
)
∆∆X Y
]
∆∆Y Z
;
∆∆Z [
internal
«« 
fixed
«« 
byte
«« 
bucketSizes
«« '
[
««' (
k_AlphabetSize
««( 6
]
««6 7
;
««7 8
internal
»» 
fixed
»» 
uint
»» 
bucketOffsets
»» )
[
»») *
k_AlphabetSize
»»* 8
]
»»8 9
;
»»9 :
public
œœ 
int
œœ 
CalculateBucket
œœ "
(
œœ" #
uint
œœ# '
value
œœ( -
)
œœ- .
{
–– 	
int
—— 
bucketIndex
—— 
=
—— $
k_FirstBucketCandidate
—— 4
[
——4 5
math
——5 9
.
——9 :
lzcnt
——: ?
(
——? @
value
——@ E
)
——E F
]
——F G
;
——G H
if
““ 
(
““ 
bucketIndex
““ 
+
““ 
$num
““ 
<
““  !
k_AlphabetSize
““" 0
&&
““1 3
value
““4 9
>=
““: <
bucketOffsets
““= J
[
““J K
bucketIndex
““K V
+
““W X
$num
““Y Z
]
““Z [
)
““[ \
bucketIndex
”” 
++
”” 
;
”” 
return
’’ 
bucketIndex
’’ 
;
’’ 
}
÷÷ 	
}
◊◊ 
}ÿÿ ﬂÖ
ZC:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkProtocol.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
internal 
	interface 
INetworkProtocol '
:( )
IDisposable* 5
{ 
void 

Initialize 
( 
NetworkSettings '
settings( 0
)0 1
;1 2
NetworkProtocol #
CreateProtocolInterface /
(/ 0
)0 1
;1 2
int 
Bind 
( 
INetworkInterface "
networkInterface# 3
,3 4
ref5 8$
NetworkInterfaceEndPoint9 Q
localEndPointR _
)_ `
;` a
int #
CreateConnectionAddress #
(# $
INetworkInterface$ 5
networkInterface6 F
,F G
NetworkEndPointH W
endPointX `
,` a
outb e$
NetworkInterfaceEndPointf ~
address	 Ü
)
Ü á
;
á à
NetworkEndPoint!! 
GetRemoteEndPoint!! )
(!!) *
INetworkInterface!!* ;
networkInterface!!< L
,!!L M$
NetworkInterfaceEndPoint!!N f
address!!g n
)!!n o
;!!o p
}"" 
internal(( 
struct(( 
NetworkProtocol(( #
{)) 
[00 	$
UnmanagedFunctionPointer00	 !
(00! "
CallingConvention00" 3
.003 4
Cdecl004 9
)009 :
]00: ;
public11 
delegate11 
int11 )
ComputePacketOverheadDelegate11 9
(119 :
ref11: =
NetworkDriver11> K
.11K L

Connection11L V

connection11W a
,11a b
out11c f
int11g j
payloadOffset11k x
)11x y
;11y z
[77 	$
UnmanagedFunctionPointer77	 !
(77! "
CallingConvention77" 3
.773 4
Cdecl774 9
)779 :
]77: ;
public88 
delegate88 
void88 "
ProcessReceiveDelegate88 3
(883 4
IntPtr884 :
stream88; A
,88A B
ref88C F$
NetworkInterfaceEndPoint88G _
address88` g
,88g h
int88i l
size88m q
,88q r
ref88s v!
NetworkSendInterface	88w ã
sendInterface
88å ô
,
88ô ö
ref
88õ û$
NetworkSendQueueHandle
88ü µ
queueHandle
88∂ ¡
,
88¡ ¬
IntPtr
88√ …
userData
88  “
,
88“ ”
ref
88‘ ◊"
ProcessPacketCommand
88ÿ Ï
command
88Ì Ù
)
88Ù ı
;
88ı ˆ
[>> 	$
UnmanagedFunctionPointer>>	 !
(>>! "
CallingConvention>>" 3
.>>3 4
Cdecl>>4 9
)>>9 :
]>>: ;
public?? 
delegate?? 
int?? 
ProcessSendDelegate?? /
(??/ 0
ref??0 3
NetworkDriver??4 A
.??A B

Connection??B L

connection??M W
,??W X
bool??Y ]
hasPipeline??^ i
,??i j
ref??k n!
NetworkSendInterface	??o É
sendInterface
??Ñ ë
,
??ë í
ref
??ì ñ(
NetworkInterfaceSendHandle
??ó ±

sendHandle
??≤ º
,
??º Ω
ref
??æ ¡$
NetworkSendQueueHandle
??¬ ÿ
queueHandle
??Ÿ ‰
,
??‰ Â
IntPtr
??Ê Ï
userData
??Ì ı
)
??ı ˆ
;
??ˆ ˜
[DD 	$
UnmanagedFunctionPointerDD	 !
(DD! "
CallingConventionDD" 3
.DD3 4
CdeclDD4 9
)DD9 :
]DD: ;
publicEE 
delegateEE 
voidEE /
#ProcessSendConnectionAcceptDelegateEE @
(EE@ A
refEEA D
NetworkDriverEEE R
.EER S

ConnectionEES ]

connectionEE^ h
,EEh i
refEEj m!
NetworkSendInterface	EEn Ç
sendInterface
EEÉ ê
,
EEê ë
ref
EEí ï$
NetworkSendQueueHandle
EEñ ¨
queueHandle
EE≠ ∏
,
EE∏ π
IntPtr
EE∫ ¿
userData
EE¡ …
)
EE…  
;
EE  À
[KK 	$
UnmanagedFunctionPointerKK	 !
(KK! "
CallingConventionKK" 3
.KK3 4
CdeclKK4 9
)KK9 :
]KK: ;
publicLL 
delegateLL 
voidLL 
ConnectDelegateLL ,
(LL, -
refLL- 0
NetworkDriverLL1 >
.LL> ?

ConnectionLL? I

connectionLLJ T
,LLT U
refLLV Y 
NetworkSendInterfaceLLZ n
sendInterfaceLLo |
,LL| }
ref	LL~ Å$
NetworkSendQueueHandle
LLÇ ò
queueHandle
LLô §
,
LL§ •
IntPtr
LL¶ ¨
userData
LL≠ µ
)
LLµ ∂
;
LL∂ ∑
[QQ 	$
UnmanagedFunctionPointerQQ	 !
(QQ! "
CallingConventionQQ" 3
.QQ3 4
CdeclQQ4 9
)QQ9 :
]QQ: ;
publicRR 
delegateRR 
voidRR 
DisconnectDelegateRR /
(RR/ 0
refRR0 3
NetworkDriverRR4 A
.RRA B

ConnectionRRB L

connectionRRM W
,RRW X
refRRY \ 
NetworkSendInterfaceRR] q
sendInterfaceRRr 
,	RR Ä
ref
RRÅ Ñ$
NetworkSendQueueHandle
RRÖ õ
queueHandle
RRú ß
,
RRß ®
IntPtr
RR© Ø
userData
RR∞ ∏
)
RR∏ π
;
RRπ ∫
[WW 	$
UnmanagedFunctionPointerWW	 !
(WW! "
CallingConventionWW" 3
.WW3 4
CdeclWW4 9
)WW9 :
]WW: ;
publicXX 
delegateXX 
voidXX #
ProcessSendPingDelegateXX 4
(XX4 5
refXX5 8
NetworkDriverXX9 F
.XXF G

ConnectionXXG Q

connectionXXR \
,XX\ ]
refXX^ a 
NetworkSendInterfaceXXb v
sendInterface	XXw Ñ
,
XXÑ Ö
ref
XXÜ â$
NetworkSendQueueHandle
XXä †
queueHandle
XX° ¨
,
XX¨ ≠
IntPtr
XXÆ ¥
userData
XXµ Ω
)
XXΩ æ
;
XXæ ø
[]] 	$
UnmanagedFunctionPointer]]	 !
(]]! "
CallingConvention]]" 3
.]]3 4
Cdecl]]4 9
)]]9 :
]]]: ;
public^^ 
delegate^^ 
void^^ #
ProcessSendPongDelegate^^ 4
(^^4 5
ref^^5 8
NetworkDriver^^9 F
.^^F G

Connection^^G Q

connection^^R \
,^^\ ]
ref^^^ a 
NetworkSendInterface^^b v
sendInterface	^^w Ñ
,
^^Ñ Ö
ref
^^Ü â$
NetworkSendQueueHandle
^^ä †
queueHandle
^^° ¨
,
^^¨ ≠
IntPtr
^^Æ ¥
userData
^^µ Ω
)
^^Ω æ
;
^^æ ø
[dd 	$
UnmanagedFunctionPointerdd	 !
(dd! "
CallingConventiondd" 3
.dd3 4
Cdecldd4 9
)dd9 :
]dd: ;
publicee 
delegateee 
voidee 
UpdateDelegateee +
(ee+ ,
longee, 0

updateTimeee1 ;
,ee; <
refee= @ 
NetworkSendInterfaceeeA U
sendInterfaceeeV c
,eec d
refeee h"
NetworkSendQueueHandleeei 
queueHandle
eeÄ ã
,
eeã å
IntPtr
eeç ì
userData
eeî ú
)
eeú ù
;
eeù û
publicgg $
TransportFunctionPointergg '
<gg' ()
ComputePacketOverheadDelegategg( E
>ggE F!
ComputePacketOverheadggG \
;gg\ ]
publichh $
TransportFunctionPointerhh '
<hh' ("
ProcessReceiveDelegatehh( >
>hh> ?
ProcessReceivehh@ N
;hhN O
publicii $
TransportFunctionPointerii '
<ii' (
ProcessSendDelegateii( ;
>ii; <
ProcessSendii= H
;iiH I
publicjj $
TransportFunctionPointerjj '
<jj' (/
#ProcessSendConnectionAcceptDelegatejj( K
>jjK L'
ProcessSendConnectionAcceptjjM h
;jjh i
publickk $
TransportFunctionPointerkk '
<kk' (
ConnectDelegatekk( 7
>kk7 8
Connectkk9 @
;kk@ A
publicll $
TransportFunctionPointerll '
<ll' (
DisconnectDelegatell( :
>ll: ;

Disconnectll< F
;llF G
publicmm $
TransportFunctionPointermm '
<mm' (#
ProcessSendPingDelegatemm( ?
>mm? @
ProcessSendPingmmA P
;mmP Q
publicnn $
TransportFunctionPointernn '
<nn' (#
ProcessSendPongDelegatenn( ?
>nn? @
ProcessSendPongnnA P
;nnP Q
publicoo $
TransportFunctionPointeroo '
<oo' (
UpdateDelegateoo( 6
>oo6 7
Updateoo8 >
;oo> ?
[tt 	-
!NativeDisableUnsafePtrRestrictiontt	 *
]tt* +
publictt, 2
IntPtrtt3 9
UserDatatt: B
;ttB C
publicyy 
intyy 
MaxHeaderSizeyy  
;yy  !
public~~ 
int~~ 
MaxFooterSize~~  
;~~  !
public
ÉÉ 
int
ÉÉ 
PaddingSize
ÉÉ 
=>
ÉÉ !
MaxHeaderSize
ÉÉ" /
+
ÉÉ0 1
MaxFooterSize
ÉÉ2 ?
;
ÉÉ? @
public
àà 
bool
àà 
NeedsUpdate
àà 
;
àà  
public
ää 
NetworkProtocol
ää 
(
ää &
TransportFunctionPointer
ãã $
<
ãã$ %+
ComputePacketOverheadDelegate
ãã% B
>
ããB C#
computePacketOverhead
ããD Y
,
ããY Z&
TransportFunctionPointer
åå $
<
åå$ %$
ProcessReceiveDelegate
åå% ;
>
åå; <
processReceive
åå= K
,
ååK L&
TransportFunctionPointer
çç $
<
çç$ %!
ProcessSendDelegate
çç% 8
>
çç8 9
processSend
çç: E
,
ççE F&
TransportFunctionPointer
éé $
<
éé$ %1
#ProcessSendConnectionAcceptDelegate
éé% H
>
ééH I)
processSendConnectionAccept
ééJ e
,
éée f&
TransportFunctionPointer
èè $
<
èè$ %
ConnectDelegate
èè% 4
>
èè4 5
connect
èè6 =
,
èè= >&
TransportFunctionPointer
êê $
<
êê$ % 
DisconnectDelegate
êê% 7
>
êê7 8

disconnect
êê9 C
,
êêC D&
TransportFunctionPointer
ëë $
<
ëë$ %%
ProcessSendPingDelegate
ëë% <
>
ëë< =
processSendPing
ëë> M
,
ëëM N&
TransportFunctionPointer
íí $
<
íí$ %%
ProcessSendPongDelegate
íí% <
>
íí< =
processSendPong
íí> M
,
ííM N&
TransportFunctionPointer
ìì $
<
ìì$ %
UpdateDelegate
ìì% 3
>
ìì3 4
update
ìì5 ;
,
ìì; <
bool
îî 
needsUpdate
îî 
,
îî 
IntPtr
ïï 
userData
ïï 
,
ïï 
int
ññ 
maxHeaderSize
ññ 
,
ññ 
int
óó 
maxFooterSize
óó 
)
òò 	
{
ôô 	#
ComputePacketOverhead
öö !
=
öö" ##
computePacketOverhead
öö$ 9
;
öö9 :
ProcessReceive
õõ 
=
õõ 
processReceive
õõ +
;
õõ+ ,
ProcessSend
úú 
=
úú 
processSend
úú %
;
úú% &)
ProcessSendConnectionAccept
ùù '
=
ùù( ))
processSendConnectionAccept
ùù* E
;
ùùE F
Connect
ûû 
=
ûû 
connect
ûû 
;
ûû 

Disconnect
üü 
=
üü 

disconnect
üü #
;
üü# $
ProcessSendPing
†† 
=
†† 
processSendPing
†† -
;
††- .
ProcessSendPong
°° 
=
°° 
processSendPong
°° -
;
°°- .
Update
¢¢ 
=
¢¢ 
update
¢¢ 
;
¢¢ 
NeedsUpdate
££ 
=
££ 
needsUpdate
££ %
;
££% &
UserData
§§ 
=
§§ 
userData
§§ 
;
§§  
MaxHeaderSize
•• 
=
•• 
maxHeaderSize
•• )
;
••) *
MaxFooterSize
¶¶ 
=
¶¶ 
maxFooterSize
¶¶ )
;
¶¶) *
}
ßß 	
}
®® 
internal
≠≠ 
enum
≠≠ &
ProcessPacketCommandType
≠≠ *
:
≠≠+ ,
byte
≠≠- 1
{
ÆÆ 
Drop
∞∞ 
=
∞∞ 
$num
∞∞ 
,
∞∞ 
AddressUpdate
≥≥ 
,
≥≥ 
ConnectionAccept
∏∏ 
,
∏∏ 
ConnectionReject
ªª 
,
ªª 
ConnectionRequest
ææ 
,
ææ 
Data
¡¡ 
,
¡¡ 

Disconnect
ƒƒ 
,
ƒƒ .
 DataWithImplicitConnectionAccept
«« (
,
««( )
Ping
ÃÃ 
,
ÃÃ 
Pong
—— 
,
—— "
ProtocolStatusUpdate
÷÷ 
,
÷÷ 
}
◊◊ 
internal
‹‹ 
struct
‹‹ "
ProcessPacketCommand
‹‹ (
{
›› 
public
·· &
ProcessPacketCommandType
·· '
Type
··( ,
;
··, -
public
ÊÊ &
NetworkInterfaceEndPoint
ÊÊ '
Address
ÊÊ( /
;
ÊÊ/ 0
public
ÎÎ 
SessionIdToken
ÎÎ 
	SessionId
ÎÎ '
;
ÎÎ' (
public
 $
ProcessPacketCommandAs
 %
As
& (
;
( )
[
ÛÛ 	
StructLayout
ÛÛ	 
(
ÛÛ 

LayoutKind
ÛÛ  
.
ÛÛ  !
Explicit
ÛÛ! )
)
ÛÛ) *
]
ÛÛ* +
public
ÙÙ 
struct
ÙÙ $
ProcessPacketCommandAs
ÙÙ ,
{
ıı 	
[
ˆˆ 
FieldOffset
ˆˆ 
(
ˆˆ 
$num
ˆˆ 
)
ˆˆ 
]
ˆˆ 
public
ˆˆ #
AsAddressUpdate
ˆˆ$ 3
AddressUpdate
ˆˆ4 A
;
ˆˆA B
[
˜˜ 
FieldOffset
˜˜ 
(
˜˜ 
$num
˜˜ 
)
˜˜ 
]
˜˜ 
public
˜˜ # 
AsConnectionAccept
˜˜$ 6
ConnectionAccept
˜˜7 G
;
˜˜G H
[
¯¯ 
FieldOffset
¯¯ 
(
¯¯ 
$num
¯¯ 
)
¯¯ 
]
¯¯ 
public
¯¯ #
AsData
¯¯$ *
Data
¯¯+ /
;
¯¯/ 0
[
˘˘ 
FieldOffset
˘˘ 
(
˘˘ 
$num
˘˘ 
)
˘˘ 
]
˘˘ 
public
˘˘ #0
"AsDataWithImplicitConnectionAccept
˘˘$ F.
 DataWithImplicitConnectionAccept
˘˘G g
;
˘˘g h
[
˙˙ 
FieldOffset
˙˙ 
(
˙˙ 
$num
˙˙ 
)
˙˙ 
]
˙˙ 
public
˙˙ #$
AsProtocolStatusUpdate
˙˙$ :"
ProtocolStatusUpdate
˙˙; O
;
˙˙O P
public
¸¸ 
struct
¸¸ 
AsAddressUpdate
¸¸ )
{
˝˝ 
public
˛˛ &
NetworkInterfaceEndPoint
˛˛ /

NewAddress
˛˛0 :
;
˛˛: ;
}
ˇˇ 
public
ÅÅ 
struct
ÅÅ  
AsConnectionAccept
ÅÅ ,
{
ÇÇ 
public
ÉÉ 
SessionIdToken
ÉÉ %
ConnectionToken
ÉÉ& 5
;
ÉÉ5 6
}
ÑÑ 
public
ÜÜ 
struct
ÜÜ 
AsData
ÜÜ  
{
áá 
public
àà 
int
àà 
Offset
àà !
;
àà! "
public
ââ 
int
ââ 
Length
ââ !
;
ââ! "
public
ää 
byte
ää 
HasPipelineByte
ää +
;
ää+ ,
public
åå 
bool
åå 
HasPipeline
åå '
=>
åå( *
HasPipelineByte
åå+ :
!=
åå; =
$num
åå> ?
;
åå? @
}
çç 
public
èè 
struct
èè 0
"AsDataWithImplicitConnectionAccept
èè <
{
êê 
public
ëë 
int
ëë 
Offset
ëë !
;
ëë! "
public
íí 
int
íí 
Length
íí !
;
íí! "
public
ìì 
byte
ìì 
HasPipelineByte
ìì +
;
ìì+ ,
public
îî 
SessionIdToken
îî %
ConnectionToken
îî& 5
;
îî5 6
public
ññ 
bool
ññ 
HasPipeline
ññ '
=>
ññ( *
HasPipelineByte
ññ+ :
!=
ññ; =
$num
ññ> ?
;
ññ? @
}
óó 
public
ôô 
struct
ôô $
AsProtocolStatusUpdate
ôô 0
{
öö 
public
õõ 
int
õõ 
Status
õõ !
;
õõ! "
}
úú 
}
ùù 	
}
ûû 
}üü ß
_C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\AppForegroundTracker.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
.$ %
	Utilities% .
{ 
internal

 
class

  
AppForegroundTracker

 '
{ 
private 
static 
readonly 
SharedStatic  ,
<, -
long- 1
>1 2%
s_LastForegroundTimestamp3 L
=M N
SharedStatic 
< 
long 
> 
. 
GetOrCreate *
<* + 
AppForegroundTracker+ ?
,? @&
LastForegroundTimestampKeyA [
>[ \
(\ ]
)] ^
;^ _
private 
class &
LastForegroundTimestampKey 0
{1 2
}2 3
public 
static 
long #
LastForegroundTimestamp 2
=>3 5%
s_LastForegroundTimestamp6 O
.O P
DataP T
;T U
internal 
static 
void 
OnFocusChanged +
(+ ,
bool, 0
focused1 8
)8 9
{ 	
if 
( 
focused 
) 
{ 
var   
stopwatchTime   !
=  " #
	Stopwatch  $ -
.  - .
GetTimestamp  . :
(  : ;
)  ; <
;  < =
var!! 
ts!! 
=!! 
stopwatchTime!! &
/!!' (
(!!) *
	Stopwatch!!* 3
.!!3 4
	Frequency!!4 =
/!!> ?
$num!!@ D
)!!D E
;!!E F%
s_LastForegroundTimestamp"" )
."") *
Data""* .
=""/ 0
ts""1 3
;""3 4
}## 
}$$ 	
}%% 
}&& ⁄‹
\C:\code\ispclone\Library\PackageCache\com.unity.transport@1.1.0\Runtime\NetworkEventQueue.cs
	namespace 	
Unity
 
. 

Networking 
. 
	Transport $
{ 
[

 
StructLayout

 
(

 

LayoutKind

 
.

 
Explicit

 %
)

% &
]

& '
public 

struct 
NetworkEvent 
{ 
public 
enum 
Type 
: 
short  
{ 	
Empty 
= 
$num 
, 
Data 
, 
Connect 
, 

Disconnect 
} 	
[ 	
FieldOffset	 
( 
$num 
) 
] 
internal !
Type" &
type' +
;+ ,
[ 	
FieldOffset	 
( 
$num 
) 
] 
internal !
short" '

pipelineId( 2
;2 3
[!! 	
FieldOffset!!	 
(!! 
$num!! 
)!! 
]!! 
internal!! !
int!!" %
connectionId!!& 2
;!!2 3
[$$ 	
FieldOffset$$	 
($$ 
$num$$ 
)$$ 
]$$ 
internal$$ !
int$$" %
status$$& ,
;$$, -
['' 	
FieldOffset''	 
('' 
$num'' 
)'' 
]'' 
internal'' !
int''" %
offset''& ,
;'', -
[** 	
FieldOffset**	 
(** 
$num** 
)** 
]** 
internal** "
int**# &
size**' +
;**+ ,
}++ 
internal.. 
struct.. 
NetworkEventQueue.. %
:..& '
IDisposable..( 3
{// 
private00 
int00 
	MaxEvents00 
{11 	
get22 
{22 
return22 
m_ConnectionEventQ22 +
.22+ ,
Length22, 2
/223 4
(225 6%
m_ConnectionEventHeadTail226 O
.22O P
Length22P V
/22W X
$num22Y Z
)22Z [
;22[ \
}22] ^
}33 	
public99 
NetworkEventQueue99  
(99  !
int99! $"
queueSizePerConnection99% ;
)99; <
{:: 	
m_MasterEventQ;; 
=;; 
new;;  
NativeQueue;;! ,
<;;, -
SubQueueItem;;- 9
>;;9 :
(;;: ;
	Allocator;;; D
.;;D E

Persistent;;E O
);;O P
;;;P Q
m_ConnectionEventQ<< 
=<<  
new<<! $

NativeList<<% /
<<</ 0
NetworkEvent<<0 <
><<< =
(<<= >"
queueSizePerConnection<<> T
,<<T U
	Allocator<<V _
.<<_ `

Persistent<<` j
)<<j k
;<<k l%
m_ConnectionEventHeadTail== %
===& '
new==( +

NativeList==, 6
<==6 7
int==7 :
>==: ;
(==; <
$num==< =
,=== >
	Allocator==? H
.==H I

Persistent==I S
)==S T
;==T U
m_ConnectionEventQ>> 
.>> 
ResizeUninitialized>> 2
(>>2 3"
queueSizePerConnection>>3 I
)>>I J
;>>J K%
m_ConnectionEventHeadTail?? %
.??% &
Add??& )
(??) *
$num??* +
)??+ ,
;??, -%
m_ConnectionEventHeadTail@@ %
.@@% &
Add@@& )
(@@) *
$num@@* +
)@@+ ,
;@@, -
}AA 	
publicFF 
voidFF 
DisposeFF 
(FF 
)FF 
{GG 	
m_MasterEventQHH 
.HH 
DisposeHH "
(HH" #
)HH# $
;HH$ %
m_ConnectionEventQII 
.II 
DisposeII &
(II& '
)II' (
;II( )%
m_ConnectionEventHeadTailJJ %
.JJ% &
DisposeJJ& -
(JJ- .
)JJ. /
;JJ/ 0
}KK 	
publicUU 
NetworkEventUU 
.UU 
TypeUU  
PopEventUU! )
(UU) *
outUU* -
intUU. 1
idUU2 4
,UU4 5
outUU6 9
intUU: =
offsetUU> D
,UUD E
outUUF I
intUUJ M
sizeUUN R
)UUR S
{VV 	
returnWW 
PopEventWW 
(WW 
outWW 
idWW  "
,WW" #
outWW$ '
offsetWW( .
,WW. /
outWW0 3
sizeWW4 8
,WW8 9
outWW: =
varWW> A
_WWB C
)WWC D
;WWD E
}XX 	
publiccc 
NetworkEventcc 
.cc 
Typecc  
PopEventcc! )
(cc) *
outcc* -
intcc. 1
idcc2 4
,cc4 5
outcc6 9
intcc: =
offsetcc> D
,ccD E
outccF I
intccJ M
sizeccN R
,ccR S
outccT W
intccX [

pipelineIdcc\ f
)ccf g
{dd 	
offsetee 
=ee 
$numee 
;ee 
sizeff 
=ff 
$numff 
;ff 
idgg 
=gg 
-gg 
$numgg 
;gg 

pipelineIdhh 
=hh 
$numhh 
;hh 
whilejj 
(jj 
truejj 
)jj 
{kk 
SubQueueItemll 
evll 
;ll  
ifmm 
(mm 
!mm 
m_MasterEventQmm #
.mm# $

TryDequeuemm$ .
(mm. /
outmm/ 2
evmm3 5
)mm5 6
)mm6 7
{nn 
returnoo 
NetworkEventoo '
.oo' (
Typeoo( ,
.oo, -
Emptyoo- 2
;oo2 3
}pp 
ifrr 
(rr %
m_ConnectionEventHeadTailrr -
[rr- .
evrr. 0
.rr0 1

connectionrr1 ;
*rr< =
$numrr> ?
]rr? @
==rrA C
evrrD F
.rrF G
idxrrG J
)rrJ K
{ss 
idtt 
=tt 
evtt 
.tt 

connectiontt &
;tt& '
returnuu !
PopEventForConnectionuu 0
(uu0 1
evuu1 3
.uu3 4

connectionuu4 >
,uu> ?
outuu@ C
offsetuuD J
,uuJ K
outuuL O
sizeuuP T
,uuT U
outuuV Y

pipelineIduuZ d
)uud e
;uue f
}vv 
}ww 
}xx 	
public
ÇÇ 
NetworkEvent
ÇÇ 
.
ÇÇ 
Type
ÇÇ  #
PopEventForConnection
ÇÇ! 6
(
ÇÇ6 7
int
ÇÇ7 :
connectionId
ÇÇ; G
,
ÇÇG H
out
ÇÇI L
int
ÇÇM P
offset
ÇÇQ W
,
ÇÇW X
out
ÇÇY \
int
ÇÇ] `
size
ÇÇa e
)
ÇÇe f
{
ÉÉ 	
return
ÑÑ #
PopEventForConnection
ÑÑ (
(
ÑÑ( )
connectionId
ÑÑ) 5
,
ÑÑ5 6
out
ÑÑ7 :
offset
ÑÑ; A
,
ÑÑA B
out
ÑÑC F
size
ÑÑG K
,
ÑÑK L
out
ÑÑM P
var
ÑÑQ T
_
ÑÑU V
)
ÑÑV W
;
ÑÑW X
}
ÖÖ 	
public
êê 
NetworkEvent
êê 
.
êê 
Type
êê  #
PopEventForConnection
êê! 6
(
êê6 7
int
êê7 :
connectionId
êê; G
,
êêG H
out
êêI L
int
êêM P
offset
êêQ W
,
êêW X
out
êêY \
int
êê] `
size
êêa e
,
êêe f
out
êêg j
int
êêk n

pipelineId
êêo y
)
êêy z
{
ëë 	
offset
íí 
=
íí 
$num
íí 
;
íí 
size
ìì 
=
ìì 
$num
ìì 
;
ìì 

pipelineId
îî 
=
îî 
$num
îî 
;
îî 
if
ññ 
(
ññ 
connectionId
ññ 
<
ññ 
$num
ññ  
||
ññ! #
connectionId
ññ$ 0
>=
ññ1 3'
m_ConnectionEventHeadTail
ññ4 M
.
ññM N
Length
ññN T
/
ññU V
$num
ññW X
)
ññX Y
return
óó 
NetworkEvent
óó #
.
óó# $
Type
óó$ (
.
óó( )
Empty
óó) .
;
óó. /
int
ôô 
idx
ôô 
=
ôô '
m_ConnectionEventHeadTail
ôô /
[
ôô/ 0
connectionId
ôô0 <
*
ôô= >
$num
ôô? @
]
ôô@ A
;
ôôA B
if
õõ 
(
õõ 
idx
õõ 
>=
õõ '
m_ConnectionEventHeadTail
õõ 0
[
õõ0 1
connectionId
õõ1 =
*
õõ> ?
$num
õõ@ A
+
õõB C
$num
õõD E
]
õõE F
)
õõF G
return
úú 
NetworkEvent
úú #
.
úú# $
Type
úú$ (
.
úú( )
Empty
úú) .
;
úú. /'
m_ConnectionEventHeadTail
ûû %
[
ûû% &
connectionId
ûû& 2
*
ûû3 4
$num
ûû5 6
]
ûû6 7
=
ûû8 9
idx
ûû: =
+
ûû> ?
$num
ûû@ A
;
ûûA B
NetworkEvent
üü 
ev
üü 
=
üü  
m_ConnectionEventQ
üü 0
[
üü0 1
connectionId
üü1 =
*
üü> ?
	MaxEvents
üü@ I
+
üüJ K
idx
üüL O
]
üüO P
;
üüP Q

pipelineId
†† 
=
†† 
ev
†† 
.
†† 

pipelineId
†† &
;
††& '
if
¢¢ 
(
¢¢ 
ev
¢¢ 
.
¢¢ 
type
¢¢ 
==
¢¢ 
NetworkEvent
¢¢ '
.
¢¢' (
Type
¢¢( ,
.
¢¢, -
Data
¢¢- 1
)
¢¢1 2
{
££ 
offset
§§ 
=
§§ 
ev
§§ 
.
§§ 
offset
§§ "
;
§§" #
size
•• 
=
•• 
ev
•• 
.
•• 
size
•• 
;
•• 
}
¶¶ 
else
ßß 
if
ßß 
(
ßß 
ev
ßß 
.
ßß 
type
ßß 
==
ßß 
NetworkEvent
ßß  ,
.
ßß, -
Type
ßß- 1
.
ßß1 2

Disconnect
ßß2 <
&&
ßß= ?
ev
ßß@ B
.
ßßB C
status
ßßC I
!=
ßßJ L
(
ßßM N
int
ßßN Q
)
ßßQ R
Error
ßßR W
.
ßßW X
DisconnectReason
ßßX h
.
ßßh i
Default
ßßi p
)
ßßp q
{
®® 
offset
©© 
=
©© 
-
©© 
ev
©© 
.
©© 
status
©© #
;
©©# $
}
™™ 
return
´´ 
ev
´´ 
.
´´ 
type
´´ 
;
´´ 
}
¨¨ 	
public
≥≥ 
int
≥≥ #
GetCountForConnection
≥≥ (
(
≥≥( )
int
≥≥) ,
connectionId
≥≥- 9
)
≥≥9 :
{
¥¥ 	
if
µµ 
(
µµ 
connectionId
µµ 
<
µµ 
$num
µµ  
||
µµ! #
connectionId
µµ$ 0
>=
µµ1 3'
m_ConnectionEventHeadTail
µµ4 M
.
µµM N
Length
µµN T
/
µµU V
$num
µµW X
)
µµX Y
return
∂∂ 
$num
∂∂ 
;
∂∂ 
return
∑∑ '
m_ConnectionEventHeadTail
∑∑ ,
[
∑∑, -
connectionId
∑∑- 9
*
∑∑: ;
$num
∑∑< =
+
∑∑> ?
$num
∑∑@ A
]
∑∑A B
-
∑∑C D'
m_ConnectionEventHeadTail
∑∑E ^
[
∑∑^ _
connectionId
∑∑_ k
*
∑∑l m
$num
∑∑n o
]
∑∑o p
;
∑∑p q
}
∏∏ 	
public
ºº 
void
ºº 
	PushEvent
ºº 
(
ºº 
NetworkEvent
ºº *
ev
ºº+ -
)
ºº- .
{
ΩΩ 	
int
ææ 
curMaxEvents
ææ 
=
ææ 
	MaxEvents
ææ (
;
ææ( )
if
øø 
(
øø 
ev
øø 
.
øø 
connectionId
øø 
>=
øø  "'
m_ConnectionEventHeadTail
øø# <
.
øø< =
Length
øø= C
/
øøD E
$num
øøF G
)
øøG H
{
¿¿ 
int
¬¬ 
oldSize
¬¬ 
=
¬¬ '
m_ConnectionEventHeadTail
¬¬ 7
.
¬¬7 8
Length
¬¬8 >
;
¬¬> ?'
m_ConnectionEventHeadTail
√√ )
.
√√) *!
ResizeUninitialized
√√* =
(
√√= >
(
√√> ?
ev
√√? A
.
√√A B
connectionId
√√B N
+
√√O P
$num
√√Q R
)
√√R S
*
√√T U
$num
√√V W
)
√√W X
;
√√X Y
for
ƒƒ 
(
ƒƒ 
;
ƒƒ 
oldSize
ƒƒ 
<
ƒƒ  '
m_ConnectionEventHeadTail
ƒƒ! :
.
ƒƒ: ;
Length
ƒƒ; A
;
ƒƒA B
++
ƒƒC E
oldSize
ƒƒE L
)
ƒƒL M'
m_ConnectionEventHeadTail
≈≈ -
[
≈≈- .
oldSize
≈≈. 5
]
≈≈5 6
=
≈≈7 8
$num
≈≈9 :
;
≈≈: ; 
m_ConnectionEventQ
∆∆ "
.
∆∆" #!
ResizeUninitialized
∆∆# 6
(
∆∆6 7
(
∆∆7 8'
m_ConnectionEventHeadTail
∆∆8 Q
.
∆∆Q R
Length
∆∆R X
/
∆∆Y Z
$num
∆∆[ \
)
∆∆\ ]
*
∆∆^ _
curMaxEvents
∆∆` l
)
∆∆l m
;
∆∆m n
}
«« 
int
»» 
idx
»» 
=
»» '
m_ConnectionEventHeadTail
»» /
[
»»/ 0
ev
»»0 2
.
»»2 3
connectionId
»»3 ?
*
»»@ A
$num
»»B C
+
»»D E
$num
»»F G
]
»»G H
;
»»H I
if
…… 
(
…… 
idx
…… 
>=
…… 
curMaxEvents
…… #
)
……# $
{
   
int
ÃÃ 
oldMax
ÃÃ 
=
ÃÃ 
curMaxEvents
ÃÃ )
;
ÃÃ) *
while
ÕÕ 
(
ÕÕ 
idx
ÕÕ 
>=
ÕÕ 
curMaxEvents
ÕÕ *
)
ÕÕ* +
curMaxEvents
ŒŒ  
*=
ŒŒ! #
$num
ŒŒ$ %
;
ŒŒ% &
int
œœ 
maxConnections
œœ "
=
œœ# $'
m_ConnectionEventHeadTail
œœ% >
.
œœ> ?
Length
œœ? E
/
œœF G
$num
œœH I
;
œœI J 
m_ConnectionEventQ
–– "
.
––" #!
ResizeUninitialized
––# 6
(
––6 7
maxConnections
––7 E
*
––F G
curMaxEvents
––H T
)
––T U
;
––U V
for
—— 
(
—— 
int
—— 
con
—— 
=
—— 
maxConnections
—— -
-
——. /
$num
——0 1
;
——1 2
con
——3 6
>=
——7 9
$num
——: ;
;
——; <
--
——= ?
con
——? B
)
——B C
{
““ 
for
”” 
(
”” 
int
”” 
i
”” 
=
””  '
m_ConnectionEventHeadTail
””! :
[
””: ;
con
””; >
*
””? @
$num
””A B
+
””C D
$num
””E F
]
””F G
-
””H I
$num
””J K
;
””K L
i
””M N
>=
””O Q'
m_ConnectionEventHeadTail
””R k
[
””k l
con
””l o
*
””p q
$num
””r s
]
””s t
;
””t u
--
””v x
i
””x y
)
””y z
{
‘‘  
m_ConnectionEventQ
’’ *
[
’’* +
con
’’+ .
*
’’/ 0
curMaxEvents
’’1 =
+
’’> ?
i
’’@ A
]
’’A B
=
’’C D 
m_ConnectionEventQ
’’E W
[
’’W X
con
’’X [
*
’’\ ]
oldMax
’’^ d
+
’’e f
i
’’g h
]
’’h i
;
’’i j
}
÷÷ 
}
◊◊ 
}
ÿÿ  
m_ConnectionEventQ
⁄⁄ 
[
⁄⁄ 
ev
⁄⁄ !
.
⁄⁄! "
connectionId
⁄⁄" .
*
⁄⁄/ 0
curMaxEvents
⁄⁄1 =
+
⁄⁄> ?
idx
⁄⁄@ C
]
⁄⁄C D
=
⁄⁄E F
ev
⁄⁄G I
;
⁄⁄I J'
m_ConnectionEventHeadTail
€€ %
[
€€% &
ev
€€& (
.
€€( )
connectionId
€€) 5
*
€€6 7
$num
€€8 9
+
€€: ;
$num
€€< =
]
€€= >
=
€€? @
idx
€€A D
+
€€E F
$num
€€G H
;
€€H I
m_MasterEventQ
›› 
.
›› 
Enqueue
›› "
(
››" #
new
››# &
SubQueueItem
››' 3
{
››4 5

connection
››5 ?
=
››@ A
ev
››B D
.
››D E
connectionId
››E Q
,
››Q R
idx
››S V
=
››W X
idx
››Y \
}
››\ ]
)
››] ^
;
››^ _
}
ﬁﬁ 	
internal
‡‡ 
void
‡‡ 
Clear
‡‡ 
(
‡‡ 
)
‡‡ 
{
·· 	
m_MasterEventQ
‚‚ 
.
‚‚ 
Clear
‚‚  
(
‚‚  !
)
‚‚! "
;
‚‚" #
for
„„ 
(
„„ 
int
„„ 
i
„„ 
=
„„ 
$num
„„ 
;
„„ 
i
„„ 
<
„„ '
m_ConnectionEventHeadTail
„„  9
.
„„9 :
Length
„„: @
;
„„@ A
++
„„B D
i
„„D E
)
„„E F
{
‰‰ '
m_ConnectionEventHeadTail
ÂÂ )
[
ÂÂ) *
i
ÂÂ* +
]
ÂÂ+ ,
=
ÂÂ- .
$num
ÂÂ/ 0
;
ÂÂ0 1
}
ÊÊ 
}
ÁÁ 	
struct
ÈÈ 
SubQueueItem
ÈÈ 
{
ÍÍ 	
public
ÎÎ 
int
ÎÎ 

connection
ÎÎ !
;
ÎÎ! "
public
ÏÏ 
int
ÏÏ 
idx
ÏÏ 
;
ÏÏ 
}
ÌÌ 	
private
ÔÔ 
NativeQueue
ÔÔ 
<
ÔÔ 
SubQueueItem
ÔÔ (
>
ÔÔ( )
m_MasterEventQ
ÔÔ* 8
;
ÔÔ8 9
private
 

NativeList
 
<
 
NetworkEvent
 '
>
' ( 
m_ConnectionEventQ
) ;
;
; <
private
ÒÒ 

NativeList
ÒÒ 
<
ÒÒ 
int
ÒÒ 
>
ÒÒ '
m_ConnectionEventHeadTail
ÒÒ  9
;
ÒÒ9 :
public
ÛÛ 

Concurrent
ÛÛ 
ToConcurrent
ÛÛ &
(
ÛÛ& '
)
ÛÛ' (
{
ÙÙ 	

Concurrent
ıı 

concurrent
ıı !
;
ıı! "

concurrent
ˆˆ 
.
ˆˆ  
m_ConnectionEventQ
ˆˆ )
=
ˆˆ* + 
m_ConnectionEventQ
ˆˆ, >
;
ˆˆ> ?

concurrent
˜˜ 
.
˜˜ '
m_ConnectionEventHeadTail
˜˜ 0
=
˜˜1 2
new
˜˜3 6

Concurrent
˜˜7 A
.
˜˜A B'
ConcurrentConnectionQueue
˜˜B [
(
˜˜[ \'
m_ConnectionEventHeadTail
˜˜\ u
)
˜˜u v
;
˜˜v w
return
¯¯ 

concurrent
¯¯ 
;
¯¯ 
}
˘˘ 	
public
˚˚ 
struct
˚˚ 

Concurrent
˚˚  
{
¸¸ 	
[
˝˝ 
NativeContainer
˝˝ 
]
˝˝ 
[
˛˛ .
 NativeContainerIsAtomicWriteOnly
˛˛ -
]
˛˛- .
internal
ˇˇ 
unsafe
ˇˇ 
struct
ˇˇ "'
ConcurrentConnectionQueue
ˇˇ# <
{
ÄÄ 
[
ÅÅ /
!NativeDisableUnsafePtrRestriction
ÅÅ 2
]
ÅÅ2 3
private
ÅÅ4 ;

UnsafeList
ÅÅ< F
<
ÅÅF G
int
ÅÅG J
>
ÅÅJ K
*
ÅÅK L'
m_ConnectionEventHeadTail
ÅÅM f
;
ÅÅf g
private
ÉÉ  
AtomicSafetyHandle
ÉÉ *
m_Safety
ÉÉ+ 3
;
ÉÉ3 4
public
ÖÖ '
ConcurrentConnectionQueue
ÖÖ 0
(
ÖÖ0 1

NativeList
ÖÖ1 ;
<
ÖÖ; <
int
ÖÖ< ?
>
ÖÖ? @
queue
ÖÖA F
)
ÖÖF G
{
ÜÜ 
m_Safety
àà 
=
àà %
NativeListUnsafeUtility
àà 6
.
àà6 7#
GetAtomicSafetyHandle
àà7 L
(
ààL M
ref
ààM P
queue
ààQ V
)
ààV W
;
ààW X 
AtomicSafetyHandle
ââ &
.
ââ& ' 
CheckWriteAndThrow
ââ' 9
(
ââ9 :
m_Safety
ââ: B
)
ââB C
;
ââC D'
m_ConnectionEventHeadTail
ãã -
=
ãã. /
(
ãã0 1

UnsafeList
ãã1 ;
<
ãã; <
int
ãã< ?
>
ãã? @
*
ãã@ A
)
ããA B%
NativeListUnsafeUtility
ããB Y
.
ããY Z-
GetInternalListDataPtrUnchecked
ããZ y
(
ããy z
ref
ããz }
queueãã~ É
)ããÉ Ñ
;ããÑ Ö
}
åå 
public
éé 
int
éé 
Length
éé !
{
èè 
get
êê 
{
êê 
return
êê  '
m_ConnectionEventHeadTail
êê! :
->
êê: <
Length
êê< B
;
êêB C
}
êêD E
}
ëë 
public
ìì 
int
ìì 
Dequeue
ìì "
(
ìì" #
int
ìì# &
connectionId
ìì' 3
)
ìì3 4
{
îî  
AtomicSafetyHandle
ññ &
.
ññ& ' 
CheckWriteAndThrow
ññ' 9
(
ññ9 :
m_Safety
ññ: B
)
ññB C
;
ññC D
int
òò 
idx
òò 
=
òò 
-
òò 
$num
òò  
;
òò  !
if
ôô 
(
ôô 
connectionId
ôô $
<
ôô% &
$num
ôô' (
||
ôô) +
connectionId
ôô, 8
>=
ôô9 ;'
m_ConnectionEventHeadTail
ôô< U
->
ôôU W
Length
ôôW ]
/
ôô^ _
$num
ôô` a
)
ôôa b
return
öö 
-
öö  
$num
öö  !
;
öö! "
while
õõ 
(
õõ 
idx
õõ 
<
õõ  
$num
õõ! "
)
õõ" #
{
úú 
idx
ùù 
=
ùù 
(
ùù 
(
ùù  
int
ùù  #
*
ùù# $
)
ùù$ %'
m_ConnectionEventHeadTail
ùù% >
->
ùù> @
Ptr
ùù@ C
)
ùùC D
[
ùùD E
connectionId
ùùE Q
*
ùùR S
$num
ùùT U
]
ùùU V
;
ùùV W
if
ûû 
(
ûû 
idx
ûû 
>=
ûû  "
(
ûû# $
(
ûû$ %
int
ûû% (
*
ûû( )
)
ûû) *'
m_ConnectionEventHeadTail
ûû* C
->
ûûC E
Ptr
ûûE H
)
ûûH I
[
ûûI J
connectionId
ûûJ V
*
ûûW X
$num
ûûY Z
+
ûû[ \
$num
ûû] ^
]
ûû^ _
)
ûû_ `
return
üü "
-
üü# $
$num
üü$ %
;
üü% &
if
†† 
(
†† 
Interlocked
†† '
.
††' (
CompareExchange
††( 7
(
††7 8
ref
††8 ;
(
††< =
(
††= >
int
††> A
*
††A B
)
††B C'
m_ConnectionEventHeadTail
††C \
->
††\ ^
Ptr
††^ a
)
††a b
[
††b c
connectionId
††c o
*
††p q
$num
††r s
]
††s t
,
††t u
idx
††v y
+
††z {
$num
††| }
,
††} ~
idx
°° 
)
°°  
!=
°°! #
idx
°°$ '
)
°°' (
idx
¢¢ 
=
¢¢  !
-
¢¢" #
$num
¢¢# $
;
¢¢$ %
}
££ 
return
•• 
idx
•• 
;
•• 
}
¶¶ 
}
ßß 
private
®® 
int
®® 
	MaxEvents
®® !
{
©© 
get
™™ 
{
™™ 
return
™™  
m_ConnectionEventQ
™™ /
.
™™/ 0
Length
™™0 6
/
™™7 8
(
™™9 :'
m_ConnectionEventHeadTail
™™: S
.
™™S T
Length
™™T Z
/
™™[ \
$num
™™] ^
)
™™^ _
;
™™_ `
}
™™a b
}
´´ 
public
µµ 
NetworkEvent
µµ 
.
µµ  
Type
µµ  $#
PopEventForConnection
µµ% :
(
µµ: ;
int
µµ; >
connectionId
µµ? K
,
µµK L
out
µµM P
int
µµQ T
offset
µµU [
,
µµ[ \
out
µµ] `
int
µµa d
size
µµe i
)
µµi j
{
∂∂ 
return
∑∑ #
PopEventForConnection
∑∑ ,
(
∑∑, -
connectionId
∑∑- 9
,
∑∑9 :
out
∑∑; >
offset
∑∑? E
,
∑∑E F
out
∑∑G J
size
∑∑K O
,
∑∑O P
out
∑∑Q T
var
∑∑U X
_
∑∑Y Z
)
∑∑Z [
;
∑∑[ \
}
∏∏ 
public
√√ 
NetworkEvent
√√ 
.
√√  
Type
√√  $#
PopEventForConnection
√√% :
(
√√: ;
int
√√; >
connectionId
√√? K
,
√√K L
out
√√M P
int
√√Q T
offset
√√U [
,
√√[ \
out
√√] `
int
√√a d
size
√√e i
,
√√i j
out
√√k n
int
√√o r

pipelineId
√√s }
)
√√} ~
{
ƒƒ 
offset
≈≈ 
=
≈≈ 
$num
≈≈ 
;
≈≈ 
size
∆∆ 
=
∆∆ 
$num
∆∆ 
;
∆∆ 

pipelineId
«« 
=
«« 
$num
«« 
;
«« 
int
…… 
idx
…… 
=
…… '
m_ConnectionEventHeadTail
…… 3
.
……3 4
Dequeue
……4 ;
(
……; <
connectionId
……< H
)
……H I
;
……I J
if
   
(
   
idx
   
<
   
$num
   
)
   
return
ÀÀ 
NetworkEvent
ÀÀ '
.
ÀÀ' (
Type
ÀÀ( ,
.
ÀÀ, -
Empty
ÀÀ- 2
;
ÀÀ2 3
NetworkEvent
ÃÃ 
ev
ÃÃ 
=
ÃÃ  ! 
m_ConnectionEventQ
ÃÃ" 4
[
ÃÃ4 5
connectionId
ÃÃ5 A
*
ÃÃB C
	MaxEvents
ÃÃD M
+
ÃÃN O
idx
ÃÃP S
]
ÃÃS T
;
ÃÃT U

pipelineId
ÕÕ 
=
ÕÕ 
ev
ÕÕ 
.
ÕÕ  

pipelineId
ÕÕ  *
;
ÕÕ* +
if
œœ 
(
œœ 
ev
œœ 
.
œœ 
type
œœ 
==
œœ 
NetworkEvent
œœ +
.
œœ+ ,
Type
œœ, 0
.
œœ0 1
Data
œœ1 5
)
œœ5 6
{
–– 
offset
—— 
=
—— 
ev
—— 
.
——  
offset
——  &
;
——& '
size
““ 
=
““ 
ev
““ 
.
““ 
size
““ "
;
““" #
}
”” 
else
‘‘ 
if
‘‘ 
(
‘‘ 
ev
‘‘ 
.
‘‘ 
type
‘‘  
==
‘‘! #
NetworkEvent
‘‘$ 0
.
‘‘0 1
Type
‘‘1 5
.
‘‘5 6

Disconnect
‘‘6 @
&&
‘‘A C
ev
‘‘D F
.
‘‘F G
status
‘‘G M
!=
‘‘N P
(
‘‘Q R
int
‘‘R U
)
‘‘U V
Error
‘‘V [
.
‘‘[ \
DisconnectReason
‘‘\ l
.
‘‘l m
Default
‘‘m t
)
‘‘t u
{
’’ 
offset
÷÷ 
=
÷÷ 
-
÷÷ 
ev
÷÷  
.
÷÷  !
status
÷÷! '
;
÷÷' (
}
◊◊ 
return
ŸŸ 
ev
ŸŸ 
.
ŸŸ 
type
ŸŸ 
;
ŸŸ 
}
⁄⁄ 
[
‹‹ 
ReadOnly
‹‹ 
]
‹‹ 
internal
‹‹ 

NativeList
‹‹  *
<
‹‹* +
NetworkEvent
‹‹+ 7
>
‹‹7 8 
m_ConnectionEventQ
‹‹9 K
;
‹‹K L
internal
›› '
ConcurrentConnectionQueue
›› .'
m_ConnectionEventHeadTail
››/ H
;
››H I
}
ﬁﬁ 	
}
ﬂﬂ 
}‡‡ 